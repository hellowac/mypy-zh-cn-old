{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u6b22\u8fce\u6765\u5230mypy\u6587\u6863!","text":"<p>Welcome to mypy documentation!</p> <p>\u539f\u6587: https://mypy.readthedocs.io/en/stable/</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u662f\u4e00\u4e2a\u7528\u4e8e Python \u7684\u9759\u6001\u7c7b\u578b\u68c0\u67e5\u5668\u3002</p> <p>\u7c7b\u578b\u68c0\u67e5\u5668\u5e2e\u52a9\u786e\u4fdd\u4f60\u5728\u4ee3\u7801\u4e2d\u6b63\u786e\u5730\u4f7f\u7528\u53d8\u91cf\u548c\u51fd\u6570\u3002\u901a\u8fc7 mypy\uff0c\u4f60\u53ef\u4ee5\u5728 Python \u7a0b\u5e8f\u4e2d\u6dfb\u52a0\u7c7b\u578b\u63d0\u793a\uff08PEP 484\uff09\uff0c\u7136\u540e mypy \u4f1a\u5728\u4f60\u9519\u8bef\u4f7f\u7528\u8fd9\u4e9b\u7c7b\u578b\u65f6\u53d1\u51fa\u8b66\u544a\u3002</p> <p>Python \u662f\u4e00\u79cd\u52a8\u6001\u8bed\u8a00\uff0c\u56e0\u6b64\u901a\u5e38\u4f60\u53ea\u6709\u5728\u5c1d\u8bd5\u8fd0\u884c\u4ee3\u7801\u65f6\u624d\u80fd\u770b\u5230\u9519\u8bef\u3002\u800c mypy \u4f5c\u4e3a\u4e00\u4e2a\u9759\u6001\u68c0\u67e5\u5668\uff0c\u5b83\u53ef\u4ee5\u5728\u4e0d\u8fd0\u884c\u7a0b\u5e8f\u7684\u60c5\u51b5\u4e0b\u53d1\u73b0\u4ee3\u7801\u4e2d\u7684\u9519\u8bef\uff01</p> <p>\u4e0b\u9762\u662f\u4e00\u4e2a\u5c0f\u4f8b\u5b50\u6765\u5f15\u8d77\u4f60\u7684\u5174\u8da3\uff1a</p> <pre><code>number = input(\"What is your favourite number?\")\nprint(\"It is\", number + 1)  # error: Unsupported operand types for + (\"str\" and \"int\")\n</code></pre> <p>\u4e3a mypy \u6dfb\u52a0\u7c7b\u578b\u63d0\u793a\u4e0d\u4f1a\u5e72\u6270\u7a0b\u5e8f\u7684\u6b63\u5e38\u8fd0\u884c\u3002\u53ef\u4ee5\u628a\u7c7b\u578b\u63d0\u793a\u5f53\u4f5c\u7c7b\u4f3c\u6ce8\u91ca\u7684\u5b58\u5728\uff01\u5373\u4f7f mypy \u62a5\u544a\u9519\u8bef\uff0c\u4f60\u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528 Python \u89e3\u91ca\u5668\u8fd0\u884c\u4ee3\u7801\u3002</p> <p>Mypy \u662f\u4e3a\u6e10\u8fdb\u7c7b\u578b\u8bbe\u8ba1\u7684\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u9010\u6b65\u5411\u4ee3\u7801\u5e93\u4e2d\u6dfb\u52a0\u7c7b\u578b\u63d0\u793a\uff0c\u5e76\u4e14\u5728\u9759\u6001\u7c7b\u578b\u68c0\u67e5\u4e0d\u65b9\u4fbf\u65f6\uff0c\u53ef\u4ee5\u968f\u65f6\u56de\u9000\u5230\u52a8\u6001\u7c7b\u578b\u3002</p> <p>Mypy \u5177\u6709\u529f\u80fd\u5f3a\u5927\u4e14\u6613\u4e8e\u4f7f\u7528\u7684\u7c7b\u578b\u7cfb\u7edf\uff0c\u652f\u6301\u7c7b\u578b\u63a8\u65ad\u3001\u6cdb\u578b\u3001\u53ef\u8c03\u7528\u7c7b\u578b\u3001\u5143\u7ec4\u7c7b\u578b\u3001\u8054\u5408\u7c7b\u578b\u3001\u7ed3\u6784\u6027\u5b50\u7c7b\u578b\u7b49\u529f\u80fd\u3002\u4f7f\u7528 mypy \u4f1a\u4f7f\u4f60\u7684\u7a0b\u5e8f\u66f4\u6613\u4e8e\u7406\u89e3\u3001\u8c03\u8bd5\u548c\u7ef4\u62a4\u3002</p> <p>\u6ce8\u610f</p> <p>\u5c3d\u7ba1 mypy \u5df2\u7ecf\u51c6\u5907\u597d\u7528\u4e8e\u751f\u4ea7\u73af\u5883\uff0c\u4f46\u5076\u5c14\u53ef\u80fd\u4f1a\u6709\u7834\u574f\u5411\u540e\u517c\u5bb9\u6027\u7684\u66f4\u6539\u3002Mypy \u5f00\u53d1\u56e2\u961f\u4f1a\u5c3d\u91cf\u51cf\u5c11\u5bf9\u7528\u6237\u4ee3\u7801\u7684\u5f71\u54cd\u3002\u5982\u679c\u53d1\u751f\u91cd\u5927\u7834\u574f\u6027\u66f4\u6539\uff0cmypy \u7684\u4e3b\u7248\u672c\u53f7\u5c06\u4f1a\u63d0\u9ad8\u3002</p> <p>Mypy is a static type checker for Python.</p> <p>Type checkers help ensure that you\u2019re using variables and functions in your code correctly. With mypy, add type hints (PEP 484) to your Python programs, and mypy will warn you when you use those types incorrectly.</p> <p>Python is a dynamic language, so usually you\u2019ll only see errors in your code when you attempt to run it. Mypy is a static checker, so it finds bugs in your programs without even running them!</p> <p>Here is a small example to whet your appetite:</p> <pre><code>number = input(\"What is your favourite number?\")\nprint(\"It is\", number + 1)  # error: Unsupported operand types for + (\"str\" and \"int\")\n</code></pre> <p>Adding type hints for mypy does not interfere with the way your program would otherwise run. Think of type hints as similar to comments! You can always use the Python interpreter to run your code, even if mypy reports errors.</p> <p>Mypy is designed with gradual typing in mind. This means you can add type hints to your code base slowly and that you can always fall back to dynamic typing when static typing is not convenient.</p> <p>Mypy has a powerful and easy-to-use type system, supporting features such as type inference, generics, callable types, tuple types, union types, structural subtyping and more. Using mypy will make your programs easier to understand, debug, and maintain.</p> <p>Note</p> <p>Although mypy is production ready, there may be occasional changes that break backward compatibility. The mypy development team tries to minimize the impact of changes to user code. In case of a major breaking change, mypy\u2019s major version will be bumped.</p>"},{"location":"about/","title":"\u5173\u4e8e","text":""},{"location":"about/#mkdocs","title":"mkdocs","text":"<p>MkDocs\u662f\u4e00\u79cd\u7b80\u5355\u6613\u7528\u7684\u9759\u6001\u7f51\u7ad9\u751f\u6210\u5de5\u5177\uff0c\u5141\u8bb8\u5f00\u53d1\u8005\u4f7f\u7528Markdown\u6587\u6863\u7f16\u5199\u7f51\u7ad9\uff0c\u5e76\u652f\u6301\u81ea\u5b9a\u4e49\u4e3b\u9898\u548c\u63d2\u4ef6\u3002\u57fa\u4e8ePython\u8bed\u8a00\u5f00\u53d1\uff0cMkDocs\u53ef\u4ee5\u5e2e\u52a9\u7528\u6237\u5feb\u901f\u521b\u5efa\u7f8e\u89c2\u3001\u6613\u8bfb\u7684\u6587\u6863\u7f51\u7ad9\u3002</p>"},{"location":"about/#\u5b89\u88c5","title":"\u5b89\u88c5","text":"<p>\u5b89\u88c5MkDocs\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u901a\u8fc7Python\u5305\u7ba1\u7406\u5668pip\u8fdb\u884c\u5b89\u88c5\uff1a</p> <pre><code>pip install mkdocs\n</code></pre>"},{"location":"about/#\u4f7f\u7528","title":"\u4f7f\u7528","text":"<p>\u4f7f\u7528MkDocs\u521b\u5efa\u4e00\u4e2a\u65b0\u9879\u76ee\u5f88\u5bb9\u6613\u3002\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u5c06\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a\u201cmyproject\u201d\u7684\u65b0\u9879\u76ee\uff1a</p> <pre><code>mkdocs new myproject\n</code></pre> <p>\u8fd9\u5c06\u751f\u6210\u5982\u4e0b\u6587\u4ef6\u7ed3\u6784\uff1a</p> <pre><code>myproject/\n    \u251c\u2500\u2500 docs/\n    \u2502   \u2514\u2500\u2500 index.md\n    \u251c\u2500\u2500 mkdocs.yml\n    \u2514\u2500\u2500 README.md\n</code></pre> <p>\u5176\u4e2d\uff0c\u201cdocs\u201d\u6587\u4ef6\u5939\u5b58\u653e\u6240\u6709\u7684Markdown\u6587\u6863\uff0c\u201cmkdocs.yml\u201d\u662f\u914d\u7f6e\u6587\u4ef6\uff0c\u201cREADME.md\u201d\u662f\u9879\u76ee\u7684\u8bf4\u660e\u6587\u4ef6\u3002</p> <p>\u7f16\u8f91\u201cdocs/index.md\u201d\u6587\u4ef6\uff0c\u6dfb\u52a0\u4e00\u4e9b\u5185\u5bb9\uff1a</p> <pre><code># \u6b22\u8fce\u4f7f\u7528MkDocs\n\nMkDocs\u662f\u4e00\u4e2a\u7b80\u5355\u6613\u7528\u7684\u9759\u6001\u7f51\u7ad9\u751f\u6210\u5de5\u5177\uff0c\u901a\u8fc7Markdown\u6587\u6863\u7f16\u5199\u7f51\u7ad9\u3002\n</code></pre> <p>\u4fdd\u5b58\u6587\u4ef6\u540e\uff0c\u5728\u547d\u4ee4\u884c\u4e2d\u8fdb\u5165\u9879\u76ee\u6839\u76ee\u5f55\u5e76\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a</p> <pre><code>mkdocs serve\n</code></pre> <p>\u7136\u540e\u5728\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00\u201chttp://localhost:8000\u201d\u5c31\u53ef\u4ee5\u770b\u5230\u521a\u624d\u7f16\u8f91\u7684\u9875\u9762\u4e86\u3002</p>"},{"location":"about/#\u81ea\u5b9a\u4e49\u4e3b\u9898\u548c\u63d2\u4ef6","title":"\u81ea\u5b9a\u4e49\u4e3b\u9898\u548c\u63d2\u4ef6","text":"<p>MkDocs\u652f\u6301\u81ea\u5b9a\u4e49\u4e3b\u9898\u548c\u63d2\u4ef6\u3002\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u5b89\u88c5\u7b2c\u4e09\u65b9\u4e3b\u9898\u548c\u63d2\u4ef6\u6765\u589e\u5f3aMkDocs\u7684\u529f\u80fd\u3002</p> <p>\u4f8b\u5982\uff0c\u8981\u5b89\u88c5\u201cmkdocs-material\u201d\u4e3b\u9898\uff0c\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a</p> <pre><code>pip install mkdocs-material\n</code></pre> <p>\u7136\u540e\u5728\u201cmkdocs.yml\u201d\u6587\u4ef6\u4e2d\u5c06\u4e3b\u9898\u8bbe\u7f6e\u4e3a\u201cmaterial\u201d:</p> <pre><code>theme:\n    name: material\n</code></pre> <p>\u8fd9\u6837\u5c31\u53ef\u4ee5\u4f7f\u7528\u4ee3\u7801\u9ad8\u4eae\u548c\u5176\u4ed6\u6269\u5c55\u529f\u80fd\u4e86\u3002</p>"},{"location":"about/#\u90e8\u7f72","title":"\u90e8\u7f72","text":"<p>\u8981\u5c06MkDocs\u7f51\u7ad9\u90e8\u7f72\u5230\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\uff0c\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u4f7f\u7528GitHub Pages\u6216GitLab Pages\u3002\u53ea\u9700\u8981\u5c06\u751f\u6210\u7684HTML\u6587\u4ef6\u4e0a\u4f20\u5230GitHub\u6216GitLab\u4e0a\u7684\u76f8\u5e94\u4ed3\u5e93\u4e2d\u5373\u53ef\u3002</p> <p>\u53e6\u5916\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528Python Web\u6846\u67b6\uff08\u5982Flask\u3001Django\u7b49\uff09\u5c06MkDocs\u751f\u6210\u7684HTML\u6587\u4ef6\u4f5c\u4e3a\u9759\u6001\u6587\u4ef6\u90e8\u7f72\u5230Web\u670d\u52a1\u5668\u4e0a\u3002</p> <p>\u4ee5\u4e0a\u5c31\u662fPython MkDocs\u7684\u7b80\u4ecb\uff0c\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u8bf7\u53c2\u8003MkDocs\u5b98\u65b9\u6587\u6863\uff1ahttps://www.mkdocs.org/</p>"},{"location":"mypy/","title":"\u5f00\u59cb","text":"<p>Getting started</p> <p>\u8f6c\u81ea: https://mypy.readthedocs.io/en/stable/getting_started.html</p> \u4e2d\u6587\u82f1\u6587 <p>\u672c\u7ae0\u4ecb\u7ecd\u4e86mypy\u7684\u4e00\u4e9b\u6838\u5fc3\u6982\u5ff5\uff0c\u5305\u62ec\u51fd\u6570\u6ce8\u89e3\u3001typing \u6a21\u5757\u3001\u5b58\u6839\u6587\u4ef6\u7b49\u3002</p> <p>\u5982\u679c\u4f60\u60f3\u8981\u4e00\u4e2a\u5feb\u901f\u7684\u4ecb\u7ecd\uff0c\u8bf7\u67e5\u770bmypy\u901f\u67e5\u8868\u3002</p> <p>\u5982\u679c\u4f60\u4e0d\u719f\u6089\u9759\u6001\u548c\u52a8\u6001\u7c7b\u578b\u68c0\u67e5\u7684\u6982\u5ff5\uff0c\u8bf7\u786e\u4fdd\u4ed4\u7ec6\u9605\u8bfb\u672c\u7ae0\uff0c\u56e0\u4e3a\u5426\u5219\u6587\u6863\u7684\u5176\u4f59\u90e8\u5206\u53ef\u80fd\u4e0d\u592a\u5bb9\u6613\u7406\u89e3\u3002</p> <p>This chapter introduces some core concepts of mypy, including function annotations, the typing module, stub files, and more.</p> <p>If you\u2019re looking for a quick intro, see the mypy cheatsheet.</p> <p>If you\u2019re unfamiliar with the concepts of static and dynamic type checking, be sure to read this chapter carefully, as the rest of the documentation may not make much sense otherwise.</p>"},{"location":"mypy/#\u5b89\u88c5\u548c\u8fd0\u884cmypy","title":"\u5b89\u88c5\u548c\u8fd0\u884cmypy","text":"<p>Installing and running mypy</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u9700\u8981 Python 3.8 \u6216\u66f4\u9ad8\u7248\u672c\u624d\u80fd\u8fd0\u884c\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 pip \u5b89\u88c5 mypy\uff1a</p> <pre><code>$ python3 -m pip install mypy\n</code></pre> <p>\u5b89\u88c5 mypy \u540e\uff0c\u4f7f\u7528 <code>mypy</code> \u5de5\u5177\u8fd0\u884c\u5b83\uff1a</p> <pre><code>$ mypy program.py\n</code></pre> <p>\u8fd9\u4e2a\u547d\u4ee4\u4f1a\u8ba9 mypy \u5bf9\u4f60\u7684 <code>program.py</code> \u6587\u4ef6\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\uff0c\u5e76\u6253\u5370\u51fa\u5b83\u53d1\u73b0\u7684\u4efb\u4f55\u9519\u8bef\u3002Mypy \u4f1a\u5bf9\u4f60\u7684\u4ee3\u7801\u8fdb\u884c\u9759\u6001\u7c7b\u578b\u68c0\u67e5\uff1a\u8fd9\u610f\u5473\u7740\u5b83\u4f1a\u5728\u4e0d\u8fd0\u884c\u4f60\u7684\u4ee3\u7801\u7684\u60c5\u51b5\u4e0b\u68c0\u67e5\u9519\u8bef\uff0c\u5c31\u50cf\u4e00\u4e2a linter\u3002</p> <p>\u8fd9\u4e5f\u610f\u5473\u7740\uff0c\u5982\u679c\u4f60\u613f\u610f\uff0c\u4f60\u603b\u662f\u53ef\u4ee5\u5ffd\u7565 mypy \u62a5\u544a\u7684\u9519\u8bef\u3002\u5373\u4f7f mypy \u62a5\u544a\u9519\u8bef\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 Python \u89e3\u91ca\u5668\u6765\u8fd0\u884c\u4f60\u7684\u4ee3\u7801\u3002</p> <p>\u7136\u800c\uff0c\u5982\u679c\u4f60\u5c1d\u8bd5\u76f4\u63a5\u5728\u73b0\u6709\u7684 Python \u4ee3\u7801\u4e0a\u8fd0\u884c mypy\uff0c\u5b83\u5f88\u53ef\u80fd\u62a5\u544a\u5f88\u5c11\u6216\u6ca1\u6709\u9519\u8bef\u3002\u8fd9\u662f\u4e00\u4e2a\u7279\u6027\uff01\u5b83\u4f7f\u5f97\u9010\u6b65\u91c7\u7528 mypy \u53d8\u5f97\u5bb9\u6613\u3002</p> <p>\u4e3a\u4e86\u4ece mypy \u83b7\u5f97\u6709\u7528\u7684\u8bca\u65ad\u4fe1\u606f\uff0c\u4f60\u5fc5\u987b\u5728\u4ee3\u7801\u4e2d\u6dfb\u52a0\u7c7b\u578b\u6ce8\u89e3\u3002\u8be6\u89c1\u4e0b\u9762\u7684\u90e8\u5206\u3002</p> <p>Mypy requires Python 3.8 or later to run. You can install mypy using pip:</p> <p><code>$ python3 -m pip install mypy</code></p> <p>Once mypy is installed, run it by using the <code>mypy</code> tool:</p> <p><code>$ mypy program.py</code></p> <p>This command makes mypy type check your <code>program.py</code> file and print out any errors it finds. Mypy will type check your code statically: this means that it will check for errors without ever running your code, just like a linter.</p> <p>This also means that you are always free to ignore the errors mypy reports, if you so wish. You can always use the Python interpreter to run your code, even if mypy reports errors.</p> <p>However, if you try directly running mypy on your existing Python code, it will most likely report little to no errors. This is a feature! It makes it easy to adopt mypy incrementally.</p> <p>In order to get useful diagnostics from mypy, you must add type annotations to your code. See the section below for details.</p>"},{"location":"mypy/#\u52a8\u6001-vs-\u9759\u6001-\u7c7b\u578b","title":"\u52a8\u6001 vs \u9759\u6001 \u7c7b\u578b","text":"<p>Dynamic vs static typing</p> \u4e2d\u6587\u82f1\u6587 <p>\u6ca1\u6709\u7c7b\u578b\u6ce8\u91ca\u7684\u51fd\u6570\u88ab mypy \u8ba4\u4e3a\u662f\u52a8\u6001\u7c7b\u578b\u7684\uff1a</p> <pre><code>def greeting(name):\n    return 'Hello ' + name\n</code></pre> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cmypy \u4e0d\u4f1a\u5bf9\u52a8\u6001\u7c7b\u578b\u51fd\u6570\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u3002\u8fd9\u610f\u5473\u7740\uff0c\u9664\u4e86\u4e00\u4e9b\u4f8b\u5916\u60c5\u51b5\uff0cmypy \u4e0d\u4f1a\u62a5\u544a\u5e38\u89c4\u672a\u6ce8\u91ca Python \u4ee3\u7801\u7684\u4efb\u4f55\u9519\u8bef\u3002</p> <p>\u5373\u4f7f\u4f60\u8bef\u7528\u4e86\u51fd\u6570\uff0c\u60c5\u51b5\u4e5f\u662f\u5982\u6b64\uff01</p> <pre><code>def greeting(name):\n    return 'Hello ' + name\n\n# \u5f53\u7a0b\u5e8f\u8fd0\u884c\u65f6\uff0c\u8fd9\u4e9b\u8c03\u7528\u5c06\u5931\u8d25\uff0c\u4f46 mypy \u4e0d\u62a5\u544a\u9519\u8bef\n# \u56e0\u4e3a \"greeting\" \u6ca1\u6709\u7c7b\u578b\u6ce8\u91ca\u3002\ngreeting(123)\ngreeting(b\"Alice\")\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6dfb\u52a0\u7c7b\u578b\u6ce8\u91ca\uff08\u4e5f\u79f0\u4e3a\u7c7b\u578b\u63d0\u793a\uff09\u6765\u8ba9 mypy \u68c0\u6d4b\u8fd9\u7c7b\u9519\u8bef\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u544a\u8bc9 mypy <code>greeting</code> \u51fd\u6570\u65e2\u63a5\u53d7\u53c8\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code># \"name: str\" \u6ce8\u91ca\u8868\u660e \"name\" \u53c2\u6570\u5e94\u8be5\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\n# \"-&gt; str\" \u6ce8\u91ca\u8868\u660e \"greeting\" \u5c06\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\ndef greeting(name: str) -&gt; str:\n    return 'Hello ' + name\n</code></pre> <p>\u8fd9\u4e2a\u51fd\u6570\u73b0\u5728\u662f\u9759\u6001\u7c7b\u578b\u7684\uff1amypy \u5c06\u4f7f\u7528\u63d0\u4f9b\u7684\u7c7b\u578b\u63d0\u793a\u6765\u68c0\u6d4b greeting \u51fd\u6570\u7684\u9519\u8bef\u4f7f\u7528\u4ee5\u53ca greeting \u51fd\u6570\u5185\u90e8\u53d8\u91cf\u7684\u9519\u8bef\u4f7f\u7528\u3002\u4f8b\u5982\uff1a</p> <pre><code>def greeting(name: str) -&gt; str:\n    return 'Hello ' + name\n\ngreeting(3)         # \"greeting\" \u7684\u53c2\u6570 1 \u6709\u4e0d\u517c\u5bb9\u7684\u7c7b\u578b \"int\"\uff1b\u9884\u671f \"str\"\ngreeting(b'Alice')  # \"greeting\" \u7684\u53c2\u6570 1 \u6709\u4e0d\u517c\u5bb9\u7684\u7c7b\u578b \"bytes\"\uff1b\u9884\u671f \"str\"\ngreeting(\"World!\")  # \u65e0\u9519\u8bef\n\ndef bad_greeting(name: str) -&gt; str:\n    return 'Hello ' * name  # \"str\" \u548c \"str\" \u5bf9\u4e8e * \u8fd0\u7b97\u7b26\u4e0d\u652f\u6301\u7684\u64cd\u4f5c\u6570\u7c7b\u578b\n</code></pre> <p>\u80fd\u591f\u9009\u62e9\u51fd\u6570\u662f\u52a8\u6001\u7c7b\u578b\u8fd8\u662f\u9759\u6001\u7c7b\u578b\u975e\u5e38\u6709\u7528\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u6b63\u5728\u5c06\u73b0\u6709\u7684 Python \u4ee3\u7801\u5e93\u8fc1\u79fb\u5230\u4f7f\u7528\u9759\u6001\u7c7b\u578b\uff0c\u901a\u5e38\u9010\u4e2a\u6dfb\u52a0\u7c7b\u578b\u6ce8\u91ca\u6bd4\u4e00\u6b21\u6027\u5168\u90e8\u6dfb\u52a0\u8981\u5bb9\u6613\u3002\u540c\u6837\uff0c\u5f53\u4f60\u5728\u539f\u578b\u8bbe\u8ba1\u4e00\u4e2a\u65b0\u7279\u6027\u65f6\uff0c\u6700\u521d\u4f7f\u7528\u52a8\u6001\u7c7b\u578b\u5b9e\u73b0\u4ee3\u7801\uff0c\u4ee3\u7801\u66f4\u7a33\u5b9a\u540e\u518d\u6dfb\u52a0\u7c7b\u578b\u6ce8\u91ca\u53ef\u80fd\u66f4\u65b9\u4fbf\u3002</p> <p>\u4e00\u65e6\u4f60\u5b8c\u6210\u4e86\u8fc1\u79fb\u6216\u539f\u578b\u8bbe\u8ba1\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 --disallow-untyped-defs \u6807\u5fd7\u8ba9 mypy \u5728\u4f60\u4e0d\u5c0f\u5fc3\u6dfb\u52a0\u4e86\u4e00\u4e2a\u52a8\u6001\u51fd\u6570\u65f6\u8b66\u544a\u4f60\u3002\u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528 --check-untyped-defs \u6807\u5fd7\u8ba9 mypy \u5bf9\u52a8\u6001\u7c7b\u578b\u51fd\u6570\u8fdb\u884c\u4e00\u4e9b\u6709\u9650\u7684\u68c0\u67e5\u3002\u6709\u5173\u914d\u7f6e mypy \u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 The mypy command line\u3002</p> <p>A function without type annotations is considered to be dynamically typed by mypy:</p> <pre><code>def greeting(name):\n    return 'Hello ' + name\n</code></pre> <p>By default, mypy will not type check dynamically typed functions. This means that with a few exceptions, mypy will not report any errors with regular unannotated Python.</p> <p>This is the case even if you misuse the function!</p> <pre><code>def greeting(name):\n    return 'Hello ' + name\n\n# These calls will fail when the program runs, but mypy does not report an error\n# because \"greeting\" does not have type annotations.\ngreeting(123)\ngreeting(b\"Alice\")\n</code></pre> <p>We can get mypy to detect these kinds of bugs by adding type annotations (also known as type hints). For example, you can tell mypy that <code>greeting</code> both accepts and returns a string like so:</p> <pre><code># The \"name: str\" annotation says that the \"name\" argument should be a string\n# The \"-&gt; str\" annotation says that \"greeting\" will return a string\ndef greeting(name: str) -&gt; str:\n    return 'Hello ' + name\n</code></pre> <p>This function is now statically typed: mypy will use the provided type hints to detect incorrect use of the greeting function and incorrect use of variables within the greeting function. For example:</p> <pre><code>def greeting(name: str) -&gt; str:\n    return 'Hello ' + name\n\ngreeting(3)         # Argument 1 to \"greeting\" has incompatible type \"int\"; expected \"str\"\ngreeting(b'Alice')  # Argument 1 to \"greeting\" has incompatible type \"bytes\"; expected \"str\"\ngreeting(\"World!\")  # No error\n\ndef bad_greeting(name: str) -&gt; str:\n    return 'Hello ' * name  # Unsupported operand types for * (\"str\" and \"str\")\n</code></pre> <p>Being able to pick whether you want a function to be dynamically or statically typed can be very helpful. For example, if you are migrating an existing Python codebase to use static types, it\u2019s usually easier to migrate by incrementally adding type hints to your code rather than adding them all at once. Similarly, when you are prototyping a new feature, it may be convenient to initially implement the code using dynamic typing and only add type hints later once the code is more stable.</p> <p>Once you are finished migrating or prototyping your code, you can make mypy warn you if you add a dynamic function by mistake by using the --disallow-untyped-defs flag. You can also get mypy to provide some limited checking of dynamically typed functions by using the --check-untyped-defs flag. See The mypy command line for more information on configuring mypy.</p>"},{"location":"mypy/#\u4e25\u683c\u6a21\u5f0f\u4ee5\u53ca\u914d\u7f6e","title":"\u4e25\u683c\u6a21\u5f0f\u4ee5\u53ca\u914d\u7f6e","text":"<p>Strict mode and configuration</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e25\u683c\u6a21\u5f0f\uff0c\u8be5\u6a21\u5f0f\u542f\u7528\u4e86\u8bb8\u591a\u989d\u5916\u7684\u68c0\u67e5\uff0c\u6bd4\u5982 --disallow-untyped-defs\u3002</p> <p>\u5982\u679c\u4f60\u4f7f\u7528 --strict \u6807\u5fd7\u8fd0\u884c mypy\uff0c\u4f60\u57fa\u672c\u4e0a\u4e0d\u4f1a\u518d\u5728\u8fd0\u884c\u65f6\u9047\u5230\u4efb\u4f55\u7c7b\u578b\u76f8\u5173\u7684\u9519\u8bef\uff0c\u9664\u975e\u4f60\u4ee5\u67d0\u79cd\u65b9\u5f0f\u660e\u786e\u89c4\u907f\u4e86 mypy\u3002</p> <p>\u7136\u800c\uff0c\u5982\u679c\u4f60\u6b63\u8bd5\u56fe\u4e3a\u4e00\u4e2a\u5927\u578b\u7684\u3001\u73b0\u6709\u7684\u4ee3\u7801\u5e93\u6dfb\u52a0\u9759\u6001\u7c7b\u578b\uff0c\u8fd9\u4e2a\u6807\u5fd7\u53ef\u80fd\u4f1a\u8fc7\u4e8e\u6fc0\u8fdb\u3002\u6709\u5173\u5982\u4f55\u5904\u7406\u8fd9\u79cd\u60c5\u51b5\u7684\u5efa\u8bae\uff0c\u8bf7\u53c2\u89c1\u5728\u73b0\u6709\u4ee3\u7801\u5e93\u4e2d\u4f7f\u7528 mypy\u3002</p> <p>Mypy \u662f\u975e\u5e38\u53ef\u914d\u7f6e\u7684\uff0c\u4f60\u53ef\u4ee5\u4ece\u4f7f\u7528 <code>--strict</code> \u5f00\u59cb\uff0c\u7136\u540e\u5173\u95ed\u4e2a\u522b\u68c0\u67e5\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u8bb8\u591a\u6ca1\u6709\u7c7b\u578b\u7684\u7b2c\u4e09\u65b9\u5e93\uff0c<code>--ignore-missing-imports</code> \u53ef\u80fd\u4f1a\u5f88\u6709\u7528\u3002\u5173\u4e8e\u5982\u4f55\u9010\u6b65\u91c7\u7528 <code>--strict</code>\uff0c\u8bf7\u53c2\u89c1\u5f15\u5165\u66f4\u4e25\u683c\u7684\u9009\u9879\u3002</p> <p>\u6709\u5173\u914d\u7f6e\u9009\u9879\u7684\u5b8c\u6574\u53c2\u8003\uff0c\u8bf7\u53c2\u89c1 mypy \u547d\u4ee4\u884c \u548c mypy \u914d\u7f6e\u6587\u4ef6\u3002</p> <p>Mypy has a strict mode that enables a number of additional checks, like --disallow-untyped-defs.</p> <p>If you run mypy with the --strict flag, you will basically never get a type related error at runtime without a corresponding mypy error, unless you explicitly circumvent mypy somehow.</p> <p>However, this flag will probably be too aggressive if you are trying to add static types to a large, existing codebase. See Using mypy with an existing codebase for suggestions on how to handle that case.</p> <p>Mypy is very configurable, so you can start with using <code>--strict</code> and toggle off individual checks. For instance, if you use many third party libraries that do not have types, --ignore-missing-imports may be useful. See Introduce stricter options for how to build up to <code>--strict</code>.</p> <p>See The mypy command line and The mypy configuration file for a complete reference on configuration options.</p>"},{"location":"mypy/#\u66f4\u591a\u590d\u6742\u7c7b\u578b","title":"\u66f4\u591a\u590d\u6742\u7c7b\u578b","text":"<p>More complex types</p> \u4e2d\u6587\u82f1\u6587 <p>\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u6dfb\u52a0\u4e86\u4f7f\u7528\u57fa\u672c\u5177\u4f53\u7c7b\u578b\uff08\u5982 <code>str</code> \u548c <code>float</code>\uff09\u7684\u7c7b\u578b\u63d0\u793a\u3002\u5982\u679c\u6211\u4eec\u60f3\u8868\u8fbe\u66f4\u590d\u6742\u7684\u7c7b\u578b\uff0c\u4f8b\u5982\u201c\u4e00\u4e2a\u5b57\u7b26\u4e32\u5217\u8868\u201d\u6216\u201c\u4e00\u4e2a\u6574\u6570\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\u201d\u600e\u4e48\u529e\uff1f</p> <p>\u4f8b\u5982\uff0c\u8981\u8868\u793a\u67d0\u4e2a\u51fd\u6570\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a\u5b57\u7b26\u4e32\u5217\u8868\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>list[str]</code> \u7c7b\u578b\uff08\u9002\u7528\u4e8e Python 3.9 \u53ca\u66f4\u9ad8\u7248\u672c\uff09\uff1a</p> <pre><code>def greet_all(names: list[str]) -&gt; None:\n    for name in names:\n        print('Hello ' + name)\n\nnames = [\"Alice\", \"Bob\", \"Charlie\"]\nages = [10, 20, 30]\n\ngreet_all(names)   # \u53ef\u4ee5\uff01\ngreet_all(ages)    # \u7531\u4e8e\u7c7b\u578b\u4e0d\u517c\u5bb9\uff0c\u51fa\u73b0\u9519\u8bef\n</code></pre> <p>list \u7c7b\u578b\u662f\u4e00\u4e2a\u79f0\u4e3a\u6cdb\u578b\u7c7b\u578b\u7684\u793a\u4f8b\uff1a\u5b83\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a\u6216\u591a\u4e2a\u7c7b\u578b\u53c2\u6570\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u901a\u8fc7\u5199 <code>list[str]</code> \u6765\u5bf9 list \u8fdb\u884c\u53c2\u6570\u5316\u3002\u8fd9\u4f7f\u5f97 mypy \u77e5\u9053 <code>greet_all</code> \u4ec5\u63a5\u53d7\u5305\u542b\u5b57\u7b26\u4e32\u7684\u5217\u8868\uff0c\u800c\u4e0d\u662f\u5305\u542b\u6574\u6570\u6216\u5176\u4ed6\u7c7b\u578b\u7684\u5217\u8868\u3002</p> <p>\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u7c7b\u578b\u7b7e\u540d\u53ef\u80fd\u6709\u70b9\u8fc7\u4e8e\u4e25\u683c\u3002\u6bd5\u7adf\uff0c\u8fd9\u4e2a\u51fd\u6570\u5e76\u4e0d\u4e00\u5b9a\u975e\u5f97\u63a5\u53d7 \u5177\u4f53\u7684 \u5217\u8868\u2014\u2014\u5982\u679c\u4f60\u4f20\u9012\u4e00\u4e2a\u5143\u7ec4\u3001\u96c6\u5408\u6216\u4efb\u4f55\u5176\u4ed6\u81ea\u5b9a\u4e49\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u5b83\u4e5f\u80fd\u6b63\u5e38\u8fd0\u884c\u3002</p> <p>\u4f60\u53ef\u4ee5\u4f7f\u7528 collections.abc.Iterable \u6765\u8868\u8fbe\u8fd9\u4e00\u60f3\u6cd5\uff1a</p> <pre><code>from collections.abc import Iterable  # \u6216\u8005 \"from typing import Iterable\"\n\ndef greet_all(names: Iterable[str]) -&gt; None:\n    for name in names:\n        print('Hello ' + name)\n</code></pre> <p>\u8fd9\u79cd\u884c\u4e3a\u5b9e\u9645\u4e0a\u662f PEP 484 \u7c7b\u578b\u7cfb\u7edf\u7684\u4e00\u4e2a\u57fa\u672c\u65b9\u9762\uff1a\u5f53\u6211\u4eec\u7528\u7c7b\u578b <code>T</code> \u6ce8\u89e3\u67d0\u4e2a\u53d8\u91cf\u65f6\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u662f\u5728\u544a\u8bc9 mypy\uff0c\u8fd9\u4e2a\u53d8\u91cf\u53ef\u4ee5\u88ab\u8d4b\u503c\u4e3a <code>T</code> \u7684\u5b9e\u4f8b\uff0c\u6216\u8005 <code>T</code> \u7684 \u5b50\u7c7b\u578b \u7684\u5b9e\u4f8b\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c<code>list[str]</code> \u662f <code>Iterable[str]</code> \u7684\u5b50\u7c7b\u578b\u3002</p> <p>\u8fd9\u4e5f\u9002\u7528\u4e8e\u7ee7\u627f\uff0c\u56e0\u6b64\u5982\u679c\u4f60\u6709\u4e00\u4e2a <code>Child</code> \u7c7b\u7ee7\u627f\u81ea <code>Parent</code>\uff0c\u90a3\u4e48 <code>Child</code> \u7c7b\u578b\u7684\u503c\u53ef\u4ee5\u8d4b\u7ed9 <code>Parent</code> \u7c7b\u578b\u7684\u53d8\u91cf\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a <code>RuntimeError</code> \u5b9e\u4f8b\u53ef\u4ee5\u4f20\u9012\u7ed9\u6ce8\u89e3\u4e3a\u63a5\u53d7 <code>Exception</code> \u7684\u51fd\u6570\u3002</p> <p>\u53e6\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5047\u8bbe\u4f60\u60f3\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u53ef\u4ee5\u63a5\u53d7 \u6574\u6570\u6216\u5b57\u7b26\u4e32\uff0c\u4f46\u4e0d\u63a5\u53d7\u5176\u4ed6\u7c7b\u578b\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 Union \u7c7b\u578b\u6765\u8868\u8fbe\u8fd9\u79cd\u60c5\u51b5\u3002\u4f8b\u5982\uff0c<code>int</code> \u662f <code>Union[int, str]</code> \u7684\u5b50\u7c7b\u578b\uff1a</p> <pre><code>from typing import Union\n\ndef normalize_id(user_id: Union[int, str]) -&gt; str:\n    if isinstance(user_id, int):\n        return f'user-{100_000 + user_id}'\n    else:\n        return user_id\n</code></pre> <p>typing \u6a21\u5757\u5305\u542b\u8bb8\u591a\u5176\u4ed6\u6709\u7528\u7684\u7c7b\u578b\u3002</p> <p>\u8981\u5feb\u901f\u4e86\u89e3\uff0c\u53ef\u4ee5\u67e5\u770b mypy cheatsheet\u3002</p> <p>\u8981\u83b7\u5f97\u8be6\u7ec6\u7684\u6982\u8ff0\uff08\u5305\u62ec\u5982\u4f55\u521b\u5efa\u81ea\u5df1\u7684\u6cdb\u578b\u7c7b\u578b\u6216\u7c7b\u578b\u522b\u540d\uff09\uff0c\u53ef\u4ee5\u67e5\u770b \u7c7b\u578b\u7cfb\u7edf\u53c2\u8003\u3002</p> <p>\u6ce8\u610f</p> <p>\u6dfb\u52a0\u7c7b\u578b\u65f6\uff0c\u7ea6\u5b9a\u662f\u4f7f\u7528 <code>from typing import Union</code> \u5f62\u5f0f\u5bfc\u5165\u7c7b\u578b\uff08\u800c\u4e0d\u662f\u4ec5\u4ec5 <code>import typing</code> \u6216 <code>import typing as t</code> \u6216 <code>from typing import *</code>\uff09\u3002</p> <p>\u4e3a\u4e86\u7b80\u6d01\uff0c\u6211\u4eec\u5728\u4ee3\u7801\u793a\u4f8b\u4e2d\u7ecf\u5e38\u7701\u7565\u4e86\u4ece typing \u6216 collections.abc \u8fdb\u884c\u7684\u5bfc\u5165\uff0c\u4f46\u5982\u679c\u4f60\u5728\u6ca1\u6709\u9996\u5148\u5bfc\u5165\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u50cf Iterable \u8fd9\u6837\u7684\u7c7b\u578b\uff0cmypy \u4f1a\u62a5\u9519\u3002</p> <p>\u6ce8\u610f</p> <p>\u5728\u4e00\u4e9b\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u5927\u5199\u7684\u7c7b\u578b\u540d\u79f0\uff0c\u5982 <code>List</code>\uff0c\u800c\u6709\u65f6\u6211\u4eec\u4f7f\u7528\u666e\u901a\u7684 <code>list</code>\u3002\u5b83\u4eec\u662f\u7b49\u4ef7\u7684\uff0c\u4f46\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f Python 3.8 \u6216\u66f4\u65e9\u7684\u7248\u672c\uff0c\u5219\u9700\u8981\u4f7f\u7528\u524d\u8005\u3002</p> <p>So far, we\u2019ve added type hints that use only basic concrete types like <code>str</code> and <code>float</code>. What if we want to express more complex types, such as \u201ca list of strings\u201d or \u201can iterable of ints\u201d?</p> <p>For example, to indicate that some function can accept a list of strings, use the <code>list[str]</code> type (Python 3.9 and later):</p> <pre><code>def greet_all(names: list[str]) -&gt; None:\n    for name in names:\n        print('Hello ' + name)\n\nnames = [\"Alice\", \"Bob\", \"Charlie\"]\nages = [10, 20, 30]\n\ngreet_all(names)   # Ok!\ngreet_all(ages)    # Error due to incompatible types\n</code></pre> <p>The list type is an example of something called a generic type: it can accept one or more type parameters. In this case, we parameterized list by writing <code>list[str]</code>. This lets mypy know that <code>greet_all</code> accepts specifically lists containing strings, and not lists containing ints or any other type.</p> <p>In the above examples, the type signature is perhaps a little too rigid. After all, there\u2019s no reason why this function must accept specifically a list \u2013 it would run just fine if you were to pass in a tuple, a set, or any other custom iterable.</p> <p>You can express this idea using collections.abc.Iterable:</p> <pre><code>from collections.abc import Iterable  # or \"from typing import Iterable\"\n\ndef greet_all(names: Iterable[str]) -&gt; None:\n    for name in names:\n        print('Hello ' + name)\n</code></pre> <p>This behavior is actually a fundamental aspect of the PEP 484 type system: when we annotate some variable with a type <code>T</code>, we are actually telling mypy that variable can be assigned an instance of <code>T</code>, or an instance of a subtype of <code>T</code>. That is, <code>list[str]</code> is a subtype of <code>Iterable[str]</code>.</p> <p>This also applies to inheritance, so if you have a class <code>Child</code> that inherits from <code>Parent</code>, then a value of type <code>Child</code> can be assigned to a variable of type <code>Parent</code>. For example, a <code>RuntimeError</code> instance can be passed to a function that is annotated as taking an <code>Exception</code>.</p> <p>As another example, suppose you want to write a function that can accept either ints or strings, but no other types. You can express this using the Union type. For example, <code>int</code> is a subtype of <code>Union[int, str]</code>:</p> <pre><code>from typing import Union\n\ndef normalize_id(user_id: Union[int, str]) -&gt; str:\n    if isinstance(user_id, int):\n        return f'user-{100_000 + user_id}'\n    else:\n        return user_id\n</code></pre> <p>The typing module contains many other useful types.</p> <p>For a quick overview, look through the mypy cheatsheet.</p> <p>For a detailed overview (including information on how to make your own generic types or your own type aliases), look through the type system reference.</p> <p>Note</p> <p>When adding types, the convention is to import types using the form <code>from typing import Union</code> (as opposed to doing just <code>import typing</code> or <code>import typing as t</code> or <code>from typing import *</code>).</p> <p>For brevity, we often omit imports from typing or collections.abc in code examples, but mypy will give an error if you use types such as Iterable without first importing them.</p> <p>Note</p> <p>In some examples we use capitalized variants of types, such as <code>List</code>, and sometimes we use plain <code>list</code>. They are equivalent, but the prior variant is needed if you are using Python 3.8 or earlier.</p>"},{"location":"mypy/#\u5c40\u90e8\u7c7b\u578b\u63a8\u65ad","title":"\u5c40\u90e8\u7c7b\u578b\u63a8\u65ad","text":"<p>Local type inference</p> \u4e2d\u6587\u82f1\u6587 <p>\u4e00\u65e6\u4f60\u4e3a\u51fd\u6570\u6dfb\u52a0\u4e86\u7c7b\u578b\u63d0\u793a\uff08\u5373\u4f7f\u5b83\u53d8\u6210\u4e86\u9759\u6001\u7c7b\u578b\uff09\uff0cmypy \u5c06\u81ea\u52a8\u5bf9\u8be5\u51fd\u6570\u7684\u4e3b\u4f53\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u3002\u5728\u6b64\u8fc7\u7a0b\u4e2d\uff0cmypy \u5c06\u5c1d\u8bd5\u63a8\u65ad\u5c3d\u53ef\u80fd\u591a\u7684\u7ec6\u8282\u3002</p> <p>\u6211\u4eec\u5728\u4e0a\u9762\u7684 <code>normalize_id</code> \u51fd\u6570\u4e2d\u770b\u5230\u4e86\u4e00\u4e2a\u4f8b\u5b50\u2014\u2014mypy \u80fd\u7406\u89e3\u57fa\u672c\u7684 isinstance \u68c0\u67e5\uff0c\u56e0\u6b64\u53ef\u4ee5\u63a8\u65ad\u51fa <code>user_id</code> \u53d8\u91cf\u5728 if \u5206\u652f\u4e2d\u662f <code>int</code> \u7c7b\u578b\uff0c\u5728 else \u5206\u652f\u4e2d\u662f <code>str</code> \u7c7b\u578b\u3002</p> <p>\u518d\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u8003\u8651\u4ee5\u4e0b\u51fd\u6570\u3002Mypy \u53ef\u4ee5\u6beb\u65e0\u95ee\u9898\u5730\u5bf9\u8be5\u51fd\u6570\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\uff1a\u5b83\u5c06\u5229\u7528\u53ef\u7528\u7684\u4e0a\u4e0b\u6587\u63a8\u65ad\u51fa <code>output</code> \u5fc5\u987b\u662f <code>list[float]</code> \u7c7b\u578b\uff0c\u5e76\u4e14 <code>num</code> \u5fc5\u987b\u662f <code>float</code> \u7c7b\u578b\uff1a</p> <pre><code>def nums_below(numbers: Iterable[float], limit: float) -&gt; list[float]:\n    output = []\n    for num in numbers:\n        if num &lt; limit:\n            output.append(num)\n    return output\n</code></pre> <p>\u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 \u7c7b\u578b\u63a8\u65ad\u548c\u7c7b\u578b\u6ce8\u89e3\u3002</p> <p>Once you have added type hints to a function (i.e. made it statically typed), mypy will automatically type check that function\u2019s body. While doing so, mypy will try and infer as many details as possible.</p> <p>We saw an example of this in the <code>normalize_id</code> function above \u2013 mypy understands basic isinstance checks and so can infer that the <code>user_id</code> variable was of type <code>int</code> in the if-branch and of type <code>str</code> in the else-branch.</p> <p>As another example, consider the following function. Mypy can type check this function without a problem: it will use the available context and deduce that <code>output</code> must be of type <code>list[float]</code> and that <code>num</code> must be of type <code>float</code>:</p> <pre><code>def nums_below(numbers: Iterable[float], limit: float) -&gt; list[float]:\n    output = []\n    for num in numbers:\n        if num &lt; limit:\n            output.append(num)\n    return output\n</code></pre> <p>For more details, see Type inference and type annotations.</p>"},{"location":"mypy/#\u6765\u81ea\u5e93\u7684\u7c7b\u578b","title":"\u6765\u81ea\u5e93\u7684\u7c7b\u578b","text":"<p>Types from libraries</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u4e5f\u53ef\u4ee5\u7406\u89e3\u5982\u4f55\u5904\u7406\u4f60\u6240\u4f7f\u7528\u7684\u5e93\u4e2d\u7684\u7c7b\u578b\u3002</p> <p>\u4f8b\u5982\uff0cmypy \u5185\u7f6e\u4e86\u5bf9 Python \u6807\u51c6\u5e93\u7684\u6df1\u5165\u4e86\u89e3\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u4f7f\u7528 pathlib \u6807\u51c6\u5e93\u6a21\u5757 \u4e2d\u7684 Path \u5bf9\u8c61\u7684\u51fd\u6570\u793a\u4f8b\uff1a</p> <pre><code>from pathlib import Path\n\ndef load_template(template_path: Path, name: str) -&gt; str:\n    # Mypy \u77e5\u9053 `template_path` \u6709\u4e00\u4e2a\u8fd4\u56de\u5b57\u7b26\u4e32\u7684 `read_text` \u65b9\u6cd5\n    template = template_path.read_text()\n    # \u56e0\u6b64\u5b83\u7406\u89e3\u8fd9\u884c\u4ee3\u7801\u7684\u7c7b\u578b\u68c0\u67e5\u662f\u6b63\u786e\u7684\n    return template.replace('USERNAME', name)\n</code></pre> <p>\u5982\u679c\u4f60\u4f7f\u7528\u7684\u7b2c\u4e09\u65b9\u5e93 \u58f0\u660e\u652f\u6301\u7c7b\u578b\u68c0\u67e5\uff0cmypy \u5c06\u6839\u636e\u8be5\u5e93\u4e2d\u7684\u7c7b\u578b\u63d0\u793a\u5bf9\u4f60\u4f7f\u7528\u8be5\u5e93\u7684\u4ee3\u7801\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u3002</p> <p>\u7136\u800c\uff0c\u5982\u679c\u7b2c\u4e09\u65b9\u5e93\u6ca1\u6709\u7c7b\u578b\u63d0\u793a\uff0cmypy \u5c06\u4f1a\u63d0\u793a\u7f3a\u5c11\u7c7b\u578b\u4fe1\u606f\u3002</p> <pre><code>prog.py:1: error: Library stubs not installed for \"yaml\"\nprog.py:1: note: Hint: \"python3 -m pip install types-PyYAML\"\nprog.py:2: error: Library stubs not installed for \"requests\"\nprog.py:2: note: Hint: \"python3 -m pip install types-requests\"\n...\n</code></pre> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5b89\u88c5\u5b58\u6839\u5305\u6765\u4e3a mypy \u63d0\u4f9b\u53e6\u4e00\u79cd\u7c7b\u578b\u4fe1\u606f\u6765\u6e90\u3002\u5b58\u6839\u5305\u662f\u4e00\u4e2a\u4ec5\u5305\u542b\u7c7b\u578b\u63d0\u793a\u4f46\u4e0d\u5305\u542b\u5b9e\u9645\u4ee3\u7801\u7684\u5305\u3002</p> <pre><code>$ python3 -m pip install types-PyYAML types-requests\n</code></pre> <p>\u5206\u53d1\u5305\u7684\u5b58\u6839\u5305\u901a\u5e38\u547d\u540d\u4e3a <code>types-&lt;distribution&gt;</code>\u3002\u6ce8\u610f\uff0c\u5206\u53d1\u5305\u7684\u540d\u79f0\u53ef\u80fd\u4e0e\u5bfc\u5165\u7684\u5305\u540d\u4e0d\u540c\u3002\u4f8b\u5982\uff0c<code>types-PyYAML</code> \u5305\u542b <code>yaml</code> \u5305\u7684\u5b58\u6839\u3002</p> <p>\u6709\u5173\u5904\u7406\u7f3a\u5c11\u7c7b\u578b\u4fe1\u606f\u7684\u5e93\u9519\u8bef\u7684\u7b56\u7565\u7684\u66f4\u591a\u8ba8\u8bba\uff0c\u8bf7\u53c2\u9605 \u7f3a\u5c11\u5bfc\u5165\u3002</p> <p>\u6709\u5173\u5b58\u6839\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 \u5b58\u6839\u6587\u4ef6\u3002</p> <p>Mypy can also understand how to work with types from libraries that you use.</p> <p>For instance, mypy comes out of the box with an intimate knowledge of the Python standard library. For example, here is a function which uses the Path object from the pathlib standard library module:</p> <pre><code>from pathlib import Path\n\ndef load_template(template_path: Path, name: str) -&gt; str:\n    # Mypy knows that `template_path` has a `read_text` method that returns a str\n    template = template_path.read_text()\n    # ...so it understands this line type checks\n    return template.replace('USERNAME', name)\n</code></pre> <p>If a third party library you use declares support for type checking, mypy will type check your use of that library based on the type hints it contains.</p> <p>However, if the third party library does not have type hints, mypy will complain about missing type information.</p> <pre><code>prog.py:1: error: Library stubs not installed for \"yaml\"\nprog.py:1: note: Hint: \"python3 -m pip install types-PyYAML\"\nprog.py:2: error: Library stubs not installed for \"requests\"\nprog.py:2: note: Hint: \"python3 -m pip install types-requests\"\n...\n</code></pre> <p>In this case, you can provide mypy a different source of type information, by installing a stub package. A stub package is a package that contains type hints for another library, but no actual code.</p> <p><code>$ python3 -m pip install types-PyYAML types-requests</code></p> <p>Stubs packages for a distribution are often named <code>types-&lt;distribution&gt;</code>. Note that a distribution name may be different from the name of the package that you import. For example, <code>types-PyYAML</code> contains stubs for the <code>yaml</code> package.</p> <p>For more discussion on strategies for handling errors about libraries without type information, refer to Missing imports.</p> <p>For more information about stubs, see Stub files.</p>"},{"location":"mypy/#\u4e0b\u4e00\u6b65","title":"\u4e0b\u4e00\u6b65","text":"<p>Next steps</p> \u4e2d\u6587\u82f1\u6587 <p>\u5982\u679c\u4f60\u65f6\u95f4\u7d27\u8feb\uff0c\u4e0d\u60f3\u5728\u5f00\u59cb\u4e4b\u524d\u9605\u8bfb\u5927\u91cf\u6587\u6863\uff0c\u4ee5\u4e0b\u662f\u4e00\u4e9b\u5feb\u901f\u5b66\u4e60\u8d44\u6e90\u7684\u6307\u5f15\uff1a</p> <ul> <li> <p>\u9605\u8bfb mypy cheatsheet\u3002</p> </li> <li> <p>\u5982\u679c\u4f60\u6709\u4e00\u4e2a\u73b0\u6709\u7684\u5927\u578b\u4ee3\u7801\u5e93\u4f46\u6ca1\u6709\u5f88\u591a\u7c7b\u578b\u6ce8\u89e3\uff0c\u53ef\u4ee5\u9605\u8bfb \u5982\u4f55\u5728\u73b0\u6709\u4ee3\u7801\u5e93\u4e2d\u4f7f\u7528 mypy\u3002</p> </li> <li> <p>\u9605\u8bfb\u5173\u4e8e Zulip \u9879\u76ee\u91c7\u7eb3 mypy \u7684 \u535a\u5ba2\u6587\u7ae0\u3002</p> </li> <li> <p>\u5982\u679c\u4f60\u66f4\u559c\u6b22\u89c2\u770b\u8bb2\u5ea7\u800c\u4e0d\u662f\u9605\u8bfb\uff0c\u4ee5\u4e0b\u662f\u4e00\u4e9b\u5efa\u8bae\uff1a</p> <ul> <li> <p>Carl Meyer: Type Checked Python in the Real World (PyCon 2018)</p> </li> <li> <p>Greg Price: Clearer Code at Scale: Static Types at Zulip and Dropbox (PyCon 2018)</p> </li> </ul> </li> <li> <p>\u5982\u679c\u4f60\u9047\u5230\u95ee\u9898\uff0c\u53ef\u4ee5\u67e5\u770b mypy \u7684\u5e38\u89c1\u95ee\u9898\u89e3\u51b3\u65b9\u6848\u3002</p> </li> <li> <p>\u4f60\u53ef\u4ee5\u5728 mypy \u95ee\u9898\u8ddf\u8e2a\u5668 \u548c typing \u7684 Gitter \u804a\u5929 \u4e2d\u63d0\u51fa\u6709\u5173 mypy \u7684\u95ee\u9898\u3002</p> </li> <li> <p>\u5bf9\u4e8e\u6709\u5173 Python \u7c7b\u578b\u7684\u4e00\u822c\u95ee\u9898\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u5728 typing discussions \u4e2d\u53d1\u5e16\u3002</p> </li> </ul> <p>\u4f60\u4e5f\u53ef\u4ee5\u7ee7\u7eed\u9605\u8bfb\u672c\u6587\u6863\uff0c\u5e76\u8df3\u8fc7\u90a3\u4e9b\u4e0e\u4f60\u65e0\u5173\u7684\u90e8\u5206\u3002\u4f60\u4e0d\u9700\u8981\u6309\u987a\u5e8f\u9605\u8bfb\u5404\u4e2a\u7ae0\u8282\u3002</p> <p>If you are in a hurry and don\u2019t want to read lots of documentation before getting started, here are some pointers to quick learning resources:</p> <ul> <li> <p>Read the mypy cheatsheet.</p> </li> <li> <p>Read Using mypy with an existing codebase if you have a significant existing codebase without many type annotations.</p> </li> <li> <p>Read the blog post about the Zulip project\u2019s experiences with adopting mypy.</p> </li> <li> <p>If you prefer watching talks instead of reading, here are some ideas:</p> <ul> <li> <p>Carl Meyer: Type Checked Python in the Real World (PyCon 2018)</p> </li> <li> <p>Greg Price: Clearer Code at Scale: Static Types at Zulip and Dropbox (PyCon 2018)</p> </li> </ul> </li> <li> <p>Look at solutions to common issues with mypy if you encounter problems.</p> </li> <li> <p>You can ask questions about mypy in the mypy issue tracker and typing Gitter chat.</p> </li> <li> <p>For general questions about Python typing, try posting at typing discussions.</p> </li> </ul> <p>You can also continue reading this document and skip sections that aren\u2019t relevant for you. You don\u2019t need to read sections in order.</p>"},{"location":"mypy/annotation_issue_at_runtime/","title":"\u8fd0\u884c\u65f6\u7684\u6ce8\u89e3\u95ee\u9898","text":"\u4e2d\u6587\u82f1\u6587 <p>\u7c7b\u578b\u6ce8\u91ca\u7684\u60ef\u7528\u7528\u6cd5\u6709\u65f6\u53ef\u80fd\u4f1a\u4e0e\u7ed9\u5b9a\u7248\u672c\u7684 Python \u8ba4\u4e3a\u7684\u5408\u6cd5\u4ee3\u7801\u76f8\u51b2\u7a81\u3002 \u672c\u8282\u63cf\u8ff0\u8fd9\u4e9b\u573a\u666f\u5e76\u89e3\u91ca\u5982\u4f55\u8ba9\u4ee3\u7801\u518d\u6b21\u8fd0\u884c\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e09\u79cd\u5de5\u5177\uff1a</p> <ul> <li>\u4f7f\u7528 <code>from __future__ import annotations</code> (<code>PEP 563</code>) \uff08\u6b64\u884c\u4e3a\u6700\u7ec8\u53ef\u80fd\u4f1a\u5728\u672a\u6765\u7684 Python \u7248\u672c\u4e2d\u6210\u4e3a\u9ed8\u8ba4\u884c\u4e3a\uff09</li> <li>\u4f7f\u7528\u5b57\u7b26\u4e32\u6587\u5b57\u7c7b\u578b\u6216\u7c7b\u578b\u6ce8\u91ca</li> <li>\u4f7f\u7528 <code>typing.TYPE_CHECKING</code></li> </ul> <p>\u5728\u8ba8\u8bba\u60a8\u53ef\u80fd\u9047\u5230\u7684\u5177\u4f53\u95ee\u9898\u4e4b\u524d\uff0c\u6211\u4eec\u4f1a\u5148\u63d0\u4f9b\u8fd9\u4e9b\u5185\u5bb9\u7684\u63cf\u8ff0\u3002</p> <p>Annotation issues at runtime</p> <p>Idiomatic use of type annotations can sometimes run up against what a given version of Python considers legal code. This section describes these scenarios and explains how to get your code running again. Generally speaking, we have three tools at our disposal:</p> <ul> <li>Use of <code>from __future__ import annotations</code> (<code>PEP 563</code>)  (this behaviour may eventually be made the default in a future Python version)</li> <li>Use of string literal types or type comments</li> <li>Use of <code>typing.TYPE_CHECKING</code></li> </ul> <p>We provide a description of these before moving onto discussion of specific problems you may encounter.</p>"},{"location":"mypy/annotation_issue_at_runtime/#\u5b57\u7b26\u4e32\u6587\u5b57\u7c7b\u578b\u548c\u7c7b\u578b\u6ce8\u91ca","title":"\u5b57\u7b26\u4e32\u6587\u5b57\u7c7b\u578b\u548c\u7c7b\u578b\u6ce8\u91ca","text":"\u4e2d\u6587\u82f1\u6587 <p>Mypy \u5141\u8bb8\u60a8\u4f7f\u7528\u4ee5 <code># type:</code> \u5f62\u5f0f\u6dfb\u52a0\u7c7b\u578b\u6ce8\u91ca\u3002 \u4f8b\u5982\uff1a</p> <pre><code>a = 1  # type: int\n\ndef f(x):  # type: (int) -&gt; int\n    return x + 1\n\n# \u5177\u6709\u591a\u4e2a\u53c2\u6570\u7684\u51fd\u6570\u7684\u66ff\u4ee3\u7c7b\u578b\u6ce8\u91ca\u8bed\u6cd5\ndef send_email(\n    address,     # type: Union[str, List[str]]\n    sender,      # type: str\n    cc,          # type: Optional[List[str]]\n    subject='',\n    body=None    # type: List[str]\n):\n    # type: (...) -&gt; bool\n</code></pre> <p>\u7c7b\u578b\u6ce8\u91ca\u4e0d\u4f1a\u5bfc\u81f4\u8fd0\u884c\u65f6\u9519\u8bef\uff0c\u56e0\u4e3a Python \u4e0d\u4f1a\u8bc4\u4f30\u6ce8\u91ca\u3002</p> <p>\u4ee5\u7c7b\u4f3c\u7684\u65b9\u5f0f\uff0c\u4f7f\u7528\u5b57\u7b26\u4e32\u6587\u5b57\u7c7b\u578b\u53ef\u4ee5\u56de\u907f\u53ef\u80fd\u5bfc\u81f4\u8fd0\u884c\u65f6\u9519\u8bef\u7684\u6ce8\u91ca\u95ee\u9898\u3002</p> <p>\u4efb\u4f55\u7c7b\u578b\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u5b57\u7b26\u4e32\u6587\u5b57\u8f93\u5165\uff0c\u5e76\u4e14\u60a8\u53ef\u4ee5\u81ea\u7531\u5730\u5c06\u5b57\u7b26\u4e32\u6587\u5b57\u7c7b\u578b\u4e0e\u975e\u5b57\u7b26\u4e32\u6587\u5b57\u7c7b\u578b\u7ec4\u5408\uff1a</p> <pre><code>def f(a: list['A']) -&gt; None: ...  # OK, \u9632\u6b62 NameError \u56e0\u4e3a A \u662f\u7a0d\u540e\u5b9a\u4e49\u7684\ndef g(n: 'int') -&gt; None: ...      # \u540c\u6837 OK, \u867d\u7136\u6ca1\u7528\n\nclass A: pass\n</code></pre> <p><code># type:</code> \u6ce8\u91ca\u548c <code>\u5b58\u6839\u6587\u4ef6</code> \u4e2d\u6c38\u8fdc\u4e0d\u9700\u8981\u5b57\u7b26\u4e32\u6587\u5b57\u7c7b\u578b\u3002</p> <p>\u5b57\u7b26\u4e32\u6587\u5b57\u7c7b\u578b\u5fc5\u987b\u7a0d\u540e\u5728\u540c\u4e00\u6a21\u5757\u4e2d\u5b9a\u4e49\uff08\u6216\u5bfc\u5165\uff09\u3002 \u5b83\u4eec\u4e0d\u80fd\u7528\u4e8e\u7559\u4e0b\u672a\u89e3\u51b3\u7684\u8de8\u6a21\u5757\u5f15\u7528\u3002(\u6709\u5173\u5904\u7406\u5bfc\u5165\u5468\u671f\uff0c\u8bf7\u53c2\u9605 <code>import-cycles</code>.)</p> <p>String literal types and type comments</p> <p>Mypy allows you to add type annotations using <code># type:</code> type comments. For example:</p> <pre><code>a = 1  # type: int\n\ndef f(x):  # type: (int) -&gt; int\n    return x + 1\n\n# Alternative type comment syntax for functions with many arguments\ndef send_email(\n    address,     # type: Union[str, List[str]]\n    sender,      # type: str\n    cc,          # type: Optional[List[str]]\n    subject='',\n    body=None    # type: List[str]\n):\n    # type: (...) -&gt; bool\n</code></pre> <p>Type comments can't cause runtime errors because comments are not evaluated by Python.</p> <p>In a similar way, using string literal types sidesteps the problem of annotations tha would cause runtime errors.</p> <p>Any type can be entered as a string literal, and you can combine string-literal types with non-string-literal types freely:</p> <pre><code>def f(a: list['A']) -&gt; None: ...  # OK, prevents NameError since A is defined later\ndef g(n: 'int') -&gt; None: ...      # Also OK, though not useful\n\nclass A: pass\n</code></pre> <p>String literal types are never needed in <code># type:</code> comments and <code>stub files</code>.</p> <p>String literal types must be defined (or imported) later in the same module. They cannot be used to leave cross-module references unresolved.  (For dealing with import cycles, see <code>import-cycles</code>.)</p> <p>(future-annotations)=</p>"},{"location":"mypy/annotation_issue_at_runtime/#future-\u6a21\u5757\u6ce8\u89e3\u5bfc\u5165-pep-563","title":"Future \u6a21\u5757\u6ce8\u89e3\u5bfc\u5165 (PEP 563)","text":"\u4e2d\u6587\u82f1\u6587 <p>\u8fd9\u91cc\u63cf\u8ff0\u7684\u8bb8\u591a\u95ee\u9898\u90fd\u662f\u7531 Python \u5c1d\u8bd5\u8bc4\u4f30\u6ce8\u91ca\u5f15\u8d77\u7684\u3002 \u672a\u6765\u7684 Python \u7248\u672c\uff08\u53ef\u80fd\u662f Python 3.12\uff09\u5c06\u9ed8\u8ba4\u4e0d\u518d\u5c1d\u8bd5\u8ba1\u7b97\u51fd\u6570\u548c\u53d8\u91cf\u6ce8\u91ca\u3002 Python 3.7 \u53ca\u66f4\u9ad8\u7248\u672c\u4e2d\u901a\u8fc7\u4f7f\u7528 <code>from __future__ import annotation</code>\u63d0\u4f9b\u4e86\u6b64\u884c\u4e3a\u3002</p> <p>\u8fd9\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u6240\u6709\u51fd\u6570\u548c\u53d8\u91cf\u6ce8\u91ca\u7684\u81ea\u52a8\u5b57\u7b26\u4e32\u6587\u5b57\u5316\u3002 \u8bf7\u6ce8\u610f\uff0c\u51fd\u6570\u548c\u53d8\u91cf\u6ce8\u91ca\u4ecd\u7136\u9700\u8981\u662f\u6709\u6548\u7684 Python \u8bed\u6cd5\u3002 \u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605<code>PEP 563</code>.</p> <p>Note</p> <p>\u5373\u4f7f\u4f7f\u7528 <code>__future__</code> \u5bfc\u5165\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u4ecd\u7136\u53ef\u80fd\u9700\u8981\u5b57\u7b26\u4e32\u6587\u5b57\u6216\u5bfc\u81f4\u9519\u8bef\uff0c\u901a\u5e38\u6d89\u53ca\u5728\u4ee5\u4e0b\u60c5\u51b5\u4e2d\u4f7f\u7528\u524d\u7f6e\u5f15\u7528\u6216\u6cdb\u578b\uff1a</p> <ul> <li><code>type aliases</code>;</li> <li><code>type narrowing</code>;</li> <li>\u7c7b\u578b\u5b9a\u4e49 (\u53c2\u8003 <code>typing.TypeVar</code>, <code>typing.NewType</code>, <code>typing.NamedTuple</code>);</li> <li>\u57fa\u7c7b.</li> </ul> <pre><code># \u57fa\u7c7b\u793a\u4f8b\nfrom __future__ import annotations\nclass A(tuple['B', 'C']): ... # \u8fd9\u91cc\u9700\u8981\u5b57\u7b26\u4e32\u6587\u5b57\u7c7b\u578b\nclass B: ...\nclass C: ...\n</code></pre> <p>Warning</p> <p>\u67d0\u4e9b\u5e93\u53ef\u80fd\u5177\u6709\u52a8\u6001\u8bc4\u4f30\u6ce8\u91ca\u7684\u7528\u4f8b\uff0c\u4f8b\u5982\u901a\u8fc7\u4f7f\u7528<code>typing.get_type_hints</code>\u6216<code>eval</code>\u3002 \u5982\u679c\u60a8\u7684\u6ce8\u91ca\u5728\u8bc4\u4f30\u65f6\u4f1a\u5f15\u53d1\u9519\u8bef\uff08\u4f8b\u5982\u4f7f\u7528 Python 3.9 \u7684 <code>PEP 604</code> \u8bed\u6cd5\uff09\uff0c\u5219\u5728\u4f7f\u7528\u6b64\u7c7b\u65f6\u53ef\u80fd\u9700\u8981\u5c0f\u5fc3\u8fd9\u6837\u7684\u5e93\u3002</p> <p>Future annotations import (PEP 563)</p> <p>Many of the issues described here are caused by Python trying to evaluate annotations. Future Python versions (potentially Python 3.12) will by default no longer attempt to evaluate function and variable annotations. This behaviour is made available in Python 3.7 and later through the use of <code>from __future__ import annotations</code>.</p> <p>This can be thought of as automatic string literal-ification of all function and variable annotations. Note that function and variable annotations are still required to be valid Python syntax. For more details, see <code>PEP 563</code>.</p> <p>Note</p> <p>Even with the <code>__future__</code> import, there are some scenarios that could still require string literals or result in errors, typically involving use of forward references or generics in:</p> <ul> <li><code>type aliases</code>;</li> <li><code>type narrowing</code>;</li> <li>type definitions (see <code>typing.TypeVar</code>, <code>typing.NewType</code>, <code>typing.NamedTuple</code>);</li> <li>base classes.</li> </ul> <pre><code># base class example\nfrom __future__ import annotations\nclass A(tuple['B', 'C']): ... # String literal types needed here\nclass B: ...\nclass C: ...\n</code></pre> <p>Warning</p> <p>Some libraries may have use cases for dynamic evaluation of annotations, for instance, through use of <code>typing.get_type_hints</code> or <code>eval</code>. If your annotation would raise an error when evaluated (say by using <code>PEP 604</code> syntax with Python 3.9), you may need to be careful when using such libraries.</p>"},{"location":"mypy/annotation_issue_at_runtime/#typingtype_checking-\u53d8\u91cf","title":"typing.TYPE_CHECKING \u53d8\u91cf","text":"\u4e2d\u6587\u82f1\u6587 <p><code>typing</code> \u6a21\u5757\u5b9a\u4e49\u4e86\u4e00\u4e2a <code>typing.TYPE_CHECKING</code> \u5e38\u91cf\u5728\u8fd0\u884c\u65f6\u4e3a <code>False</code>\uff0c\u4f46\u5728\u7c7b\u578b\u68c0\u67e5\u65f6\u88ab\u89c6\u4e3a <code>True</code>\u3002</p> <p>\u5728 <code>if TYPE_CHECKING</code> \u4ee3\u7801\u7684\u5185\u90e8: \u4ee3\u7801\u4e0d\u4f1a\u5728\u8fd0\u884c\u65f6\u6267\u884c\uff0c\u56e0\u6b64\u5b83\u63d0\u4f9b\u4e86\u4e00\u79cd\u65b9\u4fbf\u7684\u65b9\u6cd5\u6765\u544a\u8bc9 mypy \u67d0\u4e9b\u5185\u5bb9\uff0c\u800c\u65e0\u9700\u5728\u8fd0\u884c\u65f6\u8bc4\u4f30\u4ee3\u7801\u3002 \u8fd9\u5bf9\u4e8e\u89e3\u51b3\u5faa\u73af\u5bfc\u5165\u6700\u6709\u7528\u3002</p> <p>typing.TYPE_CHECKING</p> <p>The <code>typing</code> module defines a <code>typing.TYPE_CHECKING</code> constant that is <code>False</code> at runtime but treated as <code>True</code> while type checking.</p> <p>Since code inside <code>if TYPE_CHECKING:</code> is not executed at runtime, it provides a convenient way to tell mypy something without the code being evaluated at runtime. This is most useful for resolving <code>import cycles</code>.</p>"},{"location":"mypy/annotation_issue_at_runtime/#\u7c7b\u540d\u524d\u7f6e\u5f15\u7528","title":"\u7c7b\u540d\u524d\u7f6e\u5f15\u7528","text":"\u4e2d\u6587\u82f1\u6587 <p>Python \u4e0d\u5141\u8bb8\u5728\u5b9a\u4e49\u7c7b\u4e4b\u524d\u5f15\u7528\u7c7b\u5bf9\u8c61\uff08\u4e5f\u79f0\u4e3a\u524d\u5411\u5f15\u7528\uff09\u3002 \u56e0\u6b64\u8fd9\u6bb5\u4ee3\u7801\u4e0d\u80fd\u6309\u9884\u671f\u5de5\u4f5c\uff1a</p> <pre><code>def f(x: A) -&gt; None: ...  # NameError: name \"A\" is not defined\nclass A: ...\n</code></pre> <p>\u4ece Python 3.7 \u5f00\u59cb\uff0c\u60a8\u53ef\u4ee5\u6dfb\u52a0 <code>from __future__ import annotations</code> \u6765\u89e3\u51b3\u6b64\u95ee\u9898\uff0c\u5982\u524d\u6240\u8ff0\uff1a</p> <pre><code>from __future__ import annotations\n\ndef f(x: A) -&gt; None: ...  # OK\nclass A: ...\n</code></pre> <p>\u5bf9\u4e8e Python 3.6 \u53ca\u66f4\u4f4e\u7248\u672c\uff0c\u60a8\u53ef\u4ee5\u5c06\u7c7b\u578b\u8f93\u5165\u4e3a\u5b57\u7b26\u4e32\u6587\u5b57\u6216\u7c7b\u578b\u6ce8\u91ca\uff1a</p> <pre><code>def f(x: 'A') -&gt; None: ...  # OK\n\n# Also OK\ndef g(x):  # type: (A) -&gt; None\n    ...\n\nclass A: ...\n</code></pre> <p>\u5f53\u7136\uff0c\u60a8\u53ef\u4ee5\u5c06\u51fd\u6570\u5b9a\u4e49\u79fb\u5230\u7c7b\u5b9a\u4e49\u4e4b\u540e\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u5c06\u6765\u7684\u6ce8\u91ca\u5bfc\u5165\u6216\u5b57\u7b26\u4e32\u6587\u5b57\u7c7b\u578b\u3002 \u4f46\u8fd9\u5e76\u4e0d\u603b\u662f\u53ef\u53d6\u7684\uff0c\u751a\u81f3\u662f\u4e0d\u53ef\u80fd\u7684\u3002</p> <p>Class name forward references</p> <p>Python does not allow references to a class object before the class is defined (aka forward reference). Thus this code does not work as expected:</p> <pre><code>def f(x: A) -&gt; None: ...  # NameError: name \"A\" is not defined\nclass A: ...\n</code></pre> <p>Starting from Python 3.7, you can add <code>from __future__ import annotations</code> to resolve this, as discussed earlier:</p> <pre><code>from __future__ import annotations\n\ndef f(x: A) -&gt; None: ...  # OK\nclass A: ...\n</code></pre> <p>For Python 3.6 and below, you can enter the type as a string literal or type comment:</p> <pre><code>def f(x: 'A') -&gt; None: ...  # OK\n\n# Also OK\ndef g(x):  # type: (A) -&gt; None\n    ...\n\nclass A: ...\n</code></pre> <p>Of course, instead of using future annotations import or string literal types, you could move the function definition after the class definition. This is not always desirable or even possible, though.</p>"},{"location":"mypy/annotation_issue_at_runtime/#\u5faa\u73af\u5bfc\u5165","title":"\u5faa\u73af\u5bfc\u5165","text":"\u4e2d\u6587\u82f1\u6587 <p>\u5f53\u6a21\u5757 A \u5bfc\u5165\u6a21\u5757 B \u5e76\u4e14\u6a21\u5757 B \u5bfc\u5165\u6a21\u5757 A\uff08\u53ef\u80fd\u662f\u95f4\u63a5\u7684\uff0c\u4f8b\u5982 <code>A -&gt; B -&gt; C -&gt; A</code>\uff09\u65f6\uff0c\u4f1a\u53d1\u751f\u5bfc\u5165\u5faa\u73af\u3002 \u6709\u65f6\uff0c\u4e3a\u4e86\u6dfb\u52a0\u7c7b\u578b\u6ce8\u91ca\uff0c\u60a8\u5fc5\u987b\u5411\u6a21\u5757\u6dfb\u52a0\u989d\u5916\u7684\u5bfc\u5165\uff0c\u800c\u8fd9\u4e9b\u5bfc\u5165\u4f1a\u5bfc\u81f4\u4ee5\u524d\u4e0d\u5b58\u5728\u7684\u5faa\u73af\u3002 \u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u8fd0\u884c\u65f6\u51fa\u73b0\u9519\u8bef\uff0c\u4f8b\u5982\uff1a</p> <pre><code>ImportError: cannot import name 'b' from partially initialized module 'A' (most likely due to a circular import)\n</code></pre> <p>\u5982\u679c\u8fd9\u4e9b\u5faa\u73af\u5728\u8fd0\u884c\u7a0b\u5e8f\u65f6\u786e\u5b9e\u6210\u4e3a\u95ee\u9898\uff0c\u90a3\u4e48\u6709\u4e00\u4e2a\u6280\u5de7\uff1a\u5982\u679c\u4ec5\u7c7b\u578b\u6ce8\u91ca\u9700\u8981\u5bfc\u5165\u5e76\u4e14\u60a8\u6b63\u5728\u4f7f\u7528 a) <code>future comments import</code>\uff0c\u6216 b) \u76f8\u5173\u6ce8\u91ca\u7684\u5b57\u7b26\u4e32\u6587\u5b57\u6216\u7c7b\u578b\u6ce8\u91ca\uff0c\u60a8\u53ef\u4ee5\u5c06\u5bfc\u5165\u5199\u5165 <code>if TYPE_CHECKING:</code> \u4e2d\uff0c\u8fd9\u6837\u5b83\u4eec\u5c31\u4e0d\u4f1a\u5728\u8fd0\u884c\u65f6\u6267\u884c\u3002 \u4f8b\u5b50\uff1a</p> <p>\u6587\u4ef6 <code>foo.py</code>:</p> <pre><code>from typing import TYPE_CHECKING\n\nif TYPE_CHECKING:\n    import bar\n\ndef listify(arg: 'bar.BarClass') -&gt; 'list[bar.BarClass]':\n    return [arg]\n</code></pre> <p>\u6587\u4ef6 <code>bar.py</code>:</p> <pre><code>from foo import listify\n\nclass BarClass:\n    def listifyme(self) -&gt; 'list[BarClass]':\n        return listify(self)\n</code></pre> <p>Import cycles</p> <p>An import cycle occurs where module A imports module B and module B imports module A (perhaps indirectly, e.g. <code>A -&gt; B -&gt; C -&gt; A</code>). Sometimes in order to add type annotations you have to add extra imports to a module and those imports cause cycles that didn't exist before. This can lead to errors at runtime like:</p> <pre><code>ImportError: cannot import name 'b' from partially initialized module 'A' (most likely due to a circular import)\n</code></pre> <p>If those cycles do become a problem when running your program, there's a trick: if the import is only needed for type annotations and you're using a) the <code>future annotations import</code>, or b) string literals or type comments for the relevant annotations, you can write the imports inside <code>if TYPE_CHECKING:</code> so that they are not executed at runtime. Example:</p> <p>File <code>foo.py</code>:</p> <pre><code>from typing import TYPE_CHECKING\n\nif TYPE_CHECKING:\n    import bar\n\ndef listify(arg: 'bar.BarClass') -&gt; 'list[bar.BarClass]':\n    return [arg]\n</code></pre> <p>File <code>bar.py</code>:</p> <pre><code>from foo import listify\n\nclass BarClass:\n    def listifyme(self) -&gt; 'list[BarClass]':\n        return listify(self)\n</code></pre>"},{"location":"mypy/annotation_issue_at_runtime/#\u4f7f\u7528\u5b58\u6839\u4e2d\u7684\u6cdb\u578b\u7c7b\u4f46\u8fd0\u884c\u65f6\u4e0d\u7528","title":"\u4f7f\u7528\u5b58\u6839\u4e2d\u7684\u6cdb\u578b\u7c7b\uff0c\u4f46\u8fd0\u884c\u65f6\u4e0d\u7528","text":"\u4e2d\u6587\u82f1\u6587 <p>\u6709\u4e9b\u7c7b\u5728\u5b58\u6839\u4e2d\u58f0\u660e\u4e3a <code>generic</code>\uff0c\u4f46\u4e0d\u662f\u5728\u8fd0\u884c\u65f6\u58f0\u660e\u3002</p> <p>\u5728 Python 3.8 \u53ca\u66f4\u65e9\u7248\u672c\u4e2d\uff0c\u6807\u51c6\u5e93\u4e2d\u6709\u51e0\u4e2a\u793a\u4f8b\uff0c\u4f8b\u5982 <code>os.PathLike</code> \u548c  <code>queue.Queue</code>\u3002 \u4e3a\u8fd9\u6837\u7684\u7c7b\u6dfb\u52a0\u4e0b\u6807\u5c06\u5bfc\u81f4\u8fd0\u884c\u65f6\u9519\u8bef\uff1a</p> <pre><code>from queue import Queue\n\nclass Tasks(Queue[str]):  # TypeError: 'type' object is not subscriptable\n    ...\n\nresults: Queue[int] = Queue()  # TypeError: 'type' object is not subscriptable\n</code></pre> <p>\u4e3a\u4e86\u907f\u514d\u5728\u6ce8\u91ca\u4e2d\u4f7f\u7528\u8fd9\u4e9b\u6cdb\u578b\u800c\u4ea7\u751f\u9519\u8bef\uff0c\u53ea\u9700\u4f7f\u7528 <code>future comments import</code> \uff08\u6216\u5b57\u7b26\u4e32\u6587\u5b57\u6216\u7c7b\u578b Python 3.6 \u53ca\u4ee5\u4e0b\u7248\u672c\u7684\u6ce8\u91ca\uff09\u3002</p> <p>\u4e3a\u4e86\u907f\u514d\u4ece\u8fd9\u4e9b\u7c7b\u7ee7\u627f\u65f6\u51fa\u73b0\u9519\u8bef\uff0c\u4e8b\u60c5\u4f1a\u7a0d\u5fae\u590d\u6742\u4e00\u4e9b\uff0c\u60a8\u9700\u8981\u4f7f\u7528 [<code>typing.TYPE_CHECKING</code>](https://mypy.readthedocs.io/en/latest/runtime_troubles.html#typing-type- \u68c0\u67e5\uff09\uff1a</p> <pre><code>from typing import TYPE_CHECKING\nfrom queue import Queue\n\nif TYPE_CHECKING:\n    BaseQueue = Queue[str]  # this is only processed by mypy\nelse:\n    BaseQueue = Queue  # this is not seen by mypy but will be executed at runtime\n\nclass Tasks(BaseQueue):  # OK\n    ...\n\ntask_queue: Tasks\nreveal_type(task_queue.get())  # Reveals str\n</code></pre> <p>\u5982\u679c\u60a8\u7684\u5b50\u7c7b\u4e5f\u662f\u901a\u7528\u7684\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u5185\u5bb9\uff1a</p> <pre><code>from typing import TYPE_CHECKING, TypeVar, Generic\nfrom queue import Queue\n\n_T = TypeVar(\"_T\")\nif TYPE_CHECKING:\n    class _MyQueueBase(Queue[_T]): pass\nelse:\n    class _MyQueueBase(Generic[_T], Queue): pass\n\nclass MyQueue(_MyQueueBase[_T]): pass\n\ntask_queue: MyQueue[str]\nreveal_type(task_queue.get())  # Reveals str\n</code></pre> <p>\u5728Python 3.9\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7ee7\u627f<code>Queue[str]</code>\u6216<code>Queue[T]</code>\uff0c\u56e0\u4e3a\u5b83\u7684[<code>queue.Queue</code>](https://docs.python.org/3/library/queue.html#queue.Queue \u5b9e\u73b0\u4e86 <code>__class_getitem__</code>\uff0c\u56e0\u6b64\u7c7b\u5bf9\u8c61\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u4f7f\u7528\u4e0b\u6807\u800c\u4e0d\u4f1a\u51fa\u73b0\u95ee\u9898\u3002</p> <p>Using classes that are generic in stubs but not at runtime</p> <p>Some classes are declared as <code>generic</code> in stubs, but not at runtime.</p> <p>In Python 3.8 and earlier, there are several examples within the standard library, for instance, <code>os.PathLike</code> and <code>queue.Queue</code>. Subscripting such a class will result in a runtime error:</p> <pre><code>from queue import Queue\n\nclass Tasks(Queue[str]):  # TypeError: 'type' object is not subscriptable\n    ...\n\nresults: Queue[int] = Queue()  # TypeError: 'type' object is not subscriptable\n</code></pre> <p>To avoid errors from use of these generics in annotations, just use the <code>future annotations import</code> (or string literals or type comments for Python 3.6 and below).</p> <p>To avoid errors when inheriting from these classes, things are a little more complicated and you need to use <code>typing.TYPE_CHECKING</code>:</p> <pre><code>from typing import TYPE_CHECKING\nfrom queue import Queue\n\nif TYPE_CHECKING:\n    BaseQueue = Queue[str]  # this is only processed by mypy\nelse:\n    BaseQueue = Queue  # this is not seen by mypy but will be executed at runtime\n\nclass Tasks(BaseQueue):  # OK\n    ...\n\ntask_queue: Tasks\nreveal_type(task_queue.get())  # Reveals str\n</code></pre> <p>If your subclass is also generic, you can use the following:</p> <pre><code>from typing import TYPE_CHECKING, TypeVar, Generic\nfrom queue import Queue\n\n_T = TypeVar(\"_T\")\nif TYPE_CHECKING:\n    class _MyQueueBase(Queue[_T]): pass\nelse:\n    class _MyQueueBase(Generic[_T], Queue): pass\n\nclass MyQueue(_MyQueueBase[_T]): pass\n\ntask_queue: MyQueue[str]\nreveal_type(task_queue.get())  # Reveals str\n</code></pre> <p>In Python 3.9, we can just inherit directly from <code>Queue[str]</code> or <code>Queue[T]</code> since its [<code>queue.Queue</code>](https://docs.python.org/3/library/queue.html#queue.Queue implements {py:meth}<code>__class_getitem__</code>, so the class object can be subscripted at runtime without issue.</p>"},{"location":"mypy/annotation_issue_at_runtime/#\u4f7f\u7528\u5b58\u6839\u4e2d\u5b9a\u4e49\u7684\u7c7b\u578b\u4f46\u4e0d\u5728\u8fd0\u884c\u65f6\u4f7f\u7528","title":"\u4f7f\u7528\u5b58\u6839\u4e2d\u5b9a\u4e49\u7684\u7c7b\u578b\uff0c\u4f46\u4e0d\u5728\u8fd0\u884c\u65f6\u4f7f\u7528","text":"\u4e2d\u6587\u82f1\u6587 <p>\u6709\u65f6\uff0c\u60a8\u6b63\u5728\u4f7f\u7528\u7684\u5b58\u6839\u53ef\u80fd\u4f1a\u5b9a\u4e49\u60a8\u5e0c\u671b\u91cd\u7528\u7684\u7c7b\u578b\uff0c\u4f46\u8fd9\u4e9b\u7c7b\u578b\u5728\u8fd0\u884c\u65f6\u5e76\u4e0d\u5b58\u5728\u3002 \u5929\u771f\u5730\u5bfc\u5165\u8fd9\u4e9b\u7c7b\u578b\u5c06\u5bfc\u81f4\u60a8\u7684\u4ee3\u7801\u5728\u8fd0\u884c\u65f6\u5931\u8d25\uff0c\u5e76\u51fa\u73b0\u201cImportError\u201d\u6216\u201cModuleNotFoundError\u201d\u3002 \u4e0e\u524d\u9762\u7684\u90e8\u5206\u7c7b\u4f3c\uff0c\u8fd9\u4e9b\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 <code>typing.TYPE_CHECKING</code> \u6765\u5904\u7406\uff1a</p> <pre><code>from __future__ import annotations\nfrom typing import TYPE_CHECKING\nif TYPE_CHECKING:\n    from _typeshed import SupportsRichComparison\n\ndef f(x: SupportsRichComparison) -&gt; None\n</code></pre> <p>\u4f7f\u7528\u5bfc\u5165\u7b26\u53f7\u65f6\u9700\u8981\u4f7f\u7528 \u201cfrom future import annotations\u201d \u4ee5\u907f\u514d\u51fa\u73b0 \u201cNameError\u201d\u3002 \u6709\u5173\u66f4\u591a\u4fe1\u606f\u548c\u6ce8\u610f\u4e8b\u9879\uff0c\u8bf7\u53c2\u9605\u6709\u5173<code>future annotations</code>\u7684\u90e8\u5206\u3002</p> <p>Using types defined in stubs but not at runtime</p> <p>Sometimes stubs that you're using may define types you wish to re-use that do not exist at runtime. Importing these types naively will cause your code to fail at runtime with <code>ImportError</code> or <code>ModuleNotFoundError</code>. Similar to previous sections, these can be dealt with by using <code>typing.TYPE_CHECKING</code>:</p> <pre><code>from __future__ import annotations\nfrom typing import TYPE_CHECKING\nif TYPE_CHECKING:\n    from _typeshed import SupportsRichComparison\n\ndef f(x: SupportsRichComparison) -&gt; None\n</code></pre> <p>The <code>from __future__ import annotations</code> is required to avoid a <code>NameError</code> when using the imported symbol. For more information and caveats, see the section on <code>future annotations</code>.</p>"},{"location":"mypy/annotation_issue_at_runtime/#\u4f7f\u7528\u5185\u7f6e\u7684\u6cdb\u578b","title":"\u4f7f\u7528\u5185\u7f6e\u7684\u6cdb\u578b","text":"\u4e2d\u6587\u82f1\u6587 <p>\u4ecePython 3.9\uff08<code>585</code>\uff09\u5f00\u59cb\uff0c\u6807\u51c6\u5e93\u4e2d\u8bb8\u591a\u96c6\u5408\u7684\u7c7b\u578b\u5bf9\u8c61\u652f\u6301\u8fd0\u884c\u65f6\u8ba2\u9605\u3002 \u8fd9\u610f\u5473\u7740\u60a8\u4e0d\u518d\u9700\u8981\u4ece <code>typing</code> \u5bfc\u5165\u7b49\u6548\u9879\uff1b \u60a8\u53ef\u4ee5\u7b80\u5355\u5730\u4f7f\u7528\u5185\u7f6e\u96c6\u5408\u6216\u6765\u81ea <code>collections.abc</code> \u7684\u96c6\u5408\uff1a</p> <pre><code>from collections.abc import Sequence\nx: list[str]\ny: dict[int, str]\nz: Sequence[str] = x\n</code></pre> <p>Python 3.7 \u53ca\u66f4\u9ad8\u7248\u672c\u4e2d\u5bf9\u4f7f\u7528\u6b64\u8bed\u6cd5\u7684\u652f\u6301\u4e5f\u5f88\u6709\u9650\uff1a\u5982\u679c\u60a8\u4f7f\u7528 \u201cfrom future import annotations\u201d\uff0cmypy \u5c06\u5728\u6ce8\u91ca\u4e2d\u7406\u89e3\u6b64\u8bed\u6cd5\u3002 \u4f46\u662f\uff0c\u7531\u4e8e Python \u89e3\u91ca\u5668\u5728\u8fd0\u884c\u65f6\u4e0d\u652f\u6301\u6b64\u529f\u80fd\uff0c\u56e0\u6b64\u8bf7\u786e\u4fdd\u60a8\u4e86\u89e3 <code>future comments import</code> \u6ce8\u91ca\u4e2d\u63d0\u5230\u7684\u6ce8\u610f\u4e8b\u9879 en/latest/runtime_troubles.html#future-annotations\uff09\u3002</p> <p>Using generic builtins</p> <p>Starting with Python 3.9 (<code>585</code>), the type objects of many collections in the standard library support subscription at runtime. This means that you no longer have to import the equivalents from <code>typing</code>; you can simply use the built-in collections or those from <code>collections.abc</code>:</p> <pre><code>from collections.abc import Sequence\nx: list[str]\ny: dict[int, str]\nz: Sequence[str] = x\n</code></pre> <p>There is limited support for using this syntax in Python 3.7 and later as well: if you use <code>from __future__ import annotations</code>, mypy will understand this syntax in annotations. However, since this will not be supported by the Python interpreter at runtime, make sure you're aware of the caveats mentioned in the notes at {ref} <code>future annotations import</code>.</p>"},{"location":"mypy/annotation_issue_at_runtime/#\u4f7f\u7528union\u7684-x--y-\u8bed\u6cd5","title":"\u4f7f\u7528Union\u7684 X | Y \u8bed\u6cd5","text":"\u4e2d\u6587\u82f1\u6587 <p>\u4ece Python 3.10 <code>PEP 604</code> \u5f00\u59cb\uff0c\u60a8\u53ef\u4ee5\u5c06\u8054\u5408\u7c7b\u578b\u62fc\u5199\u4e3a <code>x: int | str</code>\uff0c\u800c\u4e0d\u662f<code>x:typing.Union[int, str]</code>\u3002</p> <p>Python 3.7 \u53ca\u66f4\u9ad8\u7248\u672c\u4e2d\u5bf9\u4f7f\u7528\u6b64\u8bed\u6cd5\u7684\u652f\u6301\u4e5f\u5f88\u6709\u9650\uff1a\u5982\u679c\u60a8\u4f7f\u7528\u201cfrom future import annotations\u201d\uff0cmypy \u5c06\u5728\u6ce8\u91ca\u3001\u5b57\u7b26\u4e32\u6587\u5b57\u7c7b\u578b\u3001\u7c7b\u578b\u6ce8\u91ca\u548c\u5b58\u6839\u6587\u4ef6\u4e2d\u7406\u89e3\u6b64\u8bed\u6cd5\u3002 \u4f46\u662f\uff0c\u7531\u4e8e Python \u89e3\u91ca\u5668\u5728\u8fd0\u884c\u65f6\u4e0d\u652f\u6301\u8fd9\u4e00\u70b9\uff08\u5982\u679c\u8ba1\u7b97\uff0c<code>int | str</code> \u5c06\u5f15\u53d1 <code>TypeError: unsupported operand type(s) for |: 'type' and 'type'</code>\uff09\uff0c\u8bf7\u786e\u4fdd \u4e86\u89e3 <code>future \u6ce8\u91ca import&lt;future-annotations&gt;</code> \u7684\u6ce8\u91ca\u4e2d\u63d0\u5230\u7684\u8b66\u544a\u3002</p> <p>Using X | Y syntax for Unions</p> <p>Starting with Python 3.10 <code>PEP 604</code>, you can spell union types as <code>x: int | str</code>, instead of <code>x: typing.Union[int, str]</code>.</p> <p>There is limited support for using this syntax in Python 3.7 and later as well: if you use <code>from __future__ import annotations</code>, mypy will understand this syntax in annotations, string literal types, type comments and stub files. However, since this will not be supported by the Python interpreter at runtime (if evaluated, <code>int | str</code> will raise <code>TypeError: unsupported operand type(s) for |: 'type' and 'type'</code>), make sure you're aware of the caveats mentioned in the notes at <code>future annotations import&lt;future-annotations&gt;</code>.</p>"},{"location":"mypy/annotation_issue_at_runtime/#\u4f7f\u7528typing\u6a21\u5757\u7684\u65b0\u529f\u80fd","title":"\u4f7f\u7528typing\u6a21\u5757\u7684\u65b0\u529f\u80fd","text":"\u4e2d\u6587\u82f1\u6587 <p>\u60a8\u53ef\u80fd\u4f1a\u53d1\u73b0\u81ea\u5df1\u60f3\u8981\u4f7f\u7528\u65e9\u671f\u7248\u672c\u7684 Python \u4e2d\u6dfb\u52a0\u5230 <code>typing</code> \u6a21\u5757\u7684\u529f\u80fd\uff0c\u4f8b\u5982\uff0c\u5728 Python 3.6 \u4e2d\u4f7f\u7528 <code>Literal</code>\u3001<code>Protocol</code>\u3001<code>TypedDict</code> \u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u3002</p> <p>\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u5b89\u88c5\u5e76\u4f7f\u7528 PyPI \u4e2d\u7684 typing_extensions \u5305\u8fdb\u884c\u76f8\u5173\u5bfc\u5165\uff0c\u4f8b\u5982\uff1a</p> <pre><code>from typing_extensions import Literal\nx: Literal[\"open\", \"close\"]\n</code></pre> <p>\u5982\u679c\u60a8\u4e0d\u60f3\u4f9d\u8d56\u5728\u8f83\u65b0\u7684 Python \u4e0a\u5b89\u88c5\u7684 <code>typing_extensions</code>\uff0c\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528\uff1a</p> <pre><code>import sys\nif sys.version_info &gt;= (3, 8):\n    from typing import Literal\nelse:\n    from typing_extensions import Literal\n\nx: Literal[\"open\", \"close\"]\n</code></pre> <p>\u8fd9\u4e0e\u4ee5\u4e0b <code>PEP 508</code> \u4f9d\u8d56\u9879\u89c4\u8303\u914d\u5408\u5f97\u5f88\u597d\uff1a<code>typing_extensions; python_version &lt;\u201c3.8\u201d</code></p> <p>Using new additions to the typing module</p> <p>You may find yourself wanting to use features added to the {py:mod}<code>typing</code> module in earlier versions of Python than the addition, for example, using any of <code>Literal</code>, <code>Protocol</code>, <code>TypedDict</code> with Python 3.6.</p> <p>The easiest way to do this is to install and use the <code>typing_extensions</code> package from PyPI for the relevant imports, for example:</p> <pre><code>from typing_extensions import Literal\nx: Literal[\"open\", \"close\"]\n</code></pre> <p>If you don't want to rely on <code>typing_extensions</code> being installed on newer Pythons, you could alternatively use:</p> <pre><code>import sys\nif sys.version_info &gt;= (3, 8):\n    from typing import Literal\nelse:\n    from typing_extensions import Literal\n\nx: Literal[\"open\", \"close\"]\n</code></pre> <p>This plays nicely well with following <code>PEP 508</code> dependency specification: <code>typing_extensions; python_version&lt;\"3.8\"</code></p>"},{"location":"mypy/builtin_types/","title":"\u5185\u7f6e\u7c7b\u578b","text":"\u4e2d\u6587\u82f1\u6587 <p>\u672c\u7ae0\u4ecb\u7ecd\u4e00\u4e9b\u5e38\u7528\u7684\u5185\u7f6e\u7c7b\u578b\u3002 \u7a0d\u540e\u6211\u4eec\u5c06\u4ecb\u7ecd\u8bb8\u591a\u5176\u4ed6\u7c7b\u578b\u3002</p> <p>Built-in types</p> <p>This chapter introduces some commonly used built-in types. We will cover many other kinds of types later.</p>"},{"location":"mypy/builtin_types/#\u7b80\u5355\u7c7b\u578b","title":"\u7b80\u5355\u7c7b\u578b","text":"\u4e2d\u6587\u82f1\u6587 <p>\u4ee5\u4e0b\u662f\u4e00\u4e9b\u5e38\u89c1\u5185\u7f6e\u7c7b\u578b\u7684\u793a\u4f8b\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>int</code> \u6574\u6570 <code>float</code> \u6d6e\u70b9\u6570 <code>bool</code> \u5e03\u5c14\u503c\uff08<code>int</code>\u7684\u5b50\u7c7b\uff09 <code>str</code> \u6587\u672c\uff0cunicode \u4ee3\u7801\u70b9\u5e8f\u5217 <code>bytes</code> 8 \u4f4d\u5b57\u7b26\u4e32\uff0c\u5b57\u8282\u503c\u5e8f\u5217 <code>object</code> \u4efb\u610f\u5bf9\u8c61\uff08object\u662f\u516c\u5171\u57fa\u7c7b\uff09 <p>\u6240\u6709\u5185\u7f6e\u7c7b\u90fd\u53ef\u4ee5\u7528\u4f5c\u7c7b\u578b\u3002</p> <p>Simple types</p> <p>Here are examples of some common built-in types:</p> Type Description <code>int</code> integer <code>float</code> floating point number <code>bool</code> boolean value (subclass of <code>int</code>) <code>str</code> text, sequence of unicode codepoints <code>bytes</code> 8-bit string, sequence of byte values <code>object</code> an arbitrary object (object is the common base class) <p>All built-in classes can be used as types.</p> Type Description aaa bbb aaa bbb aaa bbb aaa bbb aaa bbb"},{"location":"mypy/builtin_types/#any-type","title":"Any type","text":"\u4e2d\u6587\u82f1\u6587 <p>\u5982\u679c\u4f60\u627e\u4e0d\u5230\u67d0\u4e2a\u503c\u7684\u5408\u9002\u7c7b\u578b\uff0c\u4f60\u53ef\u4ee5\u968f\u65f6\u56de\u9000\u5230 Any\uff1a</p> Type Description <code>Any</code> \u4efb\u610f\u7c7b\u578b\u7684\u52a8\u6001\u7c7b\u578b\u503c <p>Any \u7c7b\u578b\u5728 typing \u6a21\u5757\u4e2d\u5b9a\u4e49\u3002 \u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u52a8\u6001\u7c7b\u578b\u4ee3\u7801\u3002</p> <p>Any type</p> <p>If you can\u2019t find a good type for some value, you can always fall back to Any:</p> Type Description <code>Any</code> dynamically typed value with an arbitrary type <p>The type Any is defined in the typing module. See Dynamically typed code for more details.</p>"},{"location":"mypy/builtin_types/#\u8303\u578b\u7c7b\u578b","title":"\u8303\u578b\u7c7b\u578b","text":"\u4e2d\u6587\u82f1\u6587 <p>\u5728Python 3.9\u53ca\u66f4\u9ad8\u7248\u672c\u4e2d\uff0c\u5185\u7f6e\u96c6\u5408\u7c7b\u578b\u5bf9\u8c61\u652f\u6301\u7d22\u5f15\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>list[str]</code> <code>str</code> \u5bf9\u8c61\u5217\u8868 <code>tuple[int, int]</code> \u4e24\u4e2a <code>int</code> \u5bf9\u8c61\u7684\u5143\u7ec4\uff08<code>tuple[()]</code> \u662f\u7a7a\u5143\u7ec4\uff09 <code>tuple[int, ...]</code> \u4efb\u610f\u6570\u91cf\u7684 <code>int</code> \u5bf9\u8c61\u7684\u5143\u7ec4 <code>dict[str, int]</code> \u5b57\u5178\u4ece str \u952e\u5230 <code>int</code> \u503c <code>Iterable[int]</code> \u5305\u542b\u6574\u6570\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61 <code>Sequence[bool]</code> \u5e03\u5c14\u503c\u5e8f\u5217\uff08\u53ea\u8bfb\uff09 <code>Mapping[str, int]</code> \u4ece str \u952e\u5230 int \u503c\u7684\u6620\u5c04\uff08\u53ea\u8bfb\uff09 <code>type[C]</code> <code>C</code> \u7684\u7c7b\u578b\u5bf9\u8c61\uff08<code>C</code> \u662f\u7c7b/\u7c7b\u578b\u53d8\u91cf/\u7c7b\u578b\u8054\u5408\uff09 <p>\u7c7b\u578b <code>dict</code> \u662f\u4e00\u4e2a\u6cdb\u578b\u7c7b\uff0c\u7531 <code>[...]</code> \u4e2d\u7684\u7c7b\u578b\u53c2\u6570\u8868\u793a\u3002 \u4f8b\u5982\uff0c<code>dict[int, str]</code> \u662f\u4ece\u6574\u6570\u5230\u5b57\u7b26\u4e32\u7684\u5b57\u5178\uff0c<code>dict[Any, Any]</code> \u662f\u52a8\u6001\u7c7b\u578b\uff08\u4efb\u610f\uff09\u503c\u548c\u952e\u7684\u5b57\u5178\u3002 <code>list</code> \u662f\u53e6\u4e00\u4e2a\u6cdb\u578b\u7c7b\u3002</p> <p><code>Iterable</code>\u3001<code>Sequence</code> \u548c <code>Mapping</code> \u662f\u4e0e Python \u534f\u8bae\u76f8\u5bf9\u5e94\u7684\u6cdb\u578b\u7c7b\u578b\u3002 \u4f8b\u5982\uff0c\u5f53\u9700\u8981<code>Iterable[str]</code>\u6216<code>Sequence[str]</code>\u65f6\uff0c<code>str</code>\u5bf9\u8c61\u6216<code>list[str]</code>\u5bf9\u8c61\u662f\u6709\u6548\u7684\u3002 \u60a8\u53ef\u4ee5\u4ece <code>collections.abc</code> \u5bfc\u5165\uff0c\u800c\u4e0d\u662f\u4ece Python 3.9 \u4e2d\u7684 <code>typing</code>\u5bfc\u5165\u5b83\u4eec\u3002</p> <p>\u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 <code>generic-builtins</code>\uff0c\u5305\u62ec\u5982\u4f55\u5728 Python 3.7 \u548c 3.8 \u4e2d\u7684\u6ce8\u91ca\u4e2d\u4f7f\u7528\u5b83\u4eec\u3002</p> <p>\u5982\u679c\u60a8\u9700\u8981\u652f\u6301 Python 3.8 \u53ca\u66f4\u65e9\u7248\u672c\uff0c\u5219\u9700\u8981 <code>typing</code> \u4e2d\u5b9a\u4e49\u7684\u8fd9\u4e9b\u65e7\u7c7b\u578b\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>List[str]</code> <code>str</code> \u5bf9\u8c61\u5217\u8868 <code>Tuple[int, int]</code> \u4e24\u4e2a <code>int</code> \u5bf9\u8c61\u7684\u5143\u7ec4\uff08<code>tuple[()]</code> \u662f\u7a7a\u5143\u7ec4\uff09 <code>Tuple[int, ...]</code> \u4efb\u610f\u6570\u91cf\u7684 <code>int</code> \u5bf9\u8c61\u7684\u5143\u7ec4 <code>Dict[str, int]</code> \u5b57\u5178\u4ece str \u952e\u5230 <code>int</code> \u503c <code>Iterable[int]</code> \u5305\u542b\u6574\u6570\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61 <code>Sequence[bool]</code> \u5e03\u5c14\u503c\u5e8f\u5217\uff08\u53ea\u8bfb\uff09 <code>Mapping[str, int]</code> \u4ece str \u952e\u5230 int \u503c\u7684\u6620\u5c04\uff08\u53ea\u8bfb\uff09 <code>Type[C]</code> <code>C</code> \u7684\u7c7b\u578b\u5bf9\u8c61\uff08<code>C</code> \u662f\u7c7b/\u7c7b\u578b\u53d8\u91cf/\u7c7b\u578b\u8054\u5408\uff09 <p><code>List</code> \u662f\u652f\u6301\u7d22\u5f15\u7684\u5185\u7f6e\u7c7b\u578b <code>list</code> \u7684\u522b\u540d (<code>dict</code>/<code>Dict</code> \u548c <code>tuple</code>/<code>Tuple</code> \u4e5f\u90fd\u662f\u7c7b\u4f3c\u7684).</p> <p>\u8bf7\u6ce8\u610f\uff0c\u5c3d\u7ba1 <code>Iterable</code>\u3001<code>Sequence</code> \u548c <code>Mapping</code> \u770b\u8d77\u6765\u4e0e <code>collections.abc</code>\uff08\u4ee5\u524d\u7684 <code>collections</code>\uff09\u4e2d\u5b9a\u4e49\u7684\u62bd\u8c61\u57fa\u7c7b\u7c7b\u4f3c\uff0c\u4f46\u5b83\u4eec\u5e76\u4e0d\u76f8\u540c\uff0c\u56e0\u4e3a\u540e\u8005\u4e0d\u652f\u6301\u7d22\u5f15 Python 3.9 \u4e4b\u524d\u7684\u7248\u672c\u3002</p> <p>Generic types</p> <p>In Python 3.9 and later, built-in collection type objects support indexing:</p> Type Description <code>list[str]</code> list of <code>str</code> objects <code>tuple[int, int]</code> tuple of two int objects (<code>tuple[()]</code> is the empty tuple) <code>tuple[int, ...]</code> tuple of an arbitrary number of <code>int</code> objects <code>dict[str, int]</code> dictionary from str keys to <code>int</code> values <code>Iterable[int]</code> iterable object containing ints <code>Sequence[bool]</code> sequence of booleans (read-only) <code>Mapping[str, int]</code> mapping from str keys to int values (read-only) <code>type[C]</code> type object of <code>C</code> (<code>C</code> is a class/type variable/union of types) <p>The type <code>dict</code> is a generic class, signified by type arguments within <code>[...]</code>. For example, <code>dict[int, str]</code> is a dictionary from integers to strings and <code>dict[Any, Any]</code> is a dictionary of dynamically typed (arbitrary) values and keys. <code>list</code> is another generic class.</p> <p><code>Iterable</code>, <code>Sequence</code>, and <code>Mapping</code> are generic types that correspond to Python protocols. For example, a <code>str</code> object or a <code>list[str]</code> object is valid when <code>Iterable[str]</code> or <code>Sequence[str]</code> is expected. You can import them from <code>collections.abc</code> instead of importing from <code>typing</code> in Python 3.9.</p> <p>See <code>generic-builtins</code> for more details, including how you can use these in annotations also in Python 3.7 and 3.8.</p> <p>These legacy types defined in <code>typing</code> are needed if you need to support Python 3.8 and earlier:</p> Type Description <code>List[str]</code> list of <code>str</code> objects <code>Tuple[int, int]</code> tuple of two <code>int</code> objects (<code>Tuple[()]</code> is the empty tuple) <code>Tuple[int, ...]</code> tuple of an arbitrary number of <code>int</code> objects <code>Dict[str, int]</code> dictionary from <code>str</code> keys to <code>int</code> values <code>Iterable[int]</code> iterable object containing ints <code>Sequence[bool]</code> sequence of booleans (read-only) <code>Mapping[str, int]</code> mapping from <code>str</code> keys to <code>int</code> values (read-only) <code>Type[C]</code> type object of <code>C</code> (<code>C</code> is a class/type variable/union of types) <p><code>List</code> is an alias for the built-in type <code>list</code> that supports indexing (and similarly for <code>dict</code>/<code>Dict</code> and <code>tuple</code>/<code>Tuple</code>).</p> <p>Note that even though <code>Iterable</code>, <code>Sequence</code> and <code>Mapping</code> look similar to abstract base classes defined in <code>collections.abc</code> (formerly <code>collections</code>), they are not identical, since the latter don't support indexing prior to Python 3.9.</p>"},{"location":"mypy/cheat_sheet_py3/","title":"\u7c7b\u578b\u63d0\u793a\u5907\u5fd8\u5f55","text":"<p>Type hints cheat sheet</p> <p>\u8f6c\u81ea: https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html</p>"},{"location":"mypy/cheat_sheet_py3/#\u53d8\u91cf","title":"\u53d8\u91cf","text":"\u4e2d\u6587\u539f\u6587 <p>\u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u4e0b\u9762\u663e\u793a\u7684\u8bb8\u591a\u7c7b\u578b\u6ce8\u89e3\u90fd\u662f\u591a\u4f59\u7684\uff0c\u56e0\u4e3a mypy \u901a\u5e38\u53ef\u4ee5\u4ece\u53d8\u91cf\u7684\u503c\u63a8\u65ad\u51fa\u53d8\u91cf\u7684\u7c7b\u578b\u3002 \u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u7c7b\u578b\u63a8\u65ad\u548c\u7c7b\u578b\u6ce8\u89e3\u3002</p> <pre><code># \u8fd9\u662f\u58f0\u660e\u53d8\u91cf\u7c7b\u578b\u7684\u65b9\u5f0f\nage: int = 1\n\n# \u60a8\u4e0d\u9700\u8981\u521d\u59cb\u5316\u53d8\u91cf\u6765\u6ce8\u89e3\u5b83\na: int  # Ok (\u5728\u5206\u914d\u4e4b\u524d\u5728\u8fd0\u884c\u65f6\u6ca1\u6709\u503c)\n\n# \u8fd9\u6837\u505a\u5728\u6761\u4ef6\u5206\u652f\u4e2d\u5f88\u6709\u7528\nchild: bool\nif age &lt; 18:\n    child = True\nelse:\n    child = False\n</code></pre> <p>Variables</p> <p>Technically many of the type annotations shown below are redundant, since mypy can usually infer the type of a variable from its value. See Type inference and type annotations for more details.</p> <pre><code># This is how you declare the type of a variable\nage: int = 1\n\n# You don't need to initialize a variable to annotate it\na: int  # Ok (no value at runtime until assigned)\n\n# Doing so can be useful in conditional branches\nchild: bool\nif age &lt; 18:\n    child = True\nelse:\n    child = False\n</code></pre>"},{"location":"mypy/cheat_sheet_py3/#\u6709\u7528\u7684\u5185\u7f6e\u7c7b\u578b","title":"\u6709\u7528\u7684\u5185\u7f6e\u7c7b\u578b","text":"\u4e2d\u6587\u539f\u6587 <pre><code># \u5bf9\u4e8e\u5927\u591a\u6570\u7c7b\u578b\uff0c\u53ea\u9700\u5728\u6ce8\u89e3\u4e2d\u4f7f\u7528\u7c7b\u578b\u7684\u540d\u79f0, \u8bf7\u6ce8\u610f\uff0cmypy \u901a\u5e38\u53ef\u4ee5\u4ece\u53d8\u91cf\u7684\u503c\u63a8\u65ad\u53d8\u91cf\u7684\u7c7b\u578b\uff0c\u56e0\u6b64\u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u8fd9\u4e9b\u6ce8\u89e3\u662f\u591a\u4f59\u7684\nx: int = 1\nx: float = 1.0\nx: bool = True\nx: str = \"test\"\nx: bytes = b\"test\"\n\n# \u5bf9\u4e8e Python 3.9+ \u4e0a\u7684\u96c6\u5408\uff0c\u96c6\u5408\u9879\u7684\u7c7b\u578b\u4f4d\u4e8e\u62ec\u53f7\u4e2d\nx: list[int] = [1]\nx: set[int] = {6, 7}\n\n# \u5bf9\u4e8e\u6620\u5c04\uff0c\u6211\u4eec\u9700\u8981\u952e\u548c\u503c\u7684\u7c7b\u578b\nx: dict[str, float] = {\"field\": 2.0}  # Python 3.9+\n\n# \u5bf9\u4e8e\u56fa\u5b9a\u5927\u5c0f\u7684\u5143\u7ec4\uff0c\u6211\u4eec\u6307\u5b9a\u6240\u6709\u5143\u7d20\u7684\u7c7b\u578b\nx: tuple[int, str, float] = (3, \"yes\", 7.5)  # Python 3.9+\n\n# \u5bf9\u4e8e\u53ef\u53d8\u5927\u5c0f\u7684\u5143\u7ec4\uff0c\u6211\u4eec\u4f7f\u7528\u4e00\u79cd\u7c7b\u578b\u548c\u7701\u7565\u53f7\nx: tuple[int, ...] = (1, 2, 3)  # Python 3.9+\n\n# \u5728 Python 3.8 \u53ca\u66f4\u65e9\u7248\u672c\u4e2d\uff0c\u96c6\u5408\u7c7b\u578b\u7684\u540d\u79f0\u5927\u5199\uff0c\u5e76\u4e14\u7c7b\u578b\u662f\u4ece\u201ctyping\u201d\u6a21\u5757\u5bfc\u5165\u7684\nfrom typing import List, Set, Dict, Tuple\nx: List[int] = [1]\nx: Set[int] = {6, 7}\nx: Dict[str, float] = {\"field\": 2.0}\nx: Tuple[int, str, float] = (3, \"yes\", 7.5)\nx: Tuple[int, ...] = (1, 2, 3)\n\nfrom typing import Union, Optional\n\n# \u5728 Python 3.10+ \u4e0a\uff0c\u4f7f\u7528 | \u5f53\u67d0\u503c\u53ef\u80fd\u662f\u51e0\u79cd\u7c7b\u578b\u4e4b\u4e00\u65f6\u7684\u8fd0\u7b97\u7b26\nx: list[int | str] = [3, 5, \"test\", \"fun\"]  # Python 3.10+\n# \u5728\u65e9\u671f\u7248\u672c\u4e2d\uff0c\u4f7f\u7528 Union\nx: list[Union[int, str]] = [3, 5, \"test\", \"fun\"]\n\n# \u4f7f\u7528 Optional[X] \u4f5c\u4e3a\u53ef\u80fd\u4e3aNone\u7684\u503c\n# Optional[X] \u4e0e X | None \u76f8\u540c \u6216 Union[X\uff0cNone]\nx: Optional[str] = \"something\" if some_condition() else None\nif x is not None:\n    # \u7531\u4e8e if \u8bed\u53e5\uff0cMypy \u77e5\u9053 x \u4e0d\u4f1a\u5728\u8fd9\u91cc\u4e3a None\n    print(x.upper())\n# \u5982\u679c\u60a8\u77e5\u9053\u7531\u4e8e mypy \u4e0d\u7406\u89e3\u7684\u67d0\u4e9b\u903b\u8f91\uff0c\u67d0\u4e2a\u503c\u6c38\u8fdc\u4e0d\u53ef\u80fd\u4e3a None\uff0c\u8bf7\u4f7f\u7528\u65ad\u8a00\nassert x is not None\nprint(x.upper())\n</code></pre> <p>Useful built-in types</p> <pre><code># For most types, just use the name of the type in the annotation\n# Note that mypy can usually infer the type of a variable from its value,\n# so technically these annotations are redundant\nx: int = 1\nx: float = 1.0\nx: bool = True\nx: str = \"test\"\nx: bytes = b\"test\"\n\n# For collections on Python 3.9+, the type of the collection item is in brackets\nx: list[int] = [1]\nx: set[int] = {6, 7}\n\n# For mappings, we need the types of both keys and values\nx: dict[str, float] = {\"field\": 2.0}  # Python 3.9+\n\n# For tuples of fixed size, we specify the types of all the elements\nx: tuple[int, str, float] = (3, \"yes\", 7.5)  # Python 3.9+\n\n# For tuples of variable size, we use one type and ellipsis\nx: tuple[int, ...] = (1, 2, 3)  # Python 3.9+\n\n# On Python 3.8 and earlier, the name of the collection type is\n# capitalized, and the type is imported from the 'typing' module\nfrom typing import List, Set, Dict, Tuple\nx: List[int] = [1]\nx: Set[int] = {6, 7}\nx: Dict[str, float] = {\"field\": 2.0}\nx: Tuple[int, str, float] = (3, \"yes\", 7.5)\nx: Tuple[int, ...] = (1, 2, 3)\n\nfrom typing import Union, Optional\n\n# On Python 3.10+, use the | operator when something could be one of a few types\nx: list[int | str] = [3, 5, \"test\", \"fun\"]  # Python 3.10+\n# On earlier versions, use Union\nx: list[Union[int, str]] = [3, 5, \"test\", \"fun\"]\n\n# Use Optional[X] for a value that could be None\n# Optional[X] is the same as X | None or Union[X, None]\nx: Optional[str] = \"something\" if some_condition() else None\nif x is not None:\n    # Mypy understands x won't be None here because of the if-statement\n    print(x.upper())\n# If you know a value can never be None due to some logic that mypy doesn't\n# understand, use an assert\nassert x is not None\nprint(x.upper())\n</code></pre>"},{"location":"mypy/cheat_sheet_py3/#\u51fd\u6570","title":"\u51fd\u6570","text":"\u4e2d\u6587\u539f\u6587 <pre><code>from typing import Callable, Iterator, Union, Optional\n\n# \u8fd9\u662f\u6ce8\u89e3\u51fd\u6570\u5b9a\u4e49\u7684\u65b9\u5f0f\ndef stringify(num: int) -&gt; str:\n    return str(num)\n\n# \u4ee5\u4e0b\u662f\u6307\u5b9a\u591a\u4e2a\u53c2\u6570\u7684\u65b9\u6cd5\ndef plus(num1: int, num2: int) -&gt; int:\n    return num1 + num2\n\n# \u5982\u679c\u51fd\u6570\u6ca1\u6709\u8fd4\u56de\u503c\uff0c\u5219\u4f7f\u7528 None \u4f5c\u4e3a\u8fd4\u56de\u7c7b\u578b\n# \u53c2\u6570\u7684\u9ed8\u8ba4\u503c\u4f4d\u4e8e\u7c7b\u578b\u6ce8\u89e3\u4e4b\u540e\ndef show(value: str, excitement: int = 10) -&gt; None:\n    print(value + \"!\" * excitement)\n\n# \u8bf7\u6ce8\u610f\uff0c\u6ca1\u6709\u7c7b\u578b\u7684\u53c2\u6570\u662f\u52a8\u6001\u7c7b\u578b\u7684\uff08\u89c6\u4e3a Any\uff09\n# \u5e76\u4e14\u8be5\u51fd\u6570\u6ca1\u6709\u4efb\u4f55\u672a\u68c0\u67e5\u7684\u6ce8\u89e3\ndef untyped(x):\n    x.anything() + 1 + \"string\"  # no errors\n\n# \u8fd9\u662f\u6ce8\u89e3\u53ef\u8c03\u7528\uff08\u51fd\u6570\uff09\u503c\u7684\u65b9\u5f0f\nx: Callable[[int, float], float] = f\ndef register(callback: Callable[[str], int]) -&gt; None: ...\n\n# \u751f\u6210\u6574\u6570\u7684\u751f\u6210\u5668\u51fd\u6570\u5b9e\u9645\u4e0a\u53ea\u662f\u4e00\u4e2a\u51fd\u6570\n# \u8fd4\u56de\u4e00\u4e2a\u6574\u6570\u8fed\u4ee3\u5668\uff0c\u8fd9\u5c31\u662f\u6211\u4eec\u6ce8\u89e3\u5b83\u7684\u65b9\u5f0f\ndef gen(n: int) -&gt; Iterator[int]:\n    i = 0\n    while i &lt; n:\n        yield i\n        i += 1\n\n# \u60a8\u5f53\u7136\u53ef\u4ee5\u5c06\u51fd\u6570\u6ce8\u89e3\u62c6\u5206\u4e3a\u591a\u884c\ndef send_email(address: Union[str, list[str]],\n               sender: str,\n               cc: Optional[list[str]],\n               bcc: Optional[list[str]],\n               subject: str = '',\n               body: Optional[list[str]] = None\n               ) -&gt; bool:\n    ...\n\n# Mypy \u80fd\u591f\u7406\u89e3\u4ec5\u4f4d\u7f6e\u53c2\u6570\u548c\u4ec5\u5173\u952e\u5b57\u53c2\u6570\n# \u4e5f\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e24\u4e2a\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u540d\u79f0\u6765\u6807\u8bb0\u4ec5\u4f4d\u7f6e\u53c2\u6570\ndef quux(x: int, /, *, y: int) -&gt; None:\n    pass\n\nquux(3, y=5)  # Ok\nquux(3, 5)  # error: \u201cquux\u201d\u7684\u4f4d\u7f6e\u53c2\u6570\u592a\u591a\nquux(x=3, y=5)  # error: \u201cquux\u201d\u7684\u610f\u5916\u5173\u952e\u5b57\u53c2\u6570\u201cx\u201d\n\n# \u8fd9\u8868\u793a\u6bcf\u4e2a\u4f4d\u7f6e\u53c2\u6570\u548c\u6bcf\u4e2a\u5173\u952e\u5b57\u53c2\u6570\u90fd\u662f\u4e00\u4e2a\u201cstr\u201d\ndef call(self, *args: str, **kwargs: str) -&gt; str:\n    reveal_type(args)  # \u63ed\u793a\u7684\u7c7b\u578b\u662f \"tuple[str, ...]\"\n    reveal_type(kwargs)  # \u63ed\u793a\u7684\u7c7b\u578b\u662f \"dict[str, str]\"\n    request = make_request(*args, **kwargs)\n    return self.do_api_query(request)\n</code></pre> <p>Functions</p> <pre><code>from typing import Callable, Iterator, Union, Optional\n\n# This is how you annotate a function definition\ndef stringify(num: int) -&gt; str:\n    return str(num)\n\n# And here's how you specify multiple arguments\ndef plus(num1: int, num2: int) -&gt; int:\n    return num1 + num2\n\n# If a function does not return a value, use None as the return type\n# Default value for an argument goes after the type annotation\ndef show(value: str, excitement: int = 10) -&gt; None:\n    print(value + \"!\" * excitement)\n\n# Note that arguments without a type are dynamically typed (treated as Any)\n# and that functions without any annotations not checked\ndef untyped(x):\n    x.anything() + 1 + \"string\"  # no errors\n\n# This is how you annotate a callable (function) value\nx: Callable[[int, float], float] = f\ndef register(callback: Callable[[str], int]) -&gt; None: ...\n\n# A generator function that yields ints is secretly just a function that\n# returns an iterator of ints, so that's how we annotate it\ndef gen(n: int) -&gt; Iterator[int]:\n    i = 0\n    while i &lt; n:\n        yield i\n        i += 1\n\n# You can of course split a function annotation over multiple lines\ndef send_email(address: Union[str, list[str]],\n               sender: str,\n               cc: Optional[list[str]],\n               bcc: Optional[list[str]],\n               subject: str = '',\n               body: Optional[list[str]] = None\n               ) -&gt; bool:\n    ...\n\n# Mypy understands positional-only and keyword-only arguments\n# Positional-only arguments can also be marked by using a name starting with\n# two underscores\ndef quux(x: int, /, *, y: int) -&gt; None:\n    pass\n\nquux(3, y=5)  # Ok\nquux(3, 5)  # error: Too many positional arguments for \"quux\"\nquux(x=3, y=5)  # error: Unexpected keyword argument \"x\" for \"quux\"\n\n# This says each positional arg and each keyword arg is a \"str\"\ndef call(self, *args: str, **kwargs: str) -&gt; str:\n    reveal_type(args)  # Revealed type is \"tuple[str, ...]\"\n    reveal_type(kwargs)  # Revealed type is \"dict[str, str]\"\n    request = make_request(*args, **kwargs)\n    return self.do_api_query(request)\n</code></pre>"},{"location":"mypy/cheat_sheet_py3/#\u7c7b","title":"\u7c7b","text":"\u4e2d\u6587\u539f\u6587 <pre><code>class BankAccount:\n    # \u201c__init__\u201d\u65b9\u6cd5\u4e0d\u8fd4\u56de\u4efb\u4f55\u5185\u5bb9\uff0c\u56e0\u6b64\u5b83\u7684\u8fd4\u56de\u7c7b\u578b\u4e3a\u201cNone\u201d\uff0c\u5c31\u50cf\u4efb\u4f55\u5176\u4ed6\u4e0d\u8fd4\u56de\u4efb\u4f55\u5185\u5bb9\u7684\u65b9\u6cd5\u4e00\u6837\n    def __init__(self, account_name: str, initial_balance: int = 0) -&gt; None:\n        # mypy \u5c06\u6839\u636e\u53c2\u6570\u7684\u7c7b\u578b\u63a8\u65ad\u8fd9\u4e9b\u5b9e\u4f8b\u53d8\u91cf\u7684\u6b63\u786e\u7c7b\u578b\u3002\n        self.account_name = account_name\n        self.balance = initial_balance\n\n    # \u5bf9\u4e8e\u5b9e\u4f8b\u65b9\u6cd5\uff0c\u7701\u7565\u201cself\u201d\u7684\u7c7b\u578b\n    def deposit(self, amount: int) -&gt; None:\n        self.balance += amount\n\n    def withdraw(self, amount: int) -&gt; None:\n        self.balance -= amount\n\n# \u7528\u6237\u5b9a\u4e49\u7684\u7c7b\u4f5c\u4e3a\u6ce8\u89e3\u4e2d\u7684\u7c7b\u578b\u6709\u6548\naccount: BankAccount = BankAccount(\"Alice\", 400)\ndef transfer(src: BankAccount, dst: BankAccount, amount: int) -&gt; None:\n    src.withdraw(amount)\n    dst.deposit(amount)\n\n# \u63a5\u53d7 BankAccount \u7684\u51fd\u6570\u4e5f\u63a5\u53d7 BankAccount \u7684\u4efb\u4f55\u5b50\u7c7b\uff01\nclass AuditedBankAccount(BankAccount):\n    # \u60a8\u53ef\u4ee5\u9009\u62e9\u5728\u7c7b\u4e3b\u4f53\u4e2d\u58f0\u660e\u5b9e\u4f8b\u53d8\u91cf\n    audit_log: list[str]\n    # \u8fd9\u662f\u4e00\u4e2a\u5177\u6709\u9ed8\u8ba4\u503c\u7684\u5b9e\u4f8b\u53d8\u91cf\n    auditor_name: str = \"The Spanish Inquisition\"\n\n    def __init__(self, account_name: str, initial_balance: int = 0) -&gt; None:\n        super().__init__(account_name, initial_balance)\n        self.audit_log: list[str] = []\n\n    def deposit(self, amount: int) -&gt; None:\n        self.audit_log.append(f\"Deposited {amount}\")\n        self.balance += amount\n\n    def withdraw(self, amount: int) -&gt; None:\n        self.audit_log.append(f\"Withdrew {amount}\")\n        self.balance -= amount\n\naudited = AuditedBankAccount(\"Bob\", 300)\ntransfer(audited, account, 100)  # \u7c7b\u578b\u68c0\u67e5!\n\n# \u53ef\u4ee5\u4f7f\u7528ClassVar\u6ce8\u89e3\u6765\u58f0\u660e\u7c7b\u53d8\u91cf\nclass Car:\n    seats: ClassVar[int] = 4\n    passengers: ClassVar[list[str]]\n\n# \u5982\u679c\u60a8\u60f3\u8981\u7c7b\u4e0a\u7684\u52a8\u6001\u5c5e\u6027\uff0c\u8bf7\u8ba9\u5b83\u8986\u76d6\u201c__setattr__\u201d\u6216\u201c__getattr__\u201d\nclass A:\n    # \u5982\u679c x \u4e0e\u201cvalue\u201d\u7684\u7c7b\u578b\u76f8\u540c\uff0c\u5219\u8fd9\u5c06\u5141\u8bb8\u5206\u914d\u7ed9\u4efb\u4f55 A.x\n    # \uff08\u4f7f\u7528\u201cvalue: Any\u201d\u5141\u8bb8\u4efb\u610f\u7c7b\u578b\uff09\n    def __setattr__(self, name: str, value: int) -&gt; None: ...\n\n    # \u5982\u679c x \u4e0e\u8fd4\u56de\u7c7b\u578b\u517c\u5bb9\uff0c\u8fd9\u5c06\u5141\u8bb8\u8bbf\u95ee\u4efb\u4f55 A.x\n    def __getattr__(self, name: str) -&gt; int: ...\n\na.foo = 42  # OK\na.bar = 'Ex-parrot'  # \u7c7b\u578b\u68c0\u67e5\u5931\u8d25\n</code></pre> <p>Classes</p> <pre><code>class BankAccount:\n    # The \"__init__\" method doesn't return anything, so it gets return\n    # type \"None\" just like any other method that doesn't return anything\n    def __init__(self, account_name: str, initial_balance: int = 0) -&gt; None:\n        # mypy will infer the correct types for these instance variables\n        # based on the types of the parameters.\n        self.account_name = account_name\n        self.balance = initial_balance\n\n    # For instance methods, omit type for \"self\"\n    def deposit(self, amount: int) -&gt; None:\n        self.balance += amount\n\n    def withdraw(self, amount: int) -&gt; None:\n        self.balance -= amount\n\n# User-defined classes are valid as types in annotations\naccount: BankAccount = BankAccount(\"Alice\", 400)\ndef transfer(src: BankAccount, dst: BankAccount, amount: int) -&gt; None:\n    src.withdraw(amount)\n    dst.deposit(amount)\n\n# Functions that accept BankAccount also accept any subclass of BankAccount!\nclass AuditedBankAccount(BankAccount):\n    # You can optionally declare instance variables in the class body\n    audit_log: list[str]\n    # This is an instance variable with a default value\n    auditor_name: str = \"The Spanish Inquisition\"\n\n    def __init__(self, account_name: str, initial_balance: int = 0) -&gt; None:\n        super().__init__(account_name, initial_balance)\n        self.audit_log: list[str] = []\n\n    def deposit(self, amount: int) -&gt; None:\n        self.audit_log.append(f\"Deposited {amount}\")\n        self.balance += amount\n\n    def withdraw(self, amount: int) -&gt; None:\n        self.audit_log.append(f\"Withdrew {amount}\")\n        self.balance -= amount\n\naudited = AuditedBankAccount(\"Bob\", 300)\ntransfer(audited, account, 100)  # type checks!\n\n# You can use the ClassVar annotation to declare a class variable\nclass Car:\n    seats: ClassVar[int] = 4\n    passengers: ClassVar[list[str]]\n\n# If you want dynamic attributes on your class, have it\n# override \"__setattr__\" or \"__getattr__\"\nclass A:\n    # This will allow assignment to any A.x, if x is the same type as \"value\"\n    # (use \"value: Any\" to allow arbitrary types)\n    def __setattr__(self, name: str, value: int) -&gt; None: ...\n\n    # This will allow access to any A.x, if x is compatible with the return type\n    def __getattr__(self, name: str) -&gt; int: ...\n\na.foo = 42  # Works\na.bar = 'Ex-parrot'  # Fails type checking\n</code></pre>"},{"location":"mypy/cheat_sheet_py3/#\u5f53\u4f60\u611f\u5230\u56f0\u60d1\u6216\u4e8b\u60c5\u53d8\u5f97\u590d\u6742\u65f6","title":"\u5f53\u4f60\u611f\u5230\u56f0\u60d1\u6216\u4e8b\u60c5\u53d8\u5f97\u590d\u6742\u65f6","text":"\u4e2d\u6587\u539f\u6587 <pre><code>from typing import Union, Any, Optional, TYPE_CHECKING, cast\n\n# \u8981\u627e\u51fa mypy \u4e3a\u7a0b\u5e8f\u4e2d\u4efb\u4f55\u4f4d\u7f6e\u7684\u8868\u8fbe\u5f0f\u63a8\u65ad\u51fa\u4ec0\u4e48\u7c7b\u578b\uff0c\u8bf7\u5c06\u5176\u5305\u88c5\u5728 Reveal_type() \u4e2d\u3002 Mypy \u5c06\u6253\u5370\u4e00\u6761\u5e26\u6709\u7c7b\u578b\u7684\u9519\u8bef\u6d88\u606f\uff1b \u5728\u8fd0\u884c\u4ee3\u7801\u4e4b\u524d\u518d\u6b21\u5220\u9664\u5b83\u3002\nreveal_type(1)  # \u63ed\u793a\u7684\u7c7b\u578b\u662f \"builtins.int\"\n\n# \u5982\u679c\u60a8\u4f7f\u7528\u7a7a\u5bb9\u5668\u6216\u201cNone\u201d\u521d\u59cb\u5316\u53d8\u91cf\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u901a\u8fc7\u63d0\u4f9b\u663e\u5f0f\u7c7b\u578b\u6ce8\u89e3\u6765\u5e2e\u52a9 mypy\nx: list[str] = []\nx: Optional[str] = None\n\n# \u5982\u679c\u60a8\u4e0d\u77e5\u9053\u67d0\u4e8b\u7269\u7684\u7c7b\u578b\u6216\u8005\u5b83\u592a\u52a8\u6001\u800c\u65e0\u6cd5\u4e3a\u5176\u7f16\u5199\u7c7b\u578b\uff0c\u8bf7\u4f7f\u7528 Any\nx: Any = mystery_function()\n# Mypy \u4f1a\u8ba9\u4f60\u7528 x \u505a\u4efb\u4f55\u4e8b\u60c5\uff01\nx.whatever() * x[\"you\"] + x(\"want\") - any(x) and all(x) is super  # no errors\n\n# \u5f53\u60a8\u7684\u4ee3\u7801\u6df7\u6dc6 mypy \u6216\u5728 mypy \u4e2d\u9047\u5230\u5f7b\u5e95\u7684\u9519\u8bef\u65f6\uff0c\u4f7f\u7528\u201ctype:ignore\u201d\u6ce8\u89e3\u6765\u6291\u5236\u7ed9\u5b9a\u884c\u4e0a\u7684\u9519\u8bef\u3002\n# \u597d\u7684\u505a\u6cd5\u662f\u6dfb\u52a0\u89e3\u91ca\u95ee\u9898\u7684\u8bc4\u8bba\u3002\nx = confusing_function()  # type: ignore  # \u6df7\u4e71\u7684\u51fd\u6570\u4e0d\u4f1a\u5728\u8fd9\u91cc\u8fd4\u56de None \u56e0\u4e3a......\n\n# \u201ccast\u201d\u662f\u4e00\u4e2a\u8f85\u52a9\u51fd\u6570\uff0c\u53ef\u8ba9\u60a8\u8986\u76d6\u8868\u8fbe\u5f0f\u7684\u63a8\u65ad\u7c7b\u578b\u3002 \u5b83\u4ec5\u9002\u7528\u4e8e mypy\u2014\u2014\u6ca1\u6709\u8fd0\u884c\u65f6\u68c0\u67e5\u3002\na = [4]\nb = cast(list[int], a)  # \u901a\u8fc7\u826f\u597d\nc = cast(list[str], a)  # \u5c3d\u7ba1\u662f\u8c0e\u8a00\uff0c\u4f46\u4ecd\u901a\u8fc7\u826f\u597d\uff08\u6ca1\u6709\u8fd0\u884c\u65f6\u68c0\u67e5\uff09\nreveal_type(c)  # \u63ed\u793a\u7684\u7c7b\u578b\u662f \"builtins.list[builtins.str]\"\nprint(c)  # \u4ecd\u7136\u6253\u5370 [4] ...\u8be5\u5bf9\u8c61\u5728\u8fd0\u884c\u65f6\u672a\u66f4\u6539\u6216\u8f6c\u6362\n\n# \u5982\u679c\u60a8\u60f3\u8981 mypy \u53ef\u4ee5\u770b\u5230\u4f46\u4e0d\u4f1a\u5728\u8fd0\u884c\u65f6\u6267\u884c\u7684\u4ee3\u7801\uff08\u6216\u8005\u60f3\u8981 mypy \u770b\u4e0d\u5230\u7684\u4ee3\u7801\uff09\uff0c\u8bf7\u4f7f\u7528\u201cTYPE_CHECKING\u201d\nif TYPE_CHECKING:\n    import json\nelse:\n    import orjson as json  # mypy \u4e0d\u77e5\u9053\u8fd9\u4e00\u70b9\n</code></pre> <p>\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u7c7b\u578b\u6ce8\u89e3\u53ef\u80fd\u4f1a\u5728\u8fd0\u884c\u65f6\u5bfc\u81f4\u95ee\u9898\uff0c\u8bf7\u53c2\u9605\u8fd0\u884c\u65f6\u6ce8\u89e3\u95ee\u9898\u6765\u5904\u7406\u6b64\u95ee\u9898\u3002</p> <p>\u6709\u5173\u5982\u4f55\u6d88\u9664\u9519\u8bef\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u6d88\u9664\u7c7b\u578b\u9519\u8bef\u3002</p> <p>When you\u2019re puzzled or when things are complicated</p> <pre><code>from typing import Union, Any, Optional, TYPE_CHECKING, cast\n\n# To find out what type mypy infers for an expression anywhere in\n# your program, wrap it in reveal_type().  Mypy will print an error\n# message with the type; remove it again before running the code.\nreveal_type(1)  # Revealed type is \"builtins.int\"\n\n# If you initialize a variable with an empty container or \"None\"\n# you may have to help mypy a bit by providing an explicit type annotation\nx: list[str] = []\nx: Optional[str] = None\n\n# Use Any if you don't know the type of something or it's too\n# dynamic to write a type for\nx: Any = mystery_function()\n# Mypy will let you do anything with x!\nx.whatever() * x[\"you\"] + x(\"want\") - any(x) and all(x) is super  # no errors\n\n# Use a \"type: ignore\" comment to suppress errors on a given line,\n# when your code confuses mypy or runs into an outright bug in mypy.\n# Good practice is to add a comment explaining the issue.\nx = confusing_function()  # type: ignore  # confusing_function won't return None here because ...\n\n# \"cast\" is a helper function that lets you override the inferred\n# type of an expression. It's only for mypy -- there's no runtime check.\na = [4]\nb = cast(list[int], a)  # Passes fine\nc = cast(list[str], a)  # Passes fine despite being a lie (no runtime check)\nreveal_type(c)  # Revealed type is \"builtins.list[builtins.str]\"\nprint(c)  # Still prints [4] ... the object is not changed or casted at runtime\n\n# Use \"TYPE_CHECKING\" if you want to have code that mypy can see but will not\n# be executed at runtime (or to have code that mypy can't see)\nif TYPE_CHECKING:\n    import json\nelse:\n    import orjson as json  # mypy is unaware of this\n</code></pre> <p>In some cases type annotations can cause issues at runtime, see Annotation issues at runtime for dealing with this.</p> <p>See Silencing type errors for details on how to silence errors.</p>"},{"location":"mypy/cheat_sheet_py3/#\u6807\u51c6\u9e2d\u5b50\u7c7b\u578b","title":"\u6807\u51c6\u201c\u9e2d\u5b50\u7c7b\u578b\u201d","text":"\u4e2d\u6587\u539f\u6587 <p>\u5728\u5178\u578b\u7684 Python \u4ee3\u7801\u4e2d\uff0c\u8bb8\u591a\u53ef\u4ee5\u5c06\u5217\u8868\u6216\u5b57\u5178\u4f5c\u4e3a\u53c2\u6570\u7684\u51fd\u6570\u53ea\u9700\u8981\u5b83\u4eec\u7684\u53c2\u6570\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u201c\u7c7b\u4f3c\u4e8e\u5217\u8868\u201d\u6216\u201c\u7c7b\u4f3c\u4e8e\u5b57\u5178\u201d\u3002 \u201c\u7c7b\u4f3c\u5217\u8868\u201d\u6216\u201c\u7c7b\u4f3c\u5b57\u5178\u201d\uff08\u6216\u7c7b\u4f3c\u5176\u4ed6\u4e1c\u897f\uff09\u7684\u7279\u5b9a\u542b\u4e49\u79f0\u4e3a\u201c\u9e2d\u5b50\u7c7b\u578b\u201d\uff0c\u5e76\u4e14\u5728\u60ef\u7528\u7684Python\u4e2d\u5e38\u89c1\u7684\u51e0\u79cd\u9e2d\u5b50\u7c7b\u578b\u5df2\u6807\u51c6\u5316\u3002</p> <pre><code>from typing import Mapping, MutableMapping, Sequence, Iterable\n\n# \u5c06 Iterable \u7528\u4e8e\u901a\u7528\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff08\u201cfor\u201d\u4e2d\u53ef\u7528\u7684\u4efb\u4f55\u5185\u5bb9\uff09\uff0c\u5e76\u5728\u9700\u8981\u5e8f\u5217\uff08\u652f\u6301\u201clen\u201d\u548c\u201c__getitem__\u201d\uff09\u65f6\u4f7f\u7528 Sequence\ndef f(ints: Iterable[int]) -&gt; list[str]:\n    return [str(x) for x in ints]\n\nf(range(1, 3))\n\n# Mapping \u63cf\u8ff0\u4e86\u4e00\u4e2a\u6211\u4eec\u4e0d\u4f1a\u6539\u53d8\u7684\u7c7b\u4f3c dict \u7684\u5bf9\u8c61\uff08\u5e26\u6709\u201c__getitem__\u201d\uff09\uff0c\u800c MutableMapping \u5219\u63cf\u8ff0\u4e86\u4e00\u4e2a\u6211\u4eec\u53ef\u80fd\u4f1a\u6539\u53d8\u7684\u5bf9\u8c61\uff08\u5e26\u6709\u201c__setitem__\u201d\uff09\ndef f(my_mapping: Mapping[int, str]) -&gt; list[int]:\n    my_mapping[5] = 'maybe'  # mypy \u4f1a\u62b1\u6028\u8fd9\u884c......\n    return list(my_mapping.keys())\n\nf({3: 'yes', 4: 'no'})\n\ndef f(my_mapping: MutableMapping[int, str]) -&gt; set[str]:\n    my_mapping[5] = 'maybe'  # ...\u4f46 mypy \u5bf9\u6b64\u8868\u793a\u540c\u610f\u3002\n    return set(my_mapping.values())\n\nf({3: 'yes', 4: 'no'})\n\nimport sys\nfrom typing import IO\n\n# \u5bf9\u4e8e\u5e94\u8be5\u63a5\u53d7\u6216\u8fd4\u56de\u6765\u81ea open() \u8c03\u7528\u7684\u5bf9\u8c61\u7684\u51fd\u6570\uff0c\u8bf7\u4f7f\u7528 IO[str] \u6216 IO[bytes]\uff08\u8bf7\u6ce8\u610f\uff0cIO \u4e0d\u533a\u5206\u8bfb\u3001\u5199\u6216\u5176\u4ed6\u6a21\u5f0f\uff09\ndef get_sys_IO(mode: str = 'w') -&gt; IO[str]:\n    if mode == 'w':\n        return sys.stdout\n    elif mode == 'r':\n        return sys.stdin\n    else:\n        return sys.stdout\n</code></pre> <p>\u60a8\u751a\u81f3\u53ef\u4ee5\u4f7f\u7528\u534f\u8bae\u548c\u7ed3\u6784\u5b50\u7c7b\u578b\u521b\u5efa\u81ea\u5df1\u7684\u9e2d\u5b50\u7c7b\u578b\u3002</p> <p>Standard \u201cduck types\u201d</p> <p>In typical Python code, many functions that can take a list or a dict as an argument only need their argument to be somehow \u201clist-like\u201d or \u201cdict-like\u201d. A specific meaning of \u201clist-like\u201d or \u201cdict-like\u201d (or something-else-like) is called a \u201cduck type\u201d, and several duck types that are common in idiomatic Python are standardized.</p> <pre><code>from typing import Mapping, MutableMapping, Sequence, Iterable\n\n# Use Iterable for generic iterables (anything usable in \"for\"),\n# and Sequence where a sequence (supporting \"len\" and \"__getitem__\") is\n# required\ndef f(ints: Iterable[int]) -&gt; list[str]:\n    return [str(x) for x in ints]\n\nf(range(1, 3))\n\n# Mapping describes a dict-like object (with \"__getitem__\") that we won't\n# mutate, and MutableMapping one (with \"__setitem__\") that we might\ndef f(my_mapping: Mapping[int, str]) -&gt; list[int]:\n    my_mapping[5] = 'maybe'  # mypy will complain about this line...\n    return list(my_mapping.keys())\n\nf({3: 'yes', 4: 'no'})\n\ndef f(my_mapping: MutableMapping[int, str]) -&gt; set[str]:\n    my_mapping[5] = 'maybe'  # ...but mypy is OK with this.\n    return set(my_mapping.values())\n\nf({3: 'yes', 4: 'no'})\n\nimport sys\nfrom typing import IO\n\n# Use IO[str] or IO[bytes] for functions that should accept or return\n# objects that come from an open() call (note that IO does not\n# distinguish between reading, writing or other modes)\ndef get_sys_IO(mode: str = 'w') -&gt; IO[str]:\n    if mode == 'w':\n        return sys.stdout\n    elif mode == 'r':\n        return sys.stdin\n    else:\n        return sys.stdout\n</code></pre> <p>You can even make your own duck types using Protocols and structural subtyping.</p>"},{"location":"mypy/cheat_sheet_py3/#\u524d\u7f6e\u5f15\u7528forward-reference","title":"\u524d\u7f6e\u5f15\u7528\uff08forward reference\uff09","text":"\u4e2d\u6587\u539f\u6587 <pre><code># \u60a8\u53ef\u80fd\u60f3\u5728\u5b9a\u4e49\u7c7b\u4e4b\u524d\u5f15\u7528\u5b83\u3002\u8fd9\u79f0\u4e3a\u201c\u524d\u7f6e\u7c7b\u578b\uff08forward reference\uff09\u201d\u3002\ndef f(foo: A) -&gt; int:  # \u8fd9\u5c06\u5728\u8fd0\u884c\u65f6\u5931\u8d25\uff0c\u56e0\u4e3a\u201cA\u201d\u672a\u5b9a\u4e49\n    ...\n\n# \u4f46\u662f\uff0c\u5982\u679c\u6dfb\u52a0\u4ee5\u4e0b\u7279\u6b8a\u5bfc\u5165\uff1a\nfrom __future__ import annotations\n# \u5b83\u5c06\u5728\u8fd0\u884c\u65f6\u5de5\u4f5c\uff0c\u5e76\u4e14\u53ea\u8981\u6587\u4ef6\u4e2d\u7a0d\u540e\u5b58\u5728\u8be5\u540d\u79f0\u7684\u7c7b\uff0c\u7c7b\u578b\u68c0\u67e5\u5c31\u4f1a\u6210\u529f\ndef f(foo: A) -&gt; int:  # Ok\n    ...\n\n# \u53e6\u4e00\u79cd\u9009\u62e9\u662f\u5c06\u7c7b\u578b\u653e\u5728\u5f15\u53f7\u4e2d\ndef f(foo: 'A') -&gt; int:  # Also ok\n    ...\n\nclass A:\n    # \u5982\u679c\u60a8\u9700\u8981\u5728\u8be5\u7c7b\u5b9a\u4e49\u5185\u7684\u7c7b\u578b\u6ce8\u89e3\u4e2d\u5f15\u7528\u8be5\u7c7b\uff0c\u4e5f\u4f1a\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\n    @classmethod\n    def create(cls) -&gt; A:\n        ...\n</code></pre> <p>\u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u7c7b\u540d\u524d\u7f6e\u5f15\u7528\u3002</p> <p>Forward references</p> <pre><code># You may want to reference a class before it is defined.\n# This is known as a \"forward reference\".\ndef f(foo: A) -&gt; int:  # This will fail at runtime with 'A' is not defined\n    ...\n\n# However, if you add the following special import:\nfrom __future__ import annotations\n# It will work at runtime and type checking will succeed as long as there\n# is a class of that name later on in the file\ndef f(foo: A) -&gt; int:  # Ok\n    ...\n\n# Another option is to just put the type in quotes\ndef f(foo: 'A') -&gt; int:  # Also ok\n    ...\n\nclass A:\n    # This can also come up if you need to reference a class in a type\n    # annotation inside the definition of that class\n    @classmethod\n    def create(cls) -&gt; A:\n        ...\n</code></pre> <p>See Class name forward references for more details.</p>"},{"location":"mypy/cheat_sheet_py3/#\u88c5\u9970\u5668","title":"\u88c5\u9970\u5668","text":"\u4e2d\u6587\u539f\u6587 <p>\u88c5\u9970\u5668\u51fd\u6570\u53ef\u4ee5\u901a\u8fc7\u6cdb\u578b\u6765\u8868\u8fbe\u3002 \u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u58f0\u660e\u88c5\u9970\u5668\u3002</p> <pre><code>from typing import Any, Callable, TypeVar\n\nF = TypeVar('F', bound=Callable[..., Any])\n\ndef bare_decorator(func: F) -&gt; F:\n    ...\n\ndef decorator_args(url: str) -&gt; Callable[[F], F]:\n    ...\n</code></pre> <p>Decorators</p> <p>Decorator functions can be expressed via generics. See Declaring decorators for more details.</p> <pre><code>from typing import Any, Callable, TypeVar\n\nF = TypeVar('F', bound=Callable[..., Any])\n\ndef bare_decorator(func: F) -&gt; F:\n    ...\n\ndef decorator_args(url: str) -&gt; Callable[[F], F]:\n    ...\n</code></pre>"},{"location":"mypy/cheat_sheet_py3/#\u534f\u7a0b\u548c-asyncio","title":"\u534f\u7a0b\u548c asyncio","text":"\u4e2d\u6587\u539f\u6587 <p>\u6709\u5173\u7f16\u5199\u534f\u7a0b\u548c\u5f02\u6b65\u4ee3\u7801\u7684\u5b8c\u6574\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u6ce8\u89e3 async/await\u3002</p> <pre><code>import asyncio\n\n# \u534f\u7a0b\u7684\u7c7b\u578b\u4e0e\u666e\u901a\u51fd\u6570\u7c7b\u4f3c\n\nasync def countdown(tag: str, count: int) -&gt; str:\n    while count &gt; 0:\n        print(f'T-minus {count} ({tag})')\n        await asyncio.sleep(0.1)\n        count -= 1\n    return \"Blastoff!\"\n</code></pre> <p>Coroutines and asyncio</p> <p>See Typing async/await for the full detail on typing coroutines and asynchronous code.</p> <pre><code>import asyncio\n\n# A coroutine is typed like a normal function\n\nasync def countdown(tag: str, count: int) -&gt; str:\n    while count &gt; 0:\n        print(f'T-minus {count} ({tag})')\n        await asyncio.sleep(0.1)\n        count -= 1\n    return \"Blastoff!\"\n</code></pre>"},{"location":"mypy/class_basics/","title":"\u7c7b\u57fa\u7840","text":"\u4e2d\u6587\u82f1\u6587 <p>\u672c\u8282\u5c06\u5e2e\u52a9\u60a8\u5f00\u59cb\u4e3a\u7c7b\u6dfb\u52a0\u6ce8\u89e3\u3002 \u8bf8\u5982 \u201cint\u201d \u4e4b\u7c7b\u7684\u5185\u7f6e\u7c7b\u4e5f\u9075\u5faa\u8fd9\u4e9b\u76f8\u540c\u7684\u89c4\u5219\u3002</p> <p>Class basics</p> <p>This section will help get you started annotating your classes. Built-in classes such as <code>int</code> also follow these same rules.</p>"},{"location":"mypy/class_basics/#\u5b9e\u4f8b\u548c\u7c7b\u5c5e\u6027","title":"\u5b9e\u4f8b\u548c\u7c7b\u5c5e\u6027","text":"\u4e2d\u6587\u82f1\u6587 <p>mypy \u7c7b\u578b\u68c0\u67e5\u5668\u4f1a\u68c0\u6d4b\u60a8\u662f\u5426\u5c1d\u8bd5\u8bbf\u95ee\u4e22\u5931\u7684\u5c5e\u6027\uff0c\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u5e38\u89c1\u7684\u7f16\u7a0b\u9519\u8bef\u3002 \u4e3a\u4e86\u4f7f\u5176\u6b63\u5e38\u5de5\u4f5c\uff0c\u5fc5\u987b\u5728\u7c7b\u4e2d\u5b9a\u4e49\u6216\u521d\u59cb\u5316\u5b9e\u4f8b\u548c\u7c7b\u5c5e\u6027\u3002 Mypy \u63a8\u65ad\u5c5e\u6027\u7684\u7c7b\u578b\uff1a</p> <pre><code>class A:\n    def __init__(self, x: int) -&gt; None:\n        self.x = x  # Aha, attribute 'x' of type 'int'\n\na = A(1)\na.x = 2  # OK!\na.y = 3  # Error: \"A\" has no attribute \"y\"\n</code></pre> <p>\u8fd9\u6709\u70b9\u50cf\u6bcf\u4e2a\u7c7b\u90fd\u6709\u4e00\u4e2a\u9690\u5f0f\u5b9a\u4e49\u7684 <code>__slots__</code> \u5c5e\u6027\u3002 \u8fd9\u4ec5\u5728\u7c7b\u578b\u68c0\u67e5\u671f\u95f4\u5f3a\u5236\u6267\u884c\uff0c\u800c\u4e0d\u662f\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\u5f3a\u5236\u6267\u884c\u3002</p> <p>\u60a8\u53ef\u4ee5\u4f7f\u7528\u7c7b\u578b\u6ce8\u91ca\u663e\u5f0f\u58f0\u660e\u7c7b\u4e3b\u4f53\u4e2d\u7684\u53d8\u91cf\u7c7b\u578b\uff1a</p> <pre><code>class A:\n    x: list[int]  # Declare attribute 'x' of type list[int]\n\na = A()\na.x = [1]     # OK\n</code></pre> <p>\u901a\u5e38\u5728 Python \u4e2d\uff0c\u7c7b\u4f53\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf\u53ef\u4ee5\u7528\u4f5c\u7c7b\u53d8\u91cf\u6216\u5b9e\u4f8b\u53d8\u91cf\u3002 \uff08\u5982\u4e0b\u4e00\u8282\u6240\u8ff0\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 <code>typing.ClassVar</code> \u6ce8\u91ca\u8986\u76d6\u5b83\u3002\uff09</p> <p>\u540c\u6837\uff0c\u60a8\u53ef\u4ee5\u4e3a\u65b9\u6cd5\u4e2d\u5b9a\u4e49\u7684\u5b9e\u4f8b\u53d8\u91cf\u6307\u5b9a\u663e\u5f0f\u7c7b\u578b\uff1a</p> <pre><code>class A:\n    def __init__(self) -&gt; None:\n        self.x: list[int] = []\n\n    def f(self) -&gt; None:\n        self.y: Any = 0\n</code></pre> <p>\u5982\u679c\u60a8\u4f7f\u7528 <code>self</code> \u663e\u5f0f\u5206\u914d\u5b9e\u4f8b\u53d8\u91cf\uff0c\u5219\u53ea\u80fd\u5728\u65b9\u6cd5\u4e2d\u5b9a\u4e49\u5b9e\u4f8b\u53d8\u91cf\uff1a</p> <pre><code>class A:\n    def __init__(self) -&gt; None:\n        self.y = 1   # Define 'y'\n        a = self\n        a.x = 1      # Error: 'x' not defined\n</code></pre> <p>Instance and class attributes</p> <p>The mypy type checker detects if you are trying to access a missing attribute, which is a very common programming error. For this to work correctly, instance and class attributes must be defined or initialized within the class. Mypy infers the types of attributes:</p> <pre><code>class A:\n    def __init__(self, x: int) -&gt; None:\n        self.x = x  # Aha, attribute 'x' of type 'int'\n\na = A(1)\na.x = 2  # OK!\na.y = 3  # Error: \"A\" has no attribute \"y\"\n</code></pre> <p>This is a bit like each class having an implicitly defined <code>__slots__</code> attribute. This is only enforced during type checking and not when your program is running.</p> <p>You can declare types of variables in the class body explicitly using a type annotation:</p> <pre><code>class A:\n    x: list[int]  # Declare attribute 'x' of type list[int]\n\na = A()\na.x = [1]     # OK\n</code></pre> <p>As in Python generally, a variable defined in the class body can be used as a class or an instance variable. (As discussed in the next section, you can override this with a <code>typing.ClassVar</code> annotation.)</p> <p>Similarly, you can give explicit types to instance variables defined in a method:</p> <pre><code>class A:\n    def __init__(self) -&gt; None:\n        self.x: list[int] = []\n\n    def f(self) -&gt; None:\n        self.y: Any = 0\n</code></pre> <p>You can only define an instance variable within a method if you assign to it explicitly using <code>self</code>:</p> <pre><code>class A:\n    def __init__(self) -&gt; None:\n        self.y = 1   # Define 'y'\n        a = self\n        a.x = 1      # Error: 'x' not defined\n</code></pre>"},{"location":"mypy/class_basics/#\u6ce8\u89e3-__init__-\u65b9\u6cd5","title":"\u6ce8\u89e3 __init__ \u65b9\u6cd5","text":"\u4e2d\u6587\u82f1\u6587 <p><code>__init__</code> \u65b9\u6cd5\u6709\u4e9b\u7279\u6b8a\u2014\u2014\u5b83\u4e0d\u8fd4\u56de\u503c\u3002 \u8fd9\u6700\u597d\u8868\u8fbe\u4e3a <code>-&gt; None</code>\u3002 \u7136\u800c\uff0c\u7531\u4e8e\u8bb8\u591a\u4eba\u8ba4\u4e3a\u8fd9\u662f\u591a\u4f59\u7684\uff0c\u56e0\u6b64\u5141\u8bb8\u7701\u7565 <code>__init__</code> \u65b9\u6cd5\u7684\u8fd4\u56de\u7c7b\u578b\u58f0\u660e \u5982\u679c\u81f3\u5c11\u6709\u4e00\u4e2a\u53c2\u6570\u88ab\u6ce8\u91ca\u3002 \u4f8b\u5982\uff0c\u5728\u4ee5\u4e0b\u7c7b\u4e2d <code>__init__</code> \u88ab\u8ba4\u4e3a\u662f\u5b8c\u5168\u6ce8\u91ca\u7684\uff1a</p> <pre><code>class C1:\n    def __init__(self) -&gt; None:\n        self.var = 42\n\nclass C2:\n    def __init__(self, arg: int):\n        self.var = arg\n</code></pre> <p>\u4f46\u662f\uff0c\u5982\u679c <code>__init__</code> \u6ca1\u6709\u5e26\u6ce8\u89e3\u7684\u53c2\u6570\uff0c\u4e5f\u6ca1\u6709\u8fd4\u56de\u7c7b\u578b\u6ce8\u89e3\uff0c\u5219\u5b83\u88ab\u89c6\u4e3a\u65e0\u7c7b\u578b\u6ce8\u89e3\u65b9\u6cd5\uff1a</p> <pre><code>class C3:\n    def __init__(self):\n        # \u8be5\u4e3b\u4f53\u5c06\u4e0d\u4f1a\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\n        self.var = 42 + 'abc'\n</code></pre> <p>Annotating __init__ methods</p> <p>The <code>__init__</code> method is somewhat special -- it doesn't return a value.  This is best expressed as <code>-&gt; None</code>.  However, since many feel this is redundant, it is allowed to omit the return type declaration on <code>__init__</code> methods if at least one argument is annotated.  For example, in the following classes <code>__init__</code> is considered fully annotated:</p> <pre><code>class C1:\n    def __init__(self) -&gt; None:\n        self.var = 42\n\nclass C2:\n    def __init__(self, arg: int):\n        self.var = arg\n</code></pre> <p>However, if <code>__init__</code> has no annotated arguments and no return type annotation, it is considered an untyped method:</p> <pre><code>class C3:\n    def __init__(self):\n        # This body is not type checked\n        self.var = 42 + 'abc'\n</code></pre>"},{"location":"mypy/class_basics/#\u7c7b\u5c5e\u6027\u6ce8\u89e3","title":"\u7c7b\u5c5e\u6027\u6ce8\u89e3","text":"\u4e2d\u6587\u82f1\u6587 <p>\u60a8\u53ef\u4ee5\u4f7f\u7528 <code>ClassVar[t]</code> \u6ce8\u91ca\u6765\u663e\u5f0f\u58f0\u660e\u4e0d\u5e94\u5728\u5b9e\u4f8b\u4e0a\u8bbe\u7f6e\u7279\u5b9a\u5c5e\u6027\uff1a</p> <pre><code>from typing import ClassVar\n\nclass A:\n    x: ClassVar[int] = 0  # \u4ec5\u7c7b\u53d8\u91cf\n\nA.x += 1  # OK\n\na = A()\na.x = 1  # Error: \u65e0\u6cd5\u901a\u8fc7\u5b9e\u4f8b\u5206\u914d\u7ed9\u7c7b\u53d8\u91cf\u201cx\u201d\nprint(a.x)  # OK -- \u53ef\u4ee5\u901a\u8fc7\u5b9e\u4f8b\u8bfb\u53d6\n</code></pre> <p>\u6ca1\u6709\u5fc5\u8981\u4f7f\u7528 <code>ClassVar[t]</code> \u6ce8\u89e3\u6240\u6709\u7c7b\u53d8\u91cf\u3002 \u6ca1\u6709 <code>ClassVar[t]</code> \u6ce8\u91ca\u7684\u5c5e\u6027\u4ecd\u7136\u53ef\u4ee5\u7528\u4f5c\u7c7b\u53d8\u91cf\u3002 \u7136\u800c\uff0cmypy \u4e0d\u4f1a\u963b\u6b62\u5b83\u88ab\u7528\u4f5c\u5b9e\u4f8b\u53d8\u91cf\uff0c\u5982\u524d\u9762\u6240\u8ba8\u8bba\u7684\uff1a</p> <pre><code>class A:\n    x = 0  # \u53ef\u4ee5\u7528\u4f5c\u7c7b\u6216\u5b9e\u4f8b\u53d8\u91cf\n\nA.x += 1  # OK\n\na = A()\na.x = 1  # \u8fd8\u53ef\u4ee5\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c <code>ClassVar[t]</code> \u4e0d\u662f\u4e00\u4e2a\u7c7b\uff0c\u5e76\u4e14\u60a8\u4e0d\u80fd\u5c06\u5b83\u4e0e <code>isinstance</code> \u4e00\u8d77\u4f7f\u7528  \u6216 <code>issubclass</code>\u3002 \u5b83\u4e0d\u4f1a\u6539\u53d8 Python \u8fd0\u884c\u65f6\u884c\u4e3a\u2014\u2014\u5b83\u4ec5\u9002\u7528\u4e8e\u7c7b\u578b\u68c0\u67e5\u5668\uff0c\u4f8b\u5982 mypy\uff08\u5bf9\u4eba\u7c7b\u8bfb\u8005\u4e5f\u6709\u5e2e\u52a9\uff09\u3002</p> <p>\u60a8\u8fd8\u53ef\u4ee5\u5728 <code>ClassVar[t]</code> \u6ce8\u91ca\u4e2d\u7701\u7565\u65b9\u62ec\u53f7\u548c\u53d8\u91cf\u7c7b\u578b\uff0c\u4f46\u8fd9\u53ef\u80fd\u4e0d\u4f1a\u662f\u4f60\u6240\u671f\u671b\u7684\uff1a</p> <pre><code>class A:\n    y: ClassVar = 0  # \u7c7b\u578b\u9690\u5f0f\u4e3a Any!\n</code></pre> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5c5e\u6027\u7684\u7c7b\u578b\u5c06\u9690\u5f0f\u4e3a\u201cAny\u201d\u3002 \u8fd9\u79cd\u884c\u4e3a\u5c06\u6765\u4f1a\u6539\u53d8\uff0c\u56e0\u4e3a\u5b83\u4ee4\u4eba\u60ca\u8bb6\u3002</p> <p>\u663e\u5f0f\u7684 <code>ClassVar[t]</code> \u53ef\u80fd\u7279\u522b\u65b9\u4fbf\u533a\u5206\u5177\u6709\u53ef\u8c03\u7528\u7c7b\u578b\u7684\u7c7b\u53d8\u91cf\u548c\u5b9e\u4f8b\u53d8\u91cf\u3002 \u4f8b\u5982\uff1a</p> <pre><code>from typing import Callable, ClassVar\n\nclass A:\n    foo: Callable[[int], None]\n    bar: ClassVar[Callable[[A, int], None]]\n    bad: Callable[[A], None]\n\nA().foo(42)  # OK\nA().bar(42)  # OK\nA().bad()  # Error: Too few arguments\n</code></pre> <p>Note</p> <p><code>ClassVar[t]</code> \u7c7b\u578b\u53c2\u6570\u4e0d\u80fd\u5305\u542b\u7c7b\u578b\u53d8\u91cf\uff1a<code>ClassVar[T]</code> \u548c <code>ClassVar[list \u5982\u679c</code>T<code>\u662f\u7c7b\u578b\u53d8\u91cf\uff0c\u5219 [T]]</code> \u5747\u65e0\u6548\uff08\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 <code>generic-classes</code> \u5173\u4e8e\u7c7b\u578b\u53d8\u91cf\uff09\u3002</p> <p>Class attribute annotations</p> <p>You can use a <code>ClassVar[t]</code> annotation to explicitly declare that a particular attribute should not be set on instances:</p> <pre><code>from typing import ClassVar\n\nclass A:\n    x: ClassVar[int] = 0  # Class variable only\n\nA.x += 1  # OK\n\na = A()\na.x = 1  # Error: Cannot assign to class variable \"x\" via instance\nprint(a.x)  # OK -- can be read through an instance\n</code></pre> <p>It's not necessary to annotate all class variables using <code>ClassVar[t]</code>. An attribute without the <code>ClassVar[t]</code> annotation can still be used as a class variable. However, mypy won't prevent it from being used as an instance variable, as discussed previously:</p> <pre><code>class A:\n    x = 0  # Can be used as a class or instance variable\n\nA.x += 1  # OK\n\na = A()\na.x = 1  # Also OK\n</code></pre> <p>Note that <code>ClassVar[t]</code> is not a class, and you can't use it with <code>isinstance</code> or <code>issubclass</code>. It does not change Python runtime behavior -- it's only for type checkers such as mypy (and also helpful for human readers).</p> <p>You can also omit the square brackets and the variable type in a <code>ClassVar[t]</code> annotation, but this might not do what you'd expect:</p> <pre><code>class A:\n    y: ClassVar = 0  # Type implicitly Any!\n</code></pre> <p>In this case the type of the attribute will be implicitly <code>Any</code>. This behavior will change in the future, since it's surprising.</p> <p>An explicit <code>ClassVar[t]</code> may be particularly handy to distinguish between class and instance variables with callable types. For example:</p> <pre><code>from typing import Callable, ClassVar\n\nclass A:\n    foo: Callable[[int], None]\n    bar: ClassVar[Callable[[A, int], None]]\n    bad: Callable[[A], None]\n\nA().foo(42)  # OK\nA().bar(42)  # OK\nA().bad()  # Error: Too few arguments\n</code></pre> <p>Note</p> <p>A <code>ClassVar[t]</code> type parameter cannot include type variables: <code>ClassVar[T]</code> and <code>ClassVar[list[T]]</code> are both invalid if <code>T</code> is a type variable (see <code>generic-classes</code> for more about type variables).</p>"},{"location":"mypy/class_basics/#\u91cd\u5199\u9759\u6001\u7c7b\u578b\u65b9\u6cd5","title":"\u91cd\u5199\u9759\u6001\u7c7b\u578b\u65b9\u6cd5","text":"\u4e2d\u6587\u82f1\u6587 <p>\u5f53\u91cd\u5199\u9759\u6001\u7c7b\u578b\u65b9\u6cd5\u65f6\uff0cmypy \u68c0\u67e5\u91cd\u5199\u662f\u5426\u5177\u6709\u517c\u5bb9\u7684\u7b7e\u540d\uff1a</p> <pre><code>class Base:\n    def f(self, x: int) -&gt; None:\n        ...\n\nclass Derived1(Base):\n    def f(self, x: str) -&gt; None:   # Error: type of 'x' incompatible (\u4e0d\u517c\u5bb9)\n        ...\n\nclass Derived2(Base):\n    def f(self, x: int, y: int) -&gt; None:  # Error: too many arguments\n        ...\n\nclass Derived3(Base):\n    def f(self, x: int) -&gt; None:   # OK\n        ...\n\nclass Derived4(Base):\n    def f(self, x: float) -&gt; None:   # OK: mypy \u5c06 int \u89c6\u4e3a float \u7684\u5b50\u7c7b\u578b\n        ...\n\nclass Derived5(Base):\n    def f(self, x: int, y: int = 0) -&gt; None:   # OK: \u63a5\u53d7\u6bd4\u57fa\u7c7b\u66f4\u591a\u53c2\u6570\u7684\u65b9\u6cd5\n</code></pre> <p>Note</p> <p>\u60a8\u8fd8\u53ef\u4ee5\u5728\u91cd\u5199\u4e2d\u534f\u53d8\u5730\u6539\u53d8\u8fd4\u56de\u7c7b\u578b\u3002 \u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 <code>list[int]</code> \u7b49\u5b50\u7c7b\u578b\u8986\u76d6\u8fd4\u56de\u7c7b\u578b <code>Iterable[int]</code> \u3002 \u7c7b\u4f3c\u5730\uff0c\u60a8\u53ef\u4ee5\u9006\u53d8\u5730\u6539\u53d8\u53c2\u6570\u7c7b\u578b\u2014\u2014\u5b50\u7c7b\u53ef\u4ee5\u6709\u66f4\u901a\u7528\u7684\u53c2\u6570\u7c7b\u578b\u3002</p> <p>\u4e3a\u4e86\u786e\u4fdd\u91cd\u547d\u540d\u65b9\u6cd5\u65f6\u4ee3\u7801\u4fdd\u6301\u6b63\u786e\uff0c\u5c06\u65b9\u6cd5\u663e\u5f0f\u6807\u8bb0\u4e3a\u8986\u76d6\u57fa\u672c\u65b9\u6cd5\u4f1a\u5f88\u6709\u5e2e\u52a9\u3002 \u8fd9\u53ef\u4ee5\u901a\u8fc7 <code>@override</code> \u88c5\u9970\u5668\u6765\u5b8c\u6210\u3002 \u5982\u679c\u968f\u540e\u91cd\u547d\u540d\u4e86\u57fa\u672c\u65b9\u6cd5\uff0c\u800c\u672a\u91cd\u547d\u540d\u91cd\u5199\u65b9\u6cd5\uff0c\u5219 mypy \u5c06\u663e\u793a\u9519\u8bef\uff1a</p> <pre><code>from typing import override\n\nclass Base:\n    def f(self, x: int) -&gt; None:\n        ...\n    def g_renamed(self, y: str) -&gt; None:\n        ...\n\nclass Derived1(Base):\n    @override\n    def f(self, x: int) -&gt; None:   # OK\n        ...\n\n    @override\n    def g(self, y: str) -&gt; None:   # Error: \u6ca1\u6709\u627e\u5230\u5bf9\u5e94\u7684\u57fa\u7840\u65b9\u6cd5\n        ...\n</code></pre> <p>\u60a8\u8fd8\u53ef\u4ee5\u4f7f\u7528\u52a8\u6001\u7c7b\u578b\u65b9\u6cd5\u8986\u76d6\u9759\u6001\u7c7b\u578b\u65b9\u6cd5\u3002 \u8fd9\u5141\u8bb8\u52a8\u6001\u7c7b\u578b\u4ee3\u7801\u8986\u76d6\u5e93\u7c7b\u4e2d\u5b9a\u4e49\u7684\u65b9\u6cd5\uff0c\u800c\u65e0\u9700\u62c5\u5fc3\u5b83\u4eec\u7684\u7c7b\u578b\u7b7e\u540d\u3002</p> <p>\u4e00\u5982\u65e2\u5f80\uff0c\u4f9d\u8d56\u52a8\u6001\u7c7b\u578b\u4ee3\u7801\u53ef\u80fd\u662f\u4e0d\u5b89\u5168\u7684\u3002 \u6ca1\u6709\u8fd0\u884c\u65f6\u5f3a\u5236\u65b9\u6cd5\u91cd\u5199\u8fd4\u56de\u4e0e\u539f\u59cb\u8fd4\u56de\u7c7b\u578b\u517c\u5bb9\u7684\u503c\uff0c\u56e0\u4e3a\u6ce8\u89e3\u5728\u8fd0\u884c\u65f6\u4e0d\u8d77\u4f5c\u7528\uff1a</p> <pre><code>class Base:\n    def inc(self, x: int) -&gt; int:\n        return x + 1\n\nclass Derived(Base):\n    def inc(self, x):   # Override, dynamically typed\n        return 'hello'  # Incompatible with 'Base', but no mypy error\n</code></pre> <p>Overriding statically typed methods</p> <p>When overriding a statically typed method, mypy checks that the override has a compatible signature:</p> <pre><code>class Base:\n    def f(self, x: int) -&gt; None:\n        ...\n\nclass Derived1(Base):\n    def f(self, x: str) -&gt; None:   # Error: type of 'x' incompatible\n        ...\n\nclass Derived2(Base):\n    def f(self, x: int, y: int) -&gt; None:  # Error: too many arguments\n        ...\n\nclass Derived3(Base):\n    def f(self, x: int) -&gt; None:   # OK\n        ...\n\nclass Derived4(Base):\n    def f(self, x: float) -&gt; None:   # OK: mypy treats int as a subtype of float\n        ...\n\nclass Derived5(Base):\n    def f(self, x: int, y: int = 0) -&gt; None:   # OK: accepts more than the base\n        ...                                    #     class method\n</code></pre> <p>Note</p> <p>You can also vary return types covariantly in overriding. For example, you could override the return type <code>Iterable[int]</code> with a subtype such as <code>list[int]</code>. Similarly, you can vary argument types contravariantly -- subclasses can have more general argument types.</p> <p>In order to ensure that your code remains correct when renaming methods, it can be helpful to explicitly mark a method as overriding a base method. This can be done with the <code>@override</code> decorator. If the base method is then renamed while the overriding method is not, mypy will show an error:</p> <pre><code>from typing import override\n\nclass Base:\n    def f(self, x: int) -&gt; None:\n        ...\n    def g_renamed(self, y: str) -&gt; None:\n        ...\n\nclass Derived1(Base):\n    @override\n    def f(self, x: int) -&gt; None:   # OK\n        ...\n\n    @override\n    def g(self, y: str) -&gt; None:   # Error: no corresponding base method found\n        ...\n</code></pre> <p>You can also override a statically typed method with a dynamically typed one. This allows dynamically typed code to override methods defined in library classes without worrying about their type signatures.</p> <p>As always, relying on dynamically typed code can be unsafe. There is no runtime enforcement that the method override returns a value that is compatible with the original return type, since annotations have no effect at runtime:</p> <pre><code>class Base:\n    def inc(self, x: int) -&gt; int:\n        return x + 1\n\nclass Derived(Base):\n    def inc(self, x):   # Override, dynamically typed\n        return 'hello'  # Incompatible with 'Base', but no mypy error\n</code></pre>"},{"location":"mypy/class_basics/#\u62bd\u8c61\u57fa\u7c7b\u548c\u591a\u91cd\u7ee7\u627f","title":"\u62bd\u8c61\u57fa\u7c7b\u548c\u591a\u91cd\u7ee7\u627f","text":"\u4e2d\u6587\u82f1\u6587 <p>Mypy \u652f\u6301 Python <code>\u62bd\u8c61\u57fa\u7c7b</code> (ABC)\u3002 \u62bd\u8c61\u7c7b\u81f3\u5c11\u6709\u4e00\u4e2a\u62bd\u8c61\u65b9\u6cd5\u6216\u5c5e\u6027\uff0c\u5fc5\u987b\u7531\u4efb\u4f55 \u201c\u5177\u4f53\u201d\uff08\u975e\u62bd\u8c61\uff09\u5b50\u7c7b\u5b9e\u73b0\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528 <code>abc.ABCMeta</code> \u5143\u7c7b\u548c [<code>@abc.abstractmethod</code>]( https://docs.python.org/3/library/abc.html#abc.abstractmethod\uff09\u51fd\u6570\u88c5\u9970\u5668\u3002 \u4f8b\u5b50\uff1a</p> <pre><code>from abc import ABCMeta, abstractmethod\n\nclass Animal(metaclass=ABCMeta):\n    @abstractmethod\n    def eat(self, food: str) -&gt; None: pass\n\n    @property\n    @abstractmethod\n    def can_walk(self) -&gt; bool: pass\n\nclass Cat(Animal):\n    def eat(self, food: str) -&gt; None:\n        ...  # Body omitted\n\n    @property\n    def can_walk(self) -&gt; bool:\n        return True\n\nx = Animal()  # Error: 'Animal' is abstract due to 'eat' and 'can_walk'\ny = Cat()     # OK\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u5373\u4f7f\u60a8\u7701\u7565\u4e86 <code>abc.ABCMeta</code> \u5143\u7c7b\uff0cmypy \u4e5f\u4f1a\u6267\u884c\u672a\u5b9e\u73b0\u7684\u62bd\u8c61\u65b9\u6cd5\u7684\u68c0\u67e5\u3002 \u5982\u679c\u5143\u7c7b\u4f1a\u5bfc\u81f4\u8fd0\u884c\u65f6\u5143\u7c7b\u51b2\u7a81\uff0c\u8fd9\u53ef\u80fd\u5f88\u6709\u7528\u3002</p> <p>\u7531\u4e8e\u60a8\u65e0\u6cd5\u521b\u5efa ABC \u7684\u5b9e\u4f8b\uff0c\u56e0\u6b64\u5b83\u4eec\u6700\u5e38\u7528\u4e8e\u7c7b\u578b\u6ce8\u91ca\u4e2d\u3002 \u4f8b\u5982\uff0c\u6b64\u65b9\u6cd5\u63a5\u53d7\u5305\u542b\u4efb\u610f\u52a8\u7269\u7684\u4efb\u610f\u8fed\u4ee3\uff08\u5177\u4f53\u201cAnimal\u201d\u5b50\u7c7b\u7684\u5b9e\u4f8b\uff09\uff1a</p> <pre><code>def feed_all(animals: Iterable[Animal], food: str) -&gt; None:\n    for animal in animals:\n        animal.eat(food)\n</code></pre> <p>Python \u4e2d ABC \u7684\u5de5\u4f5c\u65b9\u5f0f\u6709\u4e00\u4e2a\u91cd\u8981\u7684\u7279\u70b9\u2014\u2014\u7279\u5b9a\u7c7b\u662f\u5426\u662f\u62bd\u8c61\u7684\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u662f\u9690\u542b\u7684\u3002 \u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u201cDerived\u201d\u88ab\u89c6\u4e3a\u62bd\u8c61\u57fa\u7c7b\uff0c\u56e0\u4e3a\u201cDerived\u201d\u4ece\u201cBase\u201d\u7ee7\u627f\u4e86\u62bd\u8c61\u201cf\u201d\u65b9\u6cd5\uff0c\u5e76\u4e14\u6ca1\u6709\u663e\u5f0f\u5b9e\u73b0\u5b83\u3002 <code>Derived</code> \u7684\u5b9a\u4e49\u4e0d\u4f1a\u4ece mypy \u4e2d\u751f\u6210\u9519\u8bef\uff0c\u56e0\u4e3a\u5b83\u662f\u6709\u6548\u7684 ABC\uff1a</p> <pre><code>from abc import ABCMeta, abstractmethod\n\nclass Base(metaclass=ABCMeta):\n    @abstractmethod\n    def f(self, x: int) -&gt; None: pass\n\nclass Derived(Base):  # No error -- Derived \u9690\u5f0f \u62bd\u8c61\n    def g(self) -&gt; None:\n        ...\n</code></pre> <p>\u4f46\u662f\uff0c\u5c1d\u8bd5\u521b\u5efa \u201cDerived\u201d \u5b9e\u4f8b\u5c06\u88ab\u62d2\u7edd\uff1a</p> <pre><code>d = Derived()  # Error: 'Derived' is abstract\n</code></pre> <p>Note</p> <p>\u5fd8\u8bb0\u5b9e\u73b0\u62bd\u8c61\u65b9\u6cd5\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u9519\u8bef\u3002 \u5982\u4e0a\u6240\u793a\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7c7b\u5b9a\u4e49\u4e0d\u4f1a\u751f\u6210\u9519\u8bef\uff0c\u4f46\u4efb\u4f55\u6784\u9020\u5b9e\u4f8b\u7684\u5c1d\u8bd5\u90fd\u5c06\u88ab\u6807\u8bb0\u4e3a\u9519\u8bef\u3002</p> <p>Mypy \u5141\u8bb8\u60a8\u7701\u7565\u62bd\u8c61\u65b9\u6cd5\u7684\u4e3b\u4f53\uff0c\u4f46\u5982\u679c\u8fd9\u6837\u505a\uff0c\u901a\u8fc7 <code>super()</code> \u8c03\u7528\u6b64\u7c7b\u65b9\u6cd5\u662f\u4e0d\u5b89\u5168\u7684\u3002 \u4f8b\u5982\uff1a</p> <pre><code>from abc import abstractmethod\nclass Base:\n    @abstractmethod\n    def foo(self) -&gt; int: pass\n    @abstractmethod\n    def bar(self) -&gt; int:\n        return 0\nclass Sub(Base):\n    def foo(self) -&gt; int:\n        return super().foo() + 1  # error: \u901a\u8fc7 super() \u8c03\u7528\u5e26\u6709\u7b80\u5355\u4e3b\u4f53\u7684\u201cBase\u201d\u7684\u62bd\u8c61\u65b9\u6cd5\u201cfoo\u201d\u662f\u4e0d\u5b89\u5168\u7684\n    @abstractmethod\n    def bar(self) -&gt; int:\n        return super().bar() + 1  # \u4e0d\u8fc7\u8fd9\u6ca1\u5173\u7cfb\u3002\n</code></pre> <p>\u4e00\u4e2a\u7c7b\u53ef\u4ee5\u7ee7\u627f\u4efb\u610f\u6570\u91cf\u7684\u7c7b\uff0c\u5305\u62ec\u62bd\u8c61\u7c7b\u548c\u5177\u4f53\u7c7b\u3002 \u4e0e\u666e\u901a\u91cd\u5199\u4e00\u6837\uff0c\u52a8\u6001\u7c7b\u578b\u65b9\u6cd5\u53ef\u4ee5\u91cd\u5199\u6216\u5b9e\u73b0\u4efb\u4f55\u57fa\u7c7b\u4e2d\u5b9a\u4e49\u7684\u9759\u6001\u7c7b\u578b\u65b9\u6cd5\uff0c\u5305\u62ec\u62bd\u8c61\u57fa\u7c7b\u4e2d\u5b9a\u4e49\u7684\u62bd\u8c61\u65b9\u6cd5\u3002</p> <p>\u60a8\u53ef\u4ee5\u4f7f\u7528\u666e\u901a\u5c5e\u6027\u6216\u5b9e\u4f8b\u53d8\u91cf\u6765\u5b9e\u73b0\u62bd\u8c61\u5c5e\u6027\u3002</p> <p>Abstract base classes and multiple inheritance</p> <p>Mypy supports Python <code>abstract base classes</code> (ABCs). Abstract classes have at least one abstract method or property that must be implemented by any concrete (non-abstract) subclass. You can define abstract base classes using the <code>abc.ABCMeta</code> metaclass and the <code>@abc.abstractmethod</code> function decorator. Example:</p> <pre><code>from abc import ABCMeta, abstractmethod\n\nclass Animal(metaclass=ABCMeta):\n    @abstractmethod\n    def eat(self, food: str) -&gt; None: pass\n\n    @property\n    @abstractmethod\n    def can_walk(self) -&gt; bool: pass\n\nclass Cat(Animal):\n    def eat(self, food: str) -&gt; None:\n        ...  # Body omitted\n\n    @property\n    def can_walk(self) -&gt; bool:\n        return True\n\nx = Animal()  # Error: 'Animal' is abstract due to 'eat' and 'can_walk'\ny = Cat()     # OK\n</code></pre> <p>Note that mypy performs checking for unimplemented abstract methods even if you omit the <code>abc.ABCMeta</code> metaclass. This can be useful if the metaclass would cause runtime metaclass conflicts.</p> <p>Since you can't create instances of ABCs, they are most commonly used in type annotations. For example, this method accepts arbitrary iterables containing arbitrary animals (instances of concrete <code>Animal</code> subclasses):</p> <pre><code>def feed_all(animals: Iterable[Animal], food: str) -&gt; None:\n    for animal in animals:\n        animal.eat(food)\n</code></pre> <p>There is one important peculiarity about how ABCs work in Python -- whether a particular class is abstract or not is somewhat implicit. In the example below, <code>Derived</code> is treated as an abstract base class since <code>Derived</code> inherits an abstract <code>f</code> method from <code>Base</code> and doesn't explicitly implement it. The definition of <code>Derived</code> generates no errors from mypy, since it's a valid ABC:</p> <pre><code>from abc import ABCMeta, abstractmethod\n\nclass Base(metaclass=ABCMeta):\n    @abstractmethod\n    def f(self, x: int) -&gt; None: pass\n\nclass Derived(Base):  # No error -- Derived is implicitly abstract\n    def g(self) -&gt; None:\n        ...\n</code></pre> <p>Attempting to create an instance of <code>Derived</code> will be rejected, however:</p> <pre><code>d = Derived()  # Error: 'Derived' is abstract\n</code></pre> <p>Note</p> <p>It's a common error to forget to implement an abstract method. As shown above, the class definition will not generate an error in this case, but any attempt to construct an instance will be flagged as an error.</p> <p>Mypy allows you to omit the body for an abstract method, but if you do so, it is unsafe to call such method via <code>super()</code>. For example:</p> <pre><code>from abc import abstractmethod\nclass Base:\n    @abstractmethod\n    def foo(self) -&gt; int: pass\n    @abstractmethod\n    def bar(self) -&gt; int:\n        return 0\nclass Sub(Base):\n    def foo(self) -&gt; int:\n        return super().foo() + 1  # error: Call to abstract method \"foo\" of \"Base\"\n                                  # with trivial body via super() is unsafe\n    @abstractmethod\n    def bar(self) -&gt; int:\n        return super().bar() + 1  # This is OK however.\n</code></pre> <p>A class can inherit any number of classes, both abstract and concrete. As with normal overrides, a dynamically typed method can override or implement a statically typed method defined in any base class, including an abstract method defined in an abstract base class.</p> <p>You can implement an abstract property using either a normal property or an instance variable.</p>"},{"location":"mypy/class_basics/#slots","title":"Slots","text":"\u4e2d\u6587\u82f1\u6587 <p>\u5f53\u4e00\u4e2a\u7c7b\u663e\u5f0f\u5b9a\u4e49\u4e86 __slots__ \u65f6\uff0cmypy \u5c06\u68c0\u67e5\u5206\u914d\u7ed9\u7684\u6240\u6709\u5c5e\u6027\u662f\u5426\u90fd\u662f <code>__slots__</code> \u7684\u6210\u5458  \uff1a</p> <pre><code>class Album:\n    __slots__ = ('name', 'year')\n\n    def __init__(self, name: str, year: int) -&gt; None:\n       self.name = name\n       self.year = year\n       # Error: Trying to assign name \"released\" that is not in \"__slots__\" of type \"Album\"\n       self.released = True\n\nmy_album = Album('Songs about Python', 2021)\n</code></pre> <p>\u5f53\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u65f6\uff0cMypy \u5c06\u4ec5\u68c0\u67e5 <code>__slots__</code> \u7684\u5c5e\u6027\u5206\u914d\uff1a</p> <ol> <li>\u6240\u6709\u57fa\u7c7b\uff08\u5185\u7f6e\u57fa\u7c7b\u9664\u5916\uff09\u5fc5\u987b\u660e\u786e\u5b9a\u4e49 <code>__slots__</code>\uff08\u8fd9\u53cd\u6620\u4e86 Python \u8bed\u4e49\uff09\u3002</li> <li><code>__slots__</code> \u4e0d\u5305\u62ec <code>__dict__</code>\u3002 \u5982\u679c <code>__slots__</code> \u5305\u542b <code>__dict__</code> \uff0c\u5219\u53ef\u4ee5\u8bbe\u7f6e\u4efb\u610f\u5c5e\u6027\uff0c\u7c7b\u4f3c\u4e8e\u672a\u5b9a\u4e49 <code>__slots__</code> \u65f6\uff08\u8fd9\u53cd\u6620\u4e86 Python \u8bed\u4e49\uff09\u3002</li> <li><code>__slots__</code> \u4e2d\u7684\u6240\u6709\u503c\u90fd\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u6587\u5b57\u3002</li> </ol> <p>Slots</p> <p>When a class has explicitly defined __slots__, mypy will check that all attributes assigned to are members of <code>__slots__</code>:</p> <pre><code>class Album:\n    __slots__ = ('name', 'year')\n\n    def __init__(self, name: str, year: int) -&gt; None:\n       self.name = name\n       self.year = year\n       # Error: Trying to assign name \"released\" that is not in \"__slots__\" of type \"Album\"\n       self.released = True\n\nmy_album = Album('Songs about Python', 2021)\n</code></pre> <p>Mypy will only check attribute assignments against <code>__slots__</code> when the following conditions hold:</p> <ol> <li>All base classes (except builtin ones) must have explicit <code>__slots__</code> defined (this mirrors Python semantics).</li> <li><code>__slots__</code> does not include <code>__dict__</code>. If <code>__slots__</code> includes <code>__dict__</code>, arbitrary attributes can be set, similar to when <code>__slots__</code> is not defined (this mirrors Python semantics).</li> <li>All values in <code>__slots__</code> must be string literals.</li> </ol>"},{"location":"mypy/duck_type_compatibility/","title":"\u9e2d\u5b50\u7c7b\u578b\u517c\u5bb9\u6027","text":"\u4e2d\u6587\u82f1\u6587 <p>\u5728 Python \u4e2d\uff0c\u67d0\u4e9b\u7c7b\u578b\u662f\u517c\u5bb9\u7684\uff0c\u5373\u4f7f\u5b83\u4eec\u4e0d\u662f\u5f7c\u6b64\u7684\u5b50\u7c7b\u3002 \u4f8b\u5982\uff0c\u6bcf\u5f53\u9700\u8981 <code>float</code> \u5bf9\u8c61\u65f6\uff0c<code>int</code>\u5bf9\u8c61\u90fd\u662f\u6709\u6548\u7684\u3002 Mypy \u901a\u8fc7 duck \u7c7b\u578b\u517c\u5bb9\u6027 \u652f\u6301\u8fd9\u79cd\u4e60\u60ef\u7528\u6cd5\u3002 \u4e00\u5c0f\u7ec4\u5185\u7f6e\u7c7b\u578b\u652f\u6301\u8fd9\u4e00\u70b9\uff1a</p> <ul> <li><code>int</code> \u662f\u4e0e <code>float</code> \u548c <code>complex</code> \u517c\u5bb9\u7684\u9e2d\u5b50\u7c7b\u578b\u3002</li> <li><code>float</code> \u662f\u4e0e <code>complex</code> \u517c\u5bb9\u7684\u9e2d\u5b50\u7c7b\u578b\u3002</li> <li><code>bytearray</code> \u548c <code>memoryview</code> \u662f\u4e0e <code>bytes</code> \u517c\u5bb9\u7684\u9e2d\u5b50\u7c7b\u578b\u3002</li> </ul> <p>\u4f8b\u5982\uff0c\u53ea\u8981\u9700\u8981 <code>float</code> \u5bf9\u8c61\uff0cmypy \u5c31\u4f1a\u8ba4\u4e3a <code>int</code> \u5bf9\u8c61\u6709\u6548\u3002 \u56e0\u6b64\uff0c\u8fd9\u6837\u7684\u4ee3\u7801\u5e72\u51c0\u6574\u6d01\uff0c\u5e76\u4e14\u884c\u4e3a\u4e5f\u7b26\u5408\u9884\u671f\uff1a</p> <pre><code>import math\n\ndef degrees_to_radians(degrees: float) -&gt; float:\n    return math.pi * degrees / 180\n\nn = 90  # \u63a8\u65ad\u7c7b\u578b\u201cint\u201d\nprint(degrees_to_radians(n))  # Okay!\n</code></pre> <p>\u60a8\u8fd8\u53ef\u4ee5\u7ecf\u5e38\u4f7f\u7528\u534f\u8bae\u548c\u7ed3\u6784\u5b50\u7c7b\u578b\u4ee5\u66f4\u6709\u539f\u5219\u548c\u53ef\u6269\u5c55\u7684\u65b9\u5f0f\u5b9e\u73b0\u7c7b\u4f3c\u7684\u6548\u679c\u3002 \u534f\u8bae\u4e0d\u9002\u7528\u4e8e\u50cf<code>int</code>\u4e0e<code>float</code>\u517c\u5bb9\u7684\u60c5\u51b5\uff0c\u56e0\u4e3a<code>float</code>\u4e0d\u662f\u4e00\u4e2a\u534f\u8bae\u7c7b\uff0c\u800c\u662f\u4e00\u4e2a\u5e38\u89c4\u7684\u5177\u4f53\u7c7b\uff0c\u5e76\u4e14\u8bb8\u591a\u6807\u51c6\u5e93\u51fd\u6570\u671f\u671b<code>float</code>\uff08\u6216<code>int</code>\uff09\u7684\u5177\u4f53\u5b9e\u4f8b `\uff09\u3002</p> <p>Duck type compatibility</p> <p>In Python, certain types are compatible even though they aren't subclasses of each other. For example, <code>int</code> objects are valid whenever <code>float</code> objects are expected. Mypy supports this idiom via duck type compatibility. This is supported for a small set of built-in types:</p> <ul> <li><code>int</code> is duck type compatible with <code>float</code> and <code>complex</code>.</li> <li><code>float</code> is duck type compatible with <code>complex</code>.</li> <li><code>bytearray</code> and <code>memoryview</code> are duck type compatible with <code>bytes</code>.</li> </ul> <p>For example, mypy considers an <code>int</code> object to be valid whenever a <code>float</code> object is expected.  Thus code like this is nice and clean and also behaves as expected:</p> <pre><code>import math\n\ndef degrees_to_radians(degrees: float) -&gt; float:\n    return math.pi * degrees / 180\n\nn = 90  # Inferred type 'int'\nprint(degrees_to_radians(n))  # Okay!\n</code></pre> <p>You can also often use <code>protocol-types</code> to achieve a similar effect in a more principled and extensible fashion. Protocols don't apply to cases like <code>int</code> being compatible with <code>float</code>, since <code>float</code> is not a protocol class but a regular, concrete class, and many standard library functions expect concrete instances of <code>float</code> (or <code>int</code>).</p>"},{"location":"mypy/dynamic_typing/","title":"\u52a8\u6001\u7c7b\u578b\u7684\u4ee3\u7801","text":"\u4e2d\u6587\u82f1\u6587 <p>\u5728 getting-started-dynamic-vs-static \u4e2d\uff0c\u6211\u4eec\u8ba8\u8bba\u4e86\u51fd\u6570\u4f53\u5982\u4f55 \u5728\u5176\u51fd\u6570\u4e2d\u6ca1\u6709\u4efb\u4f55\u663e\u5f0f\u7c7b\u578b\u6ce8\u91ca\u7684\u51fd\u6570\u662f<code>\u52a8\u6001\u7c7b\u578b\u7684</code>\uff0c\u5e76\u4e14 mypy \u4e0d\u4f1a\u68c0\u67e5\u5b83\u4eec\u3002 \u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u8be6\u7ec6\u8ba8\u8bba\u8fd9\u610f\u5473\u7740\u4ec0\u4e48\u4ee5\u53ca\u5982\u4f55\u5728\u66f4\u7ec6\u7c92\u5ea6\u7684\u57fa\u7840\u4e0a\u542f\u7528\u52a8\u6001\u7c7b\u578b\u3002</p> <p>\u5982\u679c\u60a8\u7684\u4ee3\u7801\u5bf9\u4e8e mypy \u6765\u8bf4\u592a\u795e\u5947\u800c\u65e0\u6cd5\u7406\u89e3\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u663e\u5f0f\u8d4b\u4e88\u53d8\u91cf\u6216\u53c2\u6570<code>Any</code>\u7c7b\u578b\u6765\u4f7f\u5176\u52a8\u6001\u7c7b\u578b\u5316\u3002 Mypy \u57fa\u672c\u4e0a\u53ef\u4ee5\u8ba9\u60a8\u4f7f\u7528<code>Any</code>\u7c7b\u578b\u7684\u503c\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\uff0c\u5305\u62ec\u5c06<code>Any</code>\u7c7b\u578b\u7684\u503c\u5206\u914d\u7ed9\u4efb\u4f55\u7c7b\u578b\u7684\u53d8\u91cf\uff08\u53cd\u4e4b\u4ea6\u7136\uff09\u3002</p> <pre><code>from typing import Any\n\nnum = 1         # \u9759\u6001\u7c7b\u578b\uff08\u63a8\u65ad\u4e3a int\uff09\nnum = 'x'       # error: Incompatible types in assignment (expression has type \"str\", variable has type \"int\")\n\ndyn: Any = 1    # \u52a8\u6001\u7c7b\u578b\uff08\u7c7b\u578b Any\uff09\ndyn = 'x'       # OK\n\nnum = dyn       # \u6ca1\u6709\u9519\u8bef\uff0cmypy \u4f1a\u8ba9\u4f60\u5c06 Any \u7c7b\u578b\u7684\u503c\u8d4b\u7ed9\u4efb\u4f55\u53d8\u91cf\nnum += 1        # Oops, mypy \u4ecd\u7136\u8ba4\u4e3a num \u662f int\n</code></pre> <p>\u60a8\u53ef\u4ee5\u5c06 <code>Any</code> \u89c6\u4e3a\u672c\u5730\u7981\u7528\u7c7b\u578b\u68c0\u67e5\u7684\u4e00\u79cd\u65b9\u6cd5\u3002 \u8bf7\u53c2\u9605 silencing-type-errors \u6765\u4e86\u89e3\u5173\u95ed\u7c7b\u578b\u68c0\u67e5\u5668\u7684\u5176\u4ed6\u65b9\u6cd5\u3002</p> <p>Dynamically typed code</p> <p>In <code>getting-started-dynamic-vs-static</code>, we discussed how bodies of functions that don't have any explicit type annotations in their function are \"dynamically typed\" and that mypy will not check them. In this section, we'll talk a little bit more about what that means and how you can enable dynamic typing on a more fine grained basis.</p> <p>In cases where your code is too magical for mypy to understand, you can make a variable or parameter dynamically typed by explicitly giving it the type <code>Any</code>. Mypy will let you do basically anything with a value of type <code>Any</code>, including assigning a value of type <code>Any</code> to a variable of any type (or vice versa).</p> <pre><code>from typing import Any\n\nnum = 1         # Statically typed (inferred to be int)\nnum = 'x'       # error: Incompatible types in assignment (expression has type \"str\", variable has type \"int\")\n\ndyn: Any = 1    # Dynamically typed (type Any)\ndyn = 'x'       # OK\n\nnum = dyn       # No error, mypy will let you assign a value of type Any to any variable\nnum += 1        # Oops, mypy still thinks num is an int\n</code></pre> <p>You can think of <code>Any</code> as a way to locally disable type checking. See <code>silencing-type-errors</code> for other ways you can shut up the type checker.</p>"},{"location":"mypy/dynamic_typing/#\u5bf9\u4efb\u610f\u503c\u7684\u64cd\u4f5c","title":"\u5bf9\u4efb\u610f\u503c\u7684\u64cd\u4f5c","text":"<p>Operations on Any values</p> \u4e2d\u6587\u82f1\u6587 <p>\u60a8\u53ef\u4ee5\u4f7f\u7528\u7c7b\u578b\u4e3a<code>Any</code>\u7684\u503c\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\uff0c\u5e76\u4e14\u7c7b\u578b\u68c0\u67e5\u5668\u4e0d\u4f1a\u62b1\u6028\uff1a</p> <pre><code>def f(x: Any) -&gt; int:\n    # \u8fd9\u4e9b\u90fd\u662f\u6709\u6548\u7684\uff01\n    x.foobar(1, y=2)\n    print(x[3] + 'f')\n    if x:\n        x.z = x(2)\n    open(x).read()\n    return x\n</code></pre> <p>\u4ece<code>Any</code>\u503c\u6d3e\u751f\u7684\u503c\u901a\u5e38\u4e5f\u9690\u5f0f\u5177\u6709<code>Any</code>\u7c7b\u578b\uff0c\u56e0\u4e3a mypy \u65e0\u6cd5\u63a8\u65ad\u51fa\u66f4\u7cbe\u786e\u7684\u7ed3\u679c\u7c7b\u578b\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u60a8\u83b7\u53d6<code>Any</code>\u503c\u7684\u5c5e\u6027\u6216\u8c03\u7528<code>Any</code>\u503c\uff0c\u5219\u7ed3\u679c\u4e3a<code>Any</code>\uff1a</p> <pre><code>def f(x: Any) -&gt; None:\n    y = x.foo()\n    reveal_type(y)  # \u63ed\u793a\u7684\u7c7b\u578b\u662f \"Any\"\n    z = y.bar(\"mypy will let you do anything to y\")\n    reveal_type(z)  # \u63ed\u793a\u7684\u7c7b\u578b\u662f \"Any\"\n</code></pre> <p>\u9664\u975e\u60a8\u5c0f\u5fc3\uff0c\u5426\u5219<code>Any</code>\u7c7b\u578b\u90fd\u53ef\u80fd\u5728\u60a8\u7684\u7a0b\u5e8f\u4e2d\u4f20\u64ad\uff0c\u4ece\u800c\u964d\u4f4e\u7c7b\u578b\u68c0\u67e5\u7684\u6548\u7387\u3002</p> <p>\u6ca1\u6709\u6ce8\u91ca\u7684\u51fd\u6570\u53c2\u6570\u4e5f\u9690\u5f0f\u4e3a\u201cAny\u201d\uff1a</p> <pre><code>def f(x) -&gt; None:\n    reveal_type(x)  # \u63ed\u793a\u7684\u7c7b\u578b\u662f \"Any\"\n    x.can.do[\"anything\", x](\"wants\", 2)\n</code></pre> <p>\u60a8\u53ef\u4ee5\u4f7f\u7528 <code>--disallow-untyped-defs</code> \u8ba9 mypy \u8b66\u544a\u60a8\u6709\u5173\u65e0\u7c7b\u578b\u51fd\u6570\u53c2\u6570\u7684\u4fe1\u606f\u6807\u5fd7\u3002</p> <p>\u7f3a\u5c11\u7c7b\u578b\u53c2\u6570\u7684\u6cdb\u578b\u7c7b\u578b\u4f1a\u5c06\u8fd9\u4e9b\u53c2\u6570\u9690\u5f0f\u89c6\u4e3a<code>Any</code>\uff1a</p> <pre><code>from typing import List\n\ndef f(x: List) -&gt; None:\n    reveal_type(x)        # \u63ed\u793a\u7684\u7c7b\u578b\u662f \"builtins.list[Any]\"\n    reveal_type(x[0])     # \u63ed\u793a\u7684\u7c7b\u578b\u662f \"Any\"\n    x[0].anything_goes()  # OK\n</code></pre> <p>\u60a8\u53ef\u4ee5\u4f7f\u7528 <code>--disallow-any-generics</code>\u8ba9 mypy \u8b66\u544a\u60a8\u6709\u5173\u975e\u7c7b\u578b\u5316\u51fd\u6570\u53c2\u6570\u7684\u4fe1\u606f\u6807\u5fd7\u3002</p> <p>\u6700\u540e\uff0c<code>Any</code>\u7c7b\u578b\u6cc4\u6f0f\u5230\u7a0b\u5e8f\u4e2d\u7684\u53e6\u4e00\u4e2a\u4e3b\u8981\u6765\u6e90\u662f\u6765\u81ea mypy \u4e0d\u77e5\u9053\u7684\u7b2c\u4e09\u65b9\u5e93\u3002 \u4f7f\u7528 <code>--ignore-missing-imports</code> \u6807\u5fd7\u65f6\u5c24\u5176\u5982\u6b64\u3002 \u6709\u5173\u6b64\u5185\u5bb9\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 <code>fix-missing-imports</code>\u3002</p> <p>You can do anything using a value with type <code>Any</code>, and the type checker will not complain:</p> <pre><code>def f(x: Any) -&gt; int:\n    # All of these are valid!\n    x.foobar(1, y=2)\n    print(x[3] + 'f')\n    if x:\n        x.z = x(2)\n    open(x).read()\n    return x\n</code></pre> <p>Values derived from an <code>Any</code> value also usually have the type <code>Any</code> implicitly, as mypy can't infer a more precise result type. For example, if you get the attribute of an <code>Any</code> value or call a <code>Any</code> value the result is <code>Any</code>:</p> <pre><code>def f(x: Any) -&gt; None:\n    y = x.foo()\n    reveal_type(y)  # \u63ed\u793a\u7684\u7c7b\u578b\u662f \"Any\"\n    z = y.bar(\"mypy will let you do anything to y\")\n    reveal_type(z)  # \u63ed\u793a\u7684\u7c7b\u578b\u662f \"Any\"\n</code></pre> <p><code>Any</code> types may propagate through your program, making type checking less effective, unless you are careful.</p> <p>Function parameters without annotations are also implicitly <code>Any</code>:</p> <pre><code>def f(x) -&gt; None:\n    reveal_type(x)  # \u63ed\u793a\u7684\u7c7b\u578b\u662f \"Any\"\n    x.can.do[\"anything\", x](\"wants\", 2)\n</code></pre> <p>You can make mypy warn you about untyped function parameters using the <code>--disallow-untyped-defs</code> flag.</p> <p>Generic types missing type parameters will have those parameters implicitly treated as <code>Any</code>:</p> <pre><code>from typing import List\n\ndef f(x: List) -&gt; None:\n    reveal_type(x)        # \u63ed\u793a\u7684\u7c7b\u578b\u662f \"builtins.list[Any]\"\n    reveal_type(x[0])     # \u63ed\u793a\u7684\u7c7b\u578b\u662f \"Any\"\n    x[0].anything_goes()  # OK\n</code></pre> <p>You can make mypy warn you about untyped function parameters using the <code>--disallow-any-generics</code> flag.</p> <p>Finally, another major source of <code>Any</code> types leaking into your program is from third party libraries that mypy does not know about. This is particularly the case when using the <code>--ignore-missing-imports</code> flag. See <code>fix-missing-imports</code> for more information about this.</p>"},{"location":"mypy/dynamic_typing/#any-\u548c-object","title":"Any \u548c object","text":"<p>Any vs. object</p> \u4e2d\u6587\u82f1\u6587 <p>\u7c7b\u578b <code>object</code> \u662f\u53e6\u4e00\u79cd\u53ef\u4ee5\u5c06\u4efb\u610f\u7c7b\u578b\u7684\u5b9e\u4f8b\u4f5c\u4e3a\u503c\u7684\u7c7b\u578b\u3002 \u4e0e <code>Any</code> \u4e0d\u540c\uff0c<code>object</code> \u662f\u4e00\u4e2a\u666e\u901a\u7684\u9759\u6001\u7c7b\u578b\uff08\u7c7b\u4f3c\u4e8e Java \u4e2d\u7684 <code>Object</code>\uff09\uff0c\u5e76\u4e14\u4ec5 <code>object</code> \u503c\u63a5\u53d7\u5bf9\u6240\u6709\u7c7b\u578b\u6709\u6548\u7684\u64cd\u4f5c\u3002 \u8fd9\u4e9b\u90fd\u662f\u6709\u6548\u7684\uff1a</p> <pre><code>def f(o: object) -&gt; None:\n    if o:\n        print(o)\n    print(isinstance(o, int))\n    o = 2\n    o = 'foo'\n</code></pre> <p>\u7136\u800c\uff0c\u8fd9\u4e9b\u88ab\u6807\u8bb0\u4e3a\u9519\u8bef\uff0c\u56e0\u4e3a\u5e76\u975e\u6240\u6709\u5bf9\u8c61\u90fd\u652f\u6301\u8fd9\u4e9b\u64cd\u4f5c\uff1a</p> <pre><code>def f(o: object) -&gt; None:\n    o.foo()       # Error!\n    o + 2         # Error!\n    open(o)       # Error!\n    n: int = 1\n    n = o         # Error!\n</code></pre> <p>\u5982\u679c\u60a8\u4e0d\u786e\u5b9a\u662f\u5426\u9700\u8981\u4f7f\u7528<code>object</code>\u6216<code>Any</code>\uff0c\u8bf7\u4f7f\u7528<code>object</code>\u2014\u2014\u4ec5\u5f53\u60a8\u6536\u5230\u7c7b\u578b\u68c0\u67e5\u5668\u6295\u8bc9\u65f6\u624d\u5207\u6362\u5230\u4f7f\u7528<code>Any</code>\u3002</p> <p>\u60a8\u53ef\u4ee5\u4f7f\u7528\u4e0d\u540c\u7684<code>\u7c7b\u578b\u6536\u7f29</code>\u6280\u672f\u6765\u7f29\u5c0f<code>\u5bf9\u8c61</code> \u8f6c\u6362\u4e3a\u66f4\u5177\u4f53\u7684\u7c7b\u578b\uff08\u5b50\u7c7b\u578b\uff09\uff0c\u4f8b\u5982 <code>int</code>\u3002 \u52a8\u6001\u7c7b\u578b\u503c\uff08\u7c7b\u578b\u4e3a<code>Any</code>\u7684\u503c\uff09\u4e0d\u9700\u8981\u7c7b\u578b\u7f29\u5c0f\u3002</p> <p>The type <code>object</code> is another type that can have an instance of arbitrary type as a value. Unlike <code>Any</code>, <code>object</code> is an ordinary static type (it is similar to <code>Object</code> in Java), and only operations valid for all types are accepted for <code>object</code> values. These are all valid:</p> <pre><code>def f(o: object) -&gt; None:\n    if o:\n        print(o)\n    print(isinstance(o, int))\n    o = 2\n    o = 'foo'\n</code></pre> <p>These are, however, flagged as errors, since not all objects support these operations:</p> <pre><code>def f(o: object) -&gt; None:\n    o.foo()       # Error!\n    o + 2         # Error!\n    open(o)       # Error!\n    n: int = 1\n    n = o         # Error!\n</code></pre> <p>If you're not sure whether you need to use <code>object</code> or <code>Any</code>, use <code>object</code> -- only switch to using <code>Any</code> if you get a type checker complaint.</p> <p>You can use different <code>type narrowing</code> techniques to narrow <code>object</code> to a more specific type (subtype) such as <code>int</code>. Type narrowing is not needed with dynamically typed values (values with type <code>Any</code>).</p>"},{"location":"mypy/existing_code/","title":"\u5c06 mypy \u4e0e\u73b0\u6709\u4ee3\u7801\u5e93\u7ed3\u5408\u4f7f\u7528","text":"<p>Using mypy with an existing codebase</p> \u4e2d\u6587\u82f1\u6587 <p>\u672c\u8282\u89e3\u91ca\u4e86\u5982\u4f55\u5728\u4e00\u4e2a\u73b0\u6709\u7684\u3001\u89c4\u6a21\u8f83\u5927\u7684\u4ee3\u7801\u5e93\u4e2d\u4f7f\u7528 mypy\uff0c\u800c\u8be5\u4ee3\u7801\u5e93\u51e0\u4e4e\u6ca1\u6709\u6216\u5b8c\u5168\u6ca1\u6709\u7c7b\u578b\u6ce8\u89e3\u3002\u5982\u679c\u4f60\u662f\u521d\u5b66\u8005\uff0c\u53ef\u4ee5\u8df3\u8fc7\u672c\u8282\u3002</p> <p>This section explains how to get started using mypy with an existing, significant codebase that has little or no type annotations. If you are a beginner, you can skip this section.</p>"},{"location":"mypy/existing_code/#\u4ece\u5c0f\u4e8b\u505a\u8d77","title":"\u4ece\u5c0f\u4e8b\u505a\u8d77","text":"<p>Start small</p> \u4e2d\u6587\u82f1\u6587 <p>\u5982\u679c\u4f60\u7684\u4ee3\u7801\u5e93\u5f88\u5927\uff0c\u5efa\u8bae\u5148\u9009\u62e9\u4e00\u4e2a\u5b50\u96c6\uff08\u4f8b\u5982 5,000 \u5230 50,000 \u884c\u4ee3\u7801\uff09\uff0c\u5e76\u8ba9 mypy \u9996\u5148\u6210\u529f\u8fd0\u884c\u5728\u8fd9\u4e2a\u5b50\u96c6\u4e0a\uff0c\u5728\u6dfb\u52a0\u6ce8\u89e3\u4e4b\u524d\u3002\u8fd9\u5e94\u8be5\u5728\u4e00\u4e24\u5929\u5185\u5c31\u80fd\u5b8c\u6210\u3002\u8d8a\u65e9\u8ba9 mypy \u5728\u4f60\u7684\u4ee3\u7801\u5e93\u4e0a\u8fd0\u884c\u901a\u8fc7\uff0c\u4f60\u5c31\u80fd\u8d8a\u65e9\u4ece\u4e2d\u53d7\u76ca\u3002</p> <p>\u4f60\u53ef\u80fd\u9700\u8981\u4fee\u590d\u4e00\u4e9b mypy \u62a5\u544a\u7684\u9519\u8bef\uff0c\u65b9\u6cd5\u662f\u63d2\u5165 mypy \u8981\u6c42\u7684\u6ce8\u89e3\uff0c\u6216\u8005\u901a\u8fc7\u6dfb\u52a0 <code># type: ignore</code> \u6ce8\u91ca\u6765\u5ffd\u7565\u4f60\u73b0\u5728\u4e0d\u60f3\u4fee\u590d\u7684\u9519\u8bef\u3002</p> <p>\u6211\u4eec\u5c06\u5728\u4e0b\u9762\u7684\u5404\u4e2a\u90e8\u5206\u4e2d\u63d0\u5230\u4e00\u4e9b\u8ba9 mypy \u901a\u8fc7\u4ee3\u7801\u5e93\u7684\u6280\u5de7\u3002</p> <p>If your codebase is large, pick a subset of your codebase (say, 5,000 to 50,000 lines) and get mypy to run successfully only on this subset at first, before adding annotations. This should be doable in a day or two. The sooner you get some form of mypy passing on your codebase, the sooner you benefit.</p> <p>You\u2019ll likely need to fix some mypy errors, either by inserting annotations requested by mypy or by adding <code># type: ignore</code> comments to silence errors you don\u2019t want to fix now.</p> <p>We\u2019ll mention some tips for getting mypy passing on your codebase in various sections below.</p>"},{"location":"mypy/existing_code/#\u6301\u7eed\u8fd0\u884c-mypy-\u5e76\u9632\u6b62\u56de\u5f52","title":"\u6301\u7eed\u8fd0\u884c mypy \u5e76\u9632\u6b62\u56de\u5f52","text":"<p>Run mypy consistently and prevent regressions</p> \u4e2d\u6587\u82f1\u6587 <p>\u786e\u4fdd\u4f60\u4ee3\u7801\u5e93\u4e2d\u7684\u6240\u6709\u5f00\u53d1\u4eba\u5458\u4ee5\u76f8\u540c\u7684\u65b9\u5f0f\u8fd0\u884c mypy\u3002\u6709\u4e00\u79cd\u65b9\u6cd5\u662f\u5c06 mypy \u7684\u8c03\u7528\u547d\u4ee4\u6dfb\u52a0\u5230\u4ee3\u7801\u5e93\u4e2d\u7684\u4e00\u4e2a\u5c0f\u811a\u672c\u4e2d\uff0c\u6216\u8005\u5c06 mypy \u7684\u8c03\u7528\u547d\u4ee4\u6dfb\u52a0\u5230\u4f60\u7528\u6765\u8fd0\u884c\u6d4b\u8bd5\u7684\u73b0\u6709\u5de5\u5177\u4e2d\uff0c\u4f8b\u5982 tox\u3002</p> <ul> <li> <p>\u786e\u4fdd\u6240\u6709\u4eba\u90fd\u4f7f\u7528\u76f8\u540c\u7684\u9009\u9879\u8fd0\u884c mypy\u3002\u5c06 mypy \u7684\u914d\u7f6e\u6587\u4ef6\u68c0\u67e5\u5230\u4ee3\u7801\u5e93\u4e2d\u662f\u6700\u7b80\u5355\u7684\u505a\u6cd5\u3002</p> </li> <li> <p>\u786e\u4fdd\u6240\u6709\u4eba\u68c0\u67e5\u76f8\u540c\u7684\u6587\u4ef6\u96c6\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u201c\u6307\u5b9a\u8981\u68c0\u67e5\u7684\u4ee3\u7801\u201d\u3002</p> </li> <li> <p>\u786e\u4fdd\u6240\u6709\u4eba\u4f7f\u7528\u76f8\u540c\u7248\u672c\u7684 mypy\uff0c\u4f8b\u5982\u5c06 mypy \u4e0e\u5176\u4ed6\u5f00\u53d1\u9700\u6c42\u4e00\u8d77\u56fa\u5b9a\u7248\u672c\u3002</p> </li> </ul> <p>\u7279\u522b\u662f\uff0c\u4f60\u9700\u8981\u786e\u4fdd\u5c3d\u65e9\u5c06 mypy \u96c6\u6210\u5230\u4f60\u7684\u6301\u7eed\u96c6\u6210\uff08CI\uff09\u7cfb\u7edf\u4e2d\u3002\u8fd9\u5c06\u9632\u6b62\u65b0\u7684\u7c7b\u578b\u9519\u8bef\u88ab\u5f15\u5165\u5230\u4ee3\u7801\u5e93\u4e2d\u3002</p> <p>\u4e00\u4e2a\u7b80\u5355\u7684 CI \u811a\u672c\u53ef\u80fd\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>python3 -m pip install mypy==1.8\n# \u8fd0\u884c\u6807\u51c6\u5316\u7684 mypy \u8c03\u7528\u547d\u4ee4\uff0c\u4f8b\u5982\uff1a\nmypy my_project\n# \u8fd9\u4e5f\u53ef\u80fd\u7c7b\u4f3c\u4e8e `scripts/run_mypy.sh`\u3001`tox run -e mypy`\u3001`make mypy` \u7b49\n</code></pre> <p>Make sure all developers on your codebase run mypy the same way. One way to ensure this is adding a small script with your mypy invocation to your codebase, or adding your mypy invocation to existing tools you use to run tests, like tox.</p> <ul> <li> <p>Make sure everyone runs mypy with the same options. Checking a mypy configuration file into your codebase is the easiest way to do this.</p> </li> <li> <p>Make sure everyone type checks the same set of files. See Specifying code to be checked for details.</p> </li> <li> <p>Make sure everyone runs mypy with the same version of mypy, for instance by pinning mypy with the rest of your dev requirements.</p> </li> </ul> <p>In particular, you\u2019ll want to make sure to run mypy as part of your Continuous Integration (CI) system as soon as possible. This will prevent new type errors from being introduced into your codebase.</p> <p>A simple CI script could look something like this:</p> <pre><code>python3 -m pip install mypy==1.8\n# Run your standardised mypy invocation, e.g.\nmypy my_project\n# This could also look like `scripts/run_mypy.sh`, `tox run -e mypy`, `make mypy`, etc\n</code></pre>"},{"location":"mypy/existing_code/#\u5ffd\u7565\u67d0\u4e9b\u6a21\u5757\u7684\u9519\u8bef","title":"\u5ffd\u7565\u67d0\u4e9b\u6a21\u5757\u7684\u9519\u8bef","text":"<p>Ignoring errors from certain modules</p> \u4e2d\u6587\u82f1\u6587 <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cmypy \u4f1a\u8ddf\u968f\u4ee3\u7801\u4e2d\u7684\u5bfc\u5165\u5e76\u5c1d\u8bd5\u68c0\u67e5\u6240\u6709\u5185\u5bb9\u3002\u8fd9\u610f\u5473\u7740\u5373\u4f7f\u4f60\u53ea\u4f20\u5165\u51e0\u4e2a\u6587\u4ef6\uff0cmypy \u4ecd\u53ef\u80fd\u5904\u7406\u5927\u91cf\u5bfc\u5165\u7684\u6587\u4ef6\uff0c\u4ece\u800c\u53ef\u80fd\u5bfc\u81f4\u8bb8\u591a\u4f60\u5f53\u524d\u4e0d\u60f3\u5904\u7406\u7684\u9519\u8bef\u3002</p> <p>\u4e00\u79cd\u5904\u7406\u8fd9\u79cd\u60c5\u51b5\u7684\u65b9\u6cd5\u662f\u5ffd\u7565\u90a3\u4e9b\u4f60\u8fd8\u6ca1\u51c6\u5907\u597d\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u7684\u6a21\u5757\u4e2d\u7684\u9519\u8bef\u3002\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0cignore_errors \u9009\u9879\u975e\u5e38\u6709\u7528\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u8fd8\u4e0d\u51c6\u5907\u5904\u7406\u6765\u81ea <code>package_to_fix_later</code> \u6a21\u5757\u7684\u9519\u8bef\uff1a</p> <pre><code>[mypy-package_to_fix_later.*]\nignore_errors = True\n</code></pre> <p>\u4f60\u751a\u81f3\u53ef\u4ee5\u53cd\u8fc7\u6765\u64cd\u4f5c\uff0c\u5728\u5168\u5c40\u914d\u7f6e\u4e2d\u8bbe\u7f6e <code>ignore_errors = True</code>\uff0c\u7136\u540e\u53ea\u5bf9\u4f60\u51c6\u5907\u597d\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u7684\u6a21\u5757\u542f\u7528\u9519\u8bef\u62a5\u544a\uff0c\u5373\u8bbe\u7f6e <code>ignore_errors = False</code>\u3002</p> <p>mypy \u7684\u914d\u7f6e\u6587\u4ef6\u5141\u8bb8\u7684\u6309\u6a21\u5757\u914d\u7f6e\u975e\u5e38\u6709\u7528\u3002\u8bb8\u591a\u914d\u7f6e\u9009\u9879\u90fd\u53ef\u4ee5\u4ec5\u9488\u5bf9\u7279\u5b9a\u6a21\u5757\u542f\u7528\u6216\u7981\u7528\u3002\u7279\u522b\u662f\uff0c\u4f60\u8fd8\u53ef\u4ee5\u6309\u6a21\u5757\u542f\u7528\u6216\u7981\u7528\u5404\u79cd\u9519\u8bef\u4ee3\u7801\uff0c\u8be6\u60c5\u8bf7\u53c2\u9605 Error codes\u3002</p> <p>By default mypy will follow imports in your code and try to check everything. This means even if you only pass in a few files to mypy, it may still process a large number of imported files. This could potentially result in lots of errors you don\u2019t want to deal with at the moment.</p> <p>One way to deal with this is to ignore errors in modules you aren\u2019t yet ready to type check. The ignore_errors option is useful for this, for instance, if you aren\u2019t yet ready to deal with errors from <code>package_to_fix_later</code>:</p> <pre><code>[mypy-package_to_fix_later.*]\nignore_errors = True\n</code></pre> <p>You could even invert this, by setting <code>ignore_errors = True</code> in your global config section and only enabling error reporting with <code>ignore_errors = False</code> for the set of modules you are ready to type check.</p> <p>The per-module configuration that mypy\u2019s configuration file allows can be extremely useful. Many configuration options can be enabled or disabled only for specific modules. In particular, you can also enable or disable various error codes on a per-module basis, see Error codes.</p>"},{"location":"mypy/existing_code/#\u4fee\u590d\u4e0e\u5bfc\u5165\u76f8\u5173\u7684\u9519\u8bef","title":"\u4fee\u590d\u4e0e\u5bfc\u5165\u76f8\u5173\u7684\u9519\u8bef","text":"<p>Fixing errors related to imports</p> \u4e2d\u6587\u82f1\u6587 <p>\u4f60\u53ef\u80fd\u4f1a\u9047\u5230\u7684\u4e00\u7c7b\u5e38\u89c1\u9519\u8bef\u662f mypy \u5173\u4e8e\u627e\u4e0d\u5230\u6a21\u5757\u3001\u6a21\u5757\u6ca1\u6709\u7c7b\u578b\u6216\u6ca1\u6709\u5b58\u6839\u6587\u4ef6\u7684\u9519\u8bef\uff1a</p> <pre><code>core/config.py:7: error: Cannot find implementation or library stub for module named 'frobnicate'\ncore/model.py:9: error: Cannot find implementation or library stub for module named 'acme'\n...\n</code></pre> <p>\u6709\u65f6\uff0c\u8fd9\u4e9b\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7\u5728\u8fd0\u884c <code>mypy</code> \u7684\u73af\u5883\u4e2d\u5b89\u88c5\u76f8\u5173\u7684\u5305\u6216\u5b58\u6839\u5e93\u6765\u89e3\u51b3\u3002</p> <p>\u6709\u5173\u8fd9\u4e9b\u9519\u8bef\u4ee5\u53ca\u4fee\u590d\u65b9\u6cd5\u7684\u5b8c\u6574\u53c2\u8003\uff0c\u8bf7\u53c2\u9605 Missing imports\u3002</p> <p>\u4f60\u53ef\u80fd\u4f1a\u53d1\u73b0\u9700\u8981\u6291\u5236\u6240\u6709\u6765\u81ea\u6ca1\u6709\u7c7b\u578b\u7684\u6a21\u5757\u7684\u5bfc\u5165\u9519\u8bef\u3002\u5982\u679c\u4f60\u53ea\u5728\u4e00\u4e24\u4e2a\u5730\u65b9\u5bfc\u5165\u4e86\u8be5\u6a21\u5757\uff0c\u53ef\u4ee5\u4f7f\u7528 <code># type: ignore</code> \u6ce8\u91ca\u3002\u4f8b\u5982\uff0c\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5ffd\u7565\u4e86\u4e00\u4e2a\u5173\u4e8e\u6ca1\u6709\u5b58\u6839\u7684\u7b2c\u4e09\u65b9\u6a21\u5757 <code>frobnicate</code> \u7684\u9519\u8bef\uff0c\u4f7f\u7528\u4e86 <code># type: ignore</code>\uff1a</p> <pre><code>import frobnicate  # type: ignore\n...\nfrobnicate.initialize()  # OK (\u4f46\u4e0d\u4f1a\u88ab\u68c0\u67e5)\n</code></pre> <p>\u4f46\u5982\u679c\u4f60\u5728\u591a\u4e2a\u5730\u65b9\u5bfc\u5165\u8be5\u6a21\u5757\uff0c\u8fd9\u79cd\u65b9\u6cd5\u5c31\u663e\u5f97\u7b28\u62d9\u4e86\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5efa\u8bae\u4f7f\u7528\u914d\u7f6e\u6587\u4ef6\u3002\u4f8b\u5982\uff0c\u8981\u5728\u6574\u4e2a\u4ee3\u7801\u5e93\u4e2d\u7981\u7528\u5173\u4e8e\u5bfc\u5165 <code>frobnicate</code> \u548c <code>acme</code> \u7684\u9519\u8bef\uff0c\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u914d\u7f6e\uff1a</p> <pre><code>[mypy-frobnicate.*]\nignore_missing_imports = True\n\n[mypy-acme.*]\nignore_missing_imports = True\n</code></pre> <p>\u5982\u679c\u4f60\u9047\u5230\u5927\u91cf\u9519\u8bef\uff0c\u53ef\u80fd\u4f1a\u60f3\u8981\u5ffd\u7565\u6240\u6709\u5173\u4e8e\u7f3a\u5c11\u5bfc\u5165\u7684\u9519\u8bef\uff0c\u4f8b\u5982\u901a\u8fc7\u8bbe\u7f6e --disable-error-code=import-untyped \u6216\u5168\u5c40\u8bbe\u7f6e ignore_missing_imports \u4e3a true\u3002 \u8fd9\u53ef\u80fd\u4f1a\u9690\u85cf\u540e\u7eed\u7684\u9519\u8bef\uff0c\u56e0\u6b64\u5982\u679c\u53ef\u80fd\uff0c\u6211\u4eec\u5efa\u8bae\u907f\u514d\u8fd9\u6837\u505a\u3002</p> <p>\u6700\u540e\uff0cmypy \u5141\u8bb8\u5bf9\u7279\u5b9a\u5bfc\u5165\u884c\u4e3a\u8fdb\u884c\u7cbe\u7ec6\u63a7\u5236\u3002\u5f53\u4f60\u5c1d\u8bd5\u8c03\u6574\u8fd9\u4e9b\u8bbe\u7f6e\u65f6\uff0c\u5f88\u5bb9\u6613\u5728\u4e0d\u77e5\u4e0d\u89c9\u4e2d\u51fa\u9519\uff0c\u56e0\u6b64\u8fd9\u5e94\u8be5\u662f\u6700\u540e\u7684\u9009\u62e9\u3002\u66f4\u591a\u8be6\u60c5\uff0c\u8bf7\u53c2\u8003\u6b64\u5904\u3002</p> <p>A common class of error you will encounter is errors from mypy about modules that it can\u2019t find, that don\u2019t have types, or don\u2019t have stub files:</p> <pre><code>core/config.py:7: error: Cannot find implementation or library stub for module named 'frobnicate'\ncore/model.py:9: error: Cannot find implementation or library stub for module named 'acme'\n...\n</code></pre> <p>Sometimes these can be fixed by installing the relevant packages or stub libraries in the environment you\u2019re running <code>mypy</code> in.</p> <p>See Missing imports for a complete reference on these errors and the ways in which you can fix them.</p> <p>You\u2019ll likely find that you want to suppress all errors from importing a given module that doesn\u2019t have types. If you only import that module in one or two places, you can use <code># type: ignore</code> comments. For example, here we ignore an error about a third-party module <code>frobnicate</code> that doesn\u2019t have stubs using <code># type: ignore</code>:</p> <pre><code>import frobnicate  # type: ignore\n...\nfrobnicate.initialize()  # OK (but not checked)\n</code></pre> <p>But if you import the module in many places, this becomes unwieldy. In this case, we recommend using a configuration file. For example, to disable errors about importing frobnicate and acme everywhere in your codebase, use a config like this:</p> <pre><code>[mypy-frobnicate.*]\nignore_missing_imports = True\n\n[mypy-acme.*]\nignore_missing_imports = True\n</code></pre> <p>If you get a large number of errors, you may want to ignore all errors about missing imports, for instance by setting --disable-error-code=import-untyped. or setting ignore_missing_imports to true globally. This can hide errors later on, so we recommend avoiding this if possible.</p> <p>Finally, mypy allows fine-grained control over specific import following behaviour. It\u2019s very easy to silently shoot yourself in the foot when playing around with these, so this should be a last resort. For more details, look here.</p>"},{"location":"mypy/existing_code/#\u4f18\u5148\u6ce8\u91ca\u5e7f\u6cdb\u5bfc\u5165\u7684\u6a21\u5757","title":"\u4f18\u5148\u6ce8\u91ca\u5e7f\u6cdb\u5bfc\u5165\u7684\u6a21\u5757","text":"<p>Prioritise annotating widely imported modules</p> \u4e2d\u6587\u82f1\u6587 <p>\u5927\u591a\u6570\u9879\u76ee\u90fd\u6709\u4e00\u4e9b\u5e7f\u6cdb\u5bfc\u5165\u7684\u6a21\u5757\uff0c\u6bd4\u5982\u5de5\u5177\u7c7b\u6216\u6a21\u578b\u7c7b\u3002\u5c3d\u65e9\u5bf9\u8fd9\u4e9b\u6a21\u5757\u8fdb\u884c\u6ce8\u91ca\u662f\u4e2a\u4e0d\u9519\u7684\u4e3b\u610f\uff0c\u56e0\u4e3a\u8fd9\u80fd\u8ba9\u4f7f\u7528\u8fd9\u4e9b\u6a21\u5757\u7684\u4ee3\u7801\u66f4\u6709\u6548\u5730\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u3002</p> <p>Mypy \u65e8\u5728\u652f\u6301\u6e10\u8fdb\u5f0f\u7c7b\u578b\u68c0\u67e5\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4f60\u53ef\u4ee5\u6309\u7167\u81ea\u5df1\u7684\u8282\u594f\u9010\u6b65\u6dfb\u52a0\u6ce8\u91ca\uff0c\u56e0\u6b64\u53ef\u4ee5\u653e\u5fc3\u5730\u5c06\u67d0\u4e9b\u6a21\u5757\u6682\u65f6\u4e0d\u505a\u6ce8\u91ca\u3002\u6ce8\u91ca\u5f97\u8d8a\u591a\uff0cmypy \u7684\u4f5c\u7528\u5c31\u8d8a\u5927\uff0c\u4f46\u5373\u4f7f\u53ea\u6709\u5c11\u91cf\u6ce8\u91ca\u8986\u76d6\u4e5f\u4f1a\u6709\u5e2e\u52a9\u3002</p> <p>Most projects have some widely imported modules, such as utilities or model classes. It\u2019s a good idea to annotate these pretty early on, since this allows code using these modules to be type checked more effectively.</p> <p>Mypy is designed to support gradual typing, i.e. letting you add annotations at your own pace, so it\u2019s okay to leave some of these modules unannotated. The more you annotate, the more useful mypy will be, but even a little annotation coverage is useful.</p>"},{"location":"mypy/existing_code/#\u968f\u65f6\u5199\u6ce8\u89e3","title":"\u968f\u65f6\u5199\u6ce8\u89e3","text":"<p>Write annotations as you go</p> \u4e2d\u6587\u82f1\u6587 <p>\u53ef\u4ee5\u8003\u8651\u5c06\u4ee5\u4e0b\u5185\u5bb9\u52a0\u5165\u5230\u4f60\u7684\u4ee3\u7801\u98ce\u683c\u89c4\u8303\u4e2d\uff1a</p> <ol> <li> <p>\u5f00\u53d1\u4eba\u5458\u5e94\u4e3a\u4efb\u4f55\u65b0\u4ee3\u7801\u6dfb\u52a0\u7c7b\u578b\u6ce8\u91ca\u3002</p> </li> <li> <p>\u4fee\u6539\u73b0\u6709\u4ee3\u7801\u65f6\uff0c\u4e5f\u9f13\u52b1\u6dfb\u52a0\u7c7b\u578b\u6ce8\u91ca\u3002</p> </li> </ol> <p>\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u4f60\u53ef\u4ee5\u5728\u4e0d\u8d39\u592a\u591a\u529b\u6c14\u7684\u60c5\u51b5\u4e0b\u9010\u6b65\u589e\u52a0\u4ee3\u7801\u5e93\u4e2d\u7684\u7c7b\u578b\u6ce8\u91ca\u8986\u76d6\u7387\u3002</p> <p>Consider adding something like these in your code style conventions:</p> <ol> <li> <p>Developers should add annotations for any new code.</p> </li> <li> <p>It\u2019s also encouraged to write annotations when you modify existing code.</p> </li> </ol> <p>This way you\u2019ll gradually increase annotation coverage in your codebase without much effort.</p>"},{"location":"mypy/existing_code/#\u81ea\u52a8\u6ce8\u89e3\u9057\u7559\u4ee3\u7801","title":"\u81ea\u52a8\u6ce8\u89e3\u9057\u7559\u4ee3\u7801","text":"<p>Automate annotation of legacy code</p> \u4e2d\u6587\u82f1\u6587 <p>\u6709\u4e00\u4e9b\u5de5\u5177\u53ef\u4ee5\u57fa\u4e8e\u7b80\u5355\u7684\u9759\u6001\u5206\u6790\u6216\u5728\u8fd0\u884c\u65f6\u6536\u96c6\u7684\u7c7b\u578b\u4fe1\u606f\u81ea\u52a8\u6dfb\u52a0\u521d\u6b65\u7684\u7c7b\u578b\u6ce8\u91ca\u3002\u8fd9\u4e9b\u5de5\u5177\u5305\u62ec MonkeyType\u3001autotyping \u548c PyAnnotate\u3002</p> <p>\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u901a\u8fc7\u6d4b\u8bd5\u8fd0\u884c\u6765\u6536\u96c6\u7c7b\u578b\u4fe1\u606f\u3002\u5982\u679c\u4f60\u7684\u6d4b\u8bd5\u8986\u76d6\u7387\u8f83\u597d\uff08\u4e14\u6d4b\u8bd5\u901f\u5ea6\u4e0d\u592a\u6162\uff09\uff0c\u8fd9\u79cd\u65b9\u6cd5\u53ef\u80fd\u6548\u679c\u4e0d\u9519\u3002</p> <p>\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u4e3a\u4e00\u5c0f\u90e8\u5206\u968f\u673a\u9009\u62e9\u7684\u751f\u4ea7\u7f51\u7edc\u8bf7\u6c42\u542f\u7528\u7c7b\u578b\u4fe1\u606f\u6536\u96c6\u3002\u8fd9\u663e\u7136\u9700\u8981\u66f4\u52a0\u8c28\u614e\uff0c\u56e0\u4e3a\u7c7b\u578b\u6536\u96c6\u53ef\u80fd\u4f1a\u5f71\u54cd\u670d\u52a1\u7684\u53ef\u9760\u6027\u6216\u6027\u80fd\u3002</p> <p>There are tools for automatically adding draft annotations based on simple static analysis or on type profiles collected at runtime. Tools include MonkeyType, autotyping and PyAnnotate.</p> <p>A simple approach is to collect types from test runs. This may work well if your test coverage is good (and if your tests aren\u2019t very slow).</p> <p>Another approach is to enable type collection for a small, random fraction of production network requests. This clearly requires more care, as type collection could impact the reliability or the performance of your service.</p>"},{"location":"mypy/existing_code/#\u5f15\u5165\u66f4\u4e25\u683c\u7684\u9009\u9879","title":"\u5f15\u5165\u66f4\u4e25\u683c\u7684\u9009\u9879","text":"<p>Introduce stricter options</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u662f\u9ad8\u5ea6\u53ef\u914d\u7f6e\u7684\u3002\u4e00\u65e6\u4f60\u5f00\u59cb\u4f7f\u7528\u9759\u6001\u7c7b\u578b\u68c0\u67e5\uff0c\u53ef\u80fd\u4f1a\u5e0c\u671b\u63a2\u7d22 mypy \u63d0\u4f9b\u7684\u5404\u79cd\u4e25\u683c\u6027\u9009\u9879\uff0c\u4ee5\u6355\u6349\u66f4\u591a\u7684\u9519\u8bef\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u8981\u6c42 mypy \u5bf9\u67d0\u4e9b\u6a21\u5757\u7684\u6240\u6709\u51fd\u6570\u8fdb\u884c\u7c7b\u578b\u6ce8\u91ca\uff0c\u4ee5\u907f\u514d\u65e0\u610f\u4e2d\u5f15\u5165\u4e0d\u4f1a\u88ab\u7c7b\u578b\u68c0\u67e5\u7684\u4ee3\u7801\uff0c\u53ef\u4ee5\u4f7f\u7528 disallow_untyped_defs \u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 Mypy \u914d\u7f6e\u6587\u4ef6\u3002</p> <p>\u4e00\u4e2a\u4f18\u79c0\u7684\u76ee\u6807\u662f\u8ba9\u4f60\u7684\u4ee3\u7801\u5e93\u5728\u8fd0\u884c <code>mypy --strict</code> \u65f6\u80fd\u901a\u8fc7\u68c0\u67e5\u3002\u8fd9\u6837\u57fa\u672c\u4e0a\u53ef\u4ee5\u786e\u4fdd\u4f60\u4e0d\u4f1a\u6709\u4efb\u4f55\u4e0e\u7c7b\u578b\u76f8\u5173\u7684\u9519\u8bef\uff0c\u9664\u975e\u6709\u660e\u786e\u7684\u89c4\u907f\uff08\u4f8b\u5982 <code># type: ignore</code> \u6ce8\u91ca\uff09\u3002</p> <p>\u4ee5\u4e0b\u914d\u7f6e\u7b49\u6548\u4e8e <code>--strict</code>\uff08\u57fa\u4e8e mypy 1.0 \u7248\u672c\uff09\uff1a</p> <pre><code># \u5148\u4ece\u8fd9\u4e9b\u5f00\u59cb\nwarn_unused_configs = True\nwarn_redundant_casts = True\nwarn_unused_ignores = True\n\n# \u8fd9\u4e9b\u9009\u9879\u901a\u5e38\u5bb9\u6613\u901a\u8fc7\nstrict_equality = True\nstrict_concatenate = True\n\n# \u5f3a\u70c8\u5efa\u8bae\u5c3d\u65e9\u542f\u7528\u6b64\u9009\u9879\ncheck_untyped_defs = True\n\n# \u8fd9\u4e9b\u9009\u9879\u4e0d\u7b97\u592a\u590d\u6742\uff0c\u4f46\u5982\u679c\u4f7f\u7528\u4e86\u5927\u91cf\u65e0\u7c7b\u578b\u6ce8\u91ca\u7684\u5e93\uff0c\u53ef\u80fd\u4f1a\u6bd4\u8f83\u68d8\u624b\ndisallow_subclassing_any = True\ndisallow_untyped_decorators = True\ndisallow_any_generics = True\n\n# \u4ee5\u4e0b\u51e0\u9879\u662f\u5404\u79cd\u5f3a\u5236\u4f7f\u7528\u7c7b\u578b\u6ce8\u91ca\u7684\u65b9\u5f0f\ndisallow_untyped_calls = True\ndisallow_incomplete_defs = True\ndisallow_untyped_defs = True\n\n# \u8fd9\u4e00\u9879\u4e0d\u96be\u901a\u8fc7\uff0c\u4f46\u6295\u8d44\u56de\u62a5\u7387\u8f83\u4f4e\nno_implicit_reexport = True\n\n# \u5982\u679c\u4f7f\u7528\u4e86\u5927\u91cf\u65e0\u7c7b\u578b\u6ce8\u91ca\u7684\u5e93\uff0c\u8fd9\u4e00\u9879\u53ef\u80fd\u6bd4\u8f83\u68d8\u624b\nwarn_return_any = True\n</code></pre> <p>\u6ce8\u610f\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4ece <code>--strict</code> \u5f00\u59cb\uff0c\u5e76\u6839\u636e\u9700\u8981\u51cf\u53bb\u67d0\u4e9b\u9009\u9879\uff0c\u4f8b\u5982\uff1a</p> <pre><code>strict = True\nwarn_return_any = False\n</code></pre> <p>\u8bb0\u4f4f\uff0c\u8bb8\u591a\u8fd9\u4e9b\u9009\u9879\u53ef\u4ee5\u6309\u6a21\u5757\u542f\u7528\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u5bf9\u5df2\u7ecf\u5b8c\u6210\u7c7b\u578b\u6ce8\u91ca\u7684\u6a21\u5757\u542f\u7528 <code>disallow_untyped_defs</code>\uff0c\u4ee5\u9632\u6b62\u65b0\u4ee3\u7801\u5728\u6ca1\u6709\u6ce8\u91ca\u7684\u60c5\u51b5\u4e0b\u88ab\u6dfb\u52a0\u3002</p> <p>\u6b64\u5916\uff0c\u5982\u679c\u4f60\u613f\u610f\uff0c\u4e25\u683c\u6027\u9009\u9879\u4e0d\u6b62\u4e8e <code>--strict</code>\u3002Mypy \u8fd8\u6709\u4e00\u4e9b\u4e0d\u5728 <code>--strict</code> \u8303\u56f4\u5185\u4f46\u4f9d\u7136\u6709\u7528\u7684\u68c0\u67e5\u3002\u8bf7\u53c2\u9605\u5b8c\u6574\u7684 Mypy \u547d\u4ee4\u884c\u53c2\u8003\u548c \u53ef\u9009\u68c0\u67e5\u7684\u9519\u8bef\u4ee3\u7801\u3002</p> <p>Mypy is very configurable. Once you get started with static typing, you may want to explore the various strictness options mypy provides to catch more bugs. For example, you can ask mypy to require annotations for all functions in certain modules to avoid accidentally introducing code that won\u2019t be type checked using disallow_untyped_defs. Refer to The mypy configuration file for the details.</p> <p>An excellent goal to aim for is to have your codebase pass when run against <code>mypy --strict</code>. This basically ensures that you will never have a type related error without an explicit circumvention somewhere (such as a <code># type: ignore</code> comment).</p> <p>The following config is equivalent to <code>--strict</code> (as of mypy 1.0):</p> <pre><code># Start off with these\nwarn_unused_configs = True\nwarn_redundant_casts = True\nwarn_unused_ignores = True\n\n# Getting these passing should be easy\nstrict_equality = True\nstrict_concatenate = True\n\n# Strongly recommend enabling this one as soon as you can\ncheck_untyped_defs = True\n\n# These shouldn't be too much additional work, but may be tricky to\n# get passing if you use a lot of untyped libraries\ndisallow_subclassing_any = True\ndisallow_untyped_decorators = True\ndisallow_any_generics = True\n\n# These next few are various gradations of forcing use of type annotations\ndisallow_untyped_calls = True\ndisallow_incomplete_defs = True\ndisallow_untyped_defs = True\n\n# This one isn't too hard to get passing, but return on investment is lower\nno_implicit_reexport = True\n\n# This one can be tricky to get passing if you use a lot of untyped libraries\nwarn_return_any = True\n</code></pre> <p>Note that you can also start with --strict and subtract, for instance:</p> <pre><code>strict = True\nwarn_return_any = False\n</code></pre> <p>Remember that many of these options can be enabled on a per-module basis. For instance, you may want to enable <code>disallow_untyped_defs</code> for modules which you\u2019ve completed annotations for, in order to prevent new code from being added without annotations.</p> <p>And if you want, it doesn\u2019t stop at <code>--strict</code>. Mypy has additional checks that are not part of <code>--strict</code> that can be useful. See the complete The mypy command line reference and Error codes for optional checks.</p>"},{"location":"mypy/existing_code/#\u52a0\u901f-mypy-\u8fd0\u884c","title":"\u52a0\u901f mypy \u8fd0\u884c","text":"<p>Speed up mypy runs</p> \u4e2d\u6587\u82f1\u6587 <p>\u4f60\u53ef\u4ee5\u4f7f\u7528 mypy daemon \u6765\u5b9e\u73b0\u66f4\u5feb\u7684\u589e\u91cf\u5f0f mypy \u8fd0\u884c\u3002\u9879\u76ee\u8d8a\u5927\uff0c\u8fd9\u4e2a\u5de5\u5177\u5c31\u8d8a\u6709\u7528\u3002\u5982\u679c\u4f60\u7684\u9879\u76ee\u81f3\u5c11\u6709 100,000 \u884c\u4ee3\u7801\uff0c\u4f60\u53ef\u80fd\u8fd8\u60f3\u8bbe\u7f6e \u8fdc\u7a0b\u7f13\u5b58 \u4ee5\u8fdb\u4e00\u6b65\u52a0\u5feb\u901f\u5ea6\u3002</p> <p>You can use mypy daemon to get much faster incremental mypy runs. The larger your project is, the more useful this will be. If your project has at least 100,000 lines of code or so, you may also want to set up remote caching for further speedups.</p>"},{"location":"mypy/final_names_methods_classes/","title":"\u6700\u7ec8\u7684\u547d\u540d\u3001\u65b9\u6cd5\u3001\u7c7b","text":"\u4e2d\u6587\u82f1\u6587 <p>\u672c\u8282\u4ecb\u7ecd\u8fd9\u4e9b\u76f8\u5173\u529f\u80fd\uff1a</p> <ol> <li>\u6700\u7ec8\u540d\u79f0 \u662f\u521d\u59cb\u5316\u540e\u4e0d\u5e94\u91cd\u65b0\u5206\u914d\u7684\u53d8\u91cf\u6216\u5c5e\u6027\u3002 \u5b83\u4eec\u5bf9\u4e8e\u58f0\u660e\u5e38\u91cf\u5f88\u6709\u7528\u3002</li> <li>\u6700\u7ec8\u65b9\u6cd5 \u4e0d\u5e94\u5728\u5b50\u7c7b\u4e2d\u91cd\u5199\u3002</li> <li>\u6700\u7ec8\u7c7b \u4e0d\u5e94\u8be5\u88ab\u5b50\u7c7b\u5316\u3002</li> </ol> <p>\u6240\u6709\u8fd9\u4e9b\u4ec5\u7531 mypy \u5f3a\u5236\u6267\u884c\uff0c\u5e76\u4e14\u4ec5\u5728\u5e26\u6ce8\u91ca\u7684\u4ee3\u7801\u4e2d\u6267\u884c\u3002 Python \u8fd0\u884c\u65f6\u4e0d\u6267\u884c\u4efb\u4f55\u8fd0\u884c\u65f6\u5f3a\u5236\u63aa\u65bd\u3002</p> <p>Note</p> <p>\u672c\u9875\u4e2d\u7684\u793a\u4f8b\u4ece <code>typing</code> \u6a21\u5757\u5bfc\u5165 <code>Final</code> \u548c <code>final</code> \u3002 \u8fd9\u4e9b\u7c7b\u578b\u5df2\u6dfb\u52a0\u5230 Python 3.8 \u4e2d\u7684 <code>typing</code> \u4e2d\uff0c\u4f46\u4e5f\u53ef\u4ee5\u901a\u8fc7 <code>typing_extensions</code> \u5305\u5728 Python 3.4 - 3.7 \u4e2d\u4f7f\u7528\u3002</p> <p>Final names, methods and classes</p> <p>This section introduces these related features:</p> <ol> <li>Final names are variables or attributes that should not be reassigned after initialization. They are useful for declaring constants.</li> <li>Final methods should not be overridden in a subclass.</li> <li>Final classes should not be subclassed.</li> </ol> <p>All of these are only enforced by mypy, and only in annotated code. There is no runtime enforcement by the Python runtime.</p> <p>Note</p> <p>The examples in this page import <code>Final</code> and <code>final</code> from the <code>typing</code> module. These types were added to <code>typing</code> in Python 3.8, but are also available for use in Python 3.4 - 3.7 via the <code>typing_extensions</code> package.</p>"},{"location":"mypy/final_names_methods_classes/#\u6700\u7ec8\u540d\u79f0","title":"\u6700\u7ec8\u540d\u79f0","text":"<p>Final names</p> \u4e2d\u6587\u82f1\u6587 <p>\u60a8\u53ef\u4ee5\u4f7f\u7528<code>typing.Final</code>\u9650\u5b9a\u7b26\u6765\u6307\u793a\u4e0d\u5e94\u91cd\u65b0\u5206\u914d\u3001\u91cd\u65b0\u5b9a\u4e49\u6216\u8986\u76d6\u540d\u79f0\u6216\u5c5e\u6027\u3002 \u8fd9\u5bf9\u4e8e\u6a21\u5757\u548c\u7c7b\u7ea7\u522b\u5e38\u91cf\u901a\u5e38\u5f88\u6709\u7528\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u9632\u6b62\u610f\u5916\u4fee\u6539\u7684\u65b9\u6cd5\u3002 Mypy \u5c06\u963b\u6b62\u5728\u7c7b\u578b\u68c0\u67e5\u4ee3\u7801\u4e2d\u8fdb\u4e00\u6b65\u5206\u914d\u6700\u7ec8\u540d\u79f0\uff1a</p> <pre><code>from typing import Final\n\nRATE: Final = 3_000\n\nclass Base:\n    DEFAULT_ID: Final = 0\n\nRATE = 300  # Error: can't assign to final attribute\nBase.DEFAULT_ID = 1  # Error: can't override a final attribute\n</code></pre> <p>\u6700\u7ec8\u5c5e\u6027\u7684\u53e6\u4e00\u4e2a\u7528\u4f8b\u662f\u4fdd\u62a4\u67d0\u4e9b\u5c5e\u6027\u4e0d\u88ab\u5b50\u7c7b\u4e2d\u8986\u76d6\uff1a</p> <pre><code>from typing import Final\n\nclass Window:\n    BORDER_WIDTH: Final = 2.5\n    ...\n\nclass ListView(Window):\n    BORDER_WIDTH = 3  # Error: can't override a final attribute\n</code></pre> <p>\u60a8\u53ef\u4ee5\u4f7f\u7528 <code>@property</code> \u5c06\u5c5e\u6027\u8bbe\u7f6e\u4e3a\u53ea\u8bfb\uff0c\u4f46\u4e0e <code>Final</code> \u4e0d\u540c\uff0c\u5b83\u4e0d\u9002\u7528\u4e8e\u6a21\u5757\u5c5e\u6027\uff0c\u5e76\u4e14\u5b83\u4e0d\u4f1a\u963b\u6b62\u5b50\u7c7b\u4e2d\u7684\u91cd\u5199\u3002</p> <p>You can use the <code>typing.Final</code> qualifier to indicate that a name or attribute should not be reassigned, redefined, or overridden.  This is often useful for module and class level constants as a way to prevent unintended modification.  Mypy will prevent further assignments to final names in type-checked code:</p> <pre><code>from typing import Final\n\nRATE: Final = 3_000\n\nclass Base:\n    DEFAULT_ID: Final = 0\n\nRATE = 300  # Error: can't assign to final attribute\nBase.DEFAULT_ID = 1  # Error: can't override a final attribute\n</code></pre> <p>Another use case for final attributes is to protect certain attributes from being overridden in a subclass:</p> <pre><code>from typing import Final\n\nclass Window:\n    BORDER_WIDTH: Final = 2.5\n    ...\n\nclass ListView(Window):\n    BORDER_WIDTH = 3  # Error: can't override a final attribute\n</code></pre> <p>You can use <code>@property</code> to make an attribute read-only, but unlike <code>Final</code>, it doesn't work with module attributes, and it doesn't prevent overriding in subclasses.</p>"},{"location":"mypy/final_names_methods_classes/#\u8bed\u6cd5\u53d8\u4f53","title":"\u8bed\u6cd5\u53d8\u4f53","text":"<p>Syntax variants</p> \u4e2d\u6587\u82f1\u6587 <p>\u60a8\u53ef\u4ee5\u4ee5\u4e0b\u5217\u5f62\u5f0f\u4e4b\u4e00\u4f7f\u7528<code>Final</code>\uff1a</p> <ul> <li>\u60a8\u53ef\u4ee5\u4f7f\u7528\u8bed\u6cd5<code>Final[&lt;type&gt;]</code>\u63d0\u4f9b\u663e\u5f0f\u7c7b\u578b\u3002 \u4f8b\u5b50\uff1a</li> </ul> <pre><code>ID: Final[int] = 1\n</code></pre> <p>\u8fd9\u91cc mypy \u4f1a\u63a8\u65ad\u51fa\u201cID\u201d\u7684\u7c7b\u578b\u4e3a\u201cint\u201d\u3002</p> <ul> <li>\u60a8\u53ef\u4ee5\u7701\u7565\u7c7b\u578b\uff1a</li> </ul> <pre><code>ID: Final = 1\n</code></pre> <p>\u8fd9\u91cc mypy \u4f1a\u63a8\u65ad\u51fa <code>ID</code> \u7684\u7c7b\u578b\u4e3a <code>Literal[1]</code>\u3002 \u8bf7\u6ce8\u610f\uff0c\u4e0e\u6cdb\u578b\u7c7b\u4e0d\u540c\uff0c\u8fd9\u4e0e\u201cFinal[Any]\u201d\u4e0d\u540c\u3002</p> <ul> <li> <p>\u5728\u7c7b\u4f53\u548c\u5b58\u6839\u6587\u4ef6\u4e2d\uff0c\u60a8\u53ef\u4ee5\u7701\u7565\u53f3\u4fa7\uff0c\u53ea\u5199<code>ID: Final[int]</code>\u3002</p> </li> <li> <p>\u6700\u540e\uff0c\u60a8\u53ef\u4ee5\u7f16\u5199<code>self.id: Final = 1</code>\uff08\u4e5f\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528\u65b9\u62ec\u53f7\u4e2d\u7684\u7c7b\u578b\uff09\u3002 \u4ec5\u5728 <code>__init__</code> \u65b9\u6cd5\u4e2d\u5141\u8bb8\u8fd9\u6837\u505a\uff0c\u4ee5\u4fbf\u6700\u7ec8\u5b9e\u4f8b\u5c5e\u6027\u4ec5\u5728\u5b9e\u4f8b\u65f6\u5206\u914d\u4e00\u6b21 \u88ab\u5efa\u9020\u3002</p> </li> </ul> <p>You can use <code>Final</code> in one of these forms:</p> <ul> <li>You can provide an explicit type using the syntax <code>Final[&lt;type&gt;]</code>. Example:</li> </ul> <pre><code>ID: Final[int] = 1\n</code></pre> <p>Here mypy will infer type <code>int</code> for <code>ID</code>.</p> <ul> <li>You can omit the type:</li> </ul> <pre><code>ID: Final = 1\n</code></pre> <p>Here mypy will infer type <code>Literal[1]</code> for <code>ID</code>. Note that unlike for generic classes this is not the same as <code>Final[Any]</code>.</p> <ul> <li> <p>In class bodies and stub files you can omit the right hand side and just write   <code>ID: Final[int]</code>.</p> </li> <li> <p>Finally, you can write <code>self.id: Final = 1</code> (also optionally with a type in square brackets). This is allowed only in <code>__init__</code> methods, so that the final instance attribute is assigned only once when an instance is created.</p> </li> </ul>"},{"location":"mypy/final_names_methods_classes/#\u4f7f\u7528final\u7684\u8be6\u60c5","title":"\u4f7f\u7528<code>Final</code>\u7684\u8be6\u60c5","text":"<p>Details of using <code>Final</code></p> \u4e2d\u6587\u82f1\u6587 <p>\u8fd9\u662f\u5b9a\u4e49\u6700\u7ec8\u540d\u79f0\u7684\u4e24\u4e2a\u4e3b\u8981\u89c4\u5219\uff1a</p> <ul> <li>\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u5c5e\u6027\uff0c\u6bcf\u4e2a\u6a21\u5757\u6216\u7c7b\u6700\u591a\u53ef\u4ee5\u6709\u4e00\u4e2a\u6700\u7ec8\u58f0\u660e\u3002 \u4e0d\u80fd\u5b58\u5728\u5177\u6709\u76f8\u540c\u540d\u79f0\u7684\u5355\u72ec\u7684\u7c7b\u7ea7\u548c\u5b9e\u4f8b\u7ea7\u5e38\u91cf\u3002</li> <li>\u5fc5\u987b\u6709\u201c\u6070\u597d\u4e00\u4e2a\u201d\u5206\u914d\u7ed9\u6700\u7ec8\u540d\u79f0\u3002</li> </ul> <p>\u5728\u6ca1\u6709\u521d\u59cb\u5316\u7a0b\u5e8f\u7684\u7c7b\u4e3b\u4f53\u4e2d\u58f0\u660e\u7684\u6700\u7ec8\u5c5e\u6027\u5fc5\u987b\u5728 <code>__init__</code> \u65b9\u6cd5\u4e2d\u521d\u59cb\u5316\uff08\u60a8\u53ef\u4ee5\u8df3\u8fc7\u5b58\u6839\u6587\u4ef6\u4e2d\u7684\u521d\u59cb\u5316\u7a0b\u5e8f\uff09\uff1a</p> <pre><code>class ImmutablePoint:\n    x: Final[int]\n    y: Final[int]  # Error: final attribute without an initializer\n\n    def __init__(self) -&gt; None:\n        self.x = 1  # Good\n</code></pre> <p><code>Final</code> \u53ea\u80fd\u7528\u4f5c\u8d4b\u503c\u6216\u53d8\u91cf\u6ce8\u91ca\u4e2d\u7684\u6700\u5916\u5c42\u7c7b\u578b\u3002 \u5728\u4efb\u4f55\u5176\u4ed6\u4f4d\u7f6e\u4f7f\u7528\u5b83\u90fd\u662f\u9519\u8bef\u7684\u3002 \u7279\u522b\u662f\uff0c<code>Final</code>\u4e0d\u80fd\u5728\u51fd\u6570\u53c2\u6570\u7684\u6ce8\u91ca\u4e2d\u4f7f\u7528\uff1a</p> <pre><code>x: list[Final[int]] = []  # Error!\n\ndef fun(x: Final[list[int]]) -&gt;  None:  # Error!\n    ...\n</code></pre> <p><code>Final</code> \u548c <code>typing.ClassVar</code> \u4e0d\u5e94\u4e00\u8d77\u4f7f\u7528\u3002 Mypy \u5c06\u81ea\u52a8\u63a8\u65ad\u6700\u7ec8\u58f0\u660e\u7684\u8303\u56f4\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u5b83\u662f\u5728\u7c7b\u4e3b\u4f53\u4e2d\u8fd8\u662f\u5728 <code>__init__</code> \u4e2d\u521d\u59cb\u5316 \u3002</p> <p>\u6700\u7ec8\u5c5e\u6027\u4e0d\u80fd\u88ab\u5b50\u7c7b\u8986\u76d6\uff08\u5373\u4f7f\u6709\u53e6\u4e00\u4e2a\u663e\u5f0f\u6700\u7ec8\u58f0\u660e\uff09\u3002 \u4f46\u8bf7\u6ce8\u610f\uff0c\u6700\u7ec8\u5c5e\u6027\u53ef\u4ee5\u8986\u76d6\u53ea\u8bfb\u5c5e\u6027\uff1a</p> <pre><code>class Base:\n    @property\n    def ID(self) -&gt; int: ...\n\nclass Derived(Base):\n    ID: Final = 1  # OK\n</code></pre> <p>\u5c06\u540d\u79f0\u58f0\u660e\u4e3a\u6700\u7ec8\u540d\u79f0\u53ea\u80fd\u4fdd\u8bc1\u8be5\u540d\u79f0\u4e0d\u4f1a\u91cd\u65b0\u7ed1\u5b9a\u5230\u53e6\u4e00\u4e2a\u503c\u3002 \u5b83\u5e76\u4e0d\u4f7f\u503c\u53d8\u5f97\u4e0d\u53ef\u53d8\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528\u4e0d\u53ef\u53d8\u7684 ABC \u548c\u5bb9\u5668\u6765\u9632\u6b62\u66f4\u6539\u6b64\u7c7b\u503c\uff1a</p> <pre><code>x: Final = ['a', 'b']\nx.append('c')  # OK\n\ny: Final[Sequence[str]] = ['a', 'b']\ny.append('x')  # Error: Sequence is immutable\nz: Final = ('a', 'b')  # Also an option\n</code></pre> <p>These are the two main rules for defining a final name:</p> <ul> <li>There can be at most one final declaration per module or class for a given attribute. There can't be separate class-level and instance-level constants with the same name.</li> <li>There must be exactly one assignment to a final name.</li> </ul> <p>A final attribute declared in a class body without an initializer must be initialized in the <code>__init__</code> method (you can skip the initializer in stub files):</p> <pre><code>class ImmutablePoint:\n    x: Final[int]\n    y: Final[int]  # Error: final attribute without an initializer\n\n    def __init__(self) -&gt; None:\n        self.x = 1  # Good\n</code></pre> <p><code>Final</code> can only be used as the outermost type in assignments or variable annotations. Using it in any other position is an error. In particular, <code>Final</code> can't be used in annotations for function arguments:</p> <pre><code>x: list[Final[int]] = []  # Error!\n\ndef fun(x: Final[list[int]]) -&gt;  None:  # Error!\n    ...\n</code></pre> <p><code>Final</code> and {py:data}<code>~typing.ClassVar</code> should not be used together. Mypy will infer the scope of a final declaration automatically depending on whether it was initialized in the class body or in {py:meth}<code>__init__ &lt;object.__init__&gt;</code>.</p> <p>A final attribute can't be overridden by a subclass (even with another explicit final declaration). Note however that a final attribute can override a read-only property:</p> <pre><code>class Base:\n    @property\n    def ID(self) -&gt; int: ...\n\nclass Derived(Base):\n    ID: Final = 1  # OK\n</code></pre> <p>Declaring a name as final only guarantees that the name will not be re-bound to another value. It doesn't make the value immutable. You can use immutable ABCs and containers to prevent mutating such values:</p> <pre><code>x: Final = ['a', 'b']\nx.append('c')  # OK\n\ny: Final[Sequence[str]] = ['a', 'b']\ny.append('x')  # Error: Sequence is immutable\nz: Final = ('a', 'b')  # Also an option\n</code></pre>"},{"location":"mypy/final_names_methods_classes/#\u6700\u7ec8\u65b9\u6cd5","title":"\u6700\u7ec8\u65b9\u6cd5","text":"<p>Final methods</p> \u4e2d\u6587\u82f1\u6587 <p>\u4e0e\u5c5e\u6027\u4e00\u6837\uff0c\u6709\u65f6\u4fdd\u62a4\u65b9\u6cd5\u514d\u906d\u91cd\u5199\u5f88\u6709\u7528\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528 <code>typing.final</code> \u88c5\u9970\u5668\u6765\u5b9e\u73b0\u6b64\u76ee\u7684\uff1a</p> <pre><code>from typing import final\n\nclass Base:\n    @final\n    def common_name(self) -&gt; None:\n        ...\n\nclass Derived(Base):\n    def common_name(self) -&gt; None:  # Error: cannot override a final method\n        ...\n</code></pre> <p>\u8fd9\u4e2a<code>@final</code>\u88c5\u9970\u5668\u53ef\u4ee5\u4e0e\u5b9e\u4f8b\u65b9\u6cd5\u3001\u7c7b\u65b9\u6cd5\u3001\u9759\u6001\u65b9\u6cd5\u548c\u5c5e\u6027\u4e00\u8d77\u4f7f\u7528\u3002</p> <p>\u5bf9\u4e8e\u91cd\u8f7d\u65b9\u6cd5\uff0c\u60a8\u5e94\u8be5\u5728\u5b9e\u73b0\u4e0a\u6dfb\u52a0<code>@final</code>\u4ee5\u4f7f\u5176\u6700\u7ec8\uff08\u6216\u5728\u5b58\u6839\u4e2d\u7684\u7b2c\u4e00\u4e2a\u91cd\u8f7d\u4e0a\uff09\uff1a</p> <pre><code>from typing import Any, overload\n\nclass Base:\n    @overload\n    def method(self) -&gt; None: ...\n    @overload\n    def method(self, arg: int) -&gt; int: ...\n    @final\n    def method(self, x=None):\n        ...\n</code></pre> <p>Like with attributes, sometimes it is useful to protect a method from overriding. You can use the <code>typing.final</code> decorator for this purpose:</p> <pre><code>from typing import final\n\nclass Base:\n    @final\n    def common_name(self) -&gt; None:\n        ...\n\nclass Derived(Base):\n    def common_name(self) -&gt; None:  # Error: cannot override a final method\n        ...\n</code></pre> <p>This <code>@final</code> decorator can be used with instance methods, class methods, static methods, and properties.</p> <p>For overloaded methods you should add <code>@final</code> on the implementation to make it final (or on the first overload in stubs):</p> <pre><code>from typing import Any, overload\n\nclass Base:\n    @overload\n    def method(self) -&gt; None: ...\n    @overload\n    def method(self, arg: int) -&gt; int: ...\n    @final\n    def method(self, x=None):\n        ...\n</code></pre>"},{"location":"mypy/final_names_methods_classes/#\u6700\u7ec8\u7c7b","title":"\u6700\u7ec8\u7c7b","text":"<p>Final classes</p> \u4e2d\u6587\u82f1\u6587 <p>\u60a8\u53ef\u4ee5\u5c06 <code>typing.final</code> \u88c5\u9970\u5668\u5e94\u7528\u4e8e\u4e00\u4e2a\u7c7b\uff0c\u4ee5\u6307\u793a mypy \u5b83\u4e0d\u5e94\u88ab\u5b50\u7c7b\u5316\uff1a</p> <pre><code>from typing import final\n\n@final\nclass Leaf:\n    ...\n\nclass MyLeaf(Leaf):  # Error: Leaf can't be subclassed\n    ...\n</code></pre> <p>\u88c5\u9970\u5668\u5145\u5f53 mypy \u7684\u58f0\u660e\uff08\u4ee5\u53ca\u4eba\u7c7b\u7684\u6587\u6863\uff09\uff0c\u4f46\u5b83\u5b9e\u9645\u4e0a\u5e76\u4e0d\u80fd\u963b\u6b62\u8fd0\u884c\u65f6\u7684\u5b50\u7c7b\u5316\u3002</p> <p>\u4ee5\u4e0b\u662f\u4f7f\u7528 Final \u7c7b\u53ef\u80fd\u6709\u7528\u7684\u4e00\u4e9b\u60c5\u51b5\uff1a</p> <ul> <li>\u7c7b\u5e76\u4e0d\u662f\u8bbe\u8ba1\u6765\u8fdb\u884c\u5b50\u7c7b\u5316\u7684\u3002 \u4e5f\u8bb8\u5b50\u7c7b\u5316\u4e0d\u4f1a\u6309\u9884\u671f\u5de5\u4f5c\uff0c\u6216\u8005\u5b50\u7c7b\u5316\u5f88\u5bb9\u6613\u51fa\u9519\u3002</li> <li>\u5b50\u7c7b\u5316\u4f1a\u4f7f\u4ee3\u7801\u66f4\u96be\u7406\u89e3\u6216\u7ef4\u62a4\u3002 \u4f8b\u5982\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u9632\u6b62\u57fa\u7c7b\u548c\u5b50\u7c7b\u4e4b\u95f4\u4e0d\u5fc5\u8981\u7684\u7d27\u5bc6\u8026\u5408\u3002</li> <li>\u60a8\u5e0c\u671b\u4fdd\u7559\u5c06\u6765\u4efb\u610f\u66f4\u6539\u7c7b\u5b9e\u73b0\u7684\u81ea\u7531\uff0c\u800c\u8fd9\u4e9b\u66f4\u6539\u53ef\u80fd\u4f1a\u7834\u574f\u5b50\u7c7b\u3002</li> </ul> <p>\u5b9a\u4e49\u81f3\u5c11\u4e00\u4e2a\u62bd\u8c61\u65b9\u6cd5\u6216\u5c5e\u6027\u5e76\u5177\u6709 <code>@final</code> \u88c5\u9970\u5668\u7684\u62bd\u8c61\u7c7b\u5c06\u4ece mypy \u4e2d\u751f\u6210\u9519\u8bef\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u5c5e\u6027\u6c38\u8fdc\u65e0\u6cd5\u5b9e\u73b0\u3002</p> <pre><code>from abc import ABCMeta, abstractmethod\nfrom typing import final\n\n@final\nclass A(metaclass=ABCMeta):  # error: Final class A has abstract attributes \"f\"\n    @abstractmethod\n    def f(self, x: int) -&gt; None: pass\n</code></pre> <p>You can apply the <code>typing.final</code> decorator to a class to indicate to mypy that it should not be subclassed:</p> <pre><code>from typing import final\n\n@final\nclass Leaf:\n    ...\n\nclass MyLeaf(Leaf):  # Error: Leaf can't be subclassed\n    ...\n</code></pre> <p>The decorator acts as a declaration for mypy (and as documentation for humans), but it doesn't actually prevent subclassing at runtime.</p> <p>Here are some situations where using a final class may be useful:</p> <ul> <li>A class wasn't designed to be subclassed. Perhaps subclassing would not work as expected, or subclassing would be error-prone.</li> <li>Subclassing would make code harder to understand or maintain. For example, you may want to prevent unnecessarily tight coupling between base classes and subclasses.</li> <li>You want to retain the freedom to arbitrarily change the class implementation in the future, and these changes might break subclasses.</li> </ul> <p>An abstract class that defines at least one abstract method or property and has <code>@final</code> decorator will generate an error from mypy, since those attributes could never be implemented.</p> <pre><code>from abc import ABCMeta, abstractmethod\nfrom typing import final\n\n@final\nclass A(metaclass=ABCMeta):  # error: Final class A has abstract attributes \"f\"\n    @abstractmethod\n    def f(self, x: int) -&gt; None: pass\n</code></pre>"},{"location":"mypy/generics/","title":"\u6cdb\u578b","text":"\u4e2d\u6587\u82f1\u6587 <p>\u672c\u8282\u4ecb\u7ecd\u5982\u4f55\u5b9a\u4e49\u81ea\u5df1\u7684\u6cdb\u578b\u7c7b\uff0c\u8be5\u6cdb\u578b\u7c7b\u91c7\u7528\u4e00\u4e2a\u6216\u591a\u4e2a\u7c7b\u578b\u53c2\u6570\uff0c\u7c7b\u4f3c\u4e8e <code>list[X]</code> \u7b49\u5185\u7f6e\u7c7b\u578b\u3002 \u7528\u6237\u5b9a\u4e49\u7684\u6cdb\u578b\u662f\u4e00\u4e2a\u76f8\u5f53\u9ad8\u7ea7\u7684\u529f\u80fd\uff0c\u60a8\u53ef\u4ee5\u5728\u4e0d\u4f7f\u7528\u5b83\u4eec\u7684\u60c5\u51b5\u4e0b\u8d70\u5f97\u5f88\u8fdc\u2014\u2014\u8bf7\u968f\u610f\u8df3\u8fc7\u672c\u8282\u5e76\u7a0d\u540e\u518d\u56de\u6765\u3002</p> <p>Generics</p> <p>This section explains how you can define your own generic classes that take one or more type parameters, similar to built-in types such as <code>list[X]</code>. User-defined generics are a moderately advanced feature and you can get far without ever using them -- feel free to skip this section and come back later.</p>"},{"location":"mypy/generics/#\u5b9a\u4e49\u6cdb\u578b\u7c7b","title":"\u5b9a\u4e49\u6cdb\u578b\u7c7b","text":"<p>Defining generic classes</p> \u4e2d\u6587\u82f1\u6587 <p>\u5185\u7f6e\u96c6\u5408\u7c7b\u662f\u6cdb\u578b\u7c7b\u3002 \u6cdb\u578b\u7c7b\u578b\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u7c7b\u578b\u53c2\u6570\uff0c\u53ef\u4ee5\u662f\u4efb\u610f\u7c7b\u578b\u3002 \u4f8b\u5982\uff0c<code>dict[int, str]</code> \u5177\u6709\u7c7b\u578b\u53c2\u6570 \u201cint\u201d \u548c \u201cstr\u201d \uff0c\u201clist[int]\u201d \u5177\u6709\u7c7b\u578b\u53c2\u6570 \u201cint\u201d \u3002</p> <p>\u7a0b\u5e8f\u8fd8\u53ef\u4ee5\u5b9a\u4e49\u65b0\u7684\u6cdb\u578b\u7c7b\u3002 \u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u6cdb\u578b\u7c7b\uff0c\u8868\u793a\u5806\u6808\uff1a</p> <pre><code>from typing import TypeVar, Generic\n\nT = TypeVar('T')\n\nclass Stack(Generic[T]):\n    def __init__(self) -&gt; None:\n        # Create an empty list with items of type T\n        self.items: list[T] = []\n\n    def push(self, item: T) -&gt; None:\n        self.items.append(item)\n\n    def pop(self) -&gt; T:\n        return self.items.pop()\n\n    def empty(self) -&gt; bool:\n        return not self.items\n</code></pre> <p>Stack \u7c7b\u53ef\u7528\u4e8e\u8868\u793a\u4efb\u4f55\u7c7b\u578b\u7684\u5806\u6808\uff1a<code>Stack[int]</code>\u3001<code>Stack[tuple[int, str]]</code> \u7b49\u3002</p> <p>\u4f7f\u7528 <code>Stack</code> \u4e0e\u5185\u7f6e\u5bb9\u5668\u7c7b\u578b\u7c7b\u4f3c\uff1a</p> <pre><code># \u6784\u9020\u4e00\u4e2a\u7a7a\u7684 Stack[int] \u5b9e\u4f8b\nstack = Stack[int]()\nstack.push(2)\nstack.pop()\nstack.push('x')  # error: Argument 1 to \"push\" of \"Stack\" has incompatible type \"str\"; expected \"int\"\n</code></pre> <p>\u6cdb\u578b\u7c7b\u578b\u5b9e\u4f8b\u7684\u6784\u9020\u7ecf\u8fc7\u7c7b\u578b\u68c0\u67e5\uff1a</p> <pre><code>class Box(Generic[T]):\n    def __init__(self, content: T) -&gt; None:\n        self.content = content\n\nBox(1)       # OK, inferred type is Box[int]\nBox[int](1)  # Also OK\nBox[int]('some string')  # error: Argument 1 to \"Box\" has incompatible type \"str\"; expected \"int\"\n</code></pre> <p>The built-in collection classes are generic classes. Generic types have one or more type parameters, which can be arbitrary types. For example, <code>dict[int, str]</code> has the type parameters <code>int</code> and <code>str</code>, and <code>list[int]</code> has a type parameter <code>int</code>.</p> <p>Programs can also define new generic classes. Here is a very simple generic class that represents a stack:</p> <pre><code>from typing import TypeVar, Generic\n\nT = TypeVar('T')\n\nclass Stack(Generic[T]):\n    def __init__(self) -&gt; None:\n        # Create an empty list with items of type T\n        self.items: list[T] = []\n\n    def push(self, item: T) -&gt; None:\n        self.items.append(item)\n\n    def pop(self) -&gt; T:\n        return self.items.pop()\n\n    def empty(self) -&gt; bool:\n        return not self.items\n</code></pre> <p>The <code>Stack</code> class can be used to represent a stack of any type: <code>Stack[int]</code>, <code>Stack[tuple[int, str]]</code>, etc.</p> <p>Using <code>Stack</code> is similar to built-in container types:</p> <pre><code># Construct an empty Stack[int] instance\nstack = Stack[int]()\nstack.push(2)\nstack.pop()\nstack.push('x')  # error: Argument 1 to \"push\" of \"Stack\" has incompatible type \"str\"; expected \"int\"\n</code></pre> <p>Construction of instances of generic types is type checked:</p> <pre><code>class Box(Generic[T]):\n    def __init__(self, content: T) -&gt; None:\n        self.content = content\n\nBox(1)       # OK, inferred type is Box[int]\nBox[int](1)  # Also OK\nBox[int]('some string')  # error: Argument 1 to \"Box\" has incompatible type \"str\"; expected \"int\"\n</code></pre>"},{"location":"mypy/generics/#\u5b9a\u4e49\u6cdb\u578b\u7c7b\u7684\u5b50\u7c7b","title":"\u5b9a\u4e49\u6cdb\u578b\u7c7b\u7684\u5b50\u7c7b","text":"<p>Defining subclasses of generic classes</p> \u4e2d\u6587\u82f1\u6587 <p>\u7528\u6237\u5b9a\u4e49\u7684\u6cdb\u578b\u7c7b\u548c <code>typing</code> \u4e2d\u5b9a\u4e49\u7684\u6cdb\u578b\u7c7b\u53ef\u4ee5\u7528\u4f5c\u53e6\u4e00\u4e2a\u7c7b\u7684\u57fa\u7c7b\uff08\u6cdb\u578b \u6216\u975e\u6cdb\u578b\uff09\u3002 \u4f8b\u5982\uff1a</p> <pre><code>from typing import Generic, TypeVar, Mapping, Iterator\n\nKT = TypeVar('KT')\nVT = TypeVar('VT')\n\n# \u8fd9\u662f Mapping \u7684\u901a\u7528\u5b50\u7c7b\nclass MyMap(Mapping[KT, VT]):\n    def __getitem__(self, k: KT) -&gt; VT: ...\n    def __iter__(self) -&gt; Iterator[KT]: ...\n    def __len__(self) -&gt; int: ...\n\nitems: MyMap[str, int]  # OK\n\n# \u8fd9\u662f dict \u7684\u975e\u6cdb\u578b\u5b50\u7c7b\nclass StrDict(dict[str, str]):\n    def __str__(self) -&gt; str:\n        return f'StrDict({super().__str__()})'\n\n\ndata: StrDict[int, int]  # Error! StrDict is not generic\ndata2: StrDict  # OK\n\n#\u8fd9\u662f\u4e00\u4e2a\u7528\u6237\u5b9a\u4e49\u7684\u6cdb\u578b\u7c7b\nclass Receiver(Generic[T]):\n    def accept(self, value: T) -&gt; None: ...\n\n# \u8fd9\u662f Receiver \u7684\u901a\u7528\u5b50\u7c7b\nclass AdvancedReceiver(Receiver[T]): ...\n</code></pre> <p>Note</p> <p>\u5982\u679c\u60a8\u5e0c\u671b mypy \u5c06\u7528\u6237\u5b9a\u4e49\u7684\u7c7b\u89c6\u4e3a\u6620\u5c04\uff08\u4ee5\u53ca\u5e8f\u5217\u7684 <code>Sequence</code> \u7b49\uff09\uff0c\u5219\u5fc5\u987b\u6dfb\u52a0\u663e\u5f0f\u7684 <code>Mapping</code> \u57fa\u7c7b\u3002 \u8fd9\u662f\u56e0\u4e3a mypy \u4e0d\u4e3a\u8fd9\u4e9b ABC \u4f7f\u7528\u201c\u7ed3\u6784\u5b50\u7c7b\u578b\u201d\uff0c\u4e0d\u50cf <code>Iterable</code> \u7b49\u66f4\u7b80\u5355\u7684\u534f\u8bae\uff0c\u5b83\u4f7f\u7528 <code>\u7ed3\u6784\u5b50\u7c7b\u578b</code></p> <p>\u5982\u679c\u8fd8\u6709\u5176\u4ed6\u5305\u542b\u7c7b\u578b\u53d8\u91cf\u7684\u57fa\u7c7b\uff0c\u4f8b\u5982\u4e0a\u4f8b\u4e2d\u7684 <code>Mapping[KT, VT]</code>\uff0c\u5219\u53ef\u4ee5\u4ece\u57fa\u7c7b\u4e2d\u7701\u7565 <code>Generic</code>\u3002 \u5982\u679c\u60a8\u5728\u57fa\u6570\u4e2d\u5305\u542b\u201cGeneric[...]\u201d\uff0c\u90a3\u4e48\u5b83\u5e94\u8be5\u5217\u51fa\u5176\u4ed6\u57fa\u6570\u4e2d\u5b58\u5728\u7684\u6240\u6709\u7c7b\u578b\u53d8\u91cf\uff08\u6216\u66f4\u591a\uff0c\u5982\u679c\u9700\u8981\uff09\u3002 \u7c7b\u578b\u53d8\u91cf\u7684\u987a\u5e8f\u7531\u4ee5\u4e0b\u89c4\u5219\u5b9a\u4e49\uff1a</p> <ul> <li>\u5982\u679c\u5b58\u5728\u201cGeneric[...]\u201d\uff0c\u5219\u53d8\u91cf\u7684\u987a\u5e8f\u59cb\u7ec8\u7531\u5b83\u4eec\u5728\u201cGeneric[...]\u201d\u4e2d\u7684\u987a\u5e8f\u786e\u5b9a\u3002</li> <li>\u5982\u679c\u57fa\u6570\u4e2d\u6ca1\u6709\u201cGeneric[...]\u201d\uff0c\u5219\u6240\u6709\u7c7b\u578b\u53d8\u91cf\u90fd\u6309\u5b57\u5178\u987a\u5e8f\u6536\u96c6\uff08\u5373\u6309\u9996\u6b21\u51fa\u73b0\uff09\u3002</li> </ul> <p>For example:</p> <pre><code>from typing import Generic, TypeVar, Any\n\nT = TypeVar('T')\nS = TypeVar('S')\nU = TypeVar('U')\n\nclass One(Generic[T]): ...\nclass Another(Generic[T]): ...\n\nclass First(One[T], Another[S]): ...\nclass Second(One[T], Another[S], Generic[S, U, T]): ...\n\nx: First[int, str]        # Here T is bound to int, S is bound to str\ny: Second[int, str, Any]  # Here T is Any, S is int, and U is str\n</code></pre> <p>User-defined generic classes and generic classes defined in <code>typing</code> can be used as a base class for another class (generic or non-generic). For example:</p> <pre><code>from typing import Generic, TypeVar, Mapping, Iterator\n\nKT = TypeVar('KT')\nVT = TypeVar('VT')\n\n# This is a generic subclass of Mapping\nclass MyMap(Mapping[KT, VT]):\n    def __getitem__(self, k: KT) -&gt; VT: ...\n    def __iter__(self) -&gt; Iterator[KT]: ...\n    def __len__(self) -&gt; int: ...\n\nitems: MyMap[str, int]  # OK\n\n# This is a non-generic subclass of dict\nclass StrDict(dict[str, str]):\n    def __str__(self) -&gt; str:\n        return f'StrDict({super().__str__()})'\n\n\ndata: StrDict[int, int]  # Error! StrDict is not generic\ndata2: StrDict  # OK\n\n# This is a user-defined generic class\nclass Receiver(Generic[T]):\n    def accept(self, value: T) -&gt; None: ...\n\n# This is a generic subclass of Receiver\nclass AdvancedReceiver(Receiver[T]): ...\n</code></pre> <p>Note</p> <p>You have to add an explicit <code>Mapping</code> base class if you want mypy to consider a user-defined class as a mapping (and <code>Sequence</code> for sequences, etc.). This is because mypy doesn't use structural subtyping for these ABCs, unlike simpler protocols like <code>Iterable</code>, which use <code>structural subtyping</code>.</p> <p><code>Generic</code> can be omitted from bases if there are other base classes that include type variables, such as <code>Mapping[KT, VT]</code> in the above example. If you include <code>Generic[...]</code> in bases, then it should list all type variables present in other bases (or more, if needed). The order of type variables is defined by the following rules:</p> <ul> <li>If <code>Generic[...]</code> is present, then the order of variables is always determined by their order in <code>Generic[...]</code>.</li> <li>If there are no <code>Generic[...]</code> in bases, then all type variables are collected in the lexicographic order (i.e. by first appearance).</li> </ul> <p>For example:</p> <pre><code>from typing import Generic, TypeVar, Any\n\nT = TypeVar('T')\nS = TypeVar('S')\nU = TypeVar('U')\n\nclass One(Generic[T]): ...\nclass Another(Generic[T]): ...\n\nclass First(One[T], Another[S]): ...\nclass Second(One[T], Another[S], Generic[S, U, T]): ...\n\nx: First[int, str]        # Here T is bound to int, S is bound to str\ny: Second[int, str, Any]  # Here T is Any, S is int, and U is str\n</code></pre>"},{"location":"mypy/generics/#\u6cdb\u578b\u51fd\u6570","title":"\u6cdb\u578b\u51fd\u6570","text":"<p>Generic functions</p> \u4e2d\u6587\u82f1\u6587 <p>\u7c7b\u578b\u53d8\u91cf\u53ef\u7528\u4e8e\u5b9a\u4e49\u6cdb\u578b\u51fd\u6570\uff1a</p> <pre><code>from typing import TypeVar, Sequence\n\nT = TypeVar('T')\n\n# A generic function!\ndef first(seq: Sequence[T]) -&gt; T:\n    return seq[0]\n</code></pre> <p>\u4e0e\u6cdb\u578b\u7c7b\u4e00\u6837\uff0c\u7c7b\u578b\u53d8\u91cf\u53ef\u4ee5\u66ff\u6362\u4e3a\u4efb\u4f55\u7c7b\u578b\u3002 \u8fd9\u610f\u5473\u7740\u201cfirst\u201d\u53ef\u4ee5\u4e0e\u4efb\u4f55\u5e8f\u5217\u7c7b\u578b\u4e00\u8d77\u4f7f\u7528\uff0c\u5e76\u4e14\u8fd4\u56de\u7c7b\u578b\u6d3e\u751f\u81ea\u5e8f\u5217\u9879\u7c7b\u578b\u3002 \u4f8b\u5982\uff1a</p> <pre><code>reveal_type(first([1, 2, 3]))   # Revealed type is \"builtins.int\"\nreveal_type(first(['a', 'b']))  # Revealed type is \"builtins.str\"\n</code></pre> <p>\u53e6\u8bf7\u6ce8\u610f\uff0c\u7c7b\u578b\u53d8\u91cf\u7684\u5355\u4e2a\u5b9a\u4e49\uff08\u4f8b\u5982\u4e0a\u9762\u7684\u201cT\u201d\uff09\u53ef\u4ee5\u5728\u591a\u4e2a\u6cdb\u578b\u51fd\u6570\u6216\u7c7b\u4e2d\u4f7f\u7528\u3002 \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5728\u4e24\u4e2a\u6cdb\u578b\u51fd\u6570\u4e2d\u4f7f\u7528\u76f8\u540c\u7684\u7c7b\u578b\u53d8\u91cf\uff1a</p> <pre><code>from typing import TypeVar, Sequence\n\nT = TypeVar('T')      # \u58f0\u660e\u7c7b\u578b\u53d8\u91cf\n\ndef first(seq: Sequence[T]) -&gt; T:\n    return seq[0]\n\ndef last(seq: Sequence[T]) -&gt; T:\n    return seq[-1]\n</code></pre> <p>\u53d8\u91cf\u7684\u7c7b\u578b\u4e2d\u4e0d\u80fd\u5305\u542b\u7c7b\u578b\u53d8\u91cf\uff0c\u9664\u975e\u8be5\u7c7b\u578b\u53d8\u91cf\u7ed1\u5b9a\u5728\u5305\u542b\u6cdb\u578b\u7c7b\u6216\u51fd\u6570\u4e2d\u3002</p> <p>Type variables can be used to define generic functions:</p> <pre><code>from typing import TypeVar, Sequence\n\nT = TypeVar('T')\n\n# A generic function!\ndef first(seq: Sequence[T]) -&gt; T:\n    return seq[0]\n</code></pre> <p>As with generic classes, the type variable can be replaced with any type. That means <code>first</code> can be used with any sequence type, and the return type is derived from the sequence item type. For example:</p> <pre><code>reveal_type(first([1, 2, 3]))   # Revealed type is \"builtins.int\"\nreveal_type(first(['a', 'b']))  # Revealed type is \"builtins.str\"\n</code></pre> <p>Note also that a single definition of a type variable (such as <code>T</code> above) can be used in multiple generic functions or classes. In this example we use the same type variable in two generic functions:</p> <pre><code>from typing import TypeVar, Sequence\n\nT = TypeVar('T')      # Declare type variable\n\ndef first(seq: Sequence[T]) -&gt; T:\n    return seq[0]\n\ndef last(seq: Sequence[T]) -&gt; T:\n    return seq[-1]\n</code></pre> <p>A variable cannot have a type variable in its type unless the type variable is bound in a containing generic class or function.</p>"},{"location":"mypy/generics/#\u6cdb\u578b\u65b9\u6cd5\u548c\u81ea\u8eab\u6cdb\u578b","title":"\u6cdb\u578b\u65b9\u6cd5\u548c\u81ea\u8eab\u6cdb\u578b","text":"<p>Generic methods and generic self</p> \u4e2d\u6587\u82f1\u6587 <p>\u60a8\u8fd8\u53ef\u4ee5\u5b9a\u4e49\u6cdb\u578b\u65b9\u6cd5 - \u53ea\u9700\u5728\u65b9\u6cd5\u7b7e\u540d\u4e2d\u4f7f\u7528\u4e0e\u7c7b\u7c7b\u578b\u53d8\u91cf\u4e0d\u540c\u7684\u7c7b\u578b\u53d8\u91cf\u3002 \u7279\u522b\u662f\uff0c\u201cself\u201d \u53c2\u6570\u4e5f\u53ef\u4ee5\u662f\u901a\u7528\u7684\uff0c\u5141\u8bb8\u65b9\u6cd5\u8fd4\u56de\u8bbf\u95ee\u70b9\u5df2\u77e5\u7684\u6700\u7cbe\u786e\u7684\u7c7b\u578b\u3002 \u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u68c0\u67e5\u4e00\u7cfb\u5217 setter \u65b9\u6cd5\uff1a</p> <pre><code>from typing import TypeVar\n\nT = TypeVar('T', bound='Shape')\n\nclass Shape:\n    def set_scale(self: T, scale: float) -&gt; T:\n        self.scale = scale\n        return self\n\nclass Circle(Shape):\n    def set_radius(self, r: float) -&gt; 'Circle':\n        self.radius = r\n        return self\n\nclass Square(Shape):\n    def set_width(self, w: float) -&gt; 'Square':\n        self.width = w\n        return self\n\ncircle: Circle = Circle().set_scale(0.5).set_radius(2.7)\nsquare: Square = Square().set_scale(0.5).set_width(3.2)\n</code></pre> <p>\u5982\u679c\u4e0d\u4f7f\u7528\u901a\u7528\u7684 \u201cself\u201d \uff0c\u6700\u540e\u4e24\u884c\u5c06\u65e0\u6cd5\u6b63\u786e\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\uff0c\u56e0\u4e3a \u201cset_scale\u201d \u7684\u8fd4\u56de\u7c7b\u578b\u5c06\u662f \u201cShape\u201d \uff0c\u800c\u5b83\u6ca1\u6709\u5b9a\u4e49 \u201cset_radius\u201d \u6216 \u201cset_width\u201d \u3002</p> <p>\u5176\u4ed6\u7528\u9014\u662f\u5de5\u5382\u65b9\u6cd5\uff0c\u4f8b\u5982\u590d\u5236\u548c\u53cd\u5e8f\u5217\u5316\u3002 \u5bf9\u4e8e\u7c7b\u65b9\u6cd5\uff0c\u60a8\u8fd8\u53ef\u4ee5\u4f7f\u7528 <code>Type[T]</code> \u5b9a\u4e49\u901a\u7528 <code>cls</code></p> <pre><code>from typing import TypeVar, Type\n\nT = TypeVar('T', bound='Friend')\n\nclass Friend:\n    other: \"Friend\" = None\n\n    @classmethod\n    def make_pair(cls: Type[T]) -&gt; tuple[T, T]:\n        a, b = cls(), cls()\n        a.other = b\n        b.other = a\n        return a, b\n\nclass SuperFriend(Friend):\n    pass\n\na, b = SuperFriend.make_pair()\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u5f53\u4f7f\u7528\u901a\u7528\u201cself\u201d\u91cd\u5199\u65b9\u6cd5\u65f6\uff0c\u60a8\u4e5f\u5fc5\u987b\u8fd4\u56de\u901a\u7528\u201cself\u201d\uff0c\u6216\u8005\u8fd4\u56de\u5f53\u524d\u7c7b\u7684\u5b9e\u4f8b\u3002 \u5728\u540e\u4e00\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u5fc5\u987b\u5728\u6240\u6709\u672a\u6765\u7684\u5b50\u7c7b\u4e2d\u5b9e\u73b0\u6b64\u65b9\u6cd5\u3002</p> <p>\u53e6\u8bf7\u6ce8\u610f\uff0cmypy \u65e0\u6cd5\u59cb\u7ec8\u9a8c\u8bc1\u526f\u672c\u6216\u53cd\u5e8f\u5217\u5316\u65b9\u6cd5\u7684\u5b9e\u73b0\u662f\u5426\u8fd4\u56de self \u7684\u5b9e\u9645\u7c7b\u578b\u3002 \u56e0\u6b64\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u5728\u8fd9\u4e9b\u65b9\u6cd5\u5185\uff08\u4f46\u4e0d\u662f\u5728\u8c03\u7528\u7ad9\u70b9\uff09\u9759\u9ed8 mypy\uff0c\u53ef\u80fd\u901a\u8fc7\u4f7f\u7528 \u201cAny\u201d \u7c7b\u578b\u6216 \u201c# type:ignore\u201d \u6ce8\u91ca\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0cmypy \u5141\u8bb8\u60a8\u4ee5\u67d0\u4e9b\u4e0d\u5b89\u5168\u7684\u65b9\u5f0f\u4f7f\u7528\u901a\u7528\u81ea\u8eab\u7c7b\u578b\uff0c\u4ee5\u652f\u6301\u5e38\u89c1\u7684\u4e60\u60ef\u7528\u6cd5\u3002 \u4f8b\u5982\uff0c\u5728\u53c2\u6570\u7c7b\u578b\u4e2d\u4f7f\u7528\u901a\u7528\u81ea\u7c7b\u578b\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\uff0c\u5373\u4f7f\u5b83\u4e0d\u5b89\u5168\uff1a</p> <pre><code>from typing import TypeVar\n\nT = TypeVar(\"T\")\n\nclass Base:\n    def compare(self: T, other: T) -&gt; bool:\n        return False\n\nclass Sub(Base):\n    def __init__(self, x: int) -&gt; None:\n        self.x = x\n\n    # \u8fd9\u662f\u4e0d\u5b89\u5168\u7684\uff08\u89c1\u4e0b\u6587\uff09\uff0c\u4f46\u5141\u8bb8\uff0c\u56e0\u4e3a\u8fd9\u662f\u4e00\u79cd\u5e38\u89c1\u6a21\u5f0f\uff0c\u5e76\u4e14\u5728\u5b9e\u8df5\u4e2d\u5f88\u5c11\u5f15\u8d77\u95ee\u9898\u3002\n    def compare(self, other: Sub) -&gt; bool:\n        return self.x &gt; other.x\n\nb: Base = Sub(42)\nb.compare(Base())  # \u8fd9\u91cc\u8fd0\u884c\u65f6\u9519\u8bef: 'Base' object has no attribute 'x'\n</code></pre> <p>\u6709\u5173 self \u7c7b\u578b\u7684\u4e00\u4e9b\u9ad8\u7ea7\u7528\u6cd5\uff0c\u8bf7\u53c2\u9605 <code>additional examples</code>.</p> <p>You can also define generic methods \u2014 just use a type variable in the method signature that is different from class type variables. In particular, the <code>self</code> argument may also be generic, allowing a method to return the most precise type known at the point of access. In this way, for example, you can type check a chain of setter methods:</p> <pre><code>from typing import TypeVar\n\nT = TypeVar('T', bound='Shape')\n\nclass Shape:\n    def set_scale(self: T, scale: float) -&gt; T:\n        self.scale = scale\n        return self\n\nclass Circle(Shape):\n    def set_radius(self, r: float) -&gt; 'Circle':\n        self.radius = r\n        return self\n\nclass Square(Shape):\n    def set_width(self, w: float) -&gt; 'Square':\n        self.width = w\n        return self\n\ncircle: Circle = Circle().set_scale(0.5).set_radius(2.7)\nsquare: Square = Square().set_scale(0.5).set_width(3.2)\n</code></pre> <p>Without using generic <code>self</code>, the last two lines could not be type checked properly, since the return type of <code>set_scale</code> would be <code>Shape</code>, which doesn't define <code>set_radius</code> or <code>set_width</code>.</p> <p>Other uses are factory methods, such as copy and deserialization. For class methods, you can also define generic <code>cls</code>, using <code>Type[T]</code>:</p> <pre><code>from typing import TypeVar, Type\n\nT = TypeVar('T', bound='Friend')\n\nclass Friend:\n    other: \"Friend\" = None\n\n    @classmethod\n    def make_pair(cls: Type[T]) -&gt; tuple[T, T]:\n        a, b = cls(), cls()\n        a.other = b\n        b.other = a\n        return a, b\n\nclass SuperFriend(Friend):\n    pass\n\na, b = SuperFriend.make_pair()\n</code></pre> <p>Note that when overriding a method with generic <code>self</code>, you must either return a generic <code>self</code> too, or return an instance of the current class. In the latter case, you must implement this method in all future subclasses.</p> <p>Note also that mypy cannot always verify that the implementation of a copy or a deserialization method returns the actual type of self. Therefore you may need to silence mypy inside these methods (but not at the call site), possibly by making use of the <code>Any</code> type or a <code># type: ignore</code> comment.</p> <p>Note that mypy lets you use generic self types in certain unsafe ways in order to support common idioms. For example, using a generic self type in an argument type is accepted even though it's unsafe:</p> <pre><code>from typing import TypeVar\n\nT = TypeVar(\"T\")\n\nclass Base:\n    def compare(self: T, other: T) -&gt; bool:\n        return False\n\nclass Sub(Base):\n    def __init__(self, x: int) -&gt; None:\n        self.x = x\n\n    # This is unsafe (see below) but allowed because it's\n    # a common pattern and rarely causes issues in practice.\n    def compare(self, other: Sub) -&gt; bool:\n        return self.x &gt; other.x\n\nb: Base = Sub(42)\nb.compare(Base())  # Runtime error here: 'Base' object has no attribute 'x'\n</code></pre> <p>For some advanced uses of self types, see <code>additional examples</code>.</p>"},{"location":"mypy/generics/#\u4f7f\u7528-typingself-\u81ea\u52a8\u6807\u6ce8self\u7c7b\u578b","title":"\u4f7f\u7528 Typing.Self \u81ea\u52a8\u6807\u6ce8self\u7c7b\u578b","text":"<p>Automatic self types using typing.Self</p> \u4e2d\u6587\u82f1\u6587 <p>\u7531\u4e8e\u4e0a\u8ff0\u6a21\u5f0f\u975e\u5e38\u5e38\u89c1\uff0c\u56e0\u6b64 mypy \u652f\u6301 <code>PEP-673</code> \u4e2d\u5f15\u5165\u7684\u66f4\u7b80\u5355\u7684\u8bed\u6cd5\uff0c\u4ee5\u4f7f\u5b83\u4eec\u66f4\u6613\u4e8e\u4f7f\u7528\u3002 \u60a8\u53ef\u4ee5\u5bfc\u5165\u7279\u6b8a\u7c7b\u578b\u201ctyping.Self\u201d\uff0c\u800c\u4e0d\u662f\u5b9a\u4e49\u7c7b\u578b\u53d8\u91cf\u5e76\u4e3a\u201cself\u201d\u4f7f\u7528\u663e\u5f0f\u6ce8\u91ca\uff0c\u8be5\u7c7b\u578b\u4f1a\u81ea\u52a8\u8f6c\u6362\u4e3a\u4ee5\u5f53\u524d\u7c7b\u4e3a\u4e0a\u9650\u7684\u7c7b\u578b\u53d8\u91cf\uff0c\u5e76\u4e14\u4e0d\u9700\u8981 \u201cself\u201d\uff08\u6216\u7c7b\u65b9\u6cd5\u4e2d\u7684\u201ccls\u201d\uff09\u7684\u6ce8\u91ca\u3002 \u4f7f\u7528 <code>Self</code> \u53ef\u4ee5\u4f7f\u4e0a\u4e00\u8282\u7684\u793a\u4f8b\u53d8\u5f97\u66f4\u7b80\u5355\uff1a</p> <pre><code>from typing import Self\n\nclass Friend:\n    other: Self | None = None\n\n    @classmethod\n    def make_pair(cls) -&gt; tuple[Self, Self]:\n        a, b = cls(), cls()\n        a.other = b\n        b.other = a\n        return a, b\n\nclass SuperFriend(Friend):\n    pass\n\na, b = SuperFriend.make_pair()\n</code></pre> <p>\u8fd9\u6bd4\u4f7f\u7528\u663e\u5f0f\u7c7b\u578b\u53d8\u91cf\u66f4\u7d27\u51d1\u3002 \u6b64\u5916\uff0c\u9664\u4e86\u65b9\u6cd5\u4e4b\u5916\uff0c\u60a8\u8fd8\u53ef\u4ee5\u5728\u5c5e\u6027\u6ce8\u91ca\u4e2d\u4f7f\u7528\u201cSelf\u201d\u3002</p> <p>Note</p> <p>\u8981\u5728\u65e9\u4e8e 3.11 \u7684 Python \u7248\u672c\u4e0a\u4f7f\u7528\u6b64\u529f\u80fd\uff0c\u60a8\u9700\u8981\u4ece <code>typing_extensions</code>\uff08\u7248\u672c 4.0 \u6216\u66f4\u9ad8\u7248\u672c\uff09\u5bfc\u5165 <code>Self</code>\u3002</p> <p>Since the patterns described above are quite common, mypy supports a simpler syntax, introduced in <code>PEP-673</code>, to make them easier to use. Instead of defining a type variable and using an explicit annotation for <code>self</code>, you can import the special type <code>typing.Self</code> that is automatically transformed into a type variable with the current class as the upper bound, and you don't need an annotation for <code>self</code> (or <code>cls</code> in class methods). The example from the previous section can be made simpler by using <code>Self</code>:</p> <pre><code>from typing import Self\n\nclass Friend:\n    other: Self | None = None\n\n    @classmethod\n    def make_pair(cls) -&gt; tuple[Self, Self]:\n        a, b = cls(), cls()\n        a.other = b\n        b.other = a\n        return a, b\n\nclass SuperFriend(Friend):\n    pass\n\na, b = SuperFriend.make_pair()\n</code></pre> <p>This is more compact than using explicit type variables. Also, you can use <code>Self</code> in attribute annotations in addition to methods.</p> <p>Note</p> <p>To use this feature on Python versions earlier than 3.11, you will need to import <code>Self</code> from <code>typing_extensions</code> (version 4.0 or newer).</p>"},{"location":"mypy/generics/#\u6cdb\u578b\u7c7b\u578b\u7684\u53d8\u4f53","title":"\u6cdb\u578b\u7c7b\u578b\u7684\u53d8\u4f53","text":"<p>Variance of generic types</p> \u4e2d\u6587\u82f1\u6587 <p>\u5c31\u6cdb\u578b\u7c7b\u578b\u4e4b\u95f4\u7684\u5b50\u7c7b\u578b\u5173\u7cfb\u800c\u8a00\uff0c\u6cdb\u578b\u7c7b\u578b\u4e3b\u8981\u5206\u4e3a\u4e09\u79cd\uff1a\u4e0d\u53d8\u3001\u534f\u53d8\u548c\u9006\u53d8\u3002 \u5047\u8bbe\u6211\u4eec\u6709\u4e00\u5bf9\u7c7b\u578b\u201cA\u201d\u548c\u201cB\u201d\uff0c\u5e76\u4e14\u201cB\u201d\u662f\u201cA\u201d\u7684\u5b50\u7c7b\u578b\uff0c\u5b83\u4eec\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <ul> <li>\u5982\u679c <code>MyCovGen[B]</code> \u59cb\u7ec8\u662f <code>MyCovGen[A]</code> \u7684\u5b50\u7c7b\u578b\uff0c\u5219\u6cdb\u578b\u7c7b <code>MyCovGen[T]</code> \u4e2d\u7684\u7c7b\u578b\u53d8\u91cf <code>T</code> \u79f0\u4e3a\u534f\u53d8\u3002</li> <li>\u5982\u679c <code>MyContraGen[A]</code> \u59cb\u7ec8\u662f <code>MyContraGen[B]</code> \u7684\u5b50\u7c7b\u578b\uff0c\u5219\u6cdb\u578b\u7c7b <code>MyContraGen[T]</code> \u4e2d\u7684\u7c7b\u578b\u53d8\u91cf <code>T</code> \u79f0\u4e3a\u9006\u53d8\u3002</li> <li>\u5982\u679c\u4e0a\u8ff0\u4e24\u4e2a\u6761\u4ef6\u90fd\u4e0d\u6210\u7acb\uff0c\u5219\u6cdb\u578b\u7c7b \u201cMyInvGen[T]\u201d \u4e2d\u7684 \u201cT\u201d \u79f0\u4e3a\u4e0d\u53d8\u5f0f\u3002</li> </ul> <p>\u8ba9\u6211\u4eec\u901a\u8fc7\u51e0\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6765\u8bf4\u660e\u8fd9\u4e00\u70b9\uff1a</p> <pre><code># \u6211\u4eec\u5c06\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\u4f7f\u7528\u8fd9\u4e9b\u7c7b\nclass Shape: ...\nclass Triangle(Shape): ...\nclass Square(Shape): ...\n</code></pre> <ul> <li>\u5927\u591a\u6570\u4e0d\u53ef\u53d8\u5bb9\u5668\uff0c\u4f8b\u5982 <code>Sequence</code> \u548c <code>FrozenSet</code> \u662f\u534f\u53d8\u7684. <code>Union</code> \u5728\u6240\u6709\u53d8\u91cf\u4e2d\u4e5f\u662f\u534f\u53d8\u7684\uff1a <code>Union[Triangle, int]</code> \u662f <code>Union[Shape, int]</code> \u7684\u5b50\u7c7b\u578b\u3002</li> </ul> <pre><code>def count_lines(shapes: Sequence[Shape]) -&gt; int:\n    return sum(shape.num_sides for shape in shapes)\n\ntriangles: Sequence[Triangle]\ncount_lines(triangles)  # OK\n\ndef foo(triangle: Triangle, num: int):\n    shape_or_number: Union[Shape, int]\n    # \u4e09\u89d2\u5f62\u662f\u5f62\u72b6\uff0c\u5f62\u72b6\u662f\u6709\u6548\u7684 Union[Shape, int]\n    shape_or_number = triangle\n</code></pre> <p>\u534f\u53d8\u5e94\u8be5\u76f8\u5bf9\u76f4\u89c2\uff0c\u4f46\u9006\u53d8\u548c\u4e0d\u53d8\u53ef\u80fd\u66f4\u96be\u63a8\u7406\u3002</p> <ul> <li><code>Callable</code> \u662f\u5728\u53c2\u6570\u7c7b\u578b\u4e2d\u8868\u73b0\u9006\u53d8\u7684\u7c7b\u578b\u793a\u4f8b\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5c3d\u7ba1\u201cShape\u201d\u662f\u201cTriangle\u201d\u7684\u8d85\u7c7b\u578b\uff0c\u4f46 \u201cCallable[[Shape], int]\u201d \u662f \u201cCallable[[Triangle], int]\u201d \u7684\u5b50\u7c7b\u578b\u3002 \u8981\u7406\u89e3\u8fd9\u4e00\u70b9\uff0c\u8bf7\u8003\u8651\uff1a</li> </ul> <pre><code>def cost_of_paint_required(\n    triangle: Triangle,\n    area_calculator: Callable[[Triangle], float]\n) -&gt; float:\n    return area_calculator(triangle) * DOLLAR_PER_SQ_FT\n\n# \u8fd9\u76f4\u63a5\u6709\u6548\ndef area_of_triangle(triangle: Triangle) -&gt; float: ...\ncost_of_paint_required(triangle, area_of_triangle)  # OK\n\n# \u4f46\u8fd9\u4e5f\u6709\u6548\uff01\ndef area_of_any_shape(shape: Shape) -&gt; float: ...\ncost_of_paint_required(triangle, area_of_any_shape)  # OK\n</code></pre> <p><code>cost_of_paint_required</code> \u9700\u8981\u4e00\u4e2a\u53ef\u4ee5\u8ba1\u7b97\u4e09\u89d2\u5f62\u9762\u79ef\u7684\u53ef\u8c03\u7528\u51fd\u6570\u3002 \u5982\u679c\u6211\u4eec\u7ed9\u5b83\u4e00\u4e2a\u53ef\u4ee5\u8ba1\u7b97\u4efb\u610f\u5f62\u72b6\uff08\u4e0d\u4ec5\u4ec5\u662f\u4e09\u89d2\u5f62\uff09\u9762\u79ef\u7684\u53ef\u8c03\u7528\u51fd\u6570\uff0c\u4e00\u5207\u4ecd\u7136\u6709\u6548\u3002</p> <ul> <li><code>List</code> \u662f\u4e0d\u53d8\u7684\u6cdb\u578b\u7c7b\u578b\u3002 \u5929\u771f\u7684\u4eba\u4f1a\u8ba4\u4e3a\u5b83\u662f\u534f\u53d8\u7684\uff0c\u5c31\u50cf\u4e0a\u9762\u7684 <code>Sequence</code> \u4e00\u6837\uff0c\u4f46\u8bf7\u8003\u8651\u4ee5\u4e0b\u4ee3\u7801\uff1a</li> </ul> <pre><code>class Circle(Shape):\n    # \u65cb\u8f6c\u65b9\u6cd5\u4ec5\u5728 Circle \u4e0a\u5b9a\u4e49\uff0c\u5728 Shape \u4e0a\u6ca1\u6709\u5b9a\u4e49\n    def rotate(self): ...\n\ndef add_one(things: list[Shape]) -&gt; None:\n    things.append(Shape())\n\nmy_circles: list[Circle] = []\nadd_one(my_circles)     # \u8fd9\u53ef\u80fd\u770b\u8d77\u6765\u5f88\u5b89\u5168\uff0c\u4f46\u662f......\nmy_circles[-1].rotate()  # ...\u8fd9\u5c06\u4f1a\u5931\u8d25\uff0c\u56e0\u4e3a my_circles[0] \u73b0\u5728\u662f\u4e00\u4e2a Shape\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a Circle\n</code></pre> <p>\u4e0d\u53d8\u7c7b\u578b\u7684\u53e6\u4e00\u4e2a\u4f8b\u5b50\u662f <code>Dict</code>\u3002 \u5927\u591a\u6570\u53ef\u53d8\u5bb9\u5668\u662f\u4e0d\u53d8\u7684\u3002</p> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cmypy \u5047\u5b9a\u6240\u6709\u7528\u6237\u5b9a\u4e49\u7684\u6cdb\u578b\u90fd\u662f\u4e0d\u53d8\u7684\u3002 \u8981\u5c06\u7ed9\u5b9a\u7684\u6cdb\u578b\u7c7b\u58f0\u660e\u4e3a\u534f\u53d8\u6216\u9006\u53d8\uff0c\u8bf7\u4f7f\u7528\u4f7f\u7528\u7279\u6b8a\u5173\u952e\u5b57\u53c2\u6570 \u201ccovariant\u201d \u6216 \u201ccontravariant\u201d \u5b9a\u4e49\u7684\u7c7b\u578b\u53d8\u91cf\u3002 \u4f8b\u5982\uff1a</p> <pre><code>from typing import Generic, TypeVar\n\nT_co = TypeVar('T_co', covariant=True)\n\nclass Box(Generic[T_co]):  # \u8be5\u7c7b\u578b\u88ab\u58f0\u660e\u4e3a\u534f\u53d8\u7684\n    def __init__(self, content: T_co) -&gt; None:\n        self._content = content\n\n    def get_content(self) -&gt; T_co:\n        return self._content\n\ndef look_into(box: Box[Animal]): ...\n\nmy_box = Box(Cat())\nlook_into(my_box)  # \u597d\u7684\uff0c\u4f46\u662f mypy \u4f1a\u5728\u8fd9\u91cc\u62b1\u6028\u4e0d\u53d8\u7c7b\u578b\n</code></pre> <p>There are three main kinds of generic types with respect to subtype relations between them: invariant, covariant, and contravariant. Assuming that we have a pair of types <code>A</code> and <code>B</code>, and <code>B</code> is a subtype of <code>A</code>, these are defined as follows:</p> <ul> <li>A generic class <code>MyCovGen[T]</code> is called covariant in type variable <code>T</code> if <code>MyCovGen[B]</code> is always a subtype of <code>MyCovGen[A]</code>.</li> <li>A generic class <code>MyContraGen[T]</code> is called contravariant in type variable <code>T</code> if <code>MyContraGen[A]</code> is always a subtype of <code>MyContraGen[B]</code>.</li> <li>A generic class <code>MyInvGen[T]</code> is called invariant in <code>T</code> if neither of the above is true.</li> </ul> <p>Let us illustrate this by few simple examples:</p> <pre><code># We'll use these classes in the examples below\nclass Shape: ...\nclass Triangle(Shape): ...\nclass Square(Shape): ...\n</code></pre> <ul> <li>Most immutable containers, such as <code>Sequence</code> and <code>FrozenSet</code> are covariant. <code>Union</code> is also covariant in all variables: <code>Union[Triangle, int]</code> is a subtype of <code>Union[Shape, int]</code>.</li> </ul> <pre><code>def count_lines(shapes: Sequence[Shape]) -&gt; int:\n    return sum(shape.num_sides for shape in shapes)\n\ntriangles: Sequence[Triangle]\ncount_lines(triangles)  # OK\n\ndef foo(triangle: Triangle, num: int):\n    shape_or_number: Union[Shape, int]\n    # a Triangle is a Shape, and a Shape is a valid Union[Shape, int]\n    shape_or_number = triangle\n</code></pre> <p>Covariance should feel relatively intuitive, but contravariance and invariance can be harder to reason about.</p> <ul> <li><code>Callable</code> is an example of type that behaves contravariant in types of arguments. That is, <code>Callable[[Shape], int]</code> is a subtype of <code>Callable[[Triangle], int]</code>, despite <code>Shape</code> being a supertype of <code>Triangle</code>. To understand this, consider:</li> </ul> <pre><code>def cost_of_paint_required(\n    triangle: Triangle,\n    area_calculator: Callable[[Triangle], float]\n) -&gt; float:\n    return area_calculator(triangle) * DOLLAR_PER_SQ_FT\n\n# This straightforwardly works\ndef area_of_triangle(triangle: Triangle) -&gt; float: ...\ncost_of_paint_required(triangle, area_of_triangle)  # OK\n\n# But this works as well!\ndef area_of_any_shape(shape: Shape) -&gt; float: ...\ncost_of_paint_required(triangle, area_of_any_shape)  # OK\n</code></pre> <p><code>cost_of_paint_required</code> needs a callable that can calculate the area of a triangle. If we give it a callable that can calculate the area of an arbitrary shape (not just triangles), everything still works.</p> <ul> <li><code>List</code> is an invariant generic type. Naively, one would think that it is covariant, like <code>Sequence</code> above, but consider this code:</li> </ul> <pre><code>class Circle(Shape):\n    # The rotate method is only defined on Circle, not on Shape\n    def rotate(self): ...\n\ndef add_one(things: list[Shape]) -&gt; None:\n    things.append(Shape())\n\nmy_circles: list[Circle] = []\nadd_one(my_circles)     # This may appear safe, but...\nmy_circles[-1].rotate()  # ...this will fail, since my_circles[0] is now a Shape, not a Circle\n</code></pre> <p>Another example of invariant type is <code>Dict</code>. Most mutable containers are invariant.</p> <p>By default, mypy assumes that all user-defined generics are invariant. To declare a given generic class as covariant or contravariant use type variables defined with special keyword arguments <code>covariant</code> or <code>contravariant</code>. For example:</p> <pre><code>from typing import Generic, TypeVar\n\nT_co = TypeVar('T_co', covariant=True)\n\nclass Box(Generic[T_co]):  # this type is declared covariant\n    def __init__(self, content: T_co) -&gt; None:\n        self._content = content\n\n    def get_content(self) -&gt; T_co:\n        return self._content\n\ndef look_into(box: Box[Animal]): ...\n\nmy_box = Box(Cat())\nlook_into(my_box)  # OK, but mypy would complain here for an invariant type\n</code></pre>"},{"location":"mypy/generics/#\u5177\u6709\u7ed1\u5b9a\u7684\u7c7b\u578b\u53d8\u91cf","title":"\u5177\u6709\u7ed1\u5b9a\u7684\u7c7b\u578b\u53d8\u91cf","text":"<p>Type variables with upper bounds</p> \u4e2d\u6587\u82f1\u6587 <p>\u7c7b\u578b\u53d8\u91cf\u8fd8\u53ef\u4ee5\u88ab\u9650\u5236\u4e3a\u5177\u6709\u7279\u5b9a\u7c7b\u578b\u7684\u5b50\u7c7b\u578b\u7684\u503c\u3002 \u8be5\u7c7b\u578b\u79f0\u4e3a\u7c7b\u578b\u53d8\u91cf\u7684\u4e0a\u9650\uff0c\u5e76\u4f7f\u7528 <code>TypeVar</code> \u7684 <code>bound=...</code> \u5173\u952e\u5b57\u53c2\u6570\u6307\u5b9a</p> <pre><code>from typing import TypeVar, SupportsAbs\n\nT = TypeVar('T', bound=SupportsAbs[float])\n</code></pre> <p>\u5728\u4f7f\u7528\u6b64\u7c7b\u7c7b\u578b\u53d8\u91cf <code>T</code> \u7684\u6cdb\u578b\u51fd\u6570\u7684\u5b9a\u4e49\u4e2d\uff0c\u5047\u5b9a <code>T</code> \u8868\u793a\u7684\u7c7b\u578b\u662f\u5176\u4e0a\u9650\u7684\u5b50\u7c7b\u578b\uff0c\u56e0\u6b64\u8be5\u51fd\u6570\u53ef\u4ee5\u5bf9\u7c7b\u578b <code>T</code> \u7684\u503c\u4f7f\u7528\u4e0a\u9650\u7684\u65b9\u6cd5\u3002</p> <pre><code>def largest_in_absolute_value(*xs: T) -&gt; T:\n    return max(xs, key=abs)  # OK\uff0c\u56e0\u4e3a T \u662f SupportsAbs[float] \u7684\u5b50\u7c7b\u578b\u3002\n</code></pre> <p>\u5728\u8c03\u7528\u6b64\u7c7b\u51fd\u6570\u65f6\uff0c\u7c7b\u578b\u201cT\u201d\u5fc5\u987b\u66ff\u6362\u4e3a\u5176\u4e0a\u9650\u7684\u5b50\u7c7b\u578b\u3002 \u7ee7\u7eed\u4e0a\u9762\u7684\u4f8b\u5b50\uff1a</p> <pre><code>largest_in_absolute_value(-3.5, 2)   # Okay, \u5177\u6709 float \u7c7b\u578b\u3002\nlargest_in_absolute_value(5+6j, 7)   # Okay, \u5177\u6709\u590d\u6570\u7c7b\u578b\u3002\nlargest_in_absolute_value('a', 'b')  # Error: 'str' is not a subtype of SupportsAbs[float].\n</code></pre> <p>\u6cdb\u578b\u7c7b\u7684\u7c7b\u578b\u53c2\u6570\u4e5f\u53ef\u80fd\u6709\u4e0a\u9650\uff0c\u5b83\u4ee5\u76f8\u540c\u7684\u65b9\u5f0f\u9650\u5236\u7c7b\u578b\u53c2\u6570\u7684\u6709\u6548\u503c\u3002</p> <p>A type variable can also be restricted to having values that are subtypes of a specific type. This type is called the upper bound of the type variable, and is specified with the <code>bound=...</code> keyword argument to <code>TypeVar</code>.</p> <pre><code>from typing import TypeVar, SupportsAbs\n\nT = TypeVar('T', bound=SupportsAbs[float])\n</code></pre> <p>In the definition of a generic function that uses such a type variable <code>T</code>, the type represented by <code>T</code> is assumed to be a subtype of its upper bound, so the function can use methods of the upper bound on values of type <code>T</code>.</p> <pre><code>def largest_in_absolute_value(*xs: T) -&gt; T:\n    return max(xs, key=abs)  # Okay, because T is a subtype of SupportsAbs[float].\n</code></pre> <p>In a call to such a function, the type <code>T</code> must be replaced by a type that is a subtype of its upper bound. Continuing the example above:</p> <pre><code>largest_in_absolute_value(-3.5, 2)   # Okay, has type float.\nlargest_in_absolute_value(5+6j, 7)   # Okay, has type complex.\nlargest_in_absolute_value('a', 'b')  # Error: 'str' is not a subtype of SupportsAbs[float].\n</code></pre> <p>Type parameters of generic classes may also have upper bounds, which restrict the valid values for the type parameter in the same way.</p>"},{"location":"mypy/generics/#\u5177\u6709\u503c\u9650\u5236\u7684\u7c7b\u578b\u53d8\u91cf","title":"\u5177\u6709\u503c\u9650\u5236\u7684\u7c7b\u578b\u53d8\u91cf","text":"<p>Type variables with value restriction</p> \u4e2d\u6587\u82f1\u6587 <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7c7b\u578b\u53d8\u91cf\u53ef\u4ee5\u66ff\u6362\u4e3a\u4efb\u4f55\u7c7b\u578b\u3002 \u4f46\u662f\uff0c\u6709\u65f6\u4f7f\u7528\u53ea\u80fd\u5c06\u67d0\u4e9b\u7279\u5b9a\u7c7b\u578b\u4f5c\u4e3a\u5176\u503c\u7684\u7c7b\u578b\u53d8\u91cf\u5f88\u6709\u7528\u3002 \u4e00\u4e2a\u5178\u578b\u7684\u4f8b\u5b50\u662f\u7c7b\u578b\u53d8\u91cf\u53ea\u80fd\u6709\u503c \u201cstr\u201d \u548c \u201cbytes\u201d \uff1a</p> <pre><code>from typing import TypeVar\n\nAnyStr = TypeVar('AnyStr', str, bytes)\n</code></pre> <p>\u8fd9\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u7c7b\u578b\u53d8\u91cf\uff0c<code>AnyStr</code> \u5728 <code>typing</code>\u4e2d\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u81ea\u5df1\u5b9a\u4e49\u5b83\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 <code>AnyStr</code> \u5b9a\u4e49\u4e00\u4e2a\u53ef\u4ee5\u8fde\u63a5\u4e24\u4e2a\u5b57\u7b26\u4e32\u6216\u5b57\u8282\u5bf9\u8c61\u7684\u51fd\u6570\uff0c\u4f46\u5b83\u4e0d\u80fd\u4f7f\u7528\u5176\u4ed6\u53c2\u6570\u7c7b\u578b\u8c03\u7528\uff1a</p> <pre><code>from typing import AnyStr\n\ndef concat(x: AnyStr, y: AnyStr) -&gt; AnyStr:\n    return x + y\n\nconcat('a', 'b')    # Okay\nconcat(b'a', b'b')  # Okay\nconcat(1, 2)        # Error!\n</code></pre> <p>\u91cd\u8981\u7684\u662f\uff0c\u8fd9\u4e0e\u8054\u5408\u7c7b\u578b\u4e0d\u540c\uff0c\u56e0\u4e3a\u4e0d\u63a5\u53d7\u201cstr\u201d\u548c\u201cbytes\u201d\u7684\u7ec4\u5408\uff1a</p> <pre><code>concat('string', b'bytes')   # Error!\n</code></pre> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fd9\u6b63\u662f\u6211\u4eec\u60f3\u8981\u7684\uff0c\u56e0\u4e3a\u4e0d\u53ef\u80fd\u8fde\u63a5\u5b57\u7b26\u4e32\u548c\u5b57\u8282\u5bf9\u8c61\uff01 \u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u4f7f\u7528 \u201cUnion\u201d \uff0c\u7c7b\u578b\u68c0\u67e5\u5668\u4f1a\u62b1\u6028\u8fd9\u79cd\u53ef\u80fd\u6027\uff1a</p> <pre><code>def union_concat(x: Union[str, bytes], y: Union[str, bytes]) -&gt; Union[str, bytes]:\n    return x + y  # Error: can't concatenate str and bytes\n</code></pre> <p>\u53e6\u4e00\u4e2a\u6709\u8da3\u7684\u7279\u6b8a\u60c5\u51b5\u662f\u4f7f\u7528 \u201cstr\u201d \u7684\u5b50\u7c7b\u578b\u8c03\u7528 \u201cconcat()\u201d \uff1a</p> <pre><code>class S(str): pass\n\nss = concat(S('foo'), S('bar'))\nreveal_type(ss)  # \u663e\u793a\u7684\u7c7b\u578b\u662f\u201cbuiltins.str\u201d\n</code></pre> <p>\u60a8\u53ef\u80fd\u8ba4\u4e3a\u201css\u201d\u7684\u7c7b\u578b\u662f\u201cS\u201d\uff0c\u4f46\u5b9e\u9645\u4e0a\u7c7b\u578b\u662f\u201cstr\u201d\uff1a\u5b50\u7c7b\u578b\u88ab\u63d0\u5347\u4e3a\u7c7b\u578b\u53d8\u91cf\u7684\u6709\u6548\u503c\u4e4b\u4e00\uff0c\u5728\u672c\u4f8b\u4e2d\u662f\u201cstr\u201d\u3002</p> <p>\u56e0\u6b64\uff0c\u8fd9\u4e0e Java \u7b49\u8bed\u8a00\u4e2d\u7684\u201c\u6709\u754c\u91cf\u5316\u201d \u7565\u6709\u4e0d\u540c\uff0c\u5176\u4e2d\u8fd4\u56de\u7c7b\u578b\u4e3a \u201cS\u201d\u3002 mypy \u5b9e\u73b0\u8fd9\u4e00\u70b9\u7684\u65b9\u5f0f\u5bf9\u4e8e <code>concat</code> \u6765\u8bf4\u662f\u6b63\u786e\u7684\uff0c\u56e0\u4e3a\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c<code>concat</code> \u5b9e\u9645\u4e0a\u8fd4\u56de\u4e86\u4e00\u4e2a <code>str</code> \u5b9e\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; print(type(ss))\n&lt;class 'str'&gt;\n</code></pre> <p>\u5728\u5b9a\u4e49\u6cdb\u578b\u7c7b\u65f6\uff0c\u60a8\u8fd8\u53ef\u4ee5\u5c06 <code>TypeVar</code> \u4e0e\u4e00\u7ec4\u6709\u9650\u7684\u53ef\u80fd\u503c\u4e00\u8d77\u4f7f\u7528\u3002 \u4f8b\u5982\uff0cmypy \u4f7f\u7528\u7c7b\u578b <code>Pattern[AnyStr]</code> \u4f5c\u4e3a [<code>re.compile</code>] \u7684\u8fd4\u56de\u503c \uff08https://docs.python.org/3/library/re.html#re.compile\uff09\uff0c\u56e0\u4e3a\u6b63\u5219\u8868\u8fbe\u5f0f\u53ef\u4ee5\u57fa\u4e8e\u5b57\u7b26\u4e32\u6216\u5b57\u8282\u6a21\u5f0f\u3002</p> <p>\u7c7b\u578b\u53d8\u91cf\u4e0d\u80fd\u540c\u65f6\u5177\u6709\u503c\u9650\u5236\uff08\u8bf7\u53c2\u9605 <code>type-variable-upper-bound</code> \uff09\u548c\u4e0a\u9650\u3002</p> <p>By default, a type variable can be replaced with any type. However, sometimes it's useful to have a type variable that can only have some specific types as its value. A typical example is a type variable that can only have values <code>str</code> and <code>bytes</code>:</p> <pre><code>from typing import TypeVar\n\nAnyStr = TypeVar('AnyStr', str, bytes)\n</code></pre> <p>This is actually such a common type variable that <code>AnyStr</code> is defined in <code>typing</code> and we don't need to define it ourselves.</p> <p>We can use <code>AnyStr</code> to define a function that can concatenate two strings or bytes objects, but it can't be called with other argument types:</p> <pre><code>from typing import AnyStr\n\ndef concat(x: AnyStr, y: AnyStr) -&gt; AnyStr:\n    return x + y\n\nconcat('a', 'b')    # Okay\nconcat(b'a', b'b')  # Okay\nconcat(1, 2)        # Error!\n</code></pre> <p>Importantly, this is different from a union type, since combinations of <code>str</code> and <code>bytes</code> are not accepted:</p> <pre><code>concat('string', b'bytes')   # Error!\n</code></pre> <p>In this case, this is exactly what we want, since it's not possible to concatenate a string and a bytes object! If we tried to use <code>Union</code>, the type checker would complain about this possibility:</p> <pre><code>def union_concat(x: Union[str, bytes], y: Union[str, bytes]) -&gt; Union[str, bytes]:\n    return x + y  # Error: can't concatenate str and bytes\n</code></pre> <p>Another interesting special case is calling <code>concat()</code> with a subtype of <code>str</code>:</p> <pre><code>class S(str): pass\n\nss = concat(S('foo'), S('bar'))\nreveal_type(ss)  # Revealed type is \"builtins.str\"\n</code></pre> <p>You may expect that the type of <code>ss</code> is <code>S</code>, but the type is actually <code>str</code>: a subtype gets promoted to one of the valid values for the type variable, which in this case is <code>str</code>.</p> <p>This is thus subtly different from bounded quantification in languages such as Java, where the return type would be <code>S</code>. The way mypy implements this is correct for <code>concat</code>, since <code>concat</code> actually returns a <code>str</code> instance in the above example:</p> <pre><code>&gt;&gt;&gt; print(type(ss))\n&lt;class 'str'&gt;\n</code></pre> <p>You can also use a <code>TypeVar</code> with a restricted set of possible values when defining a generic class. For example, mypy uses the type <code>Pattern[AnyStr]</code> for the return value of <code>re.compile</code>, since regular expressions can be based on a string or a bytes pattern.</p> <p>A type variable may not have both a value restriction (see <code>type-variable-upper-bound</code>) and an upper bound.</p>"},{"location":"mypy/generics/#\u58f0\u660e\u88c5\u9970\u5668","title":"\u58f0\u660e\u88c5\u9970\u5668","text":"<p>Declaring decorators</p> \u4e2d\u6587\u82f1\u6587 <p>\u88c5\u9970\u5668\u901a\u5e38\u662f\u91c7\u7528\u4e00\u4e2a\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u5e76\u8fd4\u56de\u53e6\u4e00\u4e2a\u51fd\u6570\u7684\u51fd\u6570\u3002 \u7528\u7c7b\u578b\u6765\u63cf\u8ff0\u8fd9\u79cd\u884c\u4e3a\u53ef\u80fd\u6709\u70b9\u68d8\u624b\u3002 \u6211\u4eec\u5c06\u5c55\u793a\u5982\u4f55\u4f7f\u7528 \u201cTypeVar\u201d \u548c\u4e00\u79cd\u79f0\u4e3a \u201c\u53c2\u6570\u89c4\u8303\u201d(parameter specification) \u7684\u7279\u6b8a\u7c7b\u578b\u53d8\u91cf\u6765\u6267\u884c\u6b64\u64cd\u4f5c\u3002</p> <p>\u5047\u8bbe\u6211\u4eec\u6709\u4ee5\u4e0b\u88c5\u9970\u5668\uff0c\u5c1a\u672a\u8fdb\u884c\u7c7b\u578b\u6ce8\u91ca\uff0c\u5b83\u4fdd\u7559\u539f\u59cb\u51fd\u6570\u7684\u7b7e\u540d\u5e76\u4ec5\u6253\u5370\u88c5\u9970\u51fd\u6570\u7684\u540d\u79f0\uff1a</p> <pre><code>def printing_decorator(func):\n    def wrapper(*args, **kwds):\n        print(\"Calling\", func)\n        return func(*args, **kwds)\n    return wrapper\n</code></pre> <p>\u6211\u4eec\u7528\u5b83\u6765\u88c5\u9970\u51fd\u6570 <code>add_forty_two</code>\uff1a</p> <pre><code># \u4e00\u4e2a\u88c5\u9970\u51fd\u6570\u3002\n@printing_decorator\ndef add_forty_two(value: int) -&gt; int:\n    return value + 42\n\na = add_forty_two(3)\n</code></pre> <p>\u7531\u4e8e \u201cprinting_decorator\u201d \u6ca1\u6709\u7c7b\u578b\u6ce8\u91ca\uff0c\u56e0\u6b64\u4ee5\u4e0b\u5185\u5bb9\u4e0d\u4f1a\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\uff1a</p> <pre><code>reveal_type(a)        # Revealed type is \"Any\"\nadd_forty_two('foo')  # \u65e0\u7c7b\u578b\u68c0\u67e5\u5668\u9519\u8bef :(\n</code></pre> <p>\u8fd9\u662f\u4ee4\u4eba\u9057\u61be\u7684\u4e8b\u6001\uff01 \u5982\u679c\u60a8\u4f7f\u7528 \u201c--strict\u201d \u8fd0\u884c\uff0cmypy \u751a\u81f3\u4f1a\u63d0\u9192\u60a8\u4ee5\u4e0b\u4e8b\u5b9e\uff1a\u201c\u65e0\u7c7b\u578b\u88c5\u9970\u5668\u4f7f\u51fd\u6570 \u201cadd_forty_two\u201d \u65e0\u7c7b\u578b</p> <p>\u8bf7\u6ce8\u610f\uff0c\u7c7b\u88c5\u9970\u5668\u7684\u5904\u7406\u65b9\u5f0f\u4e0e mypy \u4e2d\u7684\u51fd\u6570\u88c5\u9970\u5668\u4e0d\u540c\uff1a\u88c5\u9970\u7c7b\u4e0d\u4f1a\u5220\u9664\u5176\u7c7b\u578b\uff0c\u5373\u4f7f\u88c5\u9970\u5668\u5177\u6709\u4e0d\u5b8c\u6574\u7684\u7c7b\u578b\u6ce8\u89e3\u3002</p> <p>\u4ee5\u4e0b\u662f\u6ce8\u89e3\u88c5\u9970\u5668\u7684\u65b9\u6cd5\uff1a</p> <pre><code>from typing import Any, Callable, TypeVar, cast\n\nF = TypeVar('F', bound=Callable[..., Any])\n\n# \u4fdd\u7559\u7b7e\u540d\u7684\u88c5\u9970\u5668\u3002\ndef printing_decorator(func: F) -&gt; F:\n    def wrapper(*args, **kwds):\n        print(\"Calling\", func)\n        return func(*args, **kwds)\n    return cast(F, wrapper)\n\n@printing_decorator\ndef add_forty_two(value: int) -&gt; int:\n    return value + 42\n\na = add_forty_two(3)\nreveal_type(a)      # Revealed type is \"builtins.int\"\nadd_forty_two('x')  # Argument 1 to \"add_forty_two\" has incompatible type \"str\"; expected \"int\"\n</code></pre> <p>\u8fd9\u4ecd\u7136\u5b58\u5728\u4e00\u4e9b\u7f3a\u9677\u3002 \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528\u4e0d\u5b89\u5168\u7684 <code>cast</code> \u6765\u8bf4\u670d mypy <code>wrapper()</code> \u4e0e <code>func</code> \u5177\u6709\u76f8\u540c\u7684\u7b7e\u540d\u3002 \u8bf7\u53c2\u9605 <code>casts</code>\u3002</p> <p>\u5176\u6b21\uff0c\u201cwrapper()\u201d\u51fd\u6570\u6ca1\u6709\u8fdb\u884c\u4e25\u683c\u7684\u7c7b\u578b\u68c0\u67e5\uff0c\u5c3d\u7ba1\u5305\u88c5\u51fd\u6570\u901a\u5e38\u8db3\u591f\u5c0f\uff0c\u8fd9\u4e0d\u662f\u4e00\u4e2a\u5927\u95ee\u9898\u3002 \u8fd9\u4e5f\u662f\u5728 <code>printing_decorator()</code> \u7684 <code>return</code> \u8bed\u53e5\u4e2d\u8c03\u7528 <code>cast</code> \u7684\u539f\u56e0\u3002</p> <p>\u4f46\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u53c2\u6570\u89c4\u8303\uff08<code>ParamSpec</code>\uff09\u6765\u83b7\u5f97\u66f4\u5fe0\u5b9e\u7684\u7c7b\u578b\u6ce8\u91ca\uff1a</p> <pre><code>from typing import Callable, TypeVar\nfrom typing_extensions import ParamSpec\n\nP = ParamSpec('P')\nT = TypeVar('T')\n\ndef printing_decorator(func: Callable[P, T]) -&gt; Callable[P, T]:\n    def wrapper(*args: P.args, **kwds: P.kwargs) -&gt; T:\n        print(\"Calling\", func)\n        return func(*args, **kwds)\n    return wrapper\n</code></pre> <p>\u53c2\u6570\u89c4\u8303\u8fd8\u5141\u8bb8\u60a8\u63cf\u8ff0\u6539\u53d8\u8f93\u5165\u51fd\u6570\u7b7e\u540d\u7684\u88c5\u9970\u5668\uff1a</p> <pre><code>from typing import Callable, TypeVar\nfrom typing_extensions import ParamSpec\n\nP = ParamSpec('P')\nT = TypeVar('T')\n\n# \u6211\u4eec\u5728\u8fd4\u56de\u7c7b\u578b\u4e2d\u91cd\u7528\u201cP\u201d\uff0c\u4f46\u5c06\u201cT\u201d\u66ff\u6362\u4e3a\u201cstr\u201d\ndef stringify(func: Callable[P, T]) -&gt; Callable[P, str]:\n    def wrapper(*args: P.args, **kwds: P.kwargs) -&gt; str:\n        return str(func(*args, **kwds))\n    return wrapper\n\n@stringify\ndef add_forty_two(value: int) -&gt; int:\n    return value + 42\n\na = add_forty_two(3)\nreveal_type(a)      # Revealed type is \"builtins.str\"\nadd_forty_two('x')  # error: Argument 1 to \"add_forty_two\" has incompatible type \"str\"; expected \"int\"\n</code></pre> <p>\u6216\u8005\u63d2\u5165\u4e00\u4e2a\u53c2\u6570\uff1a</p> <pre><code>from typing import Callable, TypeVar\nfrom typing_extensions import Concatenate, ParamSpec\n\nP = ParamSpec('P')\nT = TypeVar('T')\n\ndef printing_decorator(func: Callable[P, T]) -&gt; Callable[Concatenate[str, P], T]:\n    def wrapper(msg: str, /, *args: P.args, **kwds: P.kwargs) -&gt; T:\n        print(\"Calling\", func, \"with\", msg)\n        return func(*args, **kwds)\n    return wrapper\n\n@printing_decorator\ndef add_forty_two(value: int) -&gt; int:\n    return value + 42\n\na = add_forty_two('three', 3)\n</code></pre> <p>Decorators are typically functions that take a function as an argument and return another function. Describing this behaviour in terms of types can be a little tricky; we'll show how you can use <code>TypeVar</code> and a special kind of type variable called a parameter specification to do so.</p> <p>Suppose we have the following decorator, not type annotated yet, that preserves the original function's signature and merely prints the decorate function's name:</p> <pre><code>def printing_decorator(func):\n    def wrapper(*args, **kwds):\n        print(\"Calling\", func)\n        return func(*args, **kwds)\n    return wrapper\n</code></pre> <p>and we use it to decorate function <code>add_forty_two</code>:</p> <pre><code># A decorated function.\n@printing_decorator\ndef add_forty_two(value: int) -&gt; int:\n    return value + 42\n\na = add_forty_two(3)\n</code></pre> <p>Since <code>printing_decorator</code> is not type-annotated, the following won't get type checked:</p> <pre><code>reveal_type(a)        # Revealed type is \"Any\"\nadd_forty_two('foo')  # No type checker error :(\n</code></pre> <p>This is a sorry state of affairs! If you run with <code>--strict</code>, mypy will even alert you to this fact: <code>Untyped decorator makes function \"add_forty_two\" untyped</code></p> <p>Note that class decorators are handled differently than function decorators in mypy: decorating a class does not erase its type, even if the decorator has incomplete type annotations.</p> <p>Here's how one could annotate the decorator:</p> <pre><code>from typing import Any, Callable, TypeVar, cast\n\nF = TypeVar('F', bound=Callable[..., Any])\n\n# A decorator that preserves the signature.\ndef printing_decorator(func: F) -&gt; F:\n    def wrapper(*args, **kwds):\n        print(\"Calling\", func)\n        return func(*args, **kwds)\n    return cast(F, wrapper)\n\n@printing_decorator\ndef add_forty_two(value: int) -&gt; int:\n    return value + 42\n\na = add_forty_two(3)\nreveal_type(a)      # Revealed type is \"builtins.int\"\nadd_forty_two('x')  # Argument 1 to \"add_forty_two\" has incompatible type \"str\"; expected \"int\"\n</code></pre> <p>This still has some shortcomings. First, we need to use the unsafe <code>cast</code> to convince mypy that <code>wrapper()</code> has the same signature as <code>func</code>. See <code>casts</code>.</p> <p>Second, the <code>wrapper()</code> function is not tightly type checked, although wrapper functions are typically small enough that this is not a big problem. This is also the reason for the <code>cast</code> call in the <code>return</code> statement in <code>printing_decorator()</code>.</p> <p>However, we can use a parameter specification (<code>ParamSpec</code>), for a more faithful type annotation:</p> <pre><code>from typing import Callable, TypeVar\nfrom typing_extensions import ParamSpec\n\nP = ParamSpec('P')\nT = TypeVar('T')\n\ndef printing_decorator(func: Callable[P, T]) -&gt; Callable[P, T]:\n    def wrapper(*args: P.args, **kwds: P.kwargs) -&gt; T:\n        print(\"Calling\", func)\n        return func(*args, **kwds)\n    return wrapper\n</code></pre> <p>Parameter specifications also allow you to describe decorators that alter the signature of the input function:</p> <pre><code>from typing import Callable, TypeVar\nfrom typing_extensions import ParamSpec\n\nP = ParamSpec('P')\nT = TypeVar('T')\n\n# We reuse 'P' in the return type, but replace 'T' with 'str'\ndef stringify(func: Callable[P, T]) -&gt; Callable[P, str]:\n    def wrapper(*args: P.args, **kwds: P.kwargs) -&gt; str:\n        return str(func(*args, **kwds))\n    return wrapper\n\n@stringify\ndef add_forty_two(value: int) -&gt; int:\n    return value + 42\n\na = add_forty_two(3)\nreveal_type(a)      # Revealed type is \"builtins.str\"\nadd_forty_two('x')  # error: Argument 1 to \"add_forty_two\" has incompatible type \"str\"; expected \"int\"\n</code></pre> <p>Or insert an argument:</p> <pre><code>from typing import Callable, TypeVar\nfrom typing_extensions import Concatenate, ParamSpec\n\nP = ParamSpec('P')\nT = TypeVar('T')\n\ndef printing_decorator(func: Callable[P, T]) -&gt; Callable[Concatenate[str, P], T]:\n    def wrapper(msg: str, /, *args: P.args, **kwds: P.kwargs) -&gt; T:\n        print(\"Calling\", func, \"with\", msg)\n        return func(*args, **kwds)\n    return wrapper\n\n@printing_decorator\ndef add_forty_two(value: int) -&gt; int:\n    return value + 42\n\na = add_forty_two('three', 3)\n</code></pre>"},{"location":"mypy/generics/#\u88c5\u9970\u5668\u5de5\u5382","title":"\u88c5\u9970\u5668\u5de5\u5382","text":"<p>Decorator factories</p> \u4e2d\u6587\u82f1\u6587 <p>\u63a5\u53d7\u53c2\u6570\u5e76\u8fd4\u56de\u88c5\u9970\u5668\uff08\u4e5f\u79f0\u4e3a\u4e8c\u9636\u88c5\u9970\u5668\uff09\u7684\u51fd\u6570\u540c\u6837\u901a\u8fc7\u6cdb\u578b\u83b7\u5f97\u652f\u6301\uff1a</p> <pre><code>from typing import Any, Callable, TypeVar\n\nF = TypeVar('F', bound=Callable[..., Any])\n\ndef route(url: str) -&gt; Callable[[F], F]:\n    ...\n\n@route(url='/')\ndef index(request: Any) -&gt; str:\n    return 'Hello world'\n</code></pre> <p>\u6709\u65f6\uff0c\u540c\u4e00\u4e2a\u88c5\u9970\u5668\u540c\u65f6\u652f\u6301\u88f8\u8c03\u7528\u548c\u5e26\u53c2\u6570\u7684\u8c03\u7528\u3002 \u8fd9\u53ef\u4ee5\u901a\u8fc7\u4e0e <code>@overload</code> \u7ed3\u5408\u6765\u5b9e\u73b0\uff1a</p> <pre><code>from typing import Any, Callable, Optional, TypeVar, overload\n\nF = TypeVar('F', bound=Callable[..., Any])\n\n# \u88f8\u88c5\u9970\u5668\u7684\u4f7f\u7528\n@overload\ndef atomic(__func: F) -&gt; F: ...\n# \u5e26\u53c2\u6570\u7684\u88c5\u9970\u5668\n@overload\ndef atomic(*, savepoint: bool = True) -&gt; Callable[[F], F]: ...\n\n# \u5b9e\u73b0\ndef atomic(__func: Optional[Callable[..., Any]] = None, *, savepoint: bool = True):\n    def decorator(func: Callable[..., Any]):\n        ...  # \u4ee3\u7801\u653e\u5728\u8fd9\u91cc\n    if __func is not None:\n        return decorator(__func)\n    else:\n        return decorator\n\n# \u7528\u6cd5\n@atomic\ndef func1() -&gt; None: ...\n\n@atomic(savepoint=False)\ndef func2() -&gt; None: ...\n</code></pre> <p>Functions that take arguments and return a decorator (also called second-order decorators), are similarly supported via generics:</p> <pre><code>from typing import Any, Callable, TypeVar\n\nF = TypeVar('F', bound=Callable[..., Any])\n\ndef route(url: str) -&gt; Callable[[F], F]:\n    ...\n\n@route(url='/')\ndef index(request: Any) -&gt; str:\n    return 'Hello world'\n</code></pre> <p>Sometimes the same decorator supports both bare calls and calls with arguments. This can be achieved by combining with <code>@overload</code>:</p> <pre><code>from typing import Any, Callable, Optional, TypeVar, overload\n\nF = TypeVar('F', bound=Callable[..., Any])\n\n# Bare decorator usage\n@overload\ndef atomic(__func: F) -&gt; F: ...\n# Decorator with arguments\n@overload\ndef atomic(*, savepoint: bool = True) -&gt; Callable[[F], F]: ...\n\n# Implementation\ndef atomic(__func: Optional[Callable[..., Any]] = None, *, savepoint: bool = True):\n    def decorator(func: Callable[..., Any]):\n        ...  # Code goes here\n    if __func is not None:\n        return decorator(__func)\n    else:\n        return decorator\n\n# Usage\n@atomic\ndef func1() -&gt; None: ...\n\n@atomic(savepoint=False)\ndef func2() -&gt; None: ...\n</code></pre>"},{"location":"mypy/generics/#\u6cdb\u578b\u534f\u8bae","title":"\u6cdb\u578b\u534f\u8bae","text":"<p>Generic protocols</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u652f\u6301\u901a\u7528\u534f\u8bae\uff08\u53e6\u8bf7\u53c2\u9605 <code>protocol-types</code>\uff09\u3002 \u4e00\u4e9b<code>\u9884\u5b9a\u4e49\u534f\u8bae</code>\u662f\u901a\u7528\u7684\uff0c\u4f8b\u5982<code>Iterable[T]</code>\uff0c\u5e76\u4e14\u60a8\u53ef\u4ee5\u5b9a\u4e49\u5176\u4ed6\u901a\u7528\u534f\u8bae\u3002 \u6cdb\u578b\u534f\u8bae\u5927\u591a\u9075\u5faa\u6cdb\u578b\u7c7b\u7684\u6b63\u5e38\u89c4\u5219\u3002 \u4f8b\u5b50\uff1a</p> <pre><code>from typing import TypeVar\nfrom typing_extensions import Protocol\n\nT = TypeVar('T')\n\nclass Box(Protocol[T]):\n    content: T\n\ndef do_stuff(one: Box[str], other: Box[bytes]) -&gt; None:\n    ...\n\nclass StringWrapper:\n    def __init__(self, content: str) -&gt; None:\n        self.content = content\n\nclass BytesWrapper:\n    def __init__(self, content: bytes) -&gt; None:\n        self.content = content\n\ndo_stuff(StringWrapper('one'), BytesWrapper(b'other'))  # OK\n\nx: Box[float] = ...\ny: Box[int] = ...\nx = y  # Error -- Box is invariant\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u6839\u636e <code>PEP 544\uff1a\u6cdb\u578b\u534f\u8bae</code>\uff0c\u5141\u8bb8\u4f7f\u7528 <code>class ClassName(Protocol[T])</code> \u4f5c\u4e3a <code>class ClassName(Protocol, Generic[T])</code> \u7684\u7b80\u5199\uff0c</p> <p>\u6cdb\u578b\u534f\u8bae\u548c\u666e\u901a\u6cdb\u578b\u7c7b\u4e4b\u95f4\u7684\u4e3b\u8981\u533a\u522b\u5728\u4e8e\uff0cmypy \u68c0\u67e5\u534f\u8bae\u4e2d\u6cdb\u578b\u7c7b\u578b\u53d8\u91cf\u7684\u58f0\u660e\u5dee\u5f02\u662f\u5426\u4e0e\u5b83\u4eec\u5728\u534f\u8bae\u5b9a\u4e49\u4e2d\u7684\u4f7f\u7528\u65b9\u5f0f\u76f8\u5339\u914d\u3002 \u6b64\u793a\u4f8b\u4e2d\u7684\u534f\u8bae\u88ab\u62d2\u7edd\uff0c\u56e0\u4e3a\u7c7b\u578b\u53d8\u91cf\u201cT\u201d\u88ab\u534f\u53d8\u5730\u7528\u4f5c\u8fd4\u56de\u7c7b\u578b\uff0c\u4f46\u7c7b\u578b\u53d8\u91cf\u662f\u4e0d\u53d8\u7684\uff1a</p> <pre><code>from typing import Protocol, TypeVar\n\nT = TypeVar('T')\n\nclass ReadOnlyBox(Protocol[T]):  # error: \u5728\u9700\u8981\u534f\u53d8\u7684\u534f\u8bae\u4e2d\u4f7f\u7528\u4e0d\u53d8\u7c7b\u578b\u53d8\u91cf\u201cT\u201d\n    def content(self) -&gt; T: ...\n</code></pre> <p>\u6b64\u793a\u4f8b\u6b63\u786e\u4f7f\u7528\u534f\u53d8\u7c7b\u578b\u53d8\u91cf\uff1a</p> <pre><code>from typing import Protocol, TypeVar\n\nT_co = TypeVar('T_co', covariant=True)\n\nclass ReadOnlyBox(Protocol[T_co]):  # OK\n    def content(self) -&gt; T_co: ...\n\nax: ReadOnlyBox[float] = ...\nay: ReadOnlyBox[int] = ...\nax = ay  # OK -- ReadOnlyBox is covariant\n</code></pre> <p>\u6709\u5173\u53d8\u4f53\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605<code>\u6cdb\u578b\u53d8\u4f53</code>\u3002</p> <p>\u6cdb\u578b\u534f\u8bae\u4e5f\u53ef\u4ee5\u662f\u9012\u5f52\u7684\u3002 \u4f8b\u5b50\uff1a</p> <pre><code>T = TypeVar('T')\n\nclass Linked(Protocol[T]):\n    val: T\n    def next(self) -&gt; 'Linked[T]': ...\n\nclass L:\n    val: int\n    def next(self) -&gt; 'L': ...\n\ndef last(seq: Linked[T]) -&gt; T: ...\n\nresult = last(L())\nreveal_type(result)  # Revealed type is \"builtins.int\"\n</code></pre> <p>Mypy supports generic protocols (see also <code>protocol-types</code>). Several <code>predefined protocols</code> are generic, such as <code>Iterable[T]</code>, and you can define additional generi protocols. Generic protocols mostly follow the normal rules for generic classes. Example:</p> <pre><code>from typing import TypeVar\nfrom typing_extensions import Protocol\n\nT = TypeVar('T')\n\nclass Box(Protocol[T]):\n    content: T\n\ndef do_stuff(one: Box[str], other: Box[bytes]) -&gt; None:\n    ...\n\nclass StringWrapper:\n    def __init__(self, content: str) -&gt; None:\n        self.content = content\n\nclass BytesWrapper:\n    def __init__(self, content: bytes) -&gt; None:\n        self.content = content\n\ndo_stuff(StringWrapper('one'), BytesWrapper(b'other'))  # OK\n\nx: Box[float] = ...\ny: Box[int] = ...\nx = y  # Error -- Box is invariant\n</code></pre> <p>Note that <code>class ClassName(Protocol[T])</code> is allowed as a shorthand for <code>class ClassName(Protocol, Generic[T])</code>, as per <code>PEP 544: Generic protocols</code>,</p> <p>The main difference between generic protocols and ordinary generic classes is that mypy checks that the declared variances of generic type variables in a protocol match how they are used in the protocol definition.  The protocol in this example is rejected, since the type variable <code>T</code> is used covariantly as a return type, but the type variable is invariant:</p> <pre><code>from typing import Protocol, TypeVar\n\nT = TypeVar('T')\n\nclass ReadOnlyBox(Protocol[T]):  # error: Invariant type variable \"T\" used in protocol where covariant one is expected\n    def content(self) -&gt; T: ...\n</code></pre> <p>This example correctly uses a covariant type variable:</p> <pre><code>from typing import Protocol, TypeVar\n\nT_co = TypeVar('T_co', covariant=True)\n\nclass ReadOnlyBox(Protocol[T_co]):  # OK\n    def content(self) -&gt; T_co: ...\n\nax: ReadOnlyBox[float] = ...\nay: ReadOnlyBox[int] = ...\nax = ay  # OK -- ReadOnlyBox is covariant\n</code></pre> <p>See <code>variance-of-generics</code> for more about variance.</p> <p>Generic protocols can also be recursive. Example:</p> <pre><code>T = TypeVar('T')\n\nclass Linked(Protocol[T]):\n    val: T\n    def next(self) -&gt; 'Linked[T]': ...\n\nclass L:\n    val: int\n    def next(self) -&gt; 'L': ...\n\ndef last(seq: Linked[T]) -&gt; T: ...\n\nresult = last(L())\nreveal_type(result)  # Revealed type is \"builtins.int\"\n</code></pre>"},{"location":"mypy/generics/#\u6cdb\u578b\u7c7b\u578b\u522b\u540d","title":"\u6cdb\u578b\u7c7b\u578b\u522b\u540d","text":"<p>Generic type aliases</p> \u4e2d\u6587\u82f1\u6587 <p>\u7c7b\u578b\u522b\u540d\u53ef\u4ee5\u662f\u6cdb\u578b\u7684\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e24\u79cd\u65b9\u5f0f\u4f7f\u7528\uff1a \u5e26\u4e0b\u6807\u7684\u522b\u540d\u76f8\u5f53\u4e8e\u5e26\u6709\u66ff\u6362\u7c7b\u578b\u53d8\u91cf\u7684\u539f\u59cb\u7c7b\u578b\uff0c\u56e0\u6b64\u7c7b\u578b\u53c2\u6570\u7684\u6570\u91cf\u5fc5\u987b\u4e0e\u6cdb\u578b\u7c7b\u578b\u522b\u540d\u4e2d\u81ea\u7531\u7c7b\u578b\u53d8\u91cf\u7684\u6570\u91cf\u76f8\u5339\u914d\u3002 \u65e0\u4e0b\u6807\u7684\u522b\u540d\u88ab\u89c6\u4e3a\u539f\u59cb\u7c7b\u578b\uff0c\u81ea\u7531\u53d8\u91cf\u66ff\u6362\u4e3a\u201cAny\u201d\u3002 \u793a\u4f8b\uff08\u9075\u5faa <code>PEP 484\uff1a\u7c7b\u578b\u522b\u540d</code>\uff09\uff1a</p> <pre><code>from typing import TypeVar, Iterable, Union, Callable\n\nS = TypeVar('S')\n\nTInt = tuple[int, S]\nUInt = Union[S, int]\nCBack = Callable[..., S]\n\ndef response(query: str) -&gt; UInt[str]:  # Same as Union[str, int]\n    ...\ndef activate(cb: CBack[S]) -&gt; S:        # Same as Callable[..., S]\n    ...\ntable_entry: TInt  # Same as tuple[int, Any]\n\nT = TypeVar('T', int, float, complex)\n\nVec = Iterable[tuple[T, T]]\n\ndef inproduct(v: Vec[T]) -&gt; T:\n    return sum(x*y for x, y in v)\n\ndef dilate(v: Vec[T], scale: T) -&gt; Vec[T]:\n    return ((x * scale, y * scale) for x, y in v)\n\nv1: Vec[int] = []      # Same as Iterable[tuple[int, int]]\nv2: Vec = []           # Same as Iterable[tuple[Any, Any]]\nv3: Vec[int, int] = [] # Error: Invalid alias, too many type arguments!\n</code></pre> <p>\u7c7b\u578b\u522b\u540d\u53ef\u4ee5\u50cf\u5176\u4ed6\u540d\u79f0\u4e00\u6837\u4ece\u6a21\u5757\u5bfc\u5165\u3002 \u4e00\u4e2a\u522b\u540d\u4e5f\u53ef\u4ee5\u9488\u5bf9\u53e6\u4e00\u4e2a\u522b\u540d\uff0c\u5c3d\u7ba1\u4e0d\u5efa\u8bae\u6784\u5efa\u590d\u6742\u7684\u522b\u540d\u94fe\u2014\u2014\u8fd9\u4f1a\u59a8\u788d\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\uff0c\u4ece\u800c\u8fdd\u80cc\u4e86\u4f7f\u7528\u522b\u540d\u7684\u76ee\u7684\u3002 \u4f8b\u5b50\uff1a</p> <pre><code>from typing import TypeVar, Generic, Optional\nfrom example1 import AliasType\nfrom example2 import Vec\n\n# AliasType and Vec are type aliases (Vec as defined above)\n\ndef fun() -&gt; AliasType:\n    ...\n\nT = TypeVar('T')\n\nclass NewVec(Vec[T]):\n    ...\n\nfor i, j in NewVec[int]():\n    ...\n\nOIntVec = Optional[Vec[int]]\n</code></pre> <p>Using type variable bounds or values in generic aliases has the same effect as in generic classes/functions.</p> <p>\u5728\u6cdb\u578b\u7c7b/\u51fd\u6570\u4e2d\u4f7f\u7528\u7684\u6cdb\u578b\u522b\u540d\u4e2d\u4f7f\u7528\u7c7b\u578b\u53d8\u91cf\u7ed1\u5b9a\u6216\u503c\u4e0e\u5177\u6709\u76f8\u540c\u7684\u6548\u679c\u3002</p> <p>Type aliases can be generic. In this case they can be used in two ways: Subscripted aliases are equivalent to original types with substituted type variables, so the number of type arguments must match the number of free type variables in the generic type alias. Unsubscripted aliases are treated as original types with free variables replaced with <code>Any</code>. Examples (following <code>PEP 484: Type aliases</code>):</p> <pre><code>from typing import TypeVar, Iterable, Union, Callable\n\nS = TypeVar('S')\n\nTInt = tuple[int, S]\nUInt = Union[S, int]\nCBack = Callable[..., S]\n\ndef response(query: str) -&gt; UInt[str]:  # Same as Union[str, int]\n    ...\ndef activate(cb: CBack[S]) -&gt; S:        # Same as Callable[..., S]\n    ...\ntable_entry: TInt  # Same as tuple[int, Any]\n\nT = TypeVar('T', int, float, complex)\n\nVec = Iterable[tuple[T, T]]\n\ndef inproduct(v: Vec[T]) -&gt; T:\n    return sum(x*y for x, y in v)\n\ndef dilate(v: Vec[T], scale: T) -&gt; Vec[T]:\n    return ((x * scale, y * scale) for x, y in v)\n\nv1: Vec[int] = []      # Same as Iterable[tuple[int, int]]\nv2: Vec = []           # Same as Iterable[tuple[Any, Any]]\nv3: Vec[int, int] = [] # Error: Invalid alias, too many type arguments!\n</code></pre> <p>Type aliases can be imported from modules just like other names. An alias can also target another alias, although building complex chains of aliases is not recommended -- this impedes code readability, thus defeating the purpose of using aliases.  Example:</p> <pre><code>from typing import TypeVar, Generic, Optional\nfrom example1 import AliasType\nfrom example2 import Vec\n\n# AliasType and Vec are type aliases (Vec as defined above)\n\ndef fun() -&gt; AliasType:\n    ...\n\nT = TypeVar('T')\n\nclass NewVec(Vec[T]):\n    ...\n\nfor i, j in NewVec[int]():\n    ...\n\nOIntVec = Optional[Vec[int]]\n</code></pre> <p>Using type variable bounds or values in generic aliases has the same effect as in generic classes/functions.</p>"},{"location":"mypy/generics/#\u6cdb\u578b\u7c7b\u5185\u90e8\u7ed3\u6784","title":"\u6cdb\u578b\u7c7b\u5185\u90e8\u7ed3\u6784","text":"<p>Generic class internals</p> \u4e2d\u6587\u82f1\u6587 <p>\u60a8\u53ef\u80fd\u60f3\u77e5\u9053\u5f53\u60a8\u7d22\u5f15\u6cdb\u578b\u7c7b\u65f6\u5728\u8fd0\u884c\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002 \u7d22\u5f15\u5411\u539f\u59cb\u7c7b\u8fd4\u56de\u4e00\u4e2a\u6cdb\u578b\u522b\u540d\uff0c\u8be5\u522b\u540d\u5728\u5b9e\u4f8b\u5316\u65f6\u8fd4\u56de\u539f\u59cb\u7c7b\u7684\u5b9e\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; from typing import TypeVar, Generic\n&gt;&gt;&gt; T = TypeVar('T')\n&gt;&gt;&gt; class Stack(Generic[T]): ...\n&gt;&gt;&gt; Stack\n__main__.Stack\n&gt;&gt;&gt; Stack[int]\n__main__.Stack[int]\n&gt;&gt;&gt; instance = Stack[int]()\n&gt;&gt;&gt; instance.__class__\n__main__.Stack\n</code></pre> <p>\u6cdb\u578b\u522b\u540d\u53ef\u4ee5\u88ab\u5b9e\u4f8b\u5316\u6216\u5b50\u7c7b\u5316\uff0c\u7c7b\u4f3c\u4e8e\u771f\u5b9e\u7684\u7c7b\uff0c\u4f46\u4e0a\u9762\u7684\u793a\u4f8b\u8bf4\u660e\u7c7b\u578b\u53d8\u91cf\u5728\u8fd0\u884c\u65f6\u88ab\u5220\u9664\u3002 \u6cdb\u578b \u201cStack\u201d \u5b9e\u4f8b\u53ea\u662f\u666e\u901a\u7684 Python \u5bf9\u8c61\uff0c\u9664\u4e86\u91cd\u8f7d\u7d22\u5f15\u8fd0\u7b97\u7b26\u7684\u5143\u7c7b\u4e4b\u5916\uff0c\u5b83\u4eec\u6ca1\u6709\u989d\u5916\u7684\u8fd0\u884c\u65f6\u5f00\u9500\u6216\u9b54\u529b\uff0c\u56e0\u4e3a\u5b83\u4eec\u662f\u6cdb\u578b\u7684\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u5728 Python 3.8 \u53ca\u66f4\u4f4e\u7248\u672c\u4e2d\uff0c\u5185\u7f6e\u7c7b\u578b <code>list</code>\u3001<code>dict</code> \u548c\u5176\u4ed6\u4e0d\u652f\u6301\u7d22\u5f15\u3002 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u6709\u522b\u540d <code>List</code>\u3001<code>Dict</code> \u7b49\u5728 <code>typing</code> \u6a21\u5757\u4e2d\u3002 \u5bf9\u8fd9\u4e9b\u522b\u540d\u8fdb\u884c\u7d22\u5f15\u4f1a\u4e3a\u60a8\u63d0\u4f9b\u4e00\u4e2a\u6cdb\u578b\u522b\u540d\uff0c\u8be5\u522b\u540d\u7c7b\u4f3c\u4e8e\u901a\u8fc7\u5728\u8f83\u65b0\u7248\u672c\u7684 Python \u4e2d\u76f4\u63a5\u5bf9\u76ee\u6807\u7c7b\u5efa\u7acb\u7d22\u5f15\u800c\u6784\u9020\u7684\u6cdb\u578b\u522b\u540d\uff1a</p> <pre><code>&gt;&gt;&gt; # \u4ec5\u4e0e Python 3.8 \u53ca\u66f4\u4f4e\u7248\u672c\u76f8\u5173\n&gt;&gt;&gt; # \u5bf9\u4e8e Python 3.9 \u53ca\u4ee5\u4e0a\u7248\u672c\uff0c\u66f4\u559c\u6b22 `list[int]` \u8bed\u6cd5\n&gt;&gt;&gt; from typing import List\n&gt;&gt;&gt; List[int]\ntyping.List[int]\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u201ctyping\u201d \u4e2d\u7684\u901a\u7528\u522b\u540d\u4e0d\u652f\u6301\u6784\u9020\u5b9e\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; from typing import List\n&gt;&gt;&gt; List[int]()\nTraceback (most recent call last):\n...\nTypeError: Type List cannot be instantiated; use list() instead\n</code></pre> <p>You may wonder what happens at runtime when you index a generic class. Indexing returns a generic alias to the original class that returns instances of the original class on instantiation:</p> <pre><code>&gt;&gt;&gt; from typing import TypeVar, Generic\n&gt;&gt;&gt; T = TypeVar('T')\n&gt;&gt;&gt; class Stack(Generic[T]): ...\n&gt;&gt;&gt; Stack\n__main__.Stack\n&gt;&gt;&gt; Stack[int]\n__main__.Stack[int]\n&gt;&gt;&gt; instance = Stack[int]()\n&gt;&gt;&gt; instance.__class__\n__main__.Stack\n</code></pre> <p>Generic aliases can be instantiated or subclassed, similar to real classes, but the above examples illustrate that type variables are erased at runtime. Generic <code>Stack</code> instances are just ordinary Python objects, and they have no extra runtime overhead or magic due to being generic, other than a metaclass that overloads the indexing operator.</p> <p>Note that in Python 3.8 and lower, the built-in types <code>list</code>, <code>dict</code> and others do not support indexing. This is why we have the aliases <code>List</code>, <code>Dict</code> and so on in the <code>typing</code> module. Indexing these aliases gives you a generic alias that resembles generic aliases constructed by directly indexing the target class in more recent versions of Python:</p> <pre><code>&gt;&gt;&gt; # Only relevant for Python 3.8 and below\n&gt;&gt;&gt; # For Python 3.9 onwards, prefer `list[int]` syntax\n&gt;&gt;&gt; from typing import List\n&gt;&gt;&gt; List[int]\ntyping.List[int]\n</code></pre> <p>Note that the generic aliases in <code>typing</code> don't support constructing instances:</p> <pre><code>&gt;&gt;&gt; from typing import List\n&gt;&gt;&gt; List[int]()\nTraceback (most recent call last):\n...\nTypeError: Type List cannot be instantiated; use list() instead\n</code></pre>"},{"location":"mypy/kind_of_types/","title":"\u7c7b\u578b\u5206\u7c7b","text":"\u4e2d\u6587\u82f1\u6587 <p>\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u4e3b\u8981\u5c40\u9650\u4e8e\u5185\u7f6e\u7c7b\u578b\u3002 \u672c\u8282\u4ecb\u7ecd\u51e0\u79cd\u5176\u4ed6\u7c7b\u578b\u3002 \u60a8\u53ef\u80fd\u81f3\u5c11\u9700\u8981\u5176\u4e2d\u4e00\u4e9b\u6765\u5bf9\u4efb\u4f55\u91cd\u8981\u7684\u7a0b\u5e8f\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u3002</p> <p>Kinds of types</p> <p>We've mostly restricted ourselves to built-in types until now. This section introduces several additional kinds of types. You are likely to need at least some of them to type check any non-trivial programs.</p>"},{"location":"mypy/kind_of_types/#class\u7684\u7c7b\u578b","title":"Class\u7684\u7c7b\u578b","text":"\u4e2d\u6587\u82f1\u6587 <p>\u6bcf\u4e2a\u7c7b\u90fd\u662f\u6709\u6548\u7684\u7c7b\u578b\u3002 \u5b50\u7c7b\u7684\u4efb\u4f55\u5b9e\u4f8b\u4e5f\u4e0e\u6240\u6709\u8d85\u7c7b\u517c\u5bb9 - \u56e0\u6b64\u6bcf\u4e2a\u503c\u90fd\u4e0e <code>object</code> \u7c7b\u578b\u517c\u5bb9(\u987a\u4fbf\u8bf4\u4e00\u53e5\uff0c\u8fd8\u6709 <code>Any</code> \u7c7b\u578b\uff0c\u5982\u4e0b\u6240\u8ff0)\u3002 Mypy \u5206\u6790\u7c7b\u7684\u4e3b\u4f53\u4ee5\u786e\u5b9a\u5b9e\u4f8b\u4e2d\u53ef\u7528\u7684\u65b9\u6cd5\u548c\u5c5e\u6027\u3002 \u6b64\u793a\u4f8b\u4f7f\u7528\u5b50\u7c7b\u5316\uff1a</p> <pre><code>class A:\n    def f(self) -&gt; int:  # Type of self inferred (A)\n        return 2\n\nclass B(A):\n    def f(self) -&gt; int:\n         return 3\n    def g(self) -&gt; int:\n        return 4\n\ndef foo(a: A) -&gt; None:\n    print(a.f())  # 3\n    a.g()         # Error: \"A\" has no attribute \"g\"\n\nfoo(B())  # OK (B is a subclass of A)\n</code></pre> <p>Class types</p> <p>Every class is also a valid type. Any instance of a subclass is also compatible with all superclasses -- it follows that every value is compatible with the <code>object</code> type (and incidentally also the <code>Any</code> type, discussed below). Mypy analyzes the bodies of classes to determine which methods and attributes are available in instances. This example uses subclassing:</p> <pre><code>class A:\n    def f(self) -&gt; int:  # Type of self inferred (A)\n        return 2\n\nclass B(A):\n    def f(self) -&gt; int:\n         return 3\n    def g(self) -&gt; int:\n        return 4\n\ndef foo(a: A) -&gt; None:\n    print(a.f())  # 3\n    a.g()         # Error: \"A\" has no attribute \"g\"\n\nfoo(B())  # OK (B is a subclass of A)\n</code></pre>"},{"location":"mypy/kind_of_types/#any-\u7c7b\u578b","title":"Any \u7c7b\u578b","text":"\u4e2d\u6587\u82f1\u6587 <p>A value with the <code>Any</code> type is dynamically typed. Mypy doesn't know anything about the possible runtime types of such value. Any operations are permitted on the value, and the operations are only checked at runtime. You can use <code>Any</code> as an \"escape hatch\" when you can't use a more precise type for some reason.</p> <p><code>Any</code> is compatible with every other type, and vice versa. You can freely assign a value of type <code>Any</code> to a variable with a more precise type:</p> <pre><code>a: Any = None\ns: str = ''\na = 2     # OK (assign \"int\" to \"Any\")\ns = a     # OK (assign \"Any\" to \"str\")\n</code></pre> <p>Declared (and inferred) types are ignored (or erased) at runtime. They are basically treated as comments, and thus the above code does not generate a runtime error, even though <code>s</code> gets an <code>int</code> value when the program is run, while the declared type of <code>s</code> is actually <code>str</code>! You need to be careful with <code>Any</code> types, since they let you lie to mypy, and this could easily hide bugs.</p> <p>If you do not define a function return value or argument types, these default to <code>Any</code>:</p> <pre><code>def show_heading(s) -&gt; None:\n    print('=== ' + s + ' ===')  # No static type checking, as s has type Any\n\nshow_heading(1)  # OK (runtime error only; mypy won't generate an error)\n</code></pre> <p>You should give a statically typed function an explicit <code>None</code> return type even if it doesn't return a value, as this lets mypy catch additional type errors:</p> <pre><code>def wait(t: float):  # Implicit Any return value\n    print('Waiting...')\n    time.sleep(t)\n\nif wait(2) &gt; 1:   # Mypy doesn't catch this error!\n    ...\n</code></pre> <p>If we had used an explicit <code>None</code> return type, mypy would have caught the error:</p> <pre><code>def wait(t: float) -&gt; None:\n    print('Waiting...')\n    time.sleep(t)\n\nif wait(2) &gt; 1:   # Error: can't compare None and int\n    ...\n</code></pre> <p>The <code>Any</code> type is discussed in more detail in section <code>dynamic-typing</code>.</p> <p>Note</p> <p>A function without any types in the signature is dynamically typed. The body of a dynamically typed function is not checked statically, and local variables have implicit <code>Any</code> types.</p> <p>This makes it easier to migrate legacy Python code to mypy, as mypy won't complain about dynamically typed functions.</p> <p>The Any type</p> <p>A value with the <code>Any</code> type is dynamically typed. Mypy doesn't know anything about the possible runtime types of such value. Any operations are permitted on the value, and the operations are only checked at runtime. You can use <code>Any</code> as an \"escape hatch\" when you can't use a more precise type for some reason.</p> <p><code>Any</code> is compatible with every other type, and vice versa. You can freely assign a value of type <code>Any</code> to a variable with a more precise type:</p> <pre><code>a: Any = None\ns: str = ''\na = 2     # OK (assign \"int\" to \"Any\")\ns = a     # OK (assign \"Any\" to \"str\")\n</code></pre> <p>Declared (and inferred) types are ignored (or erased) at runtime. They are basically treated as comments, and thus the above code does not generate a runtime error, even though <code>s</code> gets an <code>int</code> value when the program is run, while the declared type of <code>s</code> is actually <code>str</code>! You need to be careful with <code>Any</code> types, since they let you lie to mypy, and this could easily hide bugs.</p> <p>If you do not define a function return value or argument types, these default to <code>Any</code>:</p> <pre><code>def show_heading(s) -&gt; None:\n    print('=== ' + s + ' ===')  # No static type checking, as s has type Any\n\nshow_heading(1)  # OK (runtime error only; mypy won't generate an error)\n</code></pre> <p>You should give a statically typed function an explicit <code>None</code> return type even if it doesn't return a value, as this lets mypy catch additional type errors:</p> <pre><code>def wait(t: float):  # Implicit Any return value\n    print('Waiting...')\n    time.sleep(t)\n\nif wait(2) &gt; 1:   # Mypy doesn't catch this error!\n    ...\n</code></pre> <p>If we had used an explicit <code>None</code> return type, mypy would have caught the error:</p> <pre><code>def wait(t: float) -&gt; None:\n    print('Waiting...')\n    time.sleep(t)\n\nif wait(2) &gt; 1:   # Error: can't compare None and int\n    ...\n</code></pre> <p>The <code>Any</code> type is discussed in more detail in section <code>dynamic-typing</code>.</p> <p>Note</p> <p>A function without any types in the signature is dynamically typed. The body of a dynamically typed function is not checked statically, and local variables have implicit <code>Any</code> types.</p> <p>This makes it easier to migrate legacy Python code to mypy, as mypy won't complain about dynamically typed functions.</p>"},{"location":"mypy/kind_of_types/#tuple-\u7c7b\u578b","title":"Tuple \u7c7b\u578b","text":"\u4e2d\u6587\u82f1\u6587 <p>The type <code>tuple[T1, ..., Tn]</code> represents a tuple with the item types <code>T1</code>, ..., <code>Tn</code>:</p> <pre><code># Use `typing.Tuple` in Python 3.8 and earlier\ndef f(t: tuple[int, str]) -&gt; None:\n    t = 1, 'foo'    # OK\n    t = 'foo', 1    # Type check error\n</code></pre> <p>A tuple type of this kind has exactly a specific number of items (2 in the above example). Tuples can also be used as immutable, varying-length sequences. You can use the type <code>tuple[T, ...]</code> (with a literal <code>...</code> -- it's part of the syntax) for this purpose. Example:</p> <pre><code>def print_squared(t: tuple[int, ...]) -&gt; None:\n    for n in t:\n        print(n, n ** 2)\n\nprint_squared(())           # OK\nprint_squared((1, 3, 5))    # OK\nprint_squared([1, 2])       # Error: only a tuple is valid\n</code></pre> <p>Note</p> <p>Usually it's a better idea to use <code>Sequence[T]</code> instead of <code>tuple[T, ...]</code>, as <code>typing.Sequence</code> is also compatible with lists and other non-tuple sequences.</p> <p>Note</p> <p><code>tuple[...]</code> is valid as a base class in Python 3.6 and later, and always in stub files. In earlier Python versions you can sometimes work around this limitation by using a named tuple as a base class (see section <code>named-tuples</code>).</p> <p>Tuple types</p> <p>The type <code>tuple[T1, ..., Tn]</code> represents a tuple with the item types <code>T1</code>, ..., <code>Tn</code>:</p> <pre><code># Use `typing.Tuple` in Python 3.8 and earlier\ndef f(t: tuple[int, str]) -&gt; None:\n    t = 1, 'foo'    # OK\n    t = 'foo', 1    # Type check error\n</code></pre> <p>A tuple type of this kind has exactly a specific number of items (2 in the above example). Tuples can also be used as immutable, varying-length sequences. You can use the type <code>tuple[T, ...]</code> (with a literal <code>...</code> -- it's part of the syntax) for this purpose. Example:</p> <pre><code>def print_squared(t: tuple[int, ...]) -&gt; None:\n    for n in t:\n        print(n, n ** 2)\n\nprint_squared(())           # OK\nprint_squared((1, 3, 5))    # OK\nprint_squared([1, 2])       # Error: only a tuple is valid\n</code></pre> <p>Note</p> <p>Usually it's a better idea to use <code>Sequence[T]</code> instead of <code>tuple[T, ...]</code>, as <code>typing.Sequence</code> is also compatible with lists and other non-tuple sequences.</p> <p>Note</p> <p><code>tuple[...]</code> is valid as a base class in Python 3.6 and later, and always in stub files. In earlier Python versions you can sometimes work around this limitation by using a named tuple as a base class (see section <code>named-tuples</code>).</p>"},{"location":"mypy/kind_of_types/#callable-\u7c7b\u578b-\u4ee5\u53ca-lambdas","title":"Callable \u7c7b\u578b (\u4ee5\u53ca lambdas)","text":"\u4e2d\u6587\u82f1\u6587 <p>You can pass around function objects and bound methods in statically typed code. The type of a function that accepts arguments <code>A1</code>, ..., <code>An</code> and returns <code>Rt</code> is <code>Callable[[A1, ..., An], Rt]</code>. Example:</p> <pre><code>from typing import Callable\n\ndef twice(i: int, next: Callable[[int], int]) -&gt; int:\n    return next(next(i))\n\ndef add(i: int) -&gt; int:\n    return i + 1\n\nprint(twice(3, add))   # 5\n</code></pre> <p>You can only have positional arguments, and only ones without default values, in callable types. These cover the vast majority of uses of callable types, but sometimes this isn't quite enough. Mypy recognizes a special form <code>Callable[..., T]</code> (with a literal <code>...</code>) which can be used in less typical cases. It is compatible with arbitrary callable objects that return a type compatible with <code>T</code>, independent of the number, types or kinds of arguments. Mypy lets you call such callable values with arbitrary arguments, without any checking -- in this respect they are treated similar to a <code>(*args: Any, **kwargs: Any)</code> function signature. Example:</p> <pre><code>from typing import Callable\n\ndef arbitrary_call(f: Callable[..., int]) -&gt; int:\n    return f('x') + f(y=2)  # OK\n\narbitrary_call(ord)   # No static error, but fails at runtime\narbitrary_call(open)  # Error: does not return an int\narbitrary_call(1)     # Error: 'int' is not callable\n</code></pre> <p>In situations where more precise or complex types of callbacks are necessary one can use flexible <code>callback protocols</code>. Lambdas are also supported. The lambda argument and return value types cannot be given explicitly; they are always inferred based on context using bidirectional type inference:</p> <pre><code>l = map(lambda x: x + 1, [1, 2, 3])   # Infer x as int and l as list[int]\n</code></pre> <p>If you want to give the argument or return value types explicitly, use an ordinary, perhaps nested function definition.</p> <p>Callables can also be used against type objects, matching their <code>__init__</code> or <code>__new__</code> signature:</p> <pre><code>from typing import Callable\n\nclass C:\n    def __init__(self, app: str) -&gt; None:\n        pass\n\nCallableType = Callable[[str], C]\n\ndef class_or_callable(arg: CallableType) -&gt; None:\n    inst = arg(\"my_app\")\n    reveal_type(inst)  # Revealed type is \"C\"\n</code></pre> <p>This is useful if you want <code>arg</code> to be either a <code>Callable</code> returning an instance of <code>C</code> or the type of <code>C</code> itself. This also works with <code>callback protocols</code>.</p> <p>Callable types (and lambdas)</p> <p>You can pass around function objects and bound methods in statically typed code. The type of a function that accepts arguments <code>A1</code>, ..., <code>An</code> and returns <code>Rt</code> is <code>Callable[[A1, ..., An], Rt]</code>. Example:</p> <pre><code>from typing import Callable\n\ndef twice(i: int, next: Callable[[int], int]) -&gt; int:\n    return next(next(i))\n\ndef add(i: int) -&gt; int:\n    return i + 1\n\nprint(twice(3, add))   # 5\n</code></pre> <p>You can only have positional arguments, and only ones without default values, in callable types. These cover the vast majority of uses of callable types, but sometimes this isn't quite enough. Mypy recognizes a special form <code>Callable[..., T]</code> (with a literal <code>...</code>) which can be used in less typical cases. It is compatible with arbitrary callable objects that return a type compatible with <code>T</code>, independent of the number, types or kinds of arguments. Mypy lets you call such callable values with arbitrary arguments, without any checking -- in this respect they are treated similar to a <code>(*args: Any, **kwargs: Any)</code> function signature. Example:</p> <pre><code>from typing import Callable\n\ndef arbitrary_call(f: Callable[..., int]) -&gt; int:\n    return f('x') + f(y=2)  # OK\n\narbitrary_call(ord)   # No static error, but fails at runtime\narbitrary_call(open)  # Error: does not return an int\narbitrary_call(1)     # Error: 'int' is not callable\n</code></pre> <p>In situations where more precise or complex types of callbacks are necessary one can use flexible <code>callback protocols</code>. Lambdas are also supported. The lambda argument and return value types cannot be given explicitly; they are always inferred based on context using bidirectional type inference:</p> <pre><code>l = map(lambda x: x + 1, [1, 2, 3])   # Infer x as int and l as list[int]\n</code></pre> <p>If you want to give the argument or return value types explicitly, use an ordinary, perhaps nested function definition.</p> <p>Callables can also be used against type objects, matching their <code>__init__</code> or <code>__new__</code> signature:</p> <pre><code>from typing import Callable\n\nclass C:\n    def __init__(self, app: str) -&gt; None:\n        pass\n\nCallableType = Callable[[str], C]\n\ndef class_or_callable(arg: CallableType) -&gt; None:\n    inst = arg(\"my_app\")\n    reveal_type(inst)  # Revealed type is \"C\"\n</code></pre> <p>This is useful if you want <code>arg</code> to be either a <code>Callable</code> returning an instance of <code>C</code> or the type of <code>C</code> itself. This also works with <code>callback protocols</code>.</p>"},{"location":"mypy/kind_of_types/#union-\u7c7b\u578b","title":"Union \u7c7b\u578b","text":"\u4e2d\u6587\u82f1\u6587 <p>Python functions often accept values of two or more different types. You can use <code>overloading</code> to represent this, but union types are often more convenient.</p> <p>Use the <code>Union[T1, ..., Tn]</code> type constructor to construct a union type. For example, if an argument has type <code>Union[int, str]</code>, both integers and strings are valid argument values.</p> <p>You can use an <code>isinstance</code> check to narrow down a union type to a more specific type:</p> <pre><code>from typing import Union\n\ndef f(x: Union[int, str]) -&gt; None:\n    x + 1     # Error: str + int is not valid\n    if isinstance(x, int):\n        # Here type of x is int.\n        x + 1      # OK\n    else:\n        # Here type of x is str.\n        x + 'a'    # OK\n\nf(1)    # OK\nf('x')  # OK\nf(1.1)  # Error\n</code></pre> <p>Note</p> <p>Operations are valid for union types only if they are valid for every union item. This is why it's often necessary to use an <code>isinstance</code> check to first narrow down a union type to a non-union type. This also means that it's recommended to avoid union types as function return types, since the caller may have to use <code>isinstance</code> before doing anything interesting with the value.</p> <p>Union types</p> <p>Python functions often accept values of two or more different types. You can use <code>overloading</code> to represent this, but union types are often more convenient.</p> <p>Use the <code>Union[T1, ..., Tn]</code> type constructor to construct a union type. For example, if an argument has type <code>Union[int, str]</code>, both integers and strings are valid argument values.</p> <p>You can use an <code>isinstance</code> check to narrow down a union type to a more specific type:</p> <pre><code>from typing import Union\n\ndef f(x: Union[int, str]) -&gt; None:\n    x + 1     # Error: str + int is not valid\n    if isinstance(x, int):\n        # Here type of x is int.\n        x + 1      # OK\n    else:\n        # Here type of x is str.\n        x + 'a'    # OK\n\nf(1)    # OK\nf('x')  # OK\nf(1.1)  # Error\n</code></pre> <p>Note</p> <p>Operations are valid for union types only if they are valid for every union item. This is why it's often necessary to use an <code>isinstance</code> check to first narrow down a union type to a non-union type. This also means that it's recommended to avoid union types as function return types, since the caller may have to use <code>isinstance</code> before doing anything interesting with the value.</p>"},{"location":"mypy/kind_of_types/#optional-\u548c-none-\u7c7b\u578b","title":"Optional \u548c None \u7c7b\u578b","text":"\u4e2d\u6587\u82f1\u6587 <p>You can use the <code>typing.Optional</code> type modifier to define a type variant that allows <code>None</code>, such as <code>Optional[int]</code> (<code>Optional[X]</code> is the preferred shorthand for <code>Union[X, None]</code>):</p> <pre><code>from typing import Optional\n\ndef strlen(s: str) -&gt; Optional[int]:\n    if not s:\n        return None  # OK\n    return len(s)\n\ndef strlen_invalid(s: str) -&gt; int:\n    if not s:\n        return None  # Error: None not compatible with int\n    return len(s)\n</code></pre> <p>Most operations will not be allowed on unguarded <code>None</code> or <code>typing.Optional</code> values:</p> <pre><code>def my_inc(x: Optional[int]) -&gt; int:\n    return x + 1  # Error: Cannot add None and int\n</code></pre> <p>Instead, an explicit <code>None</code> check is required. Mypy has powerful type inference that lets you use regular Python idioms to guard against <code>None</code> values. For example, mypy recognizes <code>is None</code> checks:</p> <pre><code>def my_inc(x: Optional[int]) -&gt; int:\n    if x is None:\n        return 0\n    else:\n        # The inferred type of x is just int here.\n        return x + 1\n</code></pre> <p>Mypy will infer the type of <code>x</code> to be <code>int</code> in the else block due to the check against <code>None</code> in the if condition.</p> <p>Other supported checks for guarding against a <code>None</code> value include <code>if x is not None</code>, <code>if x</code> and <code>if not x</code>. Additionally, mypy understands <code>None</code> checks within logical expressions:</p> <pre><code>def concat(x: Optional[str], y: Optional[str]) -&gt; Optional[str]:\n    if x is not None and y is not None:\n        # Both x and y are not None here\n        return x + y\n    else:\n        return None\n</code></pre> <p>Sometimes mypy doesn't realize that a value is never <code>None</code>. This notably happens when a class instance can exist in a partially defined state, where some attribute is initialized to <code>None</code> during object construction, but a method assumes that the attribute is no longer <code>None</code>. Mypy will complain about the possible <code>None</code> value. You can use <code>assert x is not None</code> to work around this in the method:</p> <pre><code>class Resource:\n    path: Optional[str] = None\n\n    def initialize(self, path: str) -&gt; None:\n        self.path = path\n\n    def read(self) -&gt; str:\n        # We require that the object has been initialized.\n        assert self.path is not None\n        with open(self.path) as f:  # OK\n           return f.read()\n\nr = Resource()\nr.initialize('/foo/bar')\nr.read()\n</code></pre> <p>When initializing a variable as <code>None</code>, <code>None</code> is usually an empty place-holder value, and the actual value has a different type. This is why you need to annotate an attribute in cases like the class <code>Resource</code> above:</p> <pre><code>class Resource:\n    path: Optional[str] = None\n    ...\n</code></pre> <p>This also works for attributes defined within methods:</p> <pre><code>class Counter:\n    def __init__(self) -&gt; None:\n        self.count: Optional[int] = None\n</code></pre> <p>This is not a problem when using variable annotations, since no initial value is needed:</p> <pre><code>class Container:\n    items: list[str]  # No initial value\n</code></pre> <p>Mypy generally uses the first assignment to a variable to infer the type of the variable. However, if you assign both a <code>None</code> value and a non-<code>None</code> value in the same scope, mypy can usually do the right thing without an annotation:</p> <pre><code>def f(i: int) -&gt; None:\n    n = None  # Inferred type Optional[int] because of the assignment below\n    if i &gt; 0:\n         n = i\n    ...\n</code></pre> <p>Sometimes you may get the error \"Cannot determine type of \\\". In this case you should add an explicit <code>Optional[...]</code> annotation (or type comment). <p>Note</p> <p><code>None</code> is a type with only one value, <code>None</code>. <code>None</code> is also used as the return type for functions that don't return a value, i.e. functions that implicitly return <code>None</code>.</p> <p>Note</p> <p>The Python interpreter internally uses the name <code>NoneType</code> for the type of <code>None</code>, but <code>None</code> is always used in type annotations. The latter is shorter and reads better. (<code>NoneType</code> is available as <code>types.NoneType</code> on Python 3.10+, but is not exposed at all on earlier versions of Python.)</p> <p>Note</p> <p><code>Optional[...]</code> does not mean a function argument with a default value. It simply means that <code>None</code> is a valid value for the argument. This is a common confusion because <code>None</code> is a common default value for arguments.</p> <p>Optional types and the None type</p> <p>You can use the <code>typing.Optional</code> type modifier to define a type variant that allows <code>None</code>, such as <code>Optional[int]</code> (<code>Optional[X]</code> is the preferred shorthand for <code>Union[X, None]</code>):</p> <pre><code>from typing import Optional\n\ndef strlen(s: str) -&gt; Optional[int]:\n    if not s:\n        return None  # OK\n    return len(s)\n\ndef strlen_invalid(s: str) -&gt; int:\n    if not s:\n        return None  # Error: None not compatible with int\n    return len(s)\n</code></pre> <p>Most operations will not be allowed on unguarded <code>None</code> or <code>typing.Optional</code> values:</p> <pre><code>def my_inc(x: Optional[int]) -&gt; int:\n    return x + 1  # Error: Cannot add None and int\n</code></pre> <p>Instead, an explicit <code>None</code> check is required. Mypy has powerful type inference that lets you use regular Python idioms to guard against <code>None</code> values. For example, mypy recognizes <code>is None</code> checks:</p> <pre><code>def my_inc(x: Optional[int]) -&gt; int:\n    if x is None:\n        return 0\n    else:\n        # The inferred type of x is just int here.\n        return x + 1\n</code></pre> <p>Mypy will infer the type of <code>x</code> to be <code>int</code> in the else block due to the check against <code>None</code> in the if condition.</p> <p>Other supported checks for guarding against a <code>None</code> value include <code>if x is not None</code>, <code>if x</code> and <code>if not x</code>. Additionally, mypy understands <code>None</code> checks within logical expressions:</p> <pre><code>def concat(x: Optional[str], y: Optional[str]) -&gt; Optional[str]:\n    if x is not None and y is not None:\n        # Both x and y are not None here\n        return x + y\n    else:\n        return None\n</code></pre> <p>Sometimes mypy doesn't realize that a value is never <code>None</code>. This notably happens when a class instance can exist in a partially defined state, where some attribute is initialized to <code>None</code> during object construction, but a method assumes that the attribute is no longer <code>None</code>. Mypy will complain about the possible <code>None</code> value. You can use <code>assert x is not None</code> to work around this in the method:</p> <pre><code>class Resource:\n    path: Optional[str] = None\n\n    def initialize(self, path: str) -&gt; None:\n        self.path = path\n\n    def read(self) -&gt; str:\n        # We require that the object has been initialized.\n        assert self.path is not None\n        with open(self.path) as f:  # OK\n           return f.read()\n\nr = Resource()\nr.initialize('/foo/bar')\nr.read()\n</code></pre> <p>When initializing a variable as <code>None</code>, <code>None</code> is usually an empty place-holder value, and the actual value has a different type. This is why you need to annotate an attribute in cases like the class <code>Resource</code> above:</p> <pre><code>class Resource:\n    path: Optional[str] = None\n    ...\n</code></pre> <p>This also works for attributes defined within methods:</p> <pre><code>class Counter:\n    def __init__(self) -&gt; None:\n        self.count: Optional[int] = None\n</code></pre> <p>This is not a problem when using variable annotations, since no initial value is needed:</p> <pre><code>class Container:\n    items: list[str]  # No initial value\n</code></pre> <p>Mypy generally uses the first assignment to a variable to infer the type of the variable. However, if you assign both a <code>None</code> value and a non-<code>None</code> value in the same scope, mypy can usually do the right thing without an annotation:</p> <pre><code>def f(i: int) -&gt; None:\n    n = None  # Inferred type Optional[int] because of the assignment below\n    if i &gt; 0:\n         n = i\n    ...\n</code></pre> <p>Sometimes you may get the error \"Cannot determine type of \\\". In this case you should add an explicit <code>Optional[...]</code> annotation (or type comment). <p>Note</p> <p><code>None</code> is a type with only one value, <code>None</code>. <code>None</code> is also used as the return type for functions that don't return a value, i.e. functions that implicitly return <code>None</code>.</p> <p>Note</p> <p>The Python interpreter internally uses the name <code>NoneType</code> for the type of <code>None</code>, but <code>None</code> is always used in type annotations. The latter is shorter and reads better. (<code>NoneType</code> is available as <code>types.NoneType</code> on Python 3.10+, but is not exposed at all on earlier versions of Python.)</p> <p>Note</p> <p><code>Optional[...]</code> does not mean a function argument with a default value. It simply means that <code>None</code> is a valid value for the argument. This is a common confusion because <code>None</code> is a common default value for arguments.</p>"},{"location":"mypy/kind_of_types/#union-\u7684-x--y-\u8bed\u6cd5","title":"Union \u7684 X | Y \u8bed\u6cd5","text":"\u4e2d\u6587\u82f1\u6587 <p><code>PEP 604</code> introduced an alternative way for spelling union types. In Python 3.10 and later, you can write <code>Union[int, str]</code> as <code>int | str</code>. It is possible to use this syntax in versions of Python where it isn't supported by the runtime with some limitations (see <code>runtime troubles</code>).</p> <pre><code>t1: int | str  # equivalent to Union[int, str]\n\nt2: int | None  # equivalent to Optional[int]\n</code></pre> <p>X | Y syntax for Unions</p> <p><code>PEP 604</code> introduced an alternative way for spelling union types. In Python 3.10 and later, you can write <code>Union[int, str]</code> as <code>int | str</code>. It is possible to use this syntax in versions of Python where it isn't supported by the runtime with some limitations (see <code>runtime troubles</code>).</p> <pre><code>t1: int | str  # equivalent to Union[int, str]\n\nt2: int | None  # equivalent to Optional[int]\n</code></pre>"},{"location":"mypy/kind_of_types/#\u7981\u7528\u4e25\u683c\u7684\u53ef\u9009\u68c0\u67e5","title":"\u7981\u7528\u4e25\u683c\u7684\u53ef\u9009\u68c0\u67e5","text":"\u4e2d\u6587\u82f1\u6587 <p>Mypy also has an option to treat <code>None</code> as a valid value for every type (in case you know Java, it's useful to think of it as similar to the Java <code>null</code>). In this mode <code>None</code> is also valid for primitive types such as <code>int</code> and <code>float</code>, and <code>typing.Optional</code> types are not required.</p> <p>The mode is enabled through the <code>--no-strict-optional</code> command-line option. In mypy versions before 0.600 this was the default mode. You can enable this option explicitly for backward compatibility with earlier mypy versions, in case you don't want to introduce optional types to your codebase yet.</p> <p>It will cause mypy to silently accept some buggy code, such as this example -- it's not recommended if you can avoid it:</p> <pre><code>def inc(x: int) -&gt; int:\n    return x + 1\n\nx = inc(None)  # No error reported by mypy if strict optional mode disabled!\n</code></pre> <p>However, making code \"optional clean\" can take some work! You can also use <code>the mypy configuration file</code> to migrate your code to strict optional checking one file at a time, since there exists the per-module flag <code>strict_optional</code> to control strict optional mode.</p> <p>Often it's still useful to document whether a variable can be <code>None</code>. For example, this function accepts a <code>None</code> argument, but it's not obvious from its signature:</p> <pre><code>def greeting(name: str) -&gt; str:\n    if name:\n        return f'Hello, {name}'\n    else:\n        return 'Hello, stranger'\n\nprint(greeting('Python'))  # Okay!\nprint(greeting(None))      # Also okay!\n</code></pre> <p>You can still use <code>Optional[t]</code> to document that <code>None</code> is a valid argument type, even if strict <code>None</code> checking is not enabled:</p> <pre><code>from typing import Optional\n\ndef greeting(name: Optional[str]) -&gt; str:\n    if name:\n        return f'Hello, {name}'\n    else:\n        return 'Hello, stranger'\n</code></pre> <p>Mypy treats this as semantically equivalent to the previous example if strict optional checking is disabled, since <code>None</code> is implicitly valid for any type, but it's much more useful for a programmer who is reading the code. This also makes it easier to migrate to strict <code>None</code> checking in the future.</p> <p>Disabling strict optional checking</p> <p>Mypy also has an option to treat <code>None</code> as a valid value for every type (in case you know Java, it's useful to think of it as similar to the Java <code>null</code>). In this mode <code>None</code> is also valid for primitive types such as <code>int</code> and <code>float</code>, and <code>typing.Optional</code> types are not required.</p> <p>The mode is enabled through the <code>--no-strict-optional</code> command-line option. In mypy versions before 0.600 this was the default mode. You can enable this option explicitly for backward compatibility with earlier mypy versions, in case you don't want to introduce optional types to your codebase yet.</p> <p>It will cause mypy to silently accept some buggy code, such as this example -- it's not recommended if you can avoid it:</p> <pre><code>def inc(x: int) -&gt; int:\n    return x + 1\n\nx = inc(None)  # No error reported by mypy if strict optional mode disabled!\n</code></pre> <p>However, making code \"optional clean\" can take some work! You can also use <code>the mypy configuration file</code> to migrate your code to strict optional checking one file at a time, since there exists the per-module flag <code>strict_optional</code> to control strict optional mode.</p> <p>Often it's still useful to document whether a variable can be <code>None</code>. For example, this function accepts a <code>None</code> argument, but it's not obvious from its signature:</p> <pre><code>def greeting(name: str) -&gt; str:\n    if name:\n        return f'Hello, {name}'\n    else:\n        return 'Hello, stranger'\n\nprint(greeting('Python'))  # Okay!\nprint(greeting(None))      # Also okay!\n</code></pre> <p>You can still use <code>Optional[t]</code> to document that <code>None</code> is a valid argument type, even if strict <code>None</code> checking is not enabled:</p> <pre><code>from typing import Optional\n\ndef greeting(name: Optional[str]) -&gt; str:\n    if name:\n        return f'Hello, {name}'\n    else:\n        return 'Hello, stranger'\n</code></pre> <p>Mypy treats this as semantically equivalent to the previous example if strict optional checking is disabled, since <code>None</code> is implicitly valid for any type, but it's much more useful for a programmer who is reading the code. This also makes it easier to migrate to strict <code>None</code> checking in the future.</p>"},{"location":"mypy/kind_of_types/#\u7c7b\u578b\u522b\u540d","title":"\u7c7b\u578b\u522b\u540d","text":"\u4e2d\u6587\u82f1\u6587 <p>In certain situations, type names may end up being long and painful to type:</p> <pre><code>def f() -&gt; Union[list[dict[tuple[int, str], set[int]]], tuple[str, list[str]]]:\n    ...\n</code></pre> <p>When cases like this arise, you can define a type alias by simply assigning the type to a variable:</p> <pre><code>AliasType = Union[list[dict[tuple[int, str], set[int]]], tuple[str, list[str]]]\n\n# Now we can use AliasType in place of the full name:\n\ndef f() -&gt; AliasType:\n    ...\n</code></pre> <p>Note</p> <p>A type alias does not create a new type. It's just a shorthand notation for another type -- it's equivalent to the target type except for <code>generic aliases</code>.</p> <p>Since Mypy 0.930 you can also use explicit type aliases, which were introduced in <code>PEP 613</code>.</p> <p>There can be confusion about exactly when an assignment defines an implicit type alias -- for example, when the alias contains forward references, invalid types, or violates some other restrictions on type alias declarations.  Because the distinction between an unannotated variable and a type alias is implicit, ambiguous or incorrect type alias declarations default to defining a normal variable instead of a type alias.</p> <p>Explicit type aliases are unambiguous and can also improve readability by making the intent clear:</p> <pre><code>from typing import TypeAlias  # \"from typing_extensions\" in Python 3.9 and earlier\n\nAliasType: TypeAlias = Union[list[dict[tuple[int, str], set[int]]], tuple[str, list[str]]]\n</code></pre> <p>Type aliases</p> <p>In certain situations, type names may end up being long and painful to type:</p> <pre><code>def f() -&gt; Union[list[dict[tuple[int, str], set[int]]], tuple[str, list[str]]]:\n    ...\n</code></pre> <p>When cases like this arise, you can define a type alias by simply assigning the type to a variable:</p> <pre><code>AliasType = Union[list[dict[tuple[int, str], set[int]]], tuple[str, list[str]]]\n\n# Now we can use AliasType in place of the full name:\n\ndef f() -&gt; AliasType:\n    ...\n</code></pre> <p>Note</p> <p>A type alias does not create a new type. It's just a shorthand notation for another type -- it's equivalent to the target type except for <code>generic aliases</code>.</p> <p>Since Mypy 0.930 you can also use explicit type aliases, which were introduced in <code>PEP 613</code>.</p> <p>There can be confusion about exactly when an assignment defines an implicit type alias -- for example, when the alias contains forward references, invalid types, or violates some other restrictions on type alias declarations.  Because the distinction between an unannotated variable and a type alias is implicit, ambiguous or incorrect type alias declarations default to defining a normal variable instead of a type alias.</p> <p>Explicit type aliases are unambiguous and can also improve readability by making the intent clear:</p> <pre><code>from typing import TypeAlias  # \"from typing_extensions\" in Python 3.9 and earlier\n\nAliasType: TypeAlias = Union[list[dict[tuple[int, str], set[int]]], tuple[str, list[str]]]\n</code></pre>"},{"location":"mypy/kind_of_types/#\u547d\u540d\u5143\u7ec4","title":"\u547d\u540d\u5143\u7ec4","text":"\u4e2d\u6587\u82f1\u6587 <p>Mypy recognizes named tuples and can type check code that defines or uses them.  In this example, we can detect code trying to access a missing attribute:</p> <pre><code>Point = namedtuple('Point', ['x', 'y'])\np = Point(x=1, y=2)\nprint(p.z)  # Error: Point has no attribute 'z'\n</code></pre> <p>If you use <code>namedtuple</code> to define your named tuple, all the items are assumed to have <code>Any</code> types. That is, mypy doesn't know anything about item types. You can use <code>typing.NamedTuple</code> to also define item types:</p> <pre><code>from typing import NamedTuple\n\nPoint = NamedTuple('Point', [('x', int),\n                             ('y', int)])\np = Point(x=1, y='x')  # Argument has incompatible type \"str\"; expected \"int\"\n</code></pre> <p>Python 3.6 introduced an alternative, class-based syntax for named tuples with types:</p> <pre><code>from typing import NamedTuple\n\nclass Point(NamedTuple):\n    x: int\n    y: int\n\np = Point(x=1, y='x')  # Argument has incompatible type \"str\"; expected \"int\"\n</code></pre> <p>Note</p> <p>You can use the raw <code>NamedTuple</code> \"pseudo-class\" in type annotations if any <code>NamedTuple</code> object is valid.</p> <p>For example, it can be useful for deserialization:</p> <pre><code>def deserialize_named_tuple(arg: NamedTuple) -&gt; Dict[str, Any]:\n    return arg._asdict()\n\nPoint = namedtuple('Point', ['x', 'y'])\nPerson = NamedTuple('Person', [('name', str), ('age', int)])\n\ndeserialize_named_tuple(Point(x=1, y=2))  # ok\ndeserialize_named_tuple(Person(name='Nikita', age=18))  # ok\n\n# Error: Argument 1 to \"deserialize_named_tuple\" has incompatible type\n# \"Tuple[int, int]\"; expected \"NamedTuple\"\ndeserialize_named_tuple((1, 2))\n</code></pre> <p>Note that this behavior is highly experimental, non-standard, and may not be supported by other type checkers and IDEs.</p> <p>Named tuples</p> <p>Mypy recognizes named tuples and can type check code that defines or uses them.  In this example, we can detect code trying to access a missing attribute:</p> <pre><code>Point = namedtuple('Point', ['x', 'y'])\np = Point(x=1, y=2)\nprint(p.z)  # Error: Point has no attribute 'z'\n</code></pre> <p>If you use <code>namedtuple</code> to define your named tuple, all the items are assumed to have <code>Any</code> types. That is, mypy doesn't know anything about item types. You can use <code>typing.NamedTuple</code> to also define item types:</p> <pre><code>from typing import NamedTuple\n\nPoint = NamedTuple('Point', [('x', int),\n                             ('y', int)])\np = Point(x=1, y='x')  # Argument has incompatible type \"str\"; expected \"int\"\n</code></pre> <p>Python 3.6 introduced an alternative, class-based syntax for named tuples with types:</p> <pre><code>from typing import NamedTuple\n\nclass Point(NamedTuple):\n    x: int\n    y: int\n\np = Point(x=1, y='x')  # Argument has incompatible type \"str\"; expected \"int\"\n</code></pre> <p>Note</p> <p>You can use the raw <code>NamedTuple</code> \"pseudo-class\" in type annotations if any <code>NamedTuple</code> object is valid.</p> <p>For example, it can be useful for deserialization:</p> <pre><code>def deserialize_named_tuple(arg: NamedTuple) -&gt; Dict[str, Any]:\n    return arg._asdict()\n\nPoint = namedtuple('Point', ['x', 'y'])\nPerson = NamedTuple('Person', [('name', str), ('age', int)])\n\ndeserialize_named_tuple(Point(x=1, y=2))  # ok\ndeserialize_named_tuple(Person(name='Nikita', age=18))  # ok\n\n# Error: Argument 1 to \"deserialize_named_tuple\" has incompatible type\n# \"Tuple[int, int]\"; expected \"NamedTuple\"\ndeserialize_named_tuple((1, 2))\n</code></pre> <p>Note that this behavior is highly experimental, non-standard, and may not be supported by other type checkers and IDEs.</p>"},{"location":"mypy/kind_of_types/#\u7c7b\u5bf9\u8c61\u7684\u7c7b\u578b","title":"\u7c7b\u5bf9\u8c61\u7684\u7c7b\u578b","text":"\u4e2d\u6587\u82f1\u6587 <p>(Freely after <code>PEP 484: The type of class objects</code>.)</p> <p>Sometimes you want to talk about class objects that inherit from a given class.  This can be spelled as <code>type[C]</code> (or, on Python 3.8 and lower, <code>typing.Type[C]</code>) where <code>C</code> is a class.  In other words, when <code>C</code> is the name of a class, using <code>C</code> to annotate an argument declares that the argument is an instance of <code>C</code> (or of a subclass of <code>C</code>), but using <code>type[C]</code> as an argument annotation declares that the argument is a class object deriving from <code>C</code> (or <code>C</code> itself).</p> <p>For example, assume the following classes:</p> <pre><code>class User:\n    # Defines fields like name, email\n\nclass BasicUser(User):\n    def upgrade(self):\n        \"\"\"Upgrade to Pro\"\"\"\n\nclass ProUser(User):\n    def pay(self):\n        \"\"\"Pay bill\"\"\"\n</code></pre> <p>Note that <code>ProUser</code> doesn't inherit from <code>BasicUser</code>.</p> <p>Here's a function that creates an instance of one of these classes if you pass it the right class object:</p> <pre><code>def new_user(user_class):\n    user = user_class()\n    # (Here we could write the user object to a database)\n    return user\n</code></pre> <p>How would we annotate this function?  Without the ability to parameterize <code>type</code>, the best we could do would be:</p> <pre><code>def new_user(user_class: type) -&gt; User:\n    # Same  implementation as before\n</code></pre> <p>This seems reasonable, except that in the following example, mypy doesn't see that the <code>buyer</code> variable has type <code>ProUser</code>:</p> <pre><code>buyer = new_user(ProUser)\nbuyer.pay()  # Rejected, not a method on User\n</code></pre> <p>However, using the <code>type[C]</code> syntax and a type variable with an upper bound (see <code>type-variable-upper-bound</code>) we can do better:</p> <pre><code>U = TypeVar('U', bound=User)\n\ndef new_user(user_class: type[U]) -&gt; U:\n    # Same  implementation as before\n</code></pre> <p>Now mypy will infer the correct type of the result when we call <code>new_user()</code> with a specific subclass of <code>User</code>:</p> <pre><code>beginner = new_user(BasicUser)  # Inferred type is BasicUser\nbeginner.upgrade()  # OK\n</code></pre> <p>Note</p> <p>The value corresponding to <code>type[C]</code> must be an actual class object that's a subtype of <code>C</code>.  Its constructor must be compatible with the constructor of <code>C</code>.  If <code>C</code> is a type variable, its upper bound must be a class object.</p> <p>For more details about <code>type[]</code> and <code>typing.Type[]</code>, see <code>PEP 484: The type of class objects &lt;484#the-type-of-class-objects&gt;</code>.</p> <p>The type of class objects</p> <p>(Freely after <code>PEP 484: The type of class objects</code>.)</p> <p>Sometimes you want to talk about class objects that inherit from a given class.  This can be spelled as <code>type[C]</code> (or, on Python 3.8 and lower, <code>typing.Type[C]</code>) where <code>C</code> is a class.  In other words, when <code>C</code> is the name of a class, using <code>C</code> to annotate an argument declares that the argument is an instance of <code>C</code> (or of a subclass of <code>C</code>), but using <code>type[C]</code> as an argument annotation declares that the argument is a class object deriving from <code>C</code> (or <code>C</code> itself).</p> <p>For example, assume the following classes:</p> <pre><code>class User:\n    # Defines fields like name, email\n\nclass BasicUser(User):\n    def upgrade(self):\n        \"\"\"Upgrade to Pro\"\"\"\n\nclass ProUser(User):\n    def pay(self):\n        \"\"\"Pay bill\"\"\"\n</code></pre> <p>Note that <code>ProUser</code> doesn't inherit from <code>BasicUser</code>.</p> <p>Here's a function that creates an instance of one of these classes if you pass it the right class object:</p> <pre><code>def new_user(user_class):\n    user = user_class()\n    # (Here we could write the user object to a database)\n    return user\n</code></pre> <p>How would we annotate this function?  Without the ability to parameterize <code>type</code>, the best we could do would be:</p> <pre><code>def new_user(user_class: type) -&gt; User:\n    # Same  implementation as before\n</code></pre> <p>This seems reasonable, except that in the following example, mypy doesn't see that the <code>buyer</code> variable has type <code>ProUser</code>:</p> <pre><code>buyer = new_user(ProUser)\nbuyer.pay()  # Rejected, not a method on User\n</code></pre> <p>However, using the <code>type[C]</code> syntax and a type variable with an upper bound (see <code>type-variable-upper-bound</code>) we can do better:</p> <pre><code>U = TypeVar('U', bound=User)\n\ndef new_user(user_class: type[U]) -&gt; U:\n    # Same  implementation as before\n</code></pre> <p>Now mypy will infer the correct type of the result when we call <code>new_user()</code> with a specific subclass of <code>User</code>:</p> <pre><code>beginner = new_user(BasicUser)  # Inferred type is BasicUser\nbeginner.upgrade()  # OK\n</code></pre> <p>Note</p> <p>The value corresponding to <code>type[C]</code> must be an actual class object that's a subtype of <code>C</code>.  Its constructor must be compatible with the constructor of <code>C</code>.  If <code>C</code> is a type variable, its upper bound must be a class object.</p> <p>For more details about <code>type[]</code> and <code>typing.Type[]</code>, see <code>PEP 484: The type of class objects &lt;484#the-type-of-class-objects&gt;</code>.</p>"},{"location":"mypy/kind_of_types/#\u751f\u6210\u5668","title":"\u751f\u6210\u5668","text":"\u4e2d\u6587\u82f1\u6587 <p>A basic generator that only yields values can be succinctly annotated as having a return type of either <code>Iterator[YieldType]</code> or <code>Iterable[YieldType]</code>. For example:</p> <pre><code>def squares(n: int) -&gt; Iterator[int]:\n    for i in range(n):\n        yield i * i\n</code></pre> <p>A good rule of thumb is to annotate functions with the most specific return type possible. However, you should also take care to avoid leaking implementation details into a function's public API. In keeping with these two principles, prefer <code>Iterator[YieldType]</code> over <code>Iterable[YieldType]</code> as the return-type annotation for a generator function, as it lets mypy know that users are able to call <code>next</code> on the object returned by the function. Nonetheless, bear in mind that <code>Iterable</code> may sometimes be the better option, if you consider it an implementation detail that <code>next()</code> can be called on the object returned by your function.</p> <p>If you want your generator to accept values via the <code>generator.send</code> method or return a value, on the other hand, you should use the <code>Generator[YieldType, SendType, ReturnType]</code> generic type instead of either <code>Iterator</code> or <code>Iterable</code>. For example:</p> <pre><code>def echo_round() -&gt; Generator[int, float, str]:\n    sent = yield 0\n    while sent &gt;= 0:\n        sent = yield round(sent)\n    return 'Done'\n</code></pre> <p>Note that unlike many other generics in the typing module, the <code>SendType</code> of <code>typing.Generator</code> behaves contravariantly, not covariantly or invariantly.</p> <p>If you do not plan on receiving or returning values, then set the <code>SendType</code> or <code>ReturnType</code> to <code>None</code>, as appropriate. For example, we could have annotated the first example as the following:</p> <pre><code>def squares(n: int) -&gt; Generator[int, None, None]:\n    for i in range(n):\n        yield i * i\n</code></pre> <p>This is slightly different from using <code>Iterator[int]</code> or <code>Iterable[int]</code>, since generators have <code>generator.close</code>, <code>generator.send</code>, and <code>generator.throw</code> methods that generic iterators and iterables don't. If you plan to call these methods on the returned generator, use the <code>typing.Generator</code> type instead of <code>typing.Iterator</code> or <code>typing.Iterable</code>.</p> <p>Generators</p> <p>A basic generator that only yields values can be succinctly annotated as having a return type of either <code>Iterator[YieldType]</code> or <code>Iterable[YieldType]</code>. For example:</p> <pre><code>def squares(n: int) -&gt; Iterator[int]:\n    for i in range(n):\n        yield i * i\n</code></pre> <p>A good rule of thumb is to annotate functions with the most specific return type possible. However, you should also take care to avoid leaking implementation details into a function's public API. In keeping with these two principles, prefer <code>Iterator[YieldType]</code> over <code>Iterable[YieldType]</code> as the return-type annotation for a generator function, as it lets mypy know that users are able to call <code>next</code> on the object returned by the function. Nonetheless, bear in mind that <code>Iterable</code> may sometimes be the better option, if you consider it an implementation detail that <code>next()</code> can be called on the object returned by your function.</p> <p>If you want your generator to accept values via the <code>generator.send</code> method or return a value, on the other hand, you should use the <code>Generator[YieldType, SendType, ReturnType]</code> generic type instead of either <code>Iterator</code> or <code>Iterable</code>. For example:</p> <pre><code>def echo_round() -&gt; Generator[int, float, str]:\n    sent = yield 0\n    while sent &gt;= 0:\n        sent = yield round(sent)\n    return 'Done'\n</code></pre> <p>Note that unlike many other generics in the typing module, the <code>SendType</code> of <code>typing.Generator</code> behaves contravariantly, not covariantly or invariantly.</p> <p>If you do not plan on receiving or returning values, then set the <code>SendType</code> or <code>ReturnType</code> to <code>None</code>, as appropriate. For example, we could have annotated the first example as the following:</p> <pre><code>def squares(n: int) -&gt; Generator[int, None, None]:\n    for i in range(n):\n        yield i * i\n</code></pre> <p>This is slightly different from using <code>Iterator[int]</code> or <code>Iterable[int]</code>, since generators have <code>generator.close</code>, <code>generator.send</code>, and <code>generator.throw</code> methods that generic iterators and iterables don't. If you plan to call these methods on the returned generator, use the <code>typing.Generator</code> type instead of <code>typing.Iterator</code> or <code>typing.Iterable</code>.</p>"},{"location":"mypy/literal_and_enum/","title":"\u5b57\u9762\u91cf\u548c\u679a\u4e3e","text":"<p>Literal types and Enums</p>"},{"location":"mypy/literal_and_enum/#\u5b57\u9762\u91cf\u7c7b\u578b","title":"\u5b57\u9762\u91cf\u7c7b\u578b","text":"<p>Literal types</p> \u4e2d\u6587\u82f1\u6587 <p>\u5b57\u9762\u91cf\u7c7b\u578b\u53ef\u8ba9\u60a8\u6307\u793a\u8868\u8fbe\u5f0f\u7b49\u4e8e\u67d0\u4e2a\u7279\u5b9a\u7684\u539f\u59cb\u503c\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u7528 <code>Literal[\"foo\"]</code> \u7c7b\u578b\u6ce8\u91ca\u4e00\u4e2a\u53d8\u91cf\uff0cmypy \u5c06\u7406\u89e3\u8be5\u53d8\u91cf\u4e0d\u4ec5\u662f <code>str</code> \u7c7b\u578b\uff0c\u800c\u4e14\u8fd8\u7b49\u4e8e\u5b57\u7b26\u4e32 <code>\"foo\"</code>\u3002</p> <p>\u5f53\u6ce8\u91ca\u6839\u636e\u8c03\u7528\u8005\u63d0\u4f9b\u7684\u786e\u5207\u503c\u800c\u8868\u73b0\u4e0d\u540c\u7684\u51fd\u6570\u65f6\uff0c\u6b64\u529f\u80fd\u4e3b\u8981\u6709\u7528\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u51fd\u6570\u201cfetch_data(...)\u201d\uff0c\u5982\u679c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u201cTrue\u201d\uff0c\u5219\u8fd4\u56de \u201cbytes\u201d \uff1b\u5982\u679c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u201cFalse\u201d\uff0c\u5219\u8fd4\u56de\u201cstr\u201d\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u201cLiteral[...]\u201d\u548c\u91cd\u8f7d\u4e3a\u6b64\u51fd\u6570\u6784\u9020\u7cbe\u786e\u7684\u7c7b\u578b\u7b7e\u540d\uff1a</p> <pre><code>from typing import overload, Union, Literal\n\n# \u524d\u4e24\u4e2a\u91cd\u8f7d\u4f7f\u7528 Literal[...]\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u7cbe\u786e\u7684\u8fd4\u56de\u7c7b\u578b\uff1a\n\n@overload\ndef fetch_data(raw: Literal[True]) -&gt; bytes: ...\n@overload\ndef fetch_data(raw: Literal[False]) -&gt; str: ...\n\n# \u6700\u540e\u4e00\u4e2a\u91cd\u8f7d\u662f\u8c03\u7528\u8005\u63d0\u4f9b\u5e38\u89c4\u5e03\u5c14\u503c\u65f6\u7684\u540e\u5907\uff1a\n\n@overload\ndef fetch_data(raw: bool) -&gt; Union[bytes, str]: ...\n\ndef fetch_data(raw: bool) -&gt; Union[bytes, str]:\n    # \u7701\u7565\u5b9e\u73b0\n    ...\n\nreveal_type(fetch_data(True))        # Revealed type is \"bytes\"\nreveal_type(fetch_data(False))       # Revealed type is \"str\"\n\n# \u6ca1\u6709\u6ce8\u91ca\u58f0\u660e\u7684\u53d8\u91cf\u5c06\u7ee7\u7eed\u5177\u6709\u201cbool\u201d\u7684\u63a8\u65ad\u7c7b\u578b\u3002\n\nvariable = True\nreveal_type(fetch_data(variable))    # Revealed type is \"Union[bytes, str]\"\n</code></pre> <p>Note</p> <p>\u672c\u9875\u4e2d\u7684\u793a\u4f8b\u4ece\u201ctyping\u201d\u6a21\u5757\u5bfc\u5165\u201cLiteral\u201d\u4ee5\u53ca\u201cFinal\u201d\u548c\u201cTypedDict\u201d\u3002 \u8fd9\u4e9b\u7c7b\u578b\u5df2\u6dfb\u52a0\u5230 Python 3.8 \u4e2d\u7684\u201ctyping\u201d\u4e2d\uff0c\u4f46\u4e5f\u53ef\u4ee5\u901a\u8fc7\u201ctyping_extensions\u201d\u5305\u5728 Python 3.4 - 3.7 \u4e2d\u4f7f\u7528\u3002</p> <p>Literal types let you indicate that an expression is equal to some specific primitive value. For example, if we annotate a variable with type <code>Literal[\"foo\"]</code>, mypy will understand that variable is not only of type <code>str</code>, but is also equal to specifically the string <code>\"foo\"</code>.</p> <p>This feature is primarily useful when annotating functions that behave differently based on the exact value the caller provides. For example, suppose we have a function <code>fetch_data(...)</code> that returns <code>bytes</code> if the first argument is <code>True</code>, and <code>str</code> if it's <code>False</code>. We can construct a precise type signature for this function using <code>Literal[...]</code> and overloads:</p> <pre><code>from typing import overload, Union, Literal\n\n# The first two overloads use Literal[...] so we can\n# have precise return types:\n\n@overload\ndef fetch_data(raw: Literal[True]) -&gt; bytes: ...\n@overload\ndef fetch_data(raw: Literal[False]) -&gt; str: ...\n\n# The last overload is a fallback in case the caller\n# provides a regular bool:\n\n@overload\ndef fetch_data(raw: bool) -&gt; Union[bytes, str]: ...\n\ndef fetch_data(raw: bool) -&gt; Union[bytes, str]:\n    # Implementation is omitted\n    ...\n\nreveal_type(fetch_data(True))        # Revealed type is \"bytes\"\nreveal_type(fetch_data(False))       # Revealed type is \"str\"\n\n# Variables declared without annotations will continue to have an\n# inferred type of 'bool'.\n\nvariable = True\nreveal_type(fetch_data(variable))    # Revealed type is \"Union[bytes, str]\"\n</code></pre> <p>Note</p> <p>The examples in this page import <code>Literal</code> as well as <code>Final</code> and <code>TypedDict</code> from the <code>typing</code> module. These types were added to <code>typing</code> in Python 3.8, but are also available for use in Python 3.4 - 3.7 via the <code>typing_extensions</code> package.</p>"},{"location":"mypy/literal_and_enum/#\u53c2\u6570\u5316\u5b57\u9762\u91cf","title":"\u53c2\u6570\u5316\u5b57\u9762\u91cf","text":"<p>Parameterizing Literals</p> \u4e2d\u6587\u82f1\u6587 <p>\u5b57\u9762\u91cf\u7c7b\u578b\u53ef\u4ee5\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a\u6587\u5b57 bool\u3001int\u3001str\u3001byte \u548c enum \u503c\u3002 \u4f46\u662f\uff0c\u5b57\u9762\u91cf\u7c7b\u578b\u4e0d\u80fd\u5305\u542b\u4efb\u610f\u8868\u8fbe\u5f0f\uff1a\u8bf8\u5982\u201cLiteral[my_string.trim()]\u201d\u3001\u201cLiteral[x &gt; 3]\u201d\u6216\u201cLiteral[3j + 4]\u201d\u4e4b\u7c7b\u7684\u7c7b\u578b\u90fd\u662f\u975e\u6cd5\u7684\u3002</p> <p>\u5305\u542b\u4e24\u4e2a\u6216\u591a\u4e2a\u503c\u7684\u6587\u5b57\u76f8\u5f53\u4e8e\u8fd9\u4e9b\u503c\u7684\u5e76\u96c6\u3002 \u56e0\u6b64\uff0c <code>Literal[-3, b\"foo\", MyEnum.A]</code> \u76f8\u5f53\u4e8e <code>Union[Literal[-3], Literal[b] \u201cfoo\u201d]\uff0c</code>Literal[[MyEnum.A]]`\u3002 \u8fd9\u4f7f\u5f97\u7f16\u5199\u6d89\u53ca\u6587\u5b57\u7684\u66f4\u590d\u6742\u7684\u7c7b\u578b\u53d8\u5f97\u66f4\u52a0\u65b9\u4fbf\u3002</p> <p>\u5b57\u9762\u91cf\u7c7b\u578b\u4e5f\u53ef\u80fd\u5305\u542b\u201cNone\u201d\u3002 Mypy \u4f1a\u5c06 <code>Literal[None]</code> \u89c6\u4e3a\u7b49\u540c\u4e8e <code>None</code>\u3002 \u8fd9\u610f\u5473\u7740 <code>Literal[4, None]</code>\u3001<code>Union[Literal[4], None]</code> \u548c <code>Optional[Literal[4]]</code> \u90fd\u662f\u7b49\u4ef7\u7684\u3002</p> <p>\u6587\u5b57\u8fd8\u53ef\u4ee5\u5305\u542b\u5176\u4ed6\u5b57\u9762\u91cf\u7c7b\u578b\u7684\u522b\u540d\u3002 \u4f8b\u5982\uff0c\u4ee5\u4e0b\u7a0b\u5e8f\u662f\u5408\u6cd5\u7684\uff1a</p> <pre><code>PrimaryColors = Literal[\"red\", \"blue\", \"yellow\"]\nSecondaryColors = Literal[\"purple\", \"green\", \"orange\"]\nAllowedColors = Literal[PrimaryColors, SecondaryColors]\n\ndef paint(color: AllowedColors) -&gt; None: ...\n\npaint(\"red\")        # Type checks!\npaint(\"turquoise\")  # Does not type check\n</code></pre> <p>\u5b57\u9762\u91cf\u4e0d\u80fd\u5305\u542b\u4efb\u4f55\u5176\u4ed6\u7c7b\u578b\u6216\u8868\u8fbe\u5f0f\u3002 \u8fd9\u610f\u5473\u7740\u6267\u884c <code>Literal[my_instance]</code>\u3001<code>Literal[Any]</code>\u3001<code>Literal[3.14]</code> \u6216 <code>Literal[{\"foo\": 2, \"bar\": 5}]</code> \u90fd\u662f\u975e\u6cd5\u7684\u3002</p> <p>Literal types may contain one or more literal bools, ints, strs, bytes, and enum values. However, literal types cannot contain arbitrary expressions: types like <code>Literal[my_string.trim()]</code>, <code>Literal[x &gt; 3]</code>, or <code>Literal[3j + 4]</code> are all illegal.</p> <p>Literals containing two or more values are equivalent to the union of those values.= So, <code>Literal[-3, b\"foo\", MyEnum.A]</code> is equivalent to= <code>Union[Literal[-3], Literal[b\"foo\"], Literal[MyEnum.A]]</code>. This makes writing more= complex types involving literals a little more convenient.</p> <p>Literal types may also contain <code>None</code>. Mypy will treat <code>Literal[None]</code> as being equivalent to just <code>None</code>. This means that <code>Literal[4, None]</code>, <code>Union[Literal[4], None]</code>, and <code>Optional[Literal[4]]</code> are all equivalent.</p> <p>Literals may also contain aliases to other literal types. For example, the following program is legal:</p> <pre><code>PrimaryColors = Literal[\"red\", \"blue\", \"yellow\"]\nSecondaryColors = Literal[\"purple\", \"green\", \"orange\"]\nAllowedColors = Literal[PrimaryColors, SecondaryColors]\n\ndef paint(color: AllowedColors) -&gt; None: ...\n\npaint(\"red\")        # Type checks!\npaint(\"turquoise\")  # Does not type check\n</code></pre> <p>Literals may not contain any other kind of type or expression. This means doing <code>Literal[my_instance]</code>, <code>Literal[Any]</code>, <code>Literal[3.14]</code>, or <code>Literal[{\"foo\": 2, \"bar\": 5}]</code> are all illegal.</p>"},{"location":"mypy/literal_and_enum/#\u58f0\u660e\u5b57\u9762\u91cf","title":"\u58f0\u660e\u5b57\u9762\u91cf","text":"<p>Declaring literal variables</p> \u4e2d\u6587\u82f1\u6587 <p>\u60a8\u5fc5\u987b\u663e\u5f0f\u5411\u53d8\u91cf\u6dfb\u52a0\u6ce8\u91ca\u4ee5\u58f0\u660e\u5b83\u5177\u6709\u5b57\u9762\u91cf\u7c7b\u578b\uff1a</p> <pre><code>a: Literal[19] = 19\nreveal_type(a)          # Revealed type is \"Literal[19]\"\n</code></pre> <p>\u4e3a\u4e86\u4fdd\u6301\u5411\u540e\u517c\u5bb9\u6027\uff0c\u6ca1\u6709\u6b64\u6ce8\u89e3\u7684\u53d8\u91cf\u4e0d\u5047\u5b9a\u4e3a\u5b57\u9762\u91cf\uff1a</p> <pre><code>b = 19\nreveal_type(b)          # Revealed type is \"int\"\n</code></pre> <p>\u5982\u679c\u60a8\u53d1\u73b0\u5728\u7c7b\u578b\u63d0\u793a\u4e2d\u91cd\u590d\u53d8\u91cf\u7684\u503c\u5f88\u4e4f\u5473\uff0c\u60a8\u53ef\u4ee5\u5c06\u53d8\u91cf\u66f4\u6539\u4e3a\u201cFinal\u201d\uff08\u8bf7\u53c2\u9605\u201cfinal_attrs\u201d\uff09\uff1a</p> <pre><code>from typing import Final, Literal\n\ndef expects_literal(x: Literal[19]) -&gt; None: pass\n\nc: Final = 19\n\nreveal_type(c)          # Revealed type is \"Literal[19]?\"\nexpects_literal(c)      # ...and this type checks!\n</code></pre> <p>\u5982\u679c\u60a8\u6ca1\u6709\u5728 \u201cFinal\u201d \u4e2d\u63d0\u4f9b\u663e\u5f0f\u7c7b\u578b\uff0c\u5219 \u201cc\u201d \u7684\u7c7b\u578b\u5c06\u53d8\u4e3a\u4e0a\u4e0b\u6587\u76f8\u5173\uff1a\u5728\u6267\u884c\u7c7b\u578b\u68c0\u67e5\u4e4b\u524d\uff0c\u53ea\u8981\u4f7f\u7528\u539f\u59cb\u5206\u914d\u7684\u503c\uff0cmypy \u57fa\u672c\u4e0a\u90fd\u4f1a\u5c1d\u8bd5\u201c\u66ff\u6362\u201d\u539f\u59cb\u5206\u914d\u7684\u503c\u3002 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48 <code>c</code> \u7684\u663e\u793a\u7c7b\u578b\u662f <code>Literal[19]?</code>\uff1a\u672b\u5c3e\u7684\u95ee\u53f7\u53cd\u6620\u4e86\u8fd9\u79cd\u4e0a\u4e0b\u6587\u76f8\u5173\u7684\u6027\u8d28\u3002</p> <p>\u4f8b\u5982\uff0cmypy \u5c06\u5bf9\u4e0a\u8ff0\u7a0b\u5e8f\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\uff0c\u51e0\u4e4e\u5c31\u50cf\u8fd9\u6837\u7f16\u5199\u7684\uff1a</p> <pre><code>from typing import Final, Literal\n\ndef expects_literal(x: Literal[19]) -&gt; None: pass\n\nreveal_type(19)\nexpects_literal(19)\n</code></pre> <p>\u8fd9\u610f\u5473\u7740\u867d\u7136\u5c06\u53d8\u91cf\u66f4\u6539\u4e3a\u201cFinal\u201d\u4e0e\u6dfb\u52a0\u663e\u5f0f\u201cLiteral[...]\u201d\u6ce8\u91ca\u5e76\u4e0d\u5b8c\u5168\u76f8\u540c\uff0c\u4f46\u5728\u5b9e\u8df5\u4e2d\u901a\u5e38\u4f1a\u4ea7\u751f\u76f8\u540c\u7684\u6548\u679c\u3002</p> <p>\u4e0a\u4e0b\u6587\u76f8\u5173\u7c7b\u578b\u4e0e\u771f\u5b9e\u5b57\u9762\u91cf\u7c7b\u578b\u7684\u884c\u4e3a\u4e0d\u540c\u7684\u4e3b\u8981\u60c5\u51b5\u662f\u5f53\u60a8\u5c1d\u8bd5\u5728\u672a\u660e\u786e\u671f\u671b\u201cLiteral[...]\u201d\u7684\u5730\u65b9\u4f7f\u7528\u8fd9\u4e9b\u7c7b\u578b\u65f6\u3002 \u4f8b\u5982\uff0c\u6bd4\u8f83\u548c\u5bf9\u6bd4\u5f53\u60a8\u5c1d\u8bd5\u5c06\u8fd9\u4e9b\u7c7b\u578b\u9644\u52a0\u5230\u5217\u8868\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1a</p> <pre><code>from typing import Final, Literal\n\na: Final = 19\nb: Literal[19] = 19\n\n# Mypy \u4f1a\u9009\u62e9\u5728\u8fd9\u91cc\u63a8\u65ad list[int]\u3002\nlist_of_ints = []\nlist_of_ints.append(a)\nreveal_type(list_of_ints)  # Revealed type is \"list[int]\"\n\n# \u4f46\u662f\uff0c\u5982\u679c\u60a8\u8981\u9644\u52a0\u7684\u53d8\u91cf\u662f\u663e\u5f0f\u6587\u5b57\uff0c\u5219 mypy \u5c06\u63a8\u65ad list[Literal[19]]\u3002\nlist_of_lits = []\nlist_of_lits.append(b)\nreveal_type(list_of_lits)  # Revealed type is \"list[Literal[19]]\"\n</code></pre> <p>You must explicitly add an annotation to a variable to declare that it has a literal type:</p> <pre><code>a: Literal[19] = 19\nreveal_type(a)          # Revealed type is \"Literal[19]\"\n</code></pre> <p>In order to preserve backwards-compatibility, variables without this annotation are not assumed to be literals:</p> <pre><code>b = 19\nreveal_type(b)          # Revealed type is \"int\"\n</code></pre> <p>If you find repeating the value of the variable in the type hint to be tedious, you can instead change the variable to be <code>Final</code> (see <code>final_attrs</code>):</p> <pre><code>from typing import Final, Literal\n\ndef expects_literal(x: Literal[19]) -&gt; None: pass\n\nc: Final = 19\n\nreveal_type(c)          # Revealed type is \"Literal[19]?\"\nexpects_literal(c)      # ...and this type checks!\n</code></pre> <p>If you do not provide an explicit type in the <code>Final</code>, the type of <code>c</code> becomes context-sensitive: mypy will basically try \"substituting\" the original assigned value whenever it's used before performing type checking. This is why the revealed type of <code>c</code> is <code>Literal[19]?</code>: the question mark at the end reflects this context-sensitive nature.</p> <p>For example, mypy will type check the above program almost as if it were written like so:</p> <pre><code>from typing import Final, Literal\n\ndef expects_literal(x: Literal[19]) -&gt; None: pass\n\nreveal_type(19)\nexpects_literal(19)\n</code></pre> <p>This means that while changing a variable to be <code>Final</code> is not quite the same thing as adding an explicit <code>Literal[...]</code> annotation, it often leads to the same effect in practice.</p> <p>The main cases where the behavior of context-sensitive vs true literal types differ are when you try using those types in places that are not explicitly expecting a <code>Literal[...]</code>. For example, compare and contrast what happens when you try appending these types to a list:</p> <pre><code>from typing import Final, Literal\n\na: Final = 19\nb: Literal[19] = 19\n\n# Mypy will choose to infer list[int] here.\nlist_of_ints = []\nlist_of_ints.append(a)\nreveal_type(list_of_ints)  # Revealed type is \"list[int]\"\n\n# But if the variable you're appending is an explicit Literal, mypy\n# will infer list[Literal[19]].\nlist_of_lits = []\nlist_of_lits.append(b)\nreveal_type(list_of_lits)  # Revealed type is \"list[Literal[19]]\"\n</code></pre>"},{"location":"mypy/literal_and_enum/#\u667a\u80fd\u7d22\u5f15","title":"\u667a\u80fd\u7d22\u5f15","text":"<p>Intelligent indexing</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Literal \u7c7b\u578b\u66f4\u7cbe\u786e\u5730\u7d22\u5f15\u5230\u7ed3\u6784\u5316\u5f02\u6784\u7c7b\u578b\uff0c\u4f8b\u5982\u5143\u7ec4\u3001NamedTuples \u548c TypedDicts\u3002 \u6b64\u529f\u80fd\u79f0\u4e3a\u201c\u667a\u80fd\u7d22\u5f15\u201d\u3002</p> <p>\u4f8b\u5982\uff0c\u5f53\u6211\u4eec\u4f7f\u7528\u67d0\u4e9b int \u7d22\u5f15\u5143\u7ec4\u65f6\uff0c\u63a8\u65ad\u7684\u7c7b\u578b\u901a\u5e38\u662f\u5143\u7ec4\u9879\u7c7b\u578b\u7684\u5e76\u96c6\u3002 \u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u53ea\u60f3\u8981\u4e0e\u67d0\u4e2a\u7279\u5b9a\u7d22\u5f15\u76f8\u5bf9\u5e94\u7684\u7c7b\u578b\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5b57\u9762\u91cf\u7c7b\u578b\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>from typing import TypedDict\n\ntup = (\"foo\", 3.4)\n\n# \u4f7f\u7528 int \u6587\u5b57\u8fdb\u884c\u7d22\u5f15\u53ef\u4ee5\u4e3a\u6211\u4eec\u63d0\u4f9b\u8be5\u7d22\u5f15\u7684\u786e\u5207\u7c7b\u578b\nreveal_type(tup[0])  # Revealed type is \"str\"\n\n# \u4f46\u662f\u5982\u679c\u6211\u4eec\u5e0c\u671b\u7d22\u5f15\u662f\u4e00\u4e2a\u53d8\u91cf\u600e\u4e48\u529e\uff1f \u901a\u5e38 mypy \u4e0d\u4f1a\u786e\u5207\u77e5\u9053\u7d22\u5f15\u662f\u4ec0\u4e48\uff0c\u56e0\u6b64\u4f1a\u8fd4\u56de\u4e0d\u592a\u7cbe\u786e\u7684\u7c7b\u578b\uff1a\nint_index = 0\nreveal_type(tup[int_index])  # Revealed type is \"Union[str, float]\"\n\n# \u4f46\u662f\u5982\u679c\u6211\u4eec\u4f7f\u7528 Literal \u7c7b\u578b\u6216 Final int\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u6062\u590d\u539f\u6765\u7684\u7cbe\u5ea6\uff1a\nlit_index: Literal[0] = 0\nfin_index: Final = 0\nreveal_type(tup[lit_index])  # Revealed type is \"str\"\nreveal_type(tup[fin_index])  # Revealed type is \"str\"\n\n# \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 TypedDict \u548c str \u952e\u505a\u540c\u6837\u7684\u4e8b\u60c5\uff1a\nclass MyDict(TypedDict):\n    name: str\n    main_id: int\n    backup_id: int\n\nd: MyDict = {\"name\": \"Saanvi\", \"main_id\": 111, \"backup_id\": 222}\nname_key: Final = \"name\"\nreveal_type(d[name_key])  # Revealed type is \"str\"\n\n# \u60a8\u8fd8\u53ef\u4ee5\u4f7f\u7528\u5b57\u9762\u91cf\u8054\u5408\u8fdb\u884c\u7d22\u5f15\nid_key: Literal[\"main_id\", \"backup_id\"]\nreveal_type(d[id_key])    # Revealed type is \"int\"\n</code></pre> <p>We can use Literal types to more precisely index into structured heterogeneous types such as tuples, NamedTuples, and TypedDicts. This feature is known as intelligent indexing.</p> <p>For example, when we index into a tuple using some int, the inferred type is normally the union of the tuple item types. However, if we want just the type corresponding to some particular index, we can use Literal types like so:</p> <pre><code>from typing import TypedDict\n\ntup = (\"foo\", 3.4)\n\n# Indexing with an int literal gives us the exact type for that index\nreveal_type(tup[0])  # Revealed type is \"str\"\n\n# But what if we want the index to be a variable? Normally mypy won't\n# know exactly what the index is and so will return a less precise type:\nint_index = 0\nreveal_type(tup[int_index])  # Revealed type is \"Union[str, float]\"\n\n# But if we use either Literal types or a Final int, we can gain back\n# the precision we originally had:\nlit_index: Literal[0] = 0\nfin_index: Final = 0\nreveal_type(tup[lit_index])  # Revealed type is \"str\"\nreveal_type(tup[fin_index])  # Revealed type is \"str\"\n\n# We can do the same thing with with TypedDict and str keys:\nclass MyDict(TypedDict):\n    name: str\n    main_id: int\n    backup_id: int\n\nd: MyDict = {\"name\": \"Saanvi\", \"main_id\": 111, \"backup_id\": 222}\nname_key: Final = \"name\"\nreveal_type(d[name_key])  # Revealed type is \"str\"\n\n# You can also index using unions of literals\nid_key: Literal[\"main_id\", \"backup_id\"]\nreveal_type(d[id_key])    # Revealed type is \"int\"\n</code></pre>"},{"location":"mypy/literal_and_enum/#\u6807\u8bb0\u8054\u5408\u7c7b\u578b","title":"\u6807\u8bb0\u8054\u5408\u7c7b\u578b","text":"<p>Tagged unions</p> \u4e2d\u6587\u82f1\u6587 <p>\u5f53\u60a8\u6709\u7c7b\u578b\u7684\u8054\u5408\u65f6\uff0c\u901a\u5e38\u53ef\u4ee5\u4f7f\u7528\u201cisinstance\u201d\u68c0\u67e5\u6765\u533a\u5206\u8054\u5408\u4e2d\u7684\u6bcf\u79cd\u7c7b\u578b\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u60a8\u6709\u4e00\u4e2a\u7c7b\u578b\u4e3a\u201cUnion[int, str]\u201d\u7684\u53d8\u91cf\u201cx\u201d\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u6267\u884c\u201cif isinstance(x, int): ..\u201d\u6765\u7f16\u5199\u4e00\u4e9b\u4ec5\u5f53\u201cx\u201d\u662f int \u65f6\u624d\u8fd0\u884c\u7684\u4ee3\u7801\u3002 .`.</p> <p>\u7136\u800c\uff0c\u8fd9\u6837\u505a\u5e76\u4e0d\u603b\u662f\u53ef\u80fd\u6216\u65b9\u4fbf\u3002 \u4f8b\u5982\uff0c\u4e0d\u53ef\u80fd\u4f7f\u7528\u201cisinstance\u201d\u6765\u533a\u5206\u4e24\u4e2a\u4e0d\u540c\u7684 TypedDict\uff0c\u56e0\u4e3a\u5728\u8fd0\u884c\u65f6\uff0c\u60a8\u7684\u53d8\u91cf\u53ea\u662f\u4e00\u4e2a\u5b57\u5178\u3002</p> <p>\u76f8\u53cd\uff0c\u60a8\u53ef\u4ee5\u505a\u7684\u662f\u4f7f\u7528\u4e0d\u540c\u7684\u6587\u5b57\u7c7b\u578b\u6807\u7b7e\u6216\u6807\u8bb0\u60a8\u7684 TypedDicts\u3002 \u7136\u540e\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u68c0\u67e5\u6807\u7b7e\u6765\u533a\u5206\u6bcf\u79cd TypedDict\uff1a</p> <pre><code>from typing import Literal, TypedDict, Union\n\nclass NewJobEvent(TypedDict):\n    tag: Literal[\"new-job\"]\n    job_name: str\n    config_file_path: str\n\nclass CancelJobEvent(TypedDict):\n    tag: Literal[\"cancel-job\"]\n    job_id: int\n\nEvent = Union[NewJobEvent, CancelJobEvent]\n\ndef process_event(event: Event) -&gt; None:\n    # \u7531\u4e8e\u6211\u4eec\u786e\u4fdd\u4e24\u4e2a TypedDict \u90fd\u6709\u4e00\u4e2a\u540d\u4e3a\u201ctag\u201d\u7684\u952e\uff0c\u56e0\u6b64\u6267\u884c\u201cevent[\u201ctag\u201d]\u201d\u662f\u5b89\u5168\u7684\u3002 \n    # \u8be5\u8868\u8fbe\u5f0f\u901a\u5e38\u5177\u6709 Literal[\"new-job\", \"cancel-job\"] \u7c7b\u578b\uff0c\n    # \u4f46\u4e0b\u9762\u7684\u68c0\u67e5\u4f1a\u5c06\u7c7b\u578b\u8303\u56f4\u7f29\u5c0f\u4e3a Literal[\"new-job\"] \u6216 Literal[\"cancel-job\"]\u3002\n    #\n    # \u8fd9\u53c8\u5c06\u201cevent\u201d\u7684\u7c7b\u578b\u7f29\u5c0f\u4e3a NewJobEvent \u6216 CancelJobEvent\u3002\n    if event[\"tag\"] == \"new-job\":\n        print(event[\"job_name\"])\n    else:\n        print(event[\"job_id\"])\n</code></pre> <p>\u867d\u7136\u6b64\u529f\u80fd\u5728\u4f7f\u7528 TypedDicts \u65f6\u975e\u5e38\u6709\u7528\uff0c\u4f46\u60a8\u4e5f\u53ef\u4ee5\u5bf9\u5e38\u89c4\u5bf9\u8c61\u3001\u5143\u7ec4\u6216\u547d\u540d\u5143\u7ec4\u4f7f\u7528\u76f8\u540c\u7684\u6280\u672f\u3002</p> <p>\u7c7b\u4f3c\u5730\uff0c\u6807\u7b7e\u4e0d\u9700\u8981\u662f\u4e13\u95e8\u7684 str \u6587\u5b57\uff1a\u5b83\u4eec\u53ef\u4ee5\u662f\u60a8\u901a\u5e38\u53ef\u4ee5\u5728\u201cif\u201d\u8bed\u53e5\u7b49\u4e2d\u7f29\u5c0f\u8303\u56f4\u7684\u4efb\u4f55\u7c7b\u578b\u3002  \u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u5c06\u6807\u7b7e\u8bbe\u7f6e\u4e3a int \u6216 Enum Literals\uff0c\u751a\u81f3\u53ef\u4ee5\u4f7f\u7528\u201cisinstance()\u201d\u7f29\u5c0f\u5e38\u89c4\u7c7b\uff1a</p> <pre><code>from typing import Generic, TypeVar, Union\n\nT = TypeVar('T')\n\nclass Wrapper(Generic[T]):\n    def __init__(self, inner: T) -&gt; None:\n        self.inner = inner\n\ndef process(w: Union[Wrapper[int], Wrapper[str]]) -&gt; None:\n    # \u6267\u884c\u201cif isinstance(w, Wrapper[int])\u201d\u4e0d\u8d77\u4f5c\u7528\uff1aisinstance \u8981\u6c42\u7b2c\u4e8c\u4e2a\u53c2\u6570\u59cb\u7ec8\u662f*\u5df2\u5220\u9664\u7684*\u7c7b\u578b\uff0c\u6ca1\u6709\u6cdb\u578b\u3002 \u8fd9\u662f\u56e0\u4e3a\u6cdb\u578b\u662f\u4e00\u4e2a\u4ec5\u8f93\u5165\u7684\u6982\u5ff5\uff0c\u5e76\u4e14\u5728\u8fd0\u884c\u65f6\u4e0d\u4ee5\u201cisinstance\u201d\u59cb\u7ec8\u53ef\u4ee5\u68c0\u67e5\u7684\u65b9\u5f0f\u5b58\u5728\u3002\n    #\n    # \u7136\u800c\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u68c0\u67e5\u201cw.inner\u201d\u7684\u7c7b\u578b\u6765\u7f29\u5c0f\u201cw\u201d\u672c\u8eab\u6765\u56de\u907f\u8fd9\u4e2a\u95ee\u9898\uff1a\n    if isinstance(w.inner, int):\n        reveal_type(w)  # Revealed type is \"Wrapper[int]\"\n    else:\n        reveal_type(w)  # Revealed type is \"Wrapper[str]\"\n</code></pre> <p>\u5728\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u6b64\u529f\u80fd\u6709\u65f6\u79f0\u4e3a\u201c\u6c42\u548c\u7c7b\u578b\u201d\u6216\u201c\u53ef\u533a\u5206\u8054\u5408\u7c7b\u578b\u201d\u3002</p> <p>When you have a union of types, you can normally discriminate between each type in the union by using <code>isinstance</code> checks. For example, if you had a variable <code>x</code> of type <code>Union[int, str]</code>, you could write some code that runs only if <code>x</code> is an int by doing <code>if isinstance(x, int): ...</code>.</p> <p>However, it is not always possible or convenient to do this. For example, it is not possible to use <code>isinstance</code> to distinguish between two different TypedDicts since at runtime, your variable will simply be just a dict.</p> <p>Instead, what you can do is label or tag your TypedDicts with a distinct Literal type. Then, you can discriminate between each kind of TypedDict by checking the label:</p> <pre><code>from typing import Literal, TypedDict, Union\n\nclass NewJobEvent(TypedDict):\n    tag: Literal[\"new-job\"]\n    job_name: str\n    config_file_path: str\n\nclass CancelJobEvent(TypedDict):\n    tag: Literal[\"cancel-job\"]\n    job_id: int\n\nEvent = Union[NewJobEvent, CancelJobEvent]\n\ndef process_event(event: Event) -&gt; None:\n    # Since we made sure both TypedDicts have a key named 'tag', it's\n    # safe to do 'event[\"tag\"]'. This expression normally has the type\n    # Literal[\"new-job\", \"cancel-job\"], but the check below will narrow\n    # the type to either Literal[\"new-job\"] or Literal[\"cancel-job\"].\n    #\n    # This in turns narrows the type of 'event' to either NewJobEvent\n    # or CancelJobEvent.\n    if event[\"tag\"] == \"new-job\":\n        print(event[\"job_name\"])\n    else:\n        print(event[\"job_id\"])\n</code></pre> <p>While this feature is mostly useful when working with TypedDicts, you can also use the same technique with regular objects, tuples, or namedtuples.</p> <p>Similarly, tags do not need to be specifically str Literals: they can be any type you can normally narrow within <code>if</code> statements and the like. For example, you could have your tags be int or Enum Literals or even regular classes you narrow using <code>isinstance()</code>:</p> <pre><code>from typing import Generic, TypeVar, Union\n\nT = TypeVar('T')\n\nclass Wrapper(Generic[T]):\n    def __init__(self, inner: T) -&gt; None:\n        self.inner = inner\n\ndef process(w: Union[Wrapper[int], Wrapper[str]]) -&gt; None:\n    # Doing `if isinstance(w, Wrapper[int])` does not work: isinstance requires\n    # that the second argument always be an *erased* type, with no generics.\n    # This is because generics are a typing-only concept and do not exist at\n    # runtime in a way `isinstance` can always check.\n    #\n    # However, we can side-step this by checking the type of `w.inner` to\n    # narrow `w` itself:\n    if isinstance(w.inner, int):\n        reveal_type(w)  # Revealed type is \"Wrapper[int]\"\n    else:\n        reveal_type(w)  # Revealed type is \"Wrapper[str]\"\n</code></pre> <p>This feature is sometimes called \"sum types\" or \"discriminated union types\" in other programming languages.</p>"},{"location":"mypy/literal_and_enum/#\u8be6\u5c3d\u6027\u68c0\u67e5","title":"\u8be6\u5c3d\u6027\u68c0\u67e5","text":"<p>Exhaustiveness checking</p> \u4e2d\u6587\u82f1\u6587 <p>\u60a8\u53ef\u80fd\u60f3\u8981\u68c0\u67e5\u67d0\u4e9b\u4ee3\u7801\u662f\u5426\u6db5\u76d6\u4e86\u6240\u6709\u53ef\u80fd\u7684\u201cLiteral\u201d\u6216\u201cEnum\u201d\u60c5\u51b5\u3002 \u4f8b\u5b50\uff1a</p> <pre><code>from typing import Literal\n\nPossibleValues = Literal['one', 'two']\n\ndef validate(x: PossibleValues) -&gt; bool:\n    if x == 'one':\n        return True\n    elif x == 'two':\n        return False\n    raise ValueError(f'Invalid value: {x}')\n\nassert validate('one') is True\nassert validate('two') is False\n</code></pre> <p>\u4e0a\u9762\u7684\u4ee3\u7801\u5f88\u5bb9\u6613\u51fa\u9519\u3002 \u60a8\u53ef\u4ee5\u5411\u201cPossibleValues\u201d\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u6587\u5b57\u503c\uff0c\u4f46\u5fd8\u8bb0\u5728\u201cvalidate\u201d\u51fd\u6570\u4e2d\u5904\u7406\u5b83\uff1a</p> <pre><code>PossibleValues = Literal['one', 'two', 'three']\n</code></pre> <p>Mypy \u4e0d\u4f1a\u53d1\u73b0\u201cthree\u201d\u672a\u88ab\u8986\u76d6\u3002 \u5982\u679c\u60a8\u5e0c\u671b mypy \u6267\u884c\u8be6\u5c3d\u68c0\u67e5\uff0c\u5219\u9700\u8981\u66f4\u65b0\u4ee3\u7801\u4ee5\u4f7f\u7528 <code>assert_never()</code> \u68c0\u67e5\uff1a</p> <pre><code>from typing import Literal, NoReturn\n\nPossibleValues = Literal['one', 'two']\n\ndef assert_never(value: NoReturn) -&gt; NoReturn:\n    # \u8fd9\u5728\u8fd0\u884c\u65f6\u4e5f\u6709\u6548\n    assert False, f'This code should never be reached, got: {value}'\n\ndef validate(x: PossibleValues) -&gt; bool:\n    if x == 'one':\n        return True\n    elif x == 'two':\n        return False\n    assert_never(x)\n</code></pre> <p>\u73b0\u5728\uff0c\u5982\u679c\u60a8\u5411\u201cPossibleValues\u201d\u6dfb\u52a0\u65b0\u503c\u4f46\u4e0d\u66f4\u65b0\u201cvalidate\u201d\uff0cmypy \u5c06\u53d1\u73b0\u9519\u8bef\uff1a</p> <pre><code>PossibleValues = Literal['one', 'two', 'three']\n\ndef validate(x: PossibleValues) -&gt; bool:\n    if x == 'one':\n        return True\n    elif x == 'two':\n        return False\n    # Error: Argument 1 to \"assert_never\" has incompatible type \"Literal['three']\";\n    # expected \"NoReturn\"\n    assert_never(x)\n</code></pre> <p>\u5982\u679c\u4e0d\u9700\u8981\u8fd0\u884c\u65f6\u68c0\u67e5\u610f\u5916\u503c\uff0c\u5219\u53ef\u4ee5\u7701\u7565\u4e0a\u9762\u793a\u4f8b\u4e2d\u7684\u201cassert_never\u201d\u8c03\u7528\uff0c\u5e76\u4e14 mypy \u4ecd\u4f1a\u751f\u6210\u6709\u5173\u51fd\u6570\u201cvalidate\u201d\u8fd4\u56de\u65e0\u503c\u7684\u9519\u8bef\uff1a</p> <pre><code>PossibleValues = Literal['one', 'two', 'three']\n\n# Error: Missing return statement\ndef validate(x: PossibleValues) -&gt; bool:\n    if x == 'one':\n        return True\n    elif x == 'two':\n        return False\n</code></pre> <p>\u5339\u914d\u8bed\u53e5\u4e5f\u652f\u6301\u8be6\u5c3d\u68c0\u67e5\uff08Python 3.10 \u53ca\u66f4\u9ad8\u7248\u672c\uff09\uff1a</p> <pre><code>def validate(x: PossibleValues) -&gt; bool:\n    match x:\n        case 'one':\n            return True\n        case 'two':\n            return False\n    assert_never(x)\n</code></pre> <p>You may want to check that some code covers all possible <code>Literal</code> or <code>Enum</code> cases. Example:</p> <pre><code>from typing import Literal\n\nPossibleValues = Literal['one', 'two']\n\ndef validate(x: PossibleValues) -&gt; bool:\n    if x == 'one':\n        return True\n    elif x == 'two':\n        return False\n    raise ValueError(f'Invalid value: {x}')\n\nassert validate('one') is True\nassert validate('two') is False\n</code></pre> <p>In the code above, it's easy to make a mistake. You can add a new literal value to <code>PossibleValues</code> but forget to handle it in the <code>validate</code> function:</p> <pre><code>PossibleValues = Literal['one', 'two', 'three']\n</code></pre> <p>Mypy won't catch that <code>'three'</code> is not covered.  If you want mypy to perform an exhaustiveness check, you need to update your code to use an <code>assert_never()</code> check:</p> <pre><code>from typing import Literal, NoReturn\n\nPossibleValues = Literal['one', 'two']\n\ndef assert_never(value: NoReturn) -&gt; NoReturn:\n    # This also works at runtime as well\n    assert False, f'This code should never be reached, got: {value}'\n\ndef validate(x: PossibleValues) -&gt; bool:\n    if x == 'one':\n        return True\n    elif x == 'two':\n        return False\n    assert_never(x)\n</code></pre> <p>Now if you add a new value to <code>PossibleValues</code> but don't update <code>validate</code>, mypy will spot the error:</p> <pre><code>PossibleValues = Literal['one', 'two', 'three']\n\ndef validate(x: PossibleValues) -&gt; bool:\n    if x == 'one':\n        return True\n    elif x == 'two':\n        return False\n    # Error: Argument 1 to \"assert_never\" has incompatible type \"Literal['three']\";\n    # expected \"NoReturn\"\n    assert_never(x)\n</code></pre> <p>If runtime checking against unexpected values is not needed, you can leave out the <code>assert_never</code> call in the above example, and mypy will still generate an error about function <code>validate</code> returning without a value:</p> <pre><code>PossibleValues = Literal['one', 'two', 'three']\n\n# Error: Missing return statement\ndef validate(x: PossibleValues) -&gt; bool:\n    if x == 'one':\n        return True\n    elif x == 'two':\n        return False\n</code></pre> <p>Exhaustiveness checking is also supported for match statements (Python 3.10 and later):</p> <pre><code>def validate(x: PossibleValues) -&gt; bool:\n    match x:\n        case 'one':\n            return True\n        case 'two':\n            return False\n    assert_never(x)\n</code></pre>"},{"location":"mypy/literal_and_enum/#\u5c40\u9650\u6027","title":"\u5c40\u9650\u6027","text":"<p>Limitations</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u65e0\u6cd5\u6df1\u5165\u7406\u89e3\u4f7f\u7528\u201cLiteral[..]\u201d\u7c7b\u578b\u53d8\u91cf\u7684\u8868\u8fbe\u5f0f\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u60a8\u6709\u4e00\u4e2a\u7c7b\u578b\u4e3a\u201cLiteral[3]\u201d\u7684\u53d8\u91cf\u201ca\u201d\u548c\u53e6\u4e00\u4e2a\u7c7b\u578b\u4e3a\u201cLiteral[5]\u201d\u7684\u53d8\u91cf\u201cb\u201d\uff0cmypy \u5c06\u63a8\u65ad\u201ca + b\u201d\u7684\u7c7b\u578b\u4e3a\u201cint\u201d\uff0c \u4e0d\u662f** \u8f93\u5165 <code>Literal[8]</code>\u3002</p> <p>\u57fa\u672c\u89c4\u5219\u662f\u6587\u5b57\u7c7b\u578b\u88ab\u89c6\u4e3a\u53c2\u6570\u5177\u6709\u7684\u4efb\u4f55\u7c7b\u578b\u7684\u5e38\u89c4\u5b50\u7c7b\u578b\u3002 \u4f8b\u5982\uff0c\u201cLiteral[3]\u201d\u88ab\u89c6\u4e3a\u201cint\u201d\u7684\u5b50\u7c7b\u578b\uff0c\u56e0\u6b64\u5c06\u76f4\u63a5\u7ee7\u627f\u201cint\u201d\u7684\u6240\u6709\u65b9\u6cd5\u3002 \u8fd9\u610f\u5473\u7740 <code>Literal[3].__add__</code> \u63a5\u53d7\u4e0e <code>int.__add__</code> \u76f8\u540c\u7684\u53c2\u6570\u5e76\u5177\u6709\u76f8\u540c\u7684\u8fd4\u56de\u7c7b\u578b\u3002</p> <p>Mypy will not understand expressions that use variables of type <code>Literal[..]</code> on a deep level. For example, if you have a variable <code>a</code> of type <code>Literal[3]</code> and another variable <code>b</code> of type <code>Literal[5]</code>, mypy will infer that <code>a + b</code> has type <code>int</code>, not type <code>Literal[8]</code>.</p> <p>The basic rule is that literal types are treated as just regular subtypes of whatever type the parameter has. For example, <code>Literal[3]</code> is treated as a subtype of <code>int</code> and so will inherit all of <code>int</code>'s methods directly. This means that <code>Literal[3].__add__</code> accepts the same arguments and has the same return type as <code>int.__add__</code>.</p>"},{"location":"mypy/literal_and_enum/#\u679a\u4e3e","title":"\u679a\u4e3e","text":"<p>Enums</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u5bf9 <code>enum.Enum</code> \u53ca\u5176\u5b50\u7c7b\u6709\u7279\u6b8a\u652f\u6301: <code>enum.IntEnum</code>, <code>enum.Flag</code>, <code>enum.IntFlag</code>, and <code>enum.StrEnum</code>.</p> <pre><code>from enum import Enum\n\nclass Direction(Enum):\n    up = 'up'\n    down = 'down'\n\nreveal_type(Direction.up)  # Revealed type is \"Literal[Direction.up]?\"\nreveal_type(Direction.down)  # Revealed type is \"Literal[Direction.down]?\"\n</code></pre> <p>You can use enums to annotate types as you would expect:</p> <pre><code>class Movement:\n    def __init__(self, direction: Direction, speed: float) -&gt; None:\n        self.direction = direction\n        self.speed = speed\n\nMovement(Direction.up, 5.0)  # ok\nMovement('up', 5.0)  # E: Argument 1 to \"Movement\" has incompatible type \"str\"; expected \"Direction\"\n</code></pre> <p>Mypy has special support for <code>enum.Enum</code> and its subclasses: <code>enum.IntEnum</code>, <code>enum.Flag</code>, <code>enum.IntFlag</code>, and <code>enum.StrEnum</code>.</p> <pre><code>from enum import Enum\n\nclass Direction(Enum):\n    up = 'up'\n    down = 'down'\n\nreveal_type(Direction.up)  # Revealed type is \"Literal[Direction.up]?\"\nreveal_type(Direction.down)  # Revealed type is \"Literal[Direction.down]?\"\n</code></pre> <p>You can use enums to annotate types as you would expect:</p> <pre><code>class Movement:\n    def __init__(self, direction: Direction, speed: float) -&gt; None:\n        self.direction = direction\n        self.speed = speed\n\nMovement(Direction.up, 5.0)  # ok\nMovement('up', 5.0)  # E: Argument 1 to \"Movement\" has incompatible type \"str\"; expected \"Direction\"\n</code></pre>"},{"location":"mypy/literal_and_enum/#\u8be6\u5c3d\u68c0\u67e5","title":"\u8be6\u5c3d\u68c0\u67e5","text":"<p>Exhaustiveness checking</p> \u4e2d\u6587\u82f1\u6587 <p>\u4e0e\u201cLiteral\u201d\u7c7b\u578b\u7c7b\u4f3c\uff0c\u201cEnum\u201d\u652f\u6301\u8be6\u5c3d\u68c0\u67e5\u3002 \u8ba9\u6211\u4eec\u4ece\u4e00\u4e2a\u5b9a\u4e49\u5f00\u59cb\uff1a</p> <pre><code>from enum import Enum\nfrom typing import NoReturn\n\ndef assert_never(value: NoReturn) -&gt; NoReturn:\n    # \u8fd9\u5728\u8fd0\u884c\u65f6\u4e5f\u6709\u6548\uff1a\n    assert False, f'This code should never be reached, got: {value}'\n\nclass Direction(Enum):\n    up = 'up'\n    down = 'down'\n</code></pre> <p>\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u4f7f\u7528\u8be6\u5c3d\u68c0\u67e5\uff1a</p> <pre><code>def choose_direction(direction: Direction) -&gt; None:\n    if direction is Direction.up:\n        reveal_type(direction)  # N: Revealed type is \"Literal[Direction.up]\"\n        print('Going up!')\n        return\n    elif direction is Direction.down:\n        print('Down')\n        return\n    # \u8fd9\u6761\u7ebf\u6c38\u8fdc\u4e0d\u4f1a\u5230\u8fbe\n    assert_never(direction)\n</code></pre> <p>\u5982\u679c\u6211\u4eec\u5fd8\u8bb0\u5904\u7406\u5176\u4e2d\u4e00\u79cd\u60c5\u51b5\uff0cmypy \u5c06\u751f\u6210\u9519\u8bef\uff1a</p> <pre><code>def choose_direction(direction: Direction) -&gt; None:\n    if direction == Direction.up:\n        print('Going up!')\n        return\n    assert_never(direction)  # E: Argument 1 to \"assert_never\" has incompatible type \"Direction\"; expected \"NoReturn\"\n</code></pre> <p>\u5339\u914d\u8bed\u53e5\u4e5f\u652f\u6301\u8be6\u5c3d\u68c0\u67e5\uff08Python 3.10 \u53ca\u66f4\u9ad8\u7248\u672c\uff09\u3002</p> <p>You may want to check that some code covers all possible <code>Literal</code> or <code>Enum</code> cases. Example:</p> <pre><code>from enum import Enum\nfrom typing import NoReturn\n\ndef assert_never(value: NoReturn) -&gt; NoReturn:\n    # \u8fd9\u5728\u8fd0\u884c\u65f6\u4e5f\u6709\u6548\uff1a\n    assert False, f'This code should never be reached, got: {value}'\n\nclass Direction(Enum):\n    up = 'up'\n    down = 'down'\n</code></pre> <p>Now, let's use an exhaustiveness check:</p> <pre><code>def choose_direction(direction: Direction) -&gt; None:\n    if direction is Direction.up:\n        reveal_type(direction)  # N: Revealed type is \"Literal[Direction.up]\"\n        print('Going up!')\n        return\n    elif direction is Direction.down:\n        print('Down')\n        return\n    # \u8fd9\u6761\u7ebf\u6c38\u8fdc\u4e0d\u4f1a\u5230\u8fbe\n    assert_never(direction)\n</code></pre> <p>If we forget to handle one of the cases, mypy will generate an error:</p> <pre><code>def choose_direction(direction: Direction) -&gt; None:\n    if direction == Direction.up:\n        print('Going up!')\n        return\n    assert_never(direction)  # E: Argument 1 to \"assert_never\" has incompatible type \"Direction\"; expected \"NoReturn\"\n</code></pre> <p>Exhaustiveness checking is also supported for match statements (Python 3.10 and later).</p>"},{"location":"mypy/literal_and_enum/#\u989d\u5916\u7684\u679a\u4e3e\u68c0\u67e5","title":"\u989d\u5916\u7684\u679a\u4e3e\u68c0\u67e5","text":"<p>Extra Enum checks</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u8fd8\u5c1d\u8bd5\u50cf Python \u8fd0\u884c\u65f6\u4e00\u6837\u652f\u6301\u201cEnum\u201d\u7684\u7279\u6b8a\u529f\u80fd\uff1a</p> <ul> <li>\u4efb\u4f55\u5e26\u6709\u503c\u7684\u201cEnum\u201d\u7c7b\u90fd\u662f\u9690\u5f0f\u7684\u201cfinal\u201d. \u8fd9\u662f CPython \u4e2d\u53d1\u751f\u7684\u60c5\u51b5\uff1a</li> </ul> <pre><code>&gt;&gt;&gt; class AllDirection(Direction):\n...     left = 'left'\n...     right = 'right'\nTraceback (most recent call last):\n    ...\nTypeError: AllDirection: cannot extend enumeration 'Direction'\n</code></pre> <p>Mypy \u4e5f\u6355\u83b7\u4e86\u8fd9\u4e2a\u9519\u8bef\uff1a</p> <pre><code>class AllDirection(Direction):  # E: Cannot inherit from final class \"Direction\"\n    left = 'left'\n    right = 'right'\n</code></pre> <p>-\u6240\u6709\u201cEnum\u201d\u5b57\u6bb5\u4e5f\u9690\u5f0f\u4e3a\u201cfinal\u201d\u3002</p> <pre><code>Direction.up = '^'  # E: Cannot assign to final attribute \"up\"\n</code></pre> <ul> <li>\u68c0\u67e5\u6240\u6709\u5b57\u6bb5\u540d\u79f0\u662f\u5426\u552f\u4e00\u3002</li> </ul> <pre><code>class Some(Enum):\n    x = 1\n    x = 2  # E: Attempted to reuse member name \"x\" in Enum definition \"Some\"\n</code></pre> <ul> <li>\u57fa\u7c7b\u6ca1\u6709\u51b2\u7a81\u5e76\u4e14 mixin \u7c7b\u578b\u662f\u6b63\u786e\u7684\u3002</li> </ul> <pre><code>class WrongEnum(str, int, enum.Enum):\n    # E: Only a single data type mixin is allowed for Enum subtypes, found extra \"int\"\n    ...\n\nclass MixinAfterEnum(enum.Enum, Mixin): # E: No base classes are allowed after \"enum.Enum\"\n    ...\n</code></pre> <p>Mypy also tries to support special features of <code>Enum</code> the same way Python's runtime does:</p> <ul> <li>Any <code>Enum</code> class with values is implicitly <code>final</code>. This is what happens in CPython:</li> </ul> <pre><code>&gt;&gt;&gt; class AllDirection(Direction):\n...     left = 'left'\n...     right = 'right'\nTraceback (most recent call last):\n    ...\nTypeError: AllDirection: cannot extend enumeration 'Direction'\n</code></pre> <p>Mypy also catches this error:</p> <pre><code>class AllDirection(Direction):  # E: Cannot inherit from final class \"Direction\"\n    left = 'left'\n    right = 'right'\n</code></pre> <ul> <li>All <code>Enum</code> fields are implicitly <code>final</code> as well.</li> </ul> <pre><code>Direction.up = '^'  # E: Cannot assign to final attribute \"up\"\n</code></pre> <ul> <li>All field names are checked to be unique.</li> </ul> <pre><code>class Some(Enum):\n    x = 1\n    x = 2  # E: Attempted to reuse member name \"x\" in Enum definition \"Some\"\n</code></pre> <ul> <li>Base classes have no conflicts and mixin types are correct.</li> </ul> <pre><code>class WrongEnum(str, int, enum.Enum):\n    # E: Only a single data type mixin is allowed for Enum subtypes, found extra \"int\"\n    ...\n\nclass MixinAfterEnum(enum.Enum, Mixin): # E: No base classes are allowed after \"enum.Enum\"\n    ...\n</code></pre>"},{"location":"mypy/metaclasses/","title":"\u5143\u7c7b","text":"\u4e2d\u6587\u82f1\u6587 <p>\u5143\u7c7b <code>metaclasses</code> \u662f\u4e00\u4e2a\u63cf\u8ff0\u5176\u4ed6\u7c7b\u7684\u6784\u9020\u548c\u884c\u4e3a\u7684\u7c7b\uff0c\u7c7b\u4f3c\u4e8e\u7c7b\u63cf\u8ff0\u5bf9\u8c61\u7684\u6784\u9020\u548c\u884c\u4e3a\u3002 \u9ed8\u8ba4\u5143\u7c7b\u662f <code>type</code>\uff0c\u4f46\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u5143\u7c7b\u3002 \u5143\u7c7b\u5141\u8bb8\u521b\u5efa \u201c\u4e00\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u7c7b\u201d\uff0c\u4f8b\u5982 <code>enum.Enum</code>\u3001<code>typing.NamedTuple</code> \u548c\u5355\u4f8b\u3002</p> <p>Mypy \u5bf9 <code>abc.ABCMeta</code> \u548c <code>EnumMeta</code> \u6709\u4e00\u4e9b\u7279\u6b8a\u7684\u7406\u89e3\u3002</p> <p>Metaclasses</p> <p>A <code>metaclasses</code> is a class that describes the construction and behavior of other classes, similarly to how classes describe the construction and behavior of objects. The default metaclass is <code>type</code>, but it's possible to use other metaclasses. Metaclasses allows one to create \"a different kind of class\", such as <code>enum.Enum</code>s\u3001<code>typing.NamedTuple</code>s and singletons.</p> <p>Mypy has some special understanding of {py:class}<code>~abc.ABCMeta</code> and <code>EnumMeta</code>.</p>"},{"location":"mypy/metaclasses/#\u5b9a\u4e49\u5143\u7c7b","title":"\u5b9a\u4e49\u5143\u7c7b","text":"\u4e2d\u6587\u82f1\u6587 <pre><code>class M(type):\n    pass\n\nclass A(metaclass=M):\n    pass\n</code></pre> <p>Defining a metaclass</p> <pre><code>class M(type):\n    pass\n\nclass A(metaclass=M):\n    pass\n</code></pre>"},{"location":"mypy/metaclasses/#\u5143\u7c7b\u4f7f\u7528\u793a\u4f8b","title":"\u5143\u7c7b\u4f7f\u7528\u793a\u4f8b","text":"\u4e2d\u6587\u82f1\u6587 <p>Mypy \u652f\u6301\u5728\u5143\u7c7b\u4e2d\u67e5\u627e\u5c5e\u6027\uff1a</p> <pre><code>from typing import Type, TypeVar, ClassVar\nT = TypeVar('T')\n\nclass M(type):\n    count: ClassVar[int] = 0\n\n    def make(cls: Type[T]) -&gt; T:\n        M.count += 1\n        return cls()\n\nclass A(metaclass=M):\n    pass\n\na: A = A.make()  # make() \u4f1a\u5728 M \u4e2d\u67e5\u627e\uff1b \u7ed3\u679c\u662f A \u7c7b\u578b\u7684\u5bf9\u8c61\nprint(A.count)\n\nclass B(A):\n    pass\n\nb: B = B.make()  # \u5143\u7c7b\u662f\u7ee7\u627f\u7684\nprint(B.count + \" objects were created\")  # Error: Unsupported operand types for + (\"int\" and \"str\")\n</code></pre> <p>Metaclass usage example</p> <p>Mypy supports the lookup of attributes in the metaclass:</p> <pre><code>from typing import Type, TypeVar, ClassVar\nT = TypeVar('T')\n\nclass M(type):\n    count: ClassVar[int] = 0\n\n    def make(cls: Type[T]) -&gt; T:\n        M.count += 1\n        return cls()\n\nclass A(metaclass=M):\n    pass\n\na: A = A.make()  # make() is looked up at M; the result is an object of type A\nprint(A.count)\n\nclass B(A):\n    pass\n\nb: B = B.make()  # metaclasses are inherited\nprint(B.count + \" objects were created\")  # Error: Unsupported operand types for + (\"int\" and \"str\")\n</code></pre>"},{"location":"mypy/metaclasses/#\u5143\u7c7b\u652f\u6301\u7684\u9677\u9631\u548c\u9650\u5236","title":"\u5143\u7c7b\u652f\u6301\u7684\u9677\u9631\u548c\u9650\u5236","text":"\u4e2d\u6587\u82f1\u6587 <p>\u8bf7\u6ce8\u610f\uff0c\u5143\u7c7b\u5bf9\u7ee7\u627f\u7ed3\u6784\u63d0\u51fa\u4e86\u4e00\u4e9b\u8981\u6c42\uff0c\u56e0\u6b64\u6700\u597d\u4e0d\u8981\u5c06\u5143\u7c7b\u548c\u7c7b\u5c42\u6b21\u7ed3\u6784\u7ed3\u5408\u8d77\u6765\uff1a</p> <pre><code>class M1(type): pass\nclass M2(type): pass\n\nclass A1(metaclass=M1): pass\nclass A2(metaclass=M2): pass\n\nclass B1(A1, metaclass=M2): pass  # Mypy Error: metaclass conflict\n# \u5728\u8fd0\u884c\u65f6\uff0c\u4e0a\u9762\u7684\u5b9a\u4e49\u4f1a\u5f15\u53d1\u5f02\u5e38\n# TypeError: metaclass conflict: \u6d3e\u751f\u7c7b\u7684\u5143\u7c7b\u5fc5\u987b\u662f\u5176\u6240\u6709\u57fa\u7c7b\u7684\u5143\u7c7b\u7684\uff08\u975e\u4e25\u683c\uff09\u5b50\u7c7b\n\nclass B12(A1, A2): pass  # Mypy Error: metaclass conflict\n\n# \u8fd9\u53ef\u4ee5\u901a\u8fc7\u901a\u7528\u5143\u7c7b\u5b50\u7c7b\u578b\u6765\u89e3\u51b3\uff1a\nclass CorrectMeta(M1, M2): pass\nclass B2(A1, A2, metaclass=CorrectMeta): pass  # OK, \u8fd0\u884c\u65f6\u4e5f\u6ca1\u95ee\u9898\n</code></pre> <ul> <li>Mypy \u4e0d\u7406\u89e3\u52a8\u6001\u8ba1\u7b97\u7684\u5143\u7c7b\uff0c\u4f8b\u5982 <code>class A(metaclass=f()): ...</code></li> <li>Mypy \u4e0d\u4f1a\u4e5f\u4e0d\u53ef\u80fd\u7406\u89e3\u4efb\u610f\u5143\u7c7b\u4ee3\u7801\u3002</li> <li>Mypy \u4ec5\u5c06 <code>type</code> \u7684\u5b50\u7c7b\u8bc6\u522b\u4e3a\u6f5c\u5728\u7684\u5143\u7c7b\u3002</li> </ul> <p>Gotchas and limitations of metaclass support</p> <p>Note that metaclasses pose some requirements on the inheritance structure, so it's better not to combine metaclasses and class hierarchies:</p> <pre><code>class M1(type): pass\nclass M2(type): pass\n\nclass A1(metaclass=M1): pass\nclass A2(metaclass=M2): pass\n\nclass B1(A1, metaclass=M2): pass  # Mypy Error: metaclass conflict\n# At runtime the above definition raises an exception\n# TypeError: metaclass conflict: the metaclass of a derived class must be a (non-strict) subclass of the metaclasses of all its bases\n\nclass B12(A1, A2): pass  # Mypy Error: metaclass conflict\n\n# This can be solved via a common metaclass subtype:\nclass CorrectMeta(M1, M2): pass\nclass B2(A1, A2, metaclass=CorrectMeta): pass  # OK, runtime is also OK\n</code></pre> <ul> <li>Mypy does not understand dynamically-computed metaclasses, such as <code>class A(metaclass=f()): ...</code></li> <li>Mypy does not and cannot understand arbitrary metaclass code.</li> <li>Mypy only recognizes subclasses of <code>type</code> as potential metaclasses.</li> </ul>"},{"location":"mypy/more_types/","title":"\u66f4\u591a\u7c7b\u578b","text":"\u4e2d\u6587\u82f1\u6587 <p>\u672c\u8282\u4ecb\u7ecd\u4e86\u4e00\u4e9b\u5176\u4ed6\u7c7b\u578b\uff0c\u5305\u62ec <code>typing.NoReturn</code>\u3001[<code>typing.NewType</code>]( https://docs.python.org/3/library/typing.html#typing.NewType\uff09\uff0c\u4ee5\u53ca\u5f02\u6b65\u4ee3\u7801\u7684\u7c7b\u578b\u3002 \u5b83\u8fd8\u8ba8\u8bba\u4e86\u5982\u4f55\u4f7f\u7528\u91cd\u8f7d\u4e3a\u51fd\u6570\u63d0\u4f9b\u66f4\u7cbe\u786e\u7684\u7c7b\u578b\u3002 \u6240\u6709\u8fd9\u4e9b\u4ec5\u5728\u7279\u5b9a\u60c5\u51b5\u4e0b\u6709\u7528\uff0c\u56e0\u6b64\u8bf7\u968f\u610f\u8df3\u8fc7\u672c\u8282\uff0c\u5f53\u60a8\u9700\u8981\u5176\u4e2d\u4e00\u4e9b\u65f6\u518d\u56de\u6765\u3002</p> <p>\u4ee5\u4e0b\u662f\u672c\u6587\u6240\u6db5\u76d6\u5185\u5bb9\u7684\u5feb\u901f\u6458\u8981\uff1a</p> <ul> <li><code>typing.NoReturn</code> \u8ba9\u60a8\u544a\u8bc9 mypy \u51fd\u6570\u6c38\u8fdc\u4e0d\u4f1a\u6b63\u5e38\u8fd4\u56de\u3002</li> <li><code>typing.NewType</code> \u5141\u8bb8\u60a8\u5b9a\u4e49\u7c7b\u578b\u7684\u534f\u53d8\uff0c\u8be5\u534f\u53d8\u88ab mypy \u89c6\u4e3a\u5355\u72ec\u7684\u7c7b\u578b\uff0c\u4f46\u5728\u8fd0\u884c\u65f6\u4e0e\u539f\u59cb\u7c7b\u578b\u76f8\u540c\u3002 \u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u5c06 <code>UserId</code> \u4f5c\u4e3a <code>int</code> \u7684\u534f\u53d8\uff0c\u5b83\u5728\u8fd0\u884c\u65f6\u53ea\u662f\u4e00\u4e2a<code>int</code>\u3002</li> <li><code>typing.overload</code> \u8ba9\u60a8\u5b9a\u4e49\u4e00\u4e2a\u53ef\u4ee5\u63a5\u53d7\u591a\u4e2a\u4e0d\u540c\u7b7e\u540d\u7684\u51fd\u6570\u3002 \u5982\u679c\u60a8\u9700\u8981\u5bf9\u53c2\u6570\u548c\u8fd4\u56de\u7c7b\u578b\u4e4b\u95f4\u7684\u5173\u7cfb\u8fdb\u884c\u7f16\u7801\uff0c\u800c\u8fd9\u79cd\u5173\u7cfb\u5f88\u96be\u6b63\u5e38\u8868\u8fbe\uff0c\u90a3\u4e48\u8fd9\u975e\u5e38\u6709\u7528\u3002</li> <li>\u5f02\u6b65\u7c7b\u578b\u5141\u8bb8\u60a8\u4f7f\u7528 <code>async</code> \u548c <code>await</code> \u7684\u540c\u65f6\u652f\u6301\u68c0\u67e5\u7f16\u7801\u7c7b\u578b\u3002</li> </ul> <p>More types</p> <p>This section introduces a few additional kinds of types, including <code>typing.NoReturn</code>, <code>typing.NewType</code>, and types for async code. It also discusses how to give functions more precise types using overloads. All of these are only situationally useful, so feel free to skip this section and come back when you have a need for some of them.</p> <p>Here's a quick summary of what's covered here:</p> <ul> <li><code>typing.NoReturn</code> lets you tell mypy that a function never returns normally.</li> <li><code>typing.NewType</code> lets you define a variant of a type that is treated as a separate type by mypy but is identical to the original type at runtime. For example, you can have <code>UserId</code> as a variant of <code>int</code> that is just an <code>int</code> at runtime.</li> <li><code>typing.overload</code> lets you define a function that can accept multiple distinct signatures. This is useful if you need to encode a relationship between the arguments and the return type that would be difficult to express normally.</li> <li>Async types let you type check programs using <code>async</code> and <code>await</code>.</li> </ul>"},{"location":"mypy/more_types/#noreturn\u7c7b\u578b","title":"NoReturn\u7c7b\u578b","text":"<p>The NoReturn type</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u63d0\u4f9b\u5bf9\u6c38\u4e0d\u8fd4\u56de\u7684\u51fd\u6570\u7684\u652f\u6301\u3002 \u4f8b\u5982\uff0c\u65e0\u6761\u4ef6\u5f15\u53d1\u5f02\u5e38\u7684\u51fd\u6570\uff1a</p> <pre><code>from typing import NoReturn\n\ndef stop() -&gt; NoReturn:\n    raise Exception('no way')\n</code></pre> <p>Mypy will ensure that functions annotated as returning <code>NoReturn</code> truly never return, either implicitly or explicitly. Mypy will also recognize that the code after calls to such functions is unreachable and will behave accordingly:</p> <pre><code>def f(x: int) -&gt; int:\n    if x == 0:\n        return x\n    stop()\n    return 'whatever works'  # No error in an unreachable block\n</code></pre> <p>Mypy \u5c06\u786e\u4fdd\u6ce8\u91ca\u4e3a\u8fd4\u56de <code>NoReturn</code> \u7684\u51fd\u6570\u771f\u6b63\u6c38\u8fdc\u4e0d\u4f1a\u8fd4\u56de\uff0c\u65e0\u8bba\u662f\u9690\u5f0f\u8fd8\u662f\u663e\u5f0f\u3002 Mypy \u8fd8\u4f1a\u8bc6\u522b\u51fa\u8c03\u7528\u6b64\u7c7b\u51fd\u6570\u540e\u7684\u4ee3\u7801\u662f\u65e0\u6cd5\u8bbf\u95ee\u7684\uff0c\u5e76\u4f1a\u505a\u51fa\u76f8\u5e94\u7684\u884c\u4e3a\uff1a</p> <pre><code>python3 -m pip install --upgrade typing-extensions\n</code></pre> <p>Mypy provides support for functions that never return. For example, a function that unconditionally raises an exception:</p> <pre><code>from typing import NoReturn\n\ndef stop() -&gt; NoReturn:\n    raise Exception('no way')\n</code></pre> <p>Mypy will ensure that functions annotated as returning <code>NoReturn</code> truly never return, either implicitly or explicitly. Mypy will also recognize that the code after calls to such functions is unreachable and will behave accordingly:</p> <pre><code>def f(x: int) -&gt; int:\n    if x == 0:\n        return x\n    stop()\n    return 'whatever works'  # No error in an unreachable block\n</code></pre> <p>In earlier Python versions you need to install <code>typing_extensions</code> using pip to use <code>NoReturn</code> in your code. Python 3 command line:</p> <pre><code>python3 -m pip install --upgrade typing-extensions\n</code></pre>"},{"location":"mypy/more_types/#newtype\u7c7b\u578b","title":"NewType\u7c7b\u578b","text":"<p>NewTypes</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u901a\u8fc7\u521b\u5efa\u4ec5\u7528\u4e8e\u533a\u5206\u67d0\u4e9b\u503c\u4e0e\u57fa\u7c7b\u5b9e\u4f8b\u7684\u7b80\u5355\u6d3e\u751f\u7c7b\u6765\u907f\u514d\u7f16\u7a0b\u9519\u8bef\u3002 \u4f8b\u5b50\uff1a</p> <pre><code>class UserId(int):\n    pass\n\ndef get_by_user_id(user_id: UserId):\n    ...\n</code></pre> <p>\u7136\u800c\uff0c\u8fd9\u79cd\u65b9\u6cd5\u5f15\u5165\u4e86\u4e00\u4e9b\u8fd0\u884c\u65f6\u5f00\u9500\u3002 \u4e3a\u4e86\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff0c\u7c7b\u578b\u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a\u8f85\u52a9\u5bf9\u8c61 \u201cNewType\u201d\uff0c\u5b83\u521b\u5efa\u7b80\u5355\u7684\u552f\u4e00\u7c7b\u578b\uff0c\u8fd0\u884c\u65f6\u5f00\u9500\u51e0\u4e4e\u4e3a\u96f6\u3002  Mypy \u4f1a\u5c06\u8bed\u53e5 <code>Derived = NewType('Derived', Base)</code> \u89c6\u4e3a\u5927\u81f4\u76f8\u5f53\u4e8e\u4ee5\u4e0b\u5b9a\u4e49\uff1a</p> <pre><code>class Derived(Base):\n    def __init__(self, _x: Base) -&gt; None:\n        ...\n</code></pre> <p>\u4f46\u662f\uff0c\u5728\u8fd0\u884c\u65f6\uff0c <code>NewType('Derived', Base)</code> \u5c06\u8fd4\u56de\u4e00\u4e2a\u865a\u62df\u53ef\u8c03\u7528\u5bf9\u8c61\uff0c\u8be5\u53ef\u8c03\u7528\u5bf9\u8c61\u4ec5\u8fd4\u56de\u5176\u53c2\u6570\uff1a</p> <pre><code>def Derived(_x):\n    return _x\n</code></pre> <p>Mypy \u5c06\u9700\u8981\u4ece\u9700\u8981 \u201cUserId\u201d \u7684 \u201cint\u201d \u663e\u5f0f\u8f6c\u6362\uff0c\u800c\u9700\u8981\u201cint\u201d\u7684\u5730\u65b9\u4ece\u201cUserId\u201d\u9690\u5f0f\u8f6c\u6362\u3002 \u4f8b\u5b50\uff1a</p> <pre><code>from typing import NewType\n\nUserId = NewType('UserId', int)\n\ndef name_by_id(user_id: UserId) -&gt; str:\n    ...\n\nUserId('user')          # Fails type check\n\nname_by_id(42)          # Fails type check\nname_by_id(UserId(42))  # OK\n\nnum: int = UserId(5) + 1\n</code></pre> <p><code>NewType</code> \u53ea\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\u3002 \u7b2c\u4e00\u4e2a\u53c2\u6570\u5fc5\u987b\u662f\u5305\u542b\u65b0\u7c7b\u578b\u540d\u79f0\u7684\u5b57\u7b26\u4e32\u6587\u5b57\uff0c\u5e76\u4e14\u5fc5\u987b\u7b49\u4e8e\u5206\u914d\u65b0\u7c7b\u578b\u7684\u53d8\u91cf\u7684\u540d\u79f0\u3002 \u7b2c\u4e8c\u4e2a\u53c2\u6570\u5fc5\u987b\u662f\u4e00\u4e2a\u6b63\u786e\u7684\u53ef\u5b50\u7c7b\uff0c\u5373\u4e0d\u662f\u50cf <code>Union</code> \u7b49\u7c7b\u578b\u6784\u9020\u3002</p> <p><code>NewType</code> \u8fd4\u56de\u7684\u53ef\u8c03\u7528\u5bf9\u8c61\u4ec5\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570\uff1b \u8fd9\u76f8\u5f53\u4e8e\u53ea\u652f\u6301\u4e00\u4e2a\u63a5\u53d7\u57fa\u7c7b\u5b9e\u4f8b\u7684\u6784\u9020\u51fd\u6570\uff08\u89c1\u4e0a\u6587\uff09\u3002 \u4f8b\u5b50\uff1a</p> <pre><code>from typing import NewType\n\nclass PacketId:\n    def __init__(self, major: int, minor: int) -&gt; None:\n        self._major = major\n        self._minor = minor\n\nTcpPacketId = NewType('TcpPacketId', PacketId)\n\npacket = PacketId(100, 100)\ntcp_packet = TcpPacketId(packet)  # OK\n\ntcp_packet = TcpPacketId(127, 0)  # Fails in type checker and at runtime\n</code></pre> <p>\u60a8\u4e0d\u80fd\u4f7f\u7528 <code>isinstance</code> \u6216 <code>issubclass</code> \u5728 <code>NewType</code> \u8fd4\u56de\u7684\u5bf9\u8c61\u4e0a\uff0c\u4e5f\u4e0d\u80fd\u5bf9 <code>NewType</code> \u8fd4\u56de\u7684\u5bf9\u8c61\u8fdb\u884c\u5b50\u7c7b\u5316\u3002</p> <p>Note</p> <p>\u4e0e\u7c7b\u578b\u522b\u540d\u4e0d\u540c\uff0c\u201cNewType\u201d \u5728\u4f7f\u7528\u65f6\u5c06\u521b\u5efa\u4e00\u4e2a\u5168\u65b0\u4e14\u552f\u4e00\u7684\u7c7b\u578b\u3002 <code>NewType</code> \u7684\u9884\u671f\u76ee\u7684\u662f\u5e2e\u52a9\u60a8\u68c0\u6d4b\u610f\u5916\u5730\u5c06\u65e7\u57fa\u672c\u7c7b\u578b\u548c\u65b0\u6d3e\u751f\u7c7b\u578b\u6df7\u5408\u5728\u4e00\u8d77\u7684\u60c5\u51b5\u3002</p> <p>\u4f8b\u5982\uff0c\u4f7f\u7528\u7c7b\u578b\u522b\u540d\u65f6\uff0c\u4ee5\u4e0b\u5185\u5bb9\u5c06\u6210\u529f\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\uff1a</p> <pre><code>UserId = int\n\ndef name_by_id(user_id: UserId) -&gt; str:\n    ...\n\nname_by_id(3)  # int \u548c UserId \u662f\u540c\u4e49\u8bcd\n</code></pre> <p>\u4f46\u4f7f\u7528 <code>NewType</code> \u7684\u7c7b\u4f3c\u793a\u4f8b\u4e0d\u4f1a\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\uff1a</p> <pre><code>from typing import NewType\n\nUserId = NewType('UserId', int)\n\ndef name_by_id(user_id: UserId) -&gt; str:\n    ...\n\nname_by_id(3)  # int \u4e0e UserId \u4e0d\u540c\n</code></pre> <p>There are situations where you may want to avoid programming errors by creating simple derived classes that are only used to distinguish certain values from base class instances. Example:</p> <pre><code>class UserId(int):\n    pass\n\ndef get_by_user_id(user_id: UserId):\n    ...\n</code></pre> <p>However, this approach introduces some runtime overhead. To avoid this, the typing module provides a helper object <code>NewType</code> that creates simple unique types with almost zero runtime overhead. Mypy will treat the statement <code>Derived = NewType('Derived', Base)</code> as being roughly equivalent to the following definition:</p> <pre><code>class Derived(Base):\n    def __init__(self, _x: Base) -&gt; None:\n        ...\n</code></pre> <p>However, at runtime, <code>NewType('Derived', Base)</code> will return a dummy callable that simply returns its argument:</p> <pre><code>def Derived(_x):\n    return _x\n</code></pre> <p>Mypy will require explicit casts from <code>int</code> where <code>UserId</code> is expected, while implicitly casting from <code>UserId</code> where <code>int</code> is expected. Examples:</p> <pre><code>from typing import NewType\n\nUserId = NewType('UserId', int)\n\ndef name_by_id(user_id: UserId) -&gt; str:\n    ...\n\nUserId('user')          # Fails type check\n\nname_by_id(42)          # Fails type check\nname_by_id(UserId(42))  # OK\n\nnum: int = UserId(5) + 1\n</code></pre> <p><code>NewType</code> accepts exactly two arguments. The first argument must be a string literal containing the name of the new type and must equal the name of the variable to which the new type is assigned. The second argument must be a properly subclassable class, i.e., not a type construct like <code>Union</code>, etc.</p> <p>The callable returned by <code>NewType</code> accepts only one argument; this is equivalent to supporting only one constructor accepting an instance of the base class (see above). Example:</p> <pre><code>from typing import NewType\n\nclass PacketId:\n    def __init__(self, major: int, minor: int) -&gt; None:\n        self._major = major\n        self._minor = minor\n\nTcpPacketId = NewType('TcpPacketId', PacketId)\n\npacket = PacketId(100, 100)\ntcp_packet = TcpPacketId(packet)  # OK\n\ntcp_packet = TcpPacketId(127, 0)  # Fails in type checker and at runtime\n</code></pre> <p>You cannot use <code>isinstance</code> or <code>issubclass</code> on the object returned by <code>NewType</code>, nor can you subclass an object returned by <code>NewType</code>.</p> <p>Note</p> <p>Unlike type aliases, <code>NewType</code> will create an entirely new and unique type when used. The intended purpose of <code>NewType</code> is to help you detect cases where you accidentally mixed together the old base type and the new derived type.</p> <p>For example, the following will successfully typecheck when using type aliases:</p> <pre><code>UserId = int\n\ndef name_by_id(user_id: UserId) -&gt; str:\n    ...\n\nname_by_id(3)  # ints and UserId are synonymous\n</code></pre> <p>But a similar example using <code>NewType</code> will not typecheck:</p> <pre><code>from typing import NewType\n\nUserId = NewType('UserId', int)\n\ndef name_by_id(user_id: UserId) -&gt; str:\n    ...\n\nname_by_id(3)  # int is not the same as UserId\n</code></pre>"},{"location":"mypy/more_types/#\u51fd\u6570\u91cd\u8f7d","title":"\u51fd\u6570\u91cd\u8f7d","text":"<p>Function overloading</p> \u4e2d\u6587\u82f1\u6587 <p>\u6709\u65f6\uff0c\u51fd\u6570\u4e2d\u7684\u53c2\u6570\u548c\u7c7b\u578b\u5f7c\u6b64\u4f9d\u8d56\uff0c\u800c\u65e0\u6cd5\u4f7f\u7528 <code>Union</code> \u6355\u83b7 \u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u8981\u7f16\u5199\u4e00\u4e2a\u53ef\u4ee5\u63a5\u53d7 x-y \u5750\u6807\u7684\u51fd\u6570\u3002 \u5982\u679c\u6211\u4eec\u53ea\u4f20\u5165\u4e00\u4e2a x-y \u5750\u6807\uff0c\u6211\u4eec\u5c06\u8fd4\u56de\u4e00\u4e2a \u201cClickEvent\u201d \u5bf9\u8c61\u3002 \u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u4f20\u5165\u4e24\u4e2a x-y \u5750\u6807\uff0c\u6211\u4eec\u5c06\u8fd4\u56de\u4e00\u4e2a \u201cDragEvent\u201d \u5bf9\u8c61\u3002</p> <p>\u6211\u4eec\u7b2c\u4e00\u6b21\u5c1d\u8bd5\u7f16\u5199\u8fd9\u4e2a\u51fd\u6570\u53ef\u80fd\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>from typing import Union, Optional\n\ndef mouse_event(x1: int,\n                y1: int,\n                x2: Optional[int] = None,\n                y2: Optional[int] = None) -&gt; Union[ClickEvent, DragEvent]:\n    if x2 is None and y2 is None:\n        return ClickEvent(x1, y1)\n    elif x2 is not None and y2 is not None:\n        return DragEvent(x1, y1, x2, y2)\n    else:\n        raise TypeError(\"Bad arguments\")\n</code></pre> <p>\u867d\u7136\u8fd9\u4e2a\u51fd\u6570\u7b7e\u540d\u6709\u6548\uff0c\u4f46\u5b83\u592a\u677e\u6563\u4e86\uff1a\u5b83\u610f\u5473\u7740\u65e0\u8bba\u6211\u4eec\u4f20\u5165\u7684\u53c2\u6570\u6570\u91cf\u5982\u4f55\uff0c\u201cmouse_event\u201d \u90fd\u53ef\u4ee5\u8fd4\u56de\u4efb\u4e00\u5bf9\u8c61\u3002\u5b83\u4e5f\u4e0d\u7981\u6b62\u8c03\u7528\u8005\u4f20\u5165\u9519\u8bef\u6570\u91cf\u7684\u6574\u6570\uff1amypy \u4f1a\u50cf\u8fd9\u6837\u5bf9\u5f85\u8c03\u7528 \u4f8b\u5982\uff0c\u201cmouse_event(1, 2, 20)\u201d \u662f\u6709\u6548\u7684\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 <code>overloading</code> \u505a\u5f97\u66f4\u597d\uff0c\u5b83\u53ef\u4ee5\u8ba9\u6211\u4eec\u4e3a\u540c\u4e00\u4e2a\u51fd\u6570\u63d0\u4f9b\u591a\u4e2a\u7c7b\u578b\u6ce8\u91ca\uff08\u7b7e\u540d\uff09\u4ee5\u66f4\u51c6\u786e\u5730\u63cf\u8ff0\u51fd\u6570\u7684\u884c\u4e3a\uff1a</p> <pre><code>from typing import Union, overload\n\n# \u91cd\u8f7d\u201cmouse_event\u201d\u7684*\u534f\u53d8*\u3002\n# \u8fd9\u4e9b\u534f\u53d8\u4e3a\u7c7b\u578b\u68c0\u67e5\u5668\u63d0\u4f9b\u4e86\u989d\u5916\u7684\u4fe1\u606f\u3002\n# \u5b83\u4eec\u5728\u8fd0\u884c\u65f6\u88ab\u5ffd\u7565\u3002\n\n@overload\ndef mouse_event(x1: int, y1: int) -&gt; ClickEvent: ...\n@overload\ndef mouse_event(x1: int, y1: int, x2: int, y2: int) -&gt; DragEvent: ...\n\n# \u201cmouse_event\u201d\u7684\u5b9e\u9645*\u5b9e\u73b0*\u3002\n# \u5b9e\u73b0\u5305\u542b\u5b9e\u9645\u7684\u8fd0\u884c\u65f6\u903b\u8f91\u3002\n#\n# \u5b83\u53ef\u80fd\u6709\u4e5f\u53ef\u80fd\u6ca1\u6709\u7c7b\u578b\u63d0\u793a\u3002 \u5982\u679c\u662f\uff0cmypy \u5c06\u6839\u636e\u7c7b\u578b\u63d0\u793a\u68c0\u67e5\u5b9e\u73b0\u7684\u4e3b\u4f53\u3002\n#\n# Mypy \u8fd8\u5c06\u68c0\u67e5\u5e76\u786e\u4fdd\u7b7e\u540d\u4e0e\u63d0\u4f9b\u7684\u534f\u53d8\u4e00\u81f4\u3002\n\ndef mouse_event(x1: int,\n                y1: int,\n                x2: Optional[int] = None,\n                y2: Optional[int] = None) -&gt; Union[ClickEvent, DragEvent]:\n    if x2 is None and y2 is None:\n        return ClickEvent(x1, y1)\n    elif x2 is not None and y2 is not None:\n        return DragEvent(x1, y1, x2, y2)\n    else:\n        raise TypeError(\"Bad arguments\")\n</code></pre> <p>\u8fd9\u4f7f\u5f97 mypy \u80fd\u591f\u66f4\u51c6\u786e\u5730\u7406\u89e3\u5bf9 \u201cmouse_event\u201d \u7684\u8c03\u7528\u3002 \u4f8b\u5982\uff0cmypy \u5c06\u7406\u89e3 \u201cmouse_event(5, 25)\u201d \u5c06\u59cb\u7ec8\u5177\u6709 \u201cClickEvent\u201d \u7684\u8fd4\u56de\u7c7b\u578b\uff0c\u5e76\u5c06\u62a5\u544a \u201cmouse_event(5, 25, 2)\u201d \u7b49\u8c03\u7528\u7684\u9519\u8bef\u3002</p> <p>\u53e6\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5047\u8bbe\u6211\u4eec\u8981\u7f16\u5199\u4e00\u4e2a\u81ea\u5b9a\u4e49\u5bb9\u5668\u7c7b\u6765\u5b9e\u73b0 <code>__getitem__</code> \u65b9\u6cd5 (<code>[]</code> \u62ec\u53f7\u7d22\u5f15\uff09\u3002 \u5982\u679c\u6b64\u65b9\u6cd5\u63a5\u6536\u5230\u4e00\u4e2a\u6574\u6570\uff0c\u6211\u4eec\u5c06\u8fd4\u56de\u4e00\u4e2a\u9879\u76ee\u3002 \u5982\u679c\u5b83\u6536\u5230\u4e00\u4e2a\u201c\u5207\u7247\u201d\uff0c\u6211\u4eec\u5c06\u8fd4\u56de\u4e00\u4e2a\u9879\u76ee\u7684\u201c\u5e8f\u5217\u201d\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u91cd\u8f7d\u6765\u7cbe\u786e\u7f16\u7801\u53c2\u6570\u548c\u8fd4\u56de\u7c7b\u578b\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>from typing import Sequence, TypeVar, Union, overload\n\nT = TypeVar('T')\n\nclass MyList(Sequence[T]):\n    @overload\n    def __getitem__(self, index: int) -&gt; T: ...\n\n    @overload\n    def __getitem__(self, index: slice) -&gt; Sequence[T]: ...\n\n    def __getitem__(self, index: Union[int, slice]) -&gt; Union[T, Sequence[T]]:\n        if isinstance(index, int):\n            # Return a T here\n        elif isinstance(index, slice):\n            # Return a sequence of Ts here\n        else:\n            raise TypeError(...)\n</code></pre> <p>Note</p> <p>\u5982\u679c\u60a8\u53ea\u9700\u8981\u5c06\u7c7b\u578b\u53d8\u91cf\u9650\u5236\u4e3a\u67d0\u4e9b\u7c7b\u578b\u6216\u5b50\u7c7b\u578b\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528<code>\u503c\u9650\u5236</code>\u3002</p> <p>\u51fd\u6570\u53c2\u6570\u7684\u9ed8\u8ba4\u503c\u4e0d\u4f1a\u5f71\u54cd\u5176\u7b7e\u540d\u2014\u2014\u53ea\u6709\u9ed8\u8ba4\u503c\u7684\u7f3a\u5931\u6216\u5b58\u5728\u624d\u4f1a\u5f71\u54cd\u3002 \u56e0\u6b64\uff0c\u4e3a\u4e86\u51cf\u5c11\u5197\u4f59\uff0c\u53ef\u4ee5\u7528\u201c...\u201d\u4f5c\u4e3a\u5360\u4f4d\u7b26\u6765\u66ff\u6362\u91cd\u8f7d\u5b9a\u4e49\u4e2d\u7684\u9ed8\u8ba4\u503c\uff1a</p> <pre><code>from typing import overload\n\nclass M: ...\n\n@overload\ndef get_model(model_or_pk: M, flag: bool = ...) -&gt; M: ...\n@overload\ndef get_model(model_or_pk: int, flag: bool = ...) -&gt; M | None: ...\n\ndef get_model(model_or_pk: int | M, flag: bool = True) -&gt; M | None:\n    ...\n</code></pre> <p>Sometimes the arguments and types in a function depend on each other in ways that can't be captured with a <code>Union</code>. For example, suppose we want to write a function that can accept x-y coordinates. If we pass in just a single x-y coordinate, we return a <code>ClickEvent</code> object. However, if we pass in two x-y coordinates, we return a <code>DragEvent</code> object.</p> <p>Our first attempt at writing this function might look like this:</p> <pre><code>from typing import Union, Optional\n\ndef mouse_event(x1: int,\n                y1: int,\n                x2: Optional[int] = None,\n                y2: Optional[int] = None) -&gt; Union[ClickEvent, DragEvent]:\n    if x2 is None and y2 is None:\n        return ClickEvent(x1, y1)\n    elif x2 is not None and y2 is not None:\n        return DragEvent(x1, y1, x2, y2)\n    else:\n        raise TypeError(\"Bad arguments\")\n</code></pre> <p>While this function signature works, it's too loose: it implies <code>mouse_event</code> could return either object regardless of the number of arguments we pass in. It also does not prohibit a caller from passing in the wrong number of ints: mypy would treat calls like <code>mouse_event(1, 2, 20)</code> as being valid, for example.</p> <p>We can do better by using <code>overloading</code> which lets us give the same function multiple type annotations (signatures) to more accurately describe the function's behavior:</p> <pre><code>from typing import Union, overload\n\n# Overload *variants* for 'mouse_event'.\n# These variants give extra information to the type checker.\n# They are ignored at runtime.\n\n@overload\ndef mouse_event(x1: int, y1: int) -&gt; ClickEvent: ...\n@overload\ndef mouse_event(x1: int, y1: int, x2: int, y2: int) -&gt; DragEvent: ...\n\n# The actual *implementation* of 'mouse_event'.\n# The implementation contains the actual runtime logic.\n#\n# It may or may not have type hints. If it does, mypy\n# will check the body of the implementation against the\n# type hints.\n#\n# Mypy will also check and make sure the signature is\n# consistent with the provided variants.\n\ndef mouse_event(x1: int,\n                y1: int,\n                x2: Optional[int] = None,\n                y2: Optional[int] = None) -&gt; Union[ClickEvent, DragEvent]:\n    if x2 is None and y2 is None:\n        return ClickEvent(x1, y1)\n    elif x2 is not None and y2 is not None:\n        return DragEvent(x1, y1, x2, y2)\n    else:\n        raise TypeError(\"Bad arguments\")\n</code></pre> <p>This allows mypy to understand calls to <code>mouse_event</code> much more precisely. For example, mypy will understand that <code>mouse_event(5, 25)</code> will always have a return type of <code>ClickEvent</code> and will report errors for calls like <code>mouse_event(5, 25, 2)</code>.</p> <p>As another example, suppose we want to write a custom container class that implements the <code>__getitem__</code> method (<code>[]</code> bracket indexing). If this method receives an integer we return a single item. If it receives a <code>slice</code>, we return a <code>Sequence</code> of items.</p> <p>We can precisely encode this relationship between the argument and the return type by using overloads like so:</p> <pre><code>from typing import Sequence, TypeVar, Union, overload\n\nT = TypeVar('T')\n\nclass MyList(Sequence[T]):\n    @overload\n    def __getitem__(self, index: int) -&gt; T: ...\n\n    @overload\n    def __getitem__(self, index: slice) -&gt; Sequence[T]: ...\n\n    def __getitem__(self, index: Union[int, slice]) -&gt; Union[T, Sequence[T]]:\n        if isinstance(index, int):\n            # Return a T here\n        elif isinstance(index, slice):\n            # Return a sequence of Ts here\n        else:\n            raise TypeError(...)\n</code></pre> <p>Note</p> <p>If you just need to constrain a type variable to certain types or subtypes, you can use a <code>value restriction</code>.</p> <p>The default values of a function's arguments don't affect its signature -- only the absence or presence of a default value does. So in order to reduce redundancy, it's possible to replace default values in overload definitions with <code>...</code> as a placeholder:</p> <pre><code>from typing import overload\n\nclass M: ...\n\n@overload\ndef get_model(model_or_pk: M, flag: bool = ...) -&gt; M: ...\n@overload\ndef get_model(model_or_pk: int, flag: bool = ...) -&gt; M | None: ...\n\ndef get_model(model_or_pk: int | M, flag: bool = True) -&gt; M | None:\n    ...\n</code></pre>"},{"location":"mypy/more_types/#\u8fd0\u884c\u65f6\u884c\u4e3a","title":"\u8fd0\u884c\u65f6\u884c\u4e3a","text":"<p>Runtime behavior</p> \u4e2d\u6587\u82f1\u6587 <p>\u91cd\u8f7d\u51fd\u6570\u5fc5\u987b\u7531\u4e24\u4e2a\u6216\u591a\u4e2a\u91cd\u8f7d\u534f\u53d8\u7ec4\u6210\uff0c\u540e\u8ddf\u4e00\u4e2a\u5b9e\u73b0\u3002 \u534f\u53d8\u548c\u5b9e\u73b0\u5728\u4ee3\u7801\u4e2d\u5fc5\u987b\u76f8\u90bb\uff1a\u5c06\u5b83\u4eec\u89c6\u4e3a\u4e00\u4e2a\u4e0d\u53ef\u5206\u5272\u7684\u5355\u5143\u3002</p> <p>\u534f\u53d8\u4e3b\u4f53\u5fc5\u987b\u5168\u90e8\u4e3a\u7a7a\uff1b \u4ec5\u5141\u8bb8\u5b9e\u73b0\u5305\u542b\u4ee3\u7801\u3002 \u8fd9\u662f\u56e0\u4e3a\u5728\u8fd0\u884c\u65f6\uff0c\u534f\u53d8\u88ab\u5b8c\u5168\u5ffd\u7565\uff1a\u5b83\u4eec\u88ab\u6700\u7ec8\u7684\u5b9e\u73b0\u51fd\u6570\u8986\u76d6\u3002</p> <p>\u8fd9\u610f\u5473\u7740\u91cd\u8f7d\u51fd\u6570\u4ecd\u7136\u662f\u666e\u901a\u7684Python\u51fd\u6570\uff01 \u6ca1\u6709\u81ea\u52a8\u8c03\u5ea6\u5904\u7406\uff0c\u60a8\u5fc5\u987b\u624b\u52a8\u5904\u7406\u5b9e\u73b0\u4e2d\u7684\u4e0d\u540c\u7c7b\u578b\uff08\u4f8b\u5982\uff0c\u901a\u8fc7\u4f7f\u7528 <code>if</code> \u8bed\u53e5\u548c <code>isinstance</code> \u68c0\u67e5)\u3002</p> <p>\u5982\u679c\u8981\u5728\u5b58\u6839\u6587\u4ef6\u4e2d\u6dfb\u52a0\u91cd\u8f7d\uff0c\u5219\u5e94\u7701\u7565\u5b9e\u73b0\u51fd\u6570\uff1a\u5b58\u6839\u4e0d\u5305\u542b\u8fd0\u884c\u65f6\u903b\u8f91\u3002</p> <p>Note</p> <p>\u867d\u7136\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 \u201cpass\u201d \u5173\u952e\u5b57\u5c06\u534f\u53d8\u4e3b\u4f53\u7559\u7a7a\uff0c\u4f46\u66f4\u5e38\u89c1\u7684\u7ea6\u5b9a\u662f\u4f7f\u7528\u7701\u7565\u53f7\uff08\u201c...\u201d\uff09\u6587\u5b57\u3002</p> <p>An overloaded function must consist of two or more overload variants followed by an implementation. The variants and the implementations must be adjacent in the code: think of them as one indivisible unit.</p> <p>The variant bodies must all be empty; only the implementation is allowed to contain code. This is because at runtime, the variants are completely ignored: they're overridden by the final implementation function.</p> <p>This means that an overloaded function is still an ordinary Python function! There is no automatic dispatch handling and you must manually handle the different types in the implementation (e.g. by using <code>if</code> statements and <code>isinstance</code> checks).</p> <p>If you are adding an overload within a stub file, the implementation function should be omitted: stubs do not contain runtime logic.</p> <p>Note</p> <p>While we can leave the variant body empty using the <code>pass</code> keyword, the more common convention is to instead use the ellipsis (<code>...</code>) literal.</p>"},{"location":"mypy/more_types/#\u91cd\u8f7d\u7684\u7c7b\u578b\u8fdb\u884c\u8c03\u7528\u68c0\u67e5","title":"\u91cd\u8f7d\u7684\u7c7b\u578b\u8fdb\u884c\u8c03\u7528\u68c0\u67e5","text":"<p>Type checking calls to overloads</p> \u4e2d\u6587\u82f1\u6587 <p>\u5f53\u60a8\u8c03\u7528\u91cd\u8f7d\u51fd\u6570\u65f6\uff0cmypy \u5c06\u5728\u8003\u8651\u53c2\u6570\u7c7b\u578b\u548c\u6570\u91cf\u540e\uff0c\u901a\u8fc7\u9009\u62e9\u6700\u4f73\u5339\u914d\u534f\u53d8\u6765\u63a8\u65ad\u6b63\u786e\u7684\u8fd4\u56de\u7c7b\u578b\u3002 \u7136\u800c\uff0c\u8c03\u7528\u6c38\u8fdc\u4e0d\u4f1a\u6839\u636e\u5b9e\u73b0\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u3002 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48 mypy \u4f1a\u62a5\u544a\u50cf \u201cmouse_event(5, 25, 3)\u201d \u8fd9\u6837\u7684\u8c03\u7528\u65e0\u6548\uff0c\u5373\u4f7f\u5b83\u4e0e\u5b9e\u73b0\u7b7e\u540d\u5339\u914d\u3002</p> <p>\u5982\u679c\u6709\u591a\u4e2a\u540c\u6837\u597d\u7684\u5339\u914d\u534f\u53d8\uff0cmypy \u5c06\u9009\u62e9\u6700\u5148\u5b9a\u4e49\u7684\u534f\u53d8\u3002 \u4f8b\u5982\uff0c\u8003\u8651\u4ee5\u4e0b\u7a0b\u5e8f\uff1a</p> <pre><code># For Python 3.8 and below you must use `typing.List` instead of `list`. e.g.\n# from typing import List\nfrom typing import overload\n\n@overload\ndef summarize(data: list[int]) -&gt; float: ...\n\n@overload\ndef summarize(data: list[str]) -&gt; str: ...\n\ndef summarize(data):\n    if not data:\n        return 0.0\n    elif isinstance(data[0], int):\n        # Do int specific code\n    else:\n        # Do str-specific code\n\n# What is the type of 'output'? float or str?\noutput = summarize([])\n</code></pre> <p><code>summarize([])</code> \u8c03\u7528\u5339\u914d\u4e24\u79cd\u534f\u53d8\uff1a\u7a7a\u5217\u8868\u53ef\u4ee5\u662f <code>list[int]</code> \u6216 <code>list[str]</code>\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cmypy \u5c06\u901a\u8fc7\u9009\u62e9\u7b2c\u4e00\u4e2a\u5339\u914d\u7684\u534f\u53d8\u6765\u6253\u7834\u5e73\u5c40\uff1a\u201coutput\u201d \u5c06\u5177\u6709 \u201cfloat\u201d \u7684\u63a8\u65ad\u7c7b\u578b\u3002 \u5b9e\u73b0\u8005\u8d1f\u8d23\u786e\u4fdd \u201csummarize\u201d \u5728\u8fd0\u884c\u65f6\u4ee5\u76f8\u540c\u7684\u65b9\u5f0f\u6253\u7834\u8054\u7cfb\u3002</p> <p>\u4f46\u662f\uff0c\u201c\u9009\u62e9\u7b2c\u4e00\u4e2a\u5339\u914d\u9879\u201d \u89c4\u5219\u6709\u4e24\u4e2a\u4f8b\u5916\u3002 \u9996\u5148\uff0c\u5982\u679c\u7531\u4e8e\u53c2\u6570\u7c7b\u578b\u4e3a\u201cAny\u201d\u800c\u5bfc\u81f4\u591a\u4e2a\u534f\u53d8\u5339\u914d\uff0c\u5219 mypy \u5c06\u4f7f\u63a8\u65ad\u7c7b\u578b\u4e5f\u4e3a\u201cAny\u201d\uff1a</p> <pre><code>dynamic_var: Any = some_dynamic_function()\n\n# output2 is of type 'Any'\noutput2 = summarize(dynamic_var)\n</code></pre> <p>\u5176\u6b21\uff0c\u5982\u679c\u7531\u4e8e\u4e00\u4e2a\u6216\u591a\u4e2a\u53c2\u6570\u662f\u8054\u5408\u800c\u5bfc\u81f4\u591a\u4e2a\u534f\u53d8\u5339\u914d\uff0c\u5219 mypy \u5c06\u4f7f\u63a8\u65ad\u7c7b\u578b\u6210\u4e3a\u5339\u914d\u534f\u53d8\u8fd4\u56de\u7684\u5e76\u96c6\uff1a</p> <pre><code>some_list: Union[list[int], list[str]]\n\n# output3 is of type 'Union[float, str]'\noutput3 = summarize(some_list)\n</code></pre> <p>Note</p> <p>\u7531\u4e8e\u201c\u9009\u62e9\u7b2c\u4e00\u4e2a\u5339\u914d\u201d\u89c4\u5219\uff0c\u66f4\u6539\u91cd\u8f7d\u534f\u53d8\u7684\u987a\u5e8f\u53ef\u4ee5\u66f4\u6539 mypy \u7c7b\u578b\u68c0\u67e5\u7a0b\u5e8f\u7684\u65b9\u5f0f\u3002</p> <p>\u4e3a\u4e86\u5c3d\u91cf\u51cf\u5c11\u6f5c\u5728\u95ee\u9898\uff0c\u6211\u4eec\u5efa\u8bae\u60a8\uff1a</p> <ol> <li>\u786e\u4fdd\u60a8\u7684\u91cd\u8f7d\u534f\u53d8\u4ee5\u4e0e\u5b9e\u73b0\u4e2d\u8fd0\u884c\u65f6\u68c0\u67e5\uff08\u4f8b\u5982 <code>isinstance</code> \u68c0\u67e5\uff09\u76f8\u540c\u7684\u987a\u5e8f\u5217\u51fa\u3002</li> <li>\u6309\u7167\u4ece\u6700\u5177\u4f53\u5230\u6700\u4e0d\u5177\u4f53\u7684\u987a\u5e8f\u5bf9\u534f\u53d8\u548c\u8fd0\u884c\u65f6\u68c0\u67e5\u8fdb\u884c\u6392\u5e8f\u3002\uff08\u6709\u5173\u793a\u4f8b\uff0c\u8bf7\u53c2\u9605\u4ee5\u4e0b\u90e8\u5206\uff09\u3002</li> </ol> <p>When you call an overloaded function, mypy will infer the correct return type by picking the best matching variant, after taking into consideration both the argument types and arity. However, a call is never type checked against the implementation. This is why mypy will report calls like <code>mouse_event(5, 25, 3)</code> as being invalid even though it matches the implementation signature.</p> <p>If there are multiple equally good matching variants, mypy will select the variant that was defined first. For example, consider the following program:</p> <pre><code># For Python 3.8 and below you must use `typing.List` instead of `list`. e.g.\n# from typing import List\nfrom typing import overload\n\n@overload\ndef summarize(data: list[int]) -&gt; float: ...\n\n@overload\ndef summarize(data: list[str]) -&gt; str: ...\n\ndef summarize(data):\n    if not data:\n        return 0.0\n    elif isinstance(data[0], int):\n        # Do int specific code\n    else:\n        # Do str-specific code\n\n# What is the type of 'output'? float or str?\noutput = summarize([])\n</code></pre> <p>The <code>summarize([])</code> call matches both variants: an empty list could be either a <code>list[int]</code> or a <code>list[str]</code>. In this case, mypy will break the tie by picking the first matching variant: <code>output</code> will have an inferred type of <code>float</code>. The implementor is responsible for making sure <code>summarize</code> breaks ties in the same way at runtime.</p> <p>However, there are two exceptions to the \"pick the first match\" rule. First, if multiple variants match due to an argument being of type <code>Any</code>, mypy will make the inferred type also be <code>Any</code>:</p> <pre><code>dynamic_var: Any = some_dynamic_function()\n\n# output2 is of type 'Any'\noutput2 = summarize(dynamic_var)\n</code></pre> <p>Second, if multiple variants match due to one or more of the arguments being a union, mypy will make the inferred type be the union of the matching variant returns:</p> <pre><code>some_list: Union[list[int], list[str]]\n\n# output3 is of type 'Union[float, str]'\noutput3 = summarize(some_list)\n</code></pre> <p>Note</p> <p>Due to the \"pick the first match\" rule, changing the order of your overload variants can change how mypy type checks your program.</p> <p>To minimize potential issues, we recommend that you:</p> <ol> <li>Make sure your overload variants are listed in the same order as the runtime checks (e.g. <code>isinstance</code> checks) in your implementation.</li> <li>Order your variants and runtime checks from most to least specific. (See the following section for an example).</li> </ol>"},{"location":"mypy/more_types/#\u534f\u53d8\u7684\u7c7b\u578b\u68c0\u67e5","title":"\u534f\u53d8\u7684\u7c7b\u578b\u68c0\u67e5","text":"<p>Type checking the variants</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u5c06\u5bf9\u60a8\u7684\u91cd\u8f7d\u534f\u53d8\u5b9a\u4e49\u6267\u884c\u591a\u6b21\u68c0\u67e5\uff0c\u4ee5\u786e\u4fdd\u5b83\u4eec\u7684\u884c\u4e3a\u7b26\u5408\u9884\u671f\u3002 \u9996\u5148\uff0cmypy \u5c06\u68c0\u67e5\u5e76\u786e\u4fdd\u6ca1\u6709\u91cd\u8f7d\u534f\u53d8\u906e\u76d6\u540e\u7eed\u534f\u53d8\u3002 \u4f8b\u5982\uff0c\u8003\u8651\u4ee5\u4e0b\u51fd\u6570\uff0c\u5b83\u5c06\u4e24\u4e2a\u201cExpression\u201d\u5bf9\u8c61\u52a0\u5728\u4e00\u8d77\uff0c\u5e76\u5305\u542b\u4e00\u4e2a\u7279\u6b8a\u60c5\u51b5\u6765\u5904\u7406\u63a5\u6536\u4e24\u4e2a\u201cLiteral\u201d\u7c7b\u578b\uff1a</p> <pre><code>from typing import overload, Union\n\nclass Expression:\n    # ...snip...\n\nclass Literal(Expression):\n    # ...snip...\n\n# Warning -- the first overload variant shadows the second!\n\n@overload\ndef add(left: Expression, right: Expression) -&gt; Expression: ...\n\n@overload\ndef add(left: Literal, right: Literal) -&gt; Literal: ...\n\ndef add(left: Expression, right: Expression) -&gt; Expression:\n    # ...snip...\n</code></pre> <p>\u867d\u7136\u6b64\u4ee3\u7801\u7247\u6bb5\u5728\u6280\u672f\u4e0a\u662f\u7c7b\u578b\u5b89\u5168\u7684\uff0c\u4f46\u5b83\u786e\u5b9e\u5305\u542b\u53cd\u6a21\u5f0f\uff1a\u6c38\u8fdc\u4e0d\u4f1a\u9009\u62e9\u7b2c\u4e8c\u4e2a\u534f\u53d8\uff01 \u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u8c03\u7528\u201cadd(Literal(3), Literal(4))\u201d\uff0cmypy \u5c06\u59cb\u7ec8\u9009\u62e9\u7b2c\u4e00\u4e2a\u534f\u53d8\u5e76\u5c06\u51fd\u6570\u8c03\u7528\u8bc4\u4f30\u4e3a\u201cExpression\u201d\u7c7b\u578b\uff0c\u800c\u4e0d\u662f\u201cLiteral\u201d\u3002 \u8fd9\u662f\u56e0\u4e3a <code>Literal</code> \u662f <code>Expression</code> \u7684\u5b50\u7c7b\u578b\uff0c\u8fd9\u610f\u5473\u7740\u201c\u9009\u62e9\u7b2c\u4e00\u4e2a\u5339\u914d\u201d\u89c4\u5219\u5728\u8003\u8651\u7b2c\u4e00\u6b21\u91cd\u8f7d\u540e\u5c06\u59cb\u7ec8\u505c\u6b62\u3002</p> <p>\u56e0\u4e3a\u62e5\u6709\u6c38\u8fdc\u65e0\u6cd5\u5339\u914d\u7684\u91cd\u8f7d\u534f\u53d8\u51e0\u4e4e\u80af\u5b9a\u662f\u4e00\u4e2a\u9519\u8bef\uff0c\u6240\u4ee5 mypy \u5c06\u62a5\u544a\u9519\u8bef\u3002 \u8981\u4fee\u590d\u8be5\u9519\u8bef\uff0c\u6211\u4eec\u53ef\u4ee5 1) \u5220\u9664\u7b2c\u4e8c\u4e2a\u91cd\u8f7d\u6216 2) \u4ea4\u6362\u91cd\u8f7d\u7684\u987a\u5e8f\uff1a</p> <pre><code># Everything is ok now -- the variants are correctly ordered\n# from most to least specific.\n\n@overload\ndef add(left: Literal, right: Literal) -&gt; Literal: ...\n\n@overload\ndef add(left: Expression, right: Expression) -&gt; Expression: ...\n\ndef add(left: Expression, right: Expression) -&gt; Expression:\n    # ...snip...\n</code></pre> <p>Mypy \u8fd8\u5c06\u5bf9\u4e0d\u540c\u7684\u534f\u53d8\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\uff0c\u5e76\u6807\u8bb0\u4efb\u4f55\u5177\u6709\u672c\u8d28\u4e0a\u4e0d\u5b89\u5168\u7684\u91cd\u53e0\u534f\u53d8\u7684\u91cd\u8f7d\u3002 \u4f8b\u5982\uff0c\u8003\u8651\u4ee5\u4e0b\u4e0d\u5b89\u5168\u91cd\u8f7d\u5b9a\u4e49\uff1a</p> <pre><code>from typing import overload, Union\n\n@overload\ndef unsafe_func(x: int) -&gt; int: ...\n\n@overload\ndef unsafe_func(x: object) -&gt; str: ...\n\ndef unsafe_func(x: object) -&gt; Union[int, str]:\n    if isinstance(x, int):\n        return 42\n    else:\n        return \"some string\"\n</code></pre> <p>\u4ece\u8868\u9762\u4e0a\u770b\uff0c\u8fd9\u4e2a\u51fd\u6570\u5b9a\u4e49\u4f3c\u4e4e\u6ca1\u95ee\u9898\u3002 \u4f46\u662f\uff0c\u5f53\u6211\u4eec\u5c1d\u8bd5\u50cf\u8fd9\u6837\u4f7f\u7528\u5b83\u65f6\uff0c\u4f1a\u5bfc\u81f4\u63a8\u65ad\u7c7b\u578b\u4e0e\u5b9e\u9645\u8fd0\u884c\u65f6\u7c7b\u578b\u4e4b\u95f4\u5b58\u5728\u5dee\u5f02\uff1a</p> <pre><code>some_obj: object = 42\nunsafe_func(some_obj) + \" danger danger\"  # Type checks, yet crashes at runtime!\n</code></pre> <p>\u7531\u4e8e <code>some_obj</code> \u7684\u7c7b\u578b\u4e3a <code>object</code>\uff0cmypy \u5c06\u51b3\u5b9a <code>unsafe_func</code> \u5fc5\u987b\u8fd4\u56de <code>str</code> \u7c7b\u578b\u7684\u5185\u5bb9\uff0c\u5e76\u4e14 \u603b\u7ed3\u4ee5\u4e0a\u5185\u5bb9\u5c06\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u3002 \u4f46\u5b9e\u9645\u4e0a\uff0c<code>unsafe_func</code>\u4f1a\u8fd4\u56de\u4e00\u4e2aint\uff0c\u5bfc\u81f4\u4ee3\u7801\u5728\u8fd0\u884c\u65f6\u5d29\u6e83\uff01</p> <p>\u4e3a\u4e86\u9632\u6b62\u6b64\u7c7b\u95ee\u9898\uff0cmypy \u5c06\u5c3d\u6700\u5927\u52aa\u529b\u68c0\u6d4b\u5e76\u7981\u6b62\u672c\u8d28\u4e0a\u4e0d\u5b89\u5168\u7684\u91cd\u53e0\u91cd\u8f7d\u3002 \u5f53\u4ee5\u4e0b\u4e24\u4e2a\u6761\u4ef6\u90fd\u6210\u7acb\u65f6\uff0c\u4e24\u4e2a\u53d8\u4f53\u88ab\u89c6\u4e3a\u4e0d\u5b89\u5168\u91cd\u53e0\uff1a</p> <ol> <li>\u7b2c\u4e00\u4e2a\u53d8\u4f53\u7684\u6240\u6709\u53c2\u6570\u90fd\u4e0e\u7b2c\u4e8c\u4e2a\u53d8\u4f53\u517c\u5bb9\u3002</li> <li>\u7b2c\u4e00\u4e2a\u53d8\u4f53\u7684\u8fd4\u56de\u7c7b\u578b\u4e0e\u7b2c\u4e8c\u4e2a\u53d8\u4f53\u201c\u4e0d\u201d\u517c\u5bb9\uff08\u4f8b\u5982\u4e0d\u662f\u5176\u5b50\u7c7b\u578b\uff09\u3002</li> </ol> <p>\u56e0\u6b64\uff0c\u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u53d8\u4f53\u4e2d\u7684 \u201cint\u201d \u53c2\u6570\u662f\u7b2c\u4e8c\u4e2a\u53d8\u4f53\u4e2d \u201cobject\u201d \u53c2\u6570\u7684\u5b50\u7c7b\u578b\uff0c\u4f46 \u201cint\u201d \u8fd4\u56de\u7c7b\u578b\u4e0d\u662f \u201cstr\u201d \u7684\u5b50\u7c7b\u578b\u3002 \u8fd9\u4e24\u4e2a\u6761\u4ef6\u90fd\u6210\u7acb\uff0c\u56e0\u6b64 mypy \u4f1a\u6b63\u786e\u5730\u5c06 <code>unsafe_func</code> \u6807\u8bb0\u4e3a\u4e0d\u5b89\u5168\u3002</p> <p>\u4f46\u662f\uff0cmypy \u4e0d\u4f1a\u68c0\u6d4b \u6240\u6709 \u4e0d\u5b89\u5168\u7684\u91cd\u8f7d\u4f7f\u7528\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u4fee\u6539\u4e0a\u9762\u7684\u4ee3\u7801\u7247\u6bb5\uff0c\u4f7f\u5176\u8c03\u7528 \u201csummarize\u201d \u800c\u4e0d\u662f \u201cunsafe_func\u201d \uff1a</p> <pre><code>some_list: list[str] = []\nsummarize(some_list) + \"danger danger\"  # Type safe, yet crashes at runtime!\n</code></pre> <p>\u6211\u4eec\u5728\u8fd9\u91cc\u9047\u5230\u4e86\u7c7b\u4f3c\u7684\u95ee\u9898\u3002 \u8be5\u7a0b\u5e8f\u7c7b\u578b\u68c0\u67e5\u6211\u4eec\u662f\u5426\u53ea\u67e5\u770b\u91cd\u8f7d\u4e0a\u7684\u6ce8\u91ca\u3002 \u4f46\u7531\u4e8e\u201csummarize(...)\u201d\u88ab\u8bbe\u8ba1\u4e3a\u5728\u63a5\u6536\u5230\u7a7a\u5217\u8868\u65f6\u504f\u5411\u4e8e\u8fd4\u56de\u6d6e\u70b9\u6570\uff0c\u56e0\u6b64\u8be5\u7a0b\u5e8f\u5b9e\u9645\u4e0a\u4f1a\u5728\u8fd0\u884c\u65f6\u5d29\u6e83\u3002</p> <p>mypy \u6ca1\u6709\u5c06\u50cf\u201csummarize\u201d\u8fd9\u6837\u7684\u5b9a\u4e49\u6807\u8bb0\u4e3a\u6f5c\u5728\u4e0d\u5b89\u5168\u7684\u539f\u56e0\u662f\uff0c\u5982\u679c\u8fd9\u6837\u505a\uff0c\u7f16\u5199\u5b89\u5168\u91cd\u8f7d\u5c06\u975e\u5e38\u56f0\u96be\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u5177\u6709\u4e24\u4e2a\u5206\u522b\u63a5\u53d7\u7c7b\u578b\u201cA\u201d\u548c\u201cB\u201d\u7684\u53d8\u4f53\u7684\u91cd\u8f7d\u3002 \u5373\u4f7f\u8fd9\u4e24\u79cd\u7c7b\u578b\u5b8c\u5168\u4e0d\u76f8\u5173\uff0c\u7528\u6237\u4ecd\u7136\u53ef\u80fd\u901a\u8fc7\u4f20\u5165\u7ee7\u627f\u81ea\u201cA\u201d\u548c\u201cB\u201d\u7684\u7b2c\u4e09\u79cd\u7c7b\u578b\u201cC\u201d\u7684\u503c\u6765\u89e6\u53d1\u4e0e\u4e0a\u8ff0\u7c7b\u4f3c\u7684\u8fd0\u884c\u65f6\u9519\u8bef\u3002</p> <p>\u503c\u5f97\u5e86\u5e78\u7684\u662f\uff0c\u6b64\u7c7b\u60c5\u51b5\u76f8\u5bf9\u8f83\u5c11\u3002 \u7136\u800c\uff0c\u8fd9\u786e\u5b9e\u610f\u5473\u7740\uff0c\u5728\u8bbe\u8ba1\u6216\u4f7f\u7528\u91cd\u8f7d\u51fd\u6570\u65f6\u5e94\u8be5\u5c0f\u5fc3\u8c28\u614e\uff0c\u56e0\u4e3a\u8be5\u91cd\u8f7d\u51fd\u6570\u53ef\u80fd\u4f1a\u63a5\u6536\u4e24\u4e2a\u770b\u4f3c\u4e0d\u76f8\u5173\u7c7b\u578b\u7684\u5b9e\u4f8b\u503c\u3002</p> <p>Mypy will perform several checks on your overload variant definitions to ensure they behave as expected. First, mypy will check and make sure that no overload variant is shadowing a subsequent one. For example, consider the following function which adds together two <code>Expression</code> objects, and contains a special-case to handle receiving two <code>Literal</code> types:</p> <pre><code>from typing import overload, Union\n\nclass Expression:\n    # ...snip...\n\nclass Literal(Expression):\n    # ...snip...\n\n# Warning -- the first overload variant shadows the second!\n\n@overload\ndef add(left: Expression, right: Expression) -&gt; Expression: ...\n\n@overload\ndef add(left: Literal, right: Literal) -&gt; Literal: ...\n\ndef add(left: Expression, right: Expression) -&gt; Expression:\n    # ...snip...\n</code></pre> <p>While this code snippet is technically type-safe, it does contain an anti-pattern: the second variant will never be selected! If we try calling <code>add(Literal(3), Literal(4))</code>, mypy will always pick the first variant and evaluate the function call to be of type <code>Expression</code>, not <code>Literal</code>. This is because <code>Literal</code> is a subtype of <code>Expression</code>, which means the \"pick the first match\" rule will always halt after considering the first overload.</p> <p>Because having an overload variant that can never be matched is almost certainly a mistake, mypy will report an error. To fix the error, we can either 1) delete the second overload or 2) swap the order of the overloads:</p> <pre><code># Everything is ok now -- the variants are correctly ordered\n# from most to least specific.\n\n@overload\ndef add(left: Literal, right: Literal) -&gt; Literal: ...\n\n@overload\ndef add(left: Expression, right: Expression) -&gt; Expression: ...\n\ndef add(left: Expression, right: Expression) -&gt; Expression:\n    # ...snip...\n</code></pre> <p>Mypy will also type check the different variants and flag any overloads that have inherently unsafely overlapping variants. For example, consider the following unsafe overload definition:</p> <pre><code>from typing import overload, Union\n\n@overload\ndef unsafe_func(x: int) -&gt; int: ...\n\n@overload\ndef unsafe_func(x: object) -&gt; str: ...\n\ndef unsafe_func(x: object) -&gt; Union[int, str]:\n    if isinstance(x, int):\n        return 42\n    else:\n        return \"some string\"\n</code></pre> <p>On the surface, this function definition appears to be fine. However, it will result in a discrepancy between the inferred type and the actual runtime type when we try using it like so:</p> <pre><code>some_obj: object = 42\nunsafe_func(some_obj) + \" danger danger\"  # Type checks, yet crashes at runtime!\n</code></pre> <p>Since <code>some_obj</code> is of type <code>object</code>, mypy will decide that <code>unsafe_func</code> must return something of type <code>str</code> and concludes the above will type check. But in reality, <code>unsafe_func</code> will return an int, causing the code to crash at runtime!</p> <p>To prevent these kinds of issues, mypy will detect and prohibit inherently unsafely overlapping overloads on a best-effort basis. Two variants are considered unsafely overlapping when both of the following are true:</p> <ol> <li>All of the arguments of the first variant are compatible with the second.</li> <li>The return type of the first variant is not compatible with (e.g. is not a subtype of) the second.</li> </ol> <p>So in this example, the <code>int</code> argument in the first variant is a subtype of the <code>object</code> argument in the second, yet the <code>int</code> return type is not a subtype of <code>str</code>. Both conditions are true, so mypy will correctly flag <code>unsafe_func</code> as being unsafe.</p> <p>However, mypy will not detect all unsafe uses of overloads. For example, suppose we modify the above snippet so it calls <code>summarize</code> instead of <code>unsafe_func</code>:</p> <pre><code>some_list: list[str] = []\nsummarize(some_list) + \"danger danger\"  # Type safe, yet crashes at runtime!\n</code></pre> <p>We run into a similar issue here. This program type checks if we look just at the annotations on the overloads. But since <code>summarize(...)</code> is designed to be biased towards returning a float when it receives an empty list, this program will actually crash during runtime.</p> <p>The reason mypy does not flag definitions like <code>summarize</code> as being potentially unsafe is because if it did, it would be extremely difficult to write a safe overload. For example, suppose we define an overload with two variants that accept types <code>A</code> and <code>B</code> respectively. Even if those two types were completely unrelated, the user could still potentially trigger a runtime error similar to the ones above by passing in a value of some third type <code>C</code> that inherits from both <code>A</code> and <code>B</code>.</p> <p>Thankfully, these types of situations are relatively rare. What this does mean, however, is that you should exercise caution when designing or using an overloaded function that can potentially receive values that are an instance of two seemingly unrelated types.</p>"},{"location":"mypy/more_types/#\u7c7b\u578b\u68c0\u67e5\u7684\u5b9e\u73b0","title":"\u7c7b\u578b\u68c0\u67e5\u7684\u5b9e\u73b0","text":"<p>Type checking the implementation</p> \u4e2d\u6587\u82f1\u6587 <p>\u5b9e\u73b0\u7684\u4e3b\u4f53\u6839\u636e\u5b9e\u73b0\u4e0a\u63d0\u4f9b\u7684\u7c7b\u578b\u63d0\u793a\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u3002 \u4f8b\u5982\uff0c\u5728\u4e0a\u9762\u7684 \u201cMyList\u201d \u793a\u4f8b\u4e2d\uff0c\u4e3b\u4f53\u4e2d\u7684\u4ee3\u7801\u4f7f\u7528\u53c2\u6570\u5217\u8868 \u201cindex: Union[int, slice]\u201d \u548c\u8fd4\u56de\u7c7b\u578b \u201cUnion[T, Sequence[T]]\u201d \u8fdb\u884c\u68c0\u67e5\u3002 \u5982\u679c\u5b9e\u73b0\u4e0a\u6ca1\u6709\u6ce8\u91ca\uff0c\u5219\u4e0d\u4f1a\u5bf9\u4e3b\u4f53\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u3002 \u5982\u679c\u60a8\u60f3\u5f3a\u5236 mypy \u68c0\u67e5\u4e3b\u4f53\uff0c\u8bf7\u4f7f\u7528 <code>--check-untyped-defs</code> \u6807\u5fd7\uff08<code>\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u8bf7\u53c2\u89c1\u6b64\u5904</code>\uff09\u3002</p> <p>\u8fd9\u4e9b\u53d8\u4f53\u8fd8\u5fc5\u987b\u4e0e\u5b9e\u73b0\u7c7b\u578b\u63d0\u793a\u517c\u5bb9\u3002 \u5728 \u201cMyList\u201d \u793a\u4f8b\u4e2d\uff0cmypy \u5c06\u68c0\u67e5\u53c2\u6570\u7c7b\u578b\u201cint\u201d\u548c\u8fd4\u56de\u7c7b\u578b\u201cT\u201d\u662f\u5426\u4e0e\u7b2c\u4e00\u4e2a\u53d8\u4f53\u7684\u201cUnion[int, slice]\u201d\u548c\u201cUnion[T, Sequence]\u201d\u517c\u5bb9\u3002 \u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u53d8\u4f53\uff0c\u5b83\u9a8c\u8bc1\u53c2\u6570\u7c7b\u578b\u201cslice\u201d\u548c\u8fd4\u56de\u7c7b\u578b\u201cSequence[T]\u201d\u4e0e\u201cUnion[int, slice]\u201d\u548c\u201cUnion[T, Sequence]\u201d\u517c\u5bb9\u3002</p> <p>Note</p> <p>\u4e0a\u9762\u8bb0\u5f55\u7684\u91cd\u8f7d\u8bed\u4e49\u662f\u4ece mypy 0.620 \u5f00\u59cb\u7684\u65b0\u8bed\u4e49\u3002</p> <p>\u4ee5\u524d\uff0cmypy \u7528\u4e8e\u5bf9\u6240\u6709\u91cd\u8f7d\u53d8\u4f53\u6267\u884c\u7c7b\u578b\u64e6\u9664\u3002 \u4f8b\u5982\uff0c\u4e0a\u4e00\u8282\u4e2d\u7684 \u201csummarize\u201d \u793a\u4f8b\u8fc7\u53bb\u662f\u975e\u6cd5\u7684\uff0c\u56e0\u4e3a\u201clist[str]\u201d\u548c\u201clist[int]\u201d\u90fd\u88ab\u5220\u9664\u4e3a\u201clist[Any]\u201d\u3002 mypy 0.620 \u4e2d\u5220\u9664\u4e86\u6b64\u9650\u5236\u3002</p> <p>Mypy \u4e4b\u524d\u8fd8\u4f7f\u7528\u4e0d\u540c\u7684\u7b97\u6cd5\u6765\u9009\u62e9\u6700\u4f73\u5339\u914d\u53d8\u4f53\u3002 \u5982\u679c\u6b64\u7b97\u6cd5\u672a\u80fd\u627e\u5230\u5339\u914d\u9879\uff0c\u5219\u9ed8\u8ba4\u8fd4\u56de\u201cAny\u201d\u3002 \u65b0\u7b97\u6cd5\u4f7f\u7528\u201c\u9009\u62e9\u7b2c\u4e00\u4e2a\u5339\u914d\u201d\u89c4\u5219\uff0c\u5e76\u4e14\u4ec5\u5f53\u8f93\u5165\u53c2\u6570\u4e5f\u5305\u542b\u201cAny\u201d\u65f6\u624d\u4f1a\u56de\u9000\u5230\u8fd4\u56de\u201cAny\u201d\u3002</p> <p>The body of an implementation is type-checked against the type hints provided on the implementation. For example, in the <code>MyList</code> example up above, the code in the body is checked with argument list <code>index: Union[int, slice]</code> and a return type of <code>Union[T, Sequence[T]]</code>. If there are no annotations on the implementation, then the body is not type checked. If you want to force mypy to check the body anyways, use the <code>--check-untyped-defs</code> flag (<code>more details here</code>).</p> <p>The variants must also also be compatible with the implementation type hints. In the <code>MyList</code> example, mypy will check that the parameter type <code>int</code> and the return type <code>T</code> are compatible with <code>Union[int, slice]</code> and <code>Union[T, Sequence]</code> for the first variant. For the second variant it verifies the parameter type <code>slice</code> and the return type <code>Sequence[T]</code> are compatible with <code>Union[int, slice]</code> and <code>Union[T, Sequence]</code>.</p> <p>Note</p> <p>The overload semantics documented above are new as of mypy 0.620.</p> <p>Previously, mypy used to perform type erasure on all overload variants. For example, the <code>summarize</code> example from the previous section used to be illegal because <code>list[str]</code> and <code>list[int]</code> both erased to just <code>list[Any]</code>. This restriction was removed in mypy 0.620.</p> <p>Mypy also previously used to select the best matching variant using a different algorithm. If this algorithm failed to find a match, it would default to returning <code>Any</code>. The new algorithm uses the \"pick the first match\" rule and will fall back to returning <code>Any</code> only if the input arguments also contain <code>Any</code>.</p>"},{"location":"mypy/more_types/#\u6761\u4ef6\u91cd\u8f7d","title":"\u6761\u4ef6\u91cd\u8f7d","text":"<p>Conditional overloads</p> \u4e2d\u6587\u82f1\u6587 <p>\u6709\u65f6\u6709\u6761\u4ef6\u5730\u5b9a\u4e49\u91cd\u8f7d\u5f88\u6709\u7528\u3002 \u5e38\u89c1\u7528\u4f8b\u5305\u62ec\u8fd0\u884c\u65f6\u4e0d\u53ef\u7528\u7684\u7c7b\u578b\u6216\u4ec5\u5b58\u5728\u4e8e\u7279\u5b9a Python \u7248\u672c\u4e2d\u7684\u7c7b\u578b\u3002 \u6240\u6709\u73b0\u6709\u7684\u8d85\u8f7d\u89c4\u5219\u4ecd\u7136\u9002\u7528\u3002 \u4f8b\u5982\uff0c\u5fc5\u987b\u81f3\u5c11\u6709\u4e24\u4e2a\u91cd\u8f7d\u3002</p> <p>Note</p> <p>Mypy \u53ea\u80fd\u63a8\u65ad\u6709\u9650\u6570\u91cf\u7684\u6761\u4ef6\u3002 \u76ee\u524d\u652f\u6301\u7684\u5305\u62ec <code>TYPE_CHECKING</code>, <code>MYPY</code>, <code>version_and_platform_checks</code>, <code>--always-true</code>, \u548c <code>--always-false</code> \u7b49.</p> <pre><code>from typing import TYPE_CHECKING, Any, overload\n\nif TYPE_CHECKING:\n    class A: ...\n    class B: ...\n\n\nif TYPE_CHECKING:\n    @overload\n    def func(var: A) -&gt; A: ...\n\n    @overload\n    def func(var: B) -&gt; B: ...\n\ndef func(var: Any) -&gt; Any:\n    return var\n\nreveal_type(func(A()))  # Revealed type is \"A\"\n</code></pre> <pre><code># flags: --python-version 3.10\nimport sys\nfrom typing import Any, overload\n\nclass A: ...\nclass B: ...\nclass C: ...\nclass D: ...\n\n\nif sys.version_info &lt; (3, 7):\n    @overload\n    def func(var: A) -&gt; A: ...\n\nelif sys.version_info &gt;= (3, 10):\n    @overload\n    def func(var: B) -&gt; B: ...\n\nelse:\n    @overload\n    def func(var: C) -&gt; C: ...\n\n@overload\ndef func(var: D) -&gt; D: ...\n\ndef func(var: Any) -&gt; Any:\n    return var\n\n\nreveal_type(func(B()))  # Revealed type is \"B\"\nreveal_type(func(C()))  # No overload variant of \"func\" matches argument type \"C\"\n    # Possible overload variants:\n    #     def func(var: B) -&gt; B\n    #     def func(var: D) -&gt; D\n    # Revealed type is \"Any\"\n</code></pre> <p>Note</p> <p>\u5728\u6700\u540e\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0cmypy \u4f7f\u7528 <code>--python-version 3.10</code> \u6267\u884c.</p> <p>\u56e0\u6b64\uff0c\u6761\u4ef6\u201csys.version_info &gt;= (3, 10)\u201d\u5c06\u5339\u914d\uff0c\u5e76\u4e14\u5c06\u6dfb\u52a0\u201cB\u201d\u7684\u91cd\u8f7d\u3002</p> <p><code>A</code> \u548c <code>C</code> \u7684\u91cd\u8f7d\u88ab\u5ffd\u7565\uff01</p> <p>\u201cD\u201d\u7684\u91cd\u8f7d\u6ca1\u6709\u6761\u4ef6\u5b9a\u4e49\uff0c\u56e0\u6b64\u4e5f\u88ab\u6dfb\u52a0\u3002</p> <p>\u5f53 mypy \u65e0\u6cd5\u63a8\u65ad\u6761\u4ef6\u59cb\u7ec8\u4e3a\u201cTrue\u201d\u6216\u59cb\u7ec8\u4e3a\u201cFalse\u201d\u65f6\uff0c\u4f1a\u53d1\u51fa\u9519\u8bef\u3002</p> <pre><code>from typing import Any, overload\n\nclass A: ...\nclass B: ...\n\n\ndef g(bool_var: bool) -&gt; None:\n    if bool_var:  # Condition can't be inferred, unable to merge overloads\n        @overload\n        def func(var: A) -&gt; A: ...\n\n        @overload\n        def func(var: B) -&gt; B: ...\n\n    def func(var: Any) -&gt; Any: ...\n\n    reveal_type(func(A()))  # Revealed type is \"Any\"\n</code></pre> <p>Sometimes it is useful to define overloads conditionally. Common use cases include types that are unavailable at runtime or that only exist in a certain Python version. All existing overload rules still apply. For example, there must be at least two overloads.</p> <p>Note</p> <p>Mypy can only infer a limited number of conditions. Supported ones currently include <code>TYPE_CHECKING</code>, <code>MYPY</code>, <code>version_and_platform_checks</code>, <code>--always-true</code>, and <code>--always-false</code> values.</p> <pre><code>from typing import TYPE_CHECKING, Any, overload\n\nif TYPE_CHECKING:\n    class A: ...\n    class B: ...\n\n\nif TYPE_CHECKING:\n    @overload\n    def func(var: A) -&gt; A: ...\n\n    @overload\n    def func(var: B) -&gt; B: ...\n\ndef func(var: Any) -&gt; Any:\n    return var\n\nreveal_type(func(A()))  # Revealed type is \"A\"\n</code></pre> <pre><code># flags: --python-version 3.10\nimport sys\nfrom typing import Any, overload\n\nclass A: ...\nclass B: ...\nclass C: ...\nclass D: ...\n\n\nif sys.version_info &lt; (3, 7):\n    @overload\n    def func(var: A) -&gt; A: ...\n\nelif sys.version_info &gt;= (3, 10):\n    @overload\n    def func(var: B) -&gt; B: ...\n\nelse:\n    @overload\n    def func(var: C) -&gt; C: ...\n\n@overload\ndef func(var: D) -&gt; D: ...\n\ndef func(var: Any) -&gt; Any:\n    return var\n\n\nreveal_type(func(B()))  # Revealed type is \"B\"\nreveal_type(func(C()))  # No overload variant of \"func\" matches argument type \"C\"\n    # Possible overload variants:\n    #     def func(var: B) -&gt; B\n    #     def func(var: D) -&gt; D\n    # Revealed type is \"Any\"\n</code></pre> <p>Note</p> <p>In the last example, mypy is executed with <code>--python-version 3.10</code>.</p> <p>Therefore, the condition <code>sys.version_info &gt;= (3, 10)</code> will match and the overload for <code>B</code> will be added.</p> <p>The overloads for <code>A</code> and <code>C</code> are ignored!</p> <p>The overload for <code>D</code> is not defined conditionally and thus is also added.</p> <p>When mypy cannot infer a condition to be always <code>True</code> or always <code>False</code>, an error is emitted.</p> <pre><code>from typing import Any, overload\n\nclass A: ...\nclass B: ...\n\n\ndef g(bool_var: bool) -&gt; None:\n    if bool_var:  # Condition can't be inferred, unable to merge overloads\n        @overload\n        def func(var: A) -&gt; A: ...\n\n        @overload\n        def func(var: B) -&gt; B: ...\n\n    def func(var: Any) -&gt; Any: ...\n\n    reveal_type(func(A()))  # Revealed type is \"Any\"\n</code></pre>"},{"location":"mypy/more_types/#self\u7c7b\u578b\u7684\u9ad8\u7ea7\u7528\u6cd5","title":"self\u7c7b\u578b\u7684\u9ad8\u7ea7\u7528\u6cd5","text":"<p>Advanced uses of self-types</p> \u4e2d\u6587\u82f1\u6587 <p>\u901a\u5e38\uff0cmypy \u4e0d\u9700\u8981\u4e3a\u5b9e\u4f8b\u548c\u7c7b\u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u6dfb\u52a0\u6ce8\u91ca\u3002 \u7136\u800c\uff0c\u5bf9\u4e8e\u67d0\u4e9b\u7f16\u7a0b\u6a21\u5f0f\uff0c\u5b83\u4eec\u53ef\u80fd\u9700\u8981\u5177\u6709\u66f4\u7cbe\u786e\u7684\u9759\u6001\u7c7b\u578b\u3002</p> <p>Normally, mypy doesn't require annotations for the first arguments of instance and class methods. However, they may be needed to have more precise static typing for certain programming patterns.</p>"},{"location":"mypy/more_types/#\u6cdb\u578b\u7c7b\u4e2d\u7684\u53d7\u9650\u65b9\u6cd5","title":"\u6cdb\u578b\u7c7b\u4e2d\u7684\u53d7\u9650\u65b9\u6cd5","text":"<p>Restricted methods in generic classes</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u6cdb\u578b\u7c7b\u4e2d\uff0c\u67d0\u4e9b\u65b9\u6cd5\u53ef\u80fd\u53ea\u5141\u8bb8\u4e3a\u7c7b\u578b\u53c2\u6570\u7684\u67d0\u4e9b\u503c\u8c03\u7528\uff1a</p> <pre><code>T = TypeVar('T')\n\nclass Tag(Generic[T]):\n    item: T\n    def uppercase_item(self: Tag[str]) -&gt; str:\n        return self.item.upper()\n\ndef label(ti: Tag[int], ts: Tag[str]) -&gt; None:\n    ti.uppercase_item()  # E: Invalid self argument \"Tag[int]\" to attribute function\n                        # \"uppercase_item\" with type \"Callable[[Tag[str]], str]\"\n    ts.uppercase_item()  # This is OK\n</code></pre> <p>\u5728\u7c7b\u578b\u53c2\u6570\u672c\u8eab\u662f\u6cdb\u578b\u7684\u60c5\u51b5\u4e0b\uff0c\u6b64\u6a21\u5f0f\u8fd8\u5141\u8bb8\u5339\u914d\u5d4c\u5957\u7c7b\u578b\uff1a</p> <pre><code>T = TypeVar('T', covariant=True)\nS = TypeVar('S')\n\nclass Storage(Generic[T]):\n    def __init__(self, content: T) -&gt; None:\n        self.content = content\n    def first_chunk(self: Storage[Sequence[S]]) -&gt; S:\n        return self.content[0]\n\npage: Storage[list[str]]\npage.first_chunk()  # OK, type is \"str\"\n\nStorage(0).first_chunk()  # Error: Invalid self argument \"Storage[int]\" to attribute function\n                        # \"first_chunk\" with type \"Callable[[Storage[Sequence[S]]], S]\"\n</code></pre> <p>\u6700\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528\u81ea\u8eab\u7c7b\u578b\u7684\u91cd\u8f7d\u6765\u8868\u8fbe\u4e00\u4e9b\u68d8\u624b\u65b9\u6cd5\u7684\u7cbe\u786e\u7c7b\u578b\uff1a</p> <pre><code>T = TypeVar('T')\n\nclass Tag(Generic[T]):\n    @overload\n    def export(self: Tag[str]) -&gt; str: ...\n    @overload\n    def export(self, converter: Callable[[T], str]) -&gt; str: ...\n\n    def export(self, converter=None):\n        if isinstance(self.item, str):\n            return self.item\n        return converter(self.item)\n</code></pre> <p>\u7279\u522b\u662f\uff0c\u5728\u81ea\u7c7b\u578b\u4e0a\u91cd\u8f7d\u7684 <code>__init__</code> \u65b9\u6cd5\u53ef\u80fd\u6709\u52a9\u4e8e\u6ce8\u91ca\u7c7b\u578b\u53c2\u6570\u4f9d\u8d56\u7684\u6cdb\u578b\u7c7b\u6784\u9020\u51fd\u6570 \u4ee5\u4e0d\u5e73\u51e1\u7684\u65b9\u5f0f\u4e86\u89e3\u6784\u9020\u51fd\u6570\u53c2\u6570\uff0c\u8bf7\u53c2\u89c1\u4f8b\u5982 <code>Popen</code>\u3002</p> <p>In generic classes some methods may be allowed to be called only for certain values of type arguments:</p> <pre><code>T = TypeVar('T')\n\nclass Tag(Generic[T]):\n    item: T\n    def uppercase_item(self: Tag[str]) -&gt; str:\n        return self.item.upper()\n\ndef label(ti: Tag[int], ts: Tag[str]) -&gt; None:\n    ti.uppercase_item()  # E: Invalid self argument \"Tag[int]\" to attribute function\n                        # \"uppercase_item\" with type \"Callable[[Tag[str]], str]\"\n    ts.uppercase_item()  # This is OK\n</code></pre> <p>This pattern also allows matching on nested types in situations where the type argument is itself generic:</p> <pre><code>T = TypeVar('T', covariant=True)\nS = TypeVar('S')\n\nclass Storage(Generic[T]):\n    def __init__(self, content: T) -&gt; None:\n        self.content = content\n    def first_chunk(self: Storage[Sequence[S]]) -&gt; S:\n        return self.content[0]\n\npage: Storage[list[str]]\npage.first_chunk()  # OK, type is \"str\"\n\nStorage(0).first_chunk()  # Error: Invalid self argument \"Storage[int]\" to attribute function\n                        # \"first_chunk\" with type \"Callable[[Storage[Sequence[S]]], S]\"\n</code></pre> <p>Finally, one can use overloads on self-type to express precise types of some tricky methods:</p> <pre><code>T = TypeVar('T')\n\nclass Tag(Generic[T]):\n    @overload\n    def export(self: Tag[str]) -&gt; str: ...\n    @overload\n    def export(self, converter: Callable[[T], str]) -&gt; str: ...\n\n    def export(self, converter=None):\n        if isinstance(self.item, str):\n            return self.item\n        return converter(self.item)\n</code></pre> <p>In particular, an <code>__init__</code> method overloaded on self-type may be useful to annotate generic class constructors where type arguments depend on constructor parameters in a non-trivial way, see e.g. <code>Popen</code>.</p>"},{"location":"mypy/more_types/#mixin-\u7c7b","title":"Mixin \u7c7b","text":"<p>Mixin classes</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728 mixin \u65b9\u6cd5\u4e2d\u4f7f\u7528\u4e3b\u673a\u7c7b\u534f\u8bae\u4f5c\u4e3a\u81ea\u7c7b\u578b\u53ef\u4ee5\u4e3a mixin \u7c7b\u7684\u9759\u6001\u7c7b\u578b\u63d0\u4f9b\u66f4\u591a\u7684\u4ee3\u7801\u53ef\u91cd\u7528\u6027\u3002 \u4f8b\u5982\uff0c\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u534f\u8bae\u6765\u5b9a\u4e49\u4e3b\u673a\u7c7b\u7684\u901a\u7528\u529f\u80fd\uff0c\u800c\u4e0d\u662f\u5411\u6bcf\u4e2a mixin \u6dfb\u52a0\u6240\u9700\u7684\u62bd\u8c61\u65b9\u6cd5\uff1a</p> <pre><code>class Lockable(Protocol):\n    @property\n    def lock(self) -&gt; Lock: ...\n\nclass AtomicCloseMixin:\n    def atomic_close(self: Lockable) -&gt; int:\n        with self.lock:\n            # perform actions\n\nclass AtomicOpenMixin:\n    def atomic_open(self: Lockable) -&gt; int:\n        with self.lock:\n            # perform actions\n\nclass File(AtomicCloseMixin, AtomicOpenMixin):\n    def __init__(self) -&gt; None:\n        self.lock = Lock()\n\nclass Bad(AtomicCloseMixin):\n    pass\n\nf = File()\nb: Bad\nf.atomic_close()  # OK\nb.atomic_close()  # Error: Invalid self type for \"atomic_close\"\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u53ea\u8981\u663e\u5f0f\u81ea\u7c7b\u578b\u4e0d\u662f\u5f53\u524d\u7c7b\u7684\u8d85\u7c7b\u578b\uff0c\u5c31\u5fc5\u987b\u6210\u4e3a\u534f\u8bae\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cmypy \u5c06\u4ec5\u5728\u8c03\u7528\u7ad9\u70b9\u68c0\u67e5\u81ea\u6211\u7c7b\u578b\u7684\u6709\u6548\u6027\u3002</p> <p>Using host class protocol as a self-type in mixin methods allows more code re-usability for static typing of mixin classes. For example, one can define a protocol that defines common functionality for host classes instead of adding required abstract methods to every mixin:</p> <pre><code>class Lockable(Protocol):\n    @property\n    def lock(self) -&gt; Lock: ...\n\nclass AtomicCloseMixin:\n    def atomic_close(self: Lockable) -&gt; int:\n        with self.lock:\n            # perform actions\n\nclass AtomicOpenMixin:\n    def atomic_open(self: Lockable) -&gt; int:\n        with self.lock:\n            # perform actions\n\nclass File(AtomicCloseMixin, AtomicOpenMixin):\n    def __init__(self) -&gt; None:\n        self.lock = Lock()\n\nclass Bad(AtomicCloseMixin):\n    pass\n\nf = File()\nb: Bad\nf.atomic_close()  # OK\nb.atomic_close()  # Error: Invalid self type for \"atomic_close\"\n</code></pre> <p>Note that the explicit self-type is required to be a protocol whenever it is not a supertype of the current class. In this case mypy will check the validity of the self-type only at the call site.</p>"},{"location":"mypy/more_types/#\u66ff\u4ee3\u6784\u9020\u51fd\u6570\u7684\u7cbe\u786e\u7c7b\u578b","title":"\u66ff\u4ee3\u6784\u9020\u51fd\u6570\u7684\u7cbe\u786e\u7c7b\u578b","text":"<p>Precise typing of alternative constructors</p> \u4e2d\u6587\u82f1\u6587 <p>\u67d0\u4e9b\u7c7b\u53ef\u80fd\u5b9a\u4e49\u66ff\u4ee3\u6784\u9020\u51fd\u6570\u3002 \u5982\u679c\u8fd9\u4e9b\u7c7b\u662f\u901a\u7528\u7684\uff0c\u5219\u81ea\u7c7b\u578b\u5141\u8bb8\u4e3a\u5b83\u4eec\u63d0\u4f9b\u7cbe\u786e\u7684\u7b7e\u540d\uff1a</p> <pre><code>T = TypeVar('T')\n\nclass Base(Generic[T]):\n    Q = TypeVar('Q', bound='Base[T]')\n\n    def __init__(self, item: T) -&gt; None:\n        self.item = item\n\n    @classmethod\n    def make_pair(cls: Type[Q], item: T) -&gt; tuple[Q, Q]:\n        return cls(item), cls(item)\n\nclass Sub(Base[T]):\n    ...\n\npair = Sub.make_pair('yes')  # Type is \"tuple[Sub[str], Sub[str]]\"\nbad = Sub[int].make_pair('no')  # Error: Argument 1 to \"make_pair\" of \"Base\"\n                                # has incompatible type \"str\"; expected \"int\"\n</code></pre> <p>Some classes may define alternative constructors. If these classes are generic, self-type allows giving them precise signatures:</p> <pre><code>T = TypeVar('T')\n\nclass Base(Generic[T]):\n    Q = TypeVar('Q', bound='Base[T]')\n\n    def __init__(self, item: T) -&gt; None:\n        self.item = item\n\n    @classmethod\n    def make_pair(cls: Type[Q], item: T) -&gt; tuple[Q, Q]:\n        return cls(item), cls(item)\n\nclass Sub(Base[T]):\n    ...\n\npair = Sub.make_pair('yes')  # Type is \"tuple[Sub[str], Sub[str]]\"\nbad = Sub[int].make_pair('no')  # Error: Argument 1 to \"make_pair\" of \"Base\"\n                                # has incompatible type \"str\"; expected \"int\"\n</code></pre>"},{"location":"mypy/more_types/#\u5f02\u6b65\u540c\u6b65\u7684\u7c7b\u578b\u68c0\u67e5","title":"\u5f02\u6b65/\u540c\u6b65\u7684\u7c7b\u578b\u68c0\u67e5","text":"<p>Typing async/await</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u5141\u8bb8\u60a8\u8f93\u5165\u4f7f\u7528\u201casync/await\u201d\u8bed\u6cd5\u7684\u534f\u7a0b\u3002 \u6709\u5173\u534f\u7a0b\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 <code>PEP - 492</code> \u548c asyncio \u6587\u6863\u3002</p> <p>\u4f7f\u7528\u201casync def\u201d\u5b9a\u4e49\u7684\u51fd\u6570\u7684\u7c7b\u578b\u4e0e\u666e\u901a\u51fd\u6570\u7c7b\u4f3c\u3002 \u8fd4\u56de\u7c7b\u578b\u6ce8\u91ca\u5e94\u8be5\u4e0e\u60a8\u5e0c\u671b\u5728\u201cawait\u201d\u534f\u7a0b\u65f6\u8fd4\u56de\u7684\u503c\u7684\u7c7b\u578b\u76f8\u540c\u3002</p> <pre><code>import asyncio\n\nasync def format_string(tag: str, count: int) -&gt; str:\n    return f'T-minus {count} ({tag})'\n\nasync def countdown(tag: str, count: int) -&gt; str:\n    while count &gt; 0:\n        my_str = await format_string(tag, count)  # type is inferred to be str\n        print(my_str)\n        await asyncio.sleep(0.1)\n        count -= 1\n    return \"Blastoff!\"\n\nasyncio.run(countdown(\"Millennium Falcon\", 5))\n</code></pre> <p>\u8c03\u7528 <code>async def</code> \u51fd\u6570 \u65e0\u9700\u7b49\u5f85 \u7684\u7ed3\u679c\u5c06\u81ea\u52a8\u63a8\u65ad\u4e3a <code>Coroutine[Any, Any, T]</code> \u7c7b\u578b\u7684\u503c \uff0c\u5b83\u662f <code>Awaitable[T]</code> \u7684\u5b50\u7c7b\u578b\uff1a</p> <pre><code>my_coroutine = countdown(\"Millennium Falcon\", 5)\nreveal_type(my_coroutine)  # Revealed type is \"typing.Coroutine[Any, Any, builtins.str]\"\n</code></pre> <p>Mypy lets you type coroutines that use the <code>async/await</code> syntax. For more information regarding coroutines, see <code>PEP - 492</code> and the asyncio documentation.</p> <p>Functions defined using <code>async def</code> are typed similar to normal functions. The return type annotation should be the same as the type of the value you expect to get back when <code>await</code>-ing the coroutine.</p> <pre><code>import asyncio\n\nasync def format_string(tag: str, count: int) -&gt; str:\n    return f'T-minus {count} ({tag})'\n\nasync def countdown(tag: str, count: int) -&gt; str:\n    while count &gt; 0:\n        my_str = await format_string(tag, count)  # type is inferred to be str\n        print(my_str)\n        await asyncio.sleep(0.1)\n        count -= 1\n    return \"Blastoff!\"\n\nasyncio.run(countdown(\"Millennium Falcon\", 5))\n</code></pre> <p>The result of calling an <code>async def</code> function without awaiting will automatically be inferred to be a value of type <code>Coroutine[Any, Any, T]</code>, which is a subtype of <code>Awaitable[T]</code>:</p> <pre><code>my_coroutine = countdown(\"Millennium Falcon\", 5)\nreveal_type(my_coroutine)  # Revealed type is \"typing.Coroutine[Any, Any, builtins.str]\"\n</code></pre>"},{"location":"mypy/more_types/#\u5f02\u6b65\u8fed\u4ee3\u5668","title":"\u5f02\u6b65\u8fed\u4ee3\u5668","text":"<p>Asynchronous iterators</p> \u4e2d\u6587\u82f1\u6587 <p>\u5982\u679c\u60a8\u6709\u5f02\u6b65\u8fed\u4ee3\u5668\uff0c\u5219\u53ef\u4ee5\u5728\u6ce8\u91ca\u4e2d\u4f7f\u7528 <code>AsyncIterator</code> \u7c7b\u578b\uff1a</p> <pre><code>from typing import Optional, AsyncIterator\nimport asyncio\n\nclass arange:\n    def __init__(self, start: int, stop: int, step: int) -&gt; None:\n        self.start = start\n        self.stop = stop\n        self.step = step\n        self.count = start - step\n\n    def __aiter__(self) -&gt; AsyncIterator[int]:\n        return self\n\n    async def __anext__(self) -&gt; int:\n        self.count += self.step\n        if self.count == self.stop:\n            raise StopAsyncIteration\n        else:\n            return self.count\n\nasync def run_countdown(tag: str, countdown: AsyncIterator[int]) -&gt; str:\n    async for i in countdown:\n        print(f'T-minus {i} ({tag})')\n        await asyncio.sleep(0.1)\n    return \"Blastoff!\"\n\nasyncio.run(run_countdown(\"Serenity\", arange(5, 0, -1)))\n</code></pre> <p>\u5f02\u6b65\u751f\u6210\u5668\uff08\u5728 <code>PEP 525</code> \u4e2d\u5f15\u5165\uff09\u662f\u521b\u5efa\u5f02\u6b65\u8fed\u4ee3\u5668\u7684\u7b80\u5355\u65b9\u6cd5\uff1a</p> <pre><code>from typing import AsyncGenerator, Optional\nimport asyncio\n\n# \u4e5f\u53ef\u4ee5\u8f93\u5165\u6b64\u4f5c\u4e3a\u8fd4\u56de AsyncIterator[int]\nasync def arange(start: int, stop: int, step: int) -&gt; AsyncGenerator[int, None]:\n    current = start\n    while (step &gt; 0 and current &lt; stop) or (step &lt; 0 and current &gt; stop):\n        yield current\n        current += step\n\nasyncio.run(run_countdown(\"Battlestar Galactica\", arange(5, 0, -1)))\n</code></pre> <p>\u4e00\u4e2a\u5e38\u89c1\u7684\u6df7\u6dc6\u662f\u201casync def\u201d\u51fd\u6570\u4e2d\u201cyield\u201d\u8bed\u53e5\u7684\u5b58\u5728\u4f1a\u5f71\u54cd\u51fd\u6570\u7684\u7c7b\u578b\uff1a</p> <pre><code>from typing import AsyncIterator\n\nasync def arange(stop: int) -&gt; AsyncIterator[int]:\n    # \u8c03\u7528\u65f6\uff0carange \u4e3a\u60a8\u63d0\u4f9b\u4e00\u4e2a\u5f02\u6b65\u8fed\u4ee3\u5668\uff0c\u76f8\u5f53\u4e8e Callable[[int], AsyncIterator[int]]\n    i = 0\n    while i &lt; stop:\n        yield i\n        i += 1\n\nasync def coroutine(stop: int) -&gt; AsyncIterator[int]:\n    # \u8c03\u7528\u65f6\uff0c\u534f\u7a0b\u4f1a\u4e3a\u60a8\u63d0\u4f9b\u4e00\u4e9b\u53ef\u4ee5\u7b49\u5f85\u4ee5\u83b7\u5f97\u5f02\u6b65\u8fed\u4ee3\u5668\u7684\u4e1c\u897f\uff0c\u76f8\u5f53\u4e8e Callable[[int], Coroutine[Any, Any, AsyncIterator[int]]]\n    return arange(stop)\n\nasync def main() -&gt; None:\n    reveal_type(arange(5))  # Revealed type is \"typing.AsyncIterator[builtins.int]\"\n    reveal_type(coroutine(5))  # Revealed type is \"typing.Coroutine[Any, Any, typing.AsyncIterator[builtins.int]]\"\n\n    await arange(5)  # Error: Incompatible types in \"await\" (actual type \"AsyncIterator[int]\", expected type \"Awaitable[Any]\")\n    reveal_type(await coroutine(5))  # Revealed type is \"typing.AsyncIterator[builtins.int]\"\n</code></pre> <p>\u5f53\u5c1d\u8bd5\u5b9a\u4e49\u57fa\u7c7b\u3001\u534f\u8bae\u6216\u91cd\u8f7d\u65f6\uff0c\u6709\u65f6\u4f1a\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\uff1a</p> <pre><code>from typing import AsyncIterator, Protocol, overload\n\nclass LauncherIncorrect(Protocol):\n    # \u56e0\u4e3a launch \u6ca1\u6709 Yield\uff0c\u6240\u4ee5\u5b83\u7684\u7c7b\u578b\u4e3a Callable[[], Coroutine[Any, Any, AsyncIterator[int]]] \u800c\u4e0d\u662f Callable[[], AsyncIterator[int]]\n    async def launch(self) -&gt; AsyncIterator[int]:\n        raise NotImplementedError\n\nclass LauncherCorrect(Protocol):\n    def launch(self) -&gt; AsyncIterator[int]:\n        raise NotImplementedError\n\nclass LauncherAlsoCorrect(Protocol):\n    async def launch(self) -&gt; AsyncIterator[int]:\n        raise NotImplementedError\n        if False:\n            yield 0\n\n# \u91cd\u8f7d\u7684\u7c7b\u578b\u4e0e\u5b9e\u73b0\u65e0\u5173\u3002\n# \u7279\u522b\u662f\uff0c\u5b83\u4eec\u7684\u7c7b\u578b\u4e0d\u53d7\u5b9e\u73b0\u662f\u5426\u5305\u542b\u201cyield\u201d\u7684\u5f71\u54cd\u3002\n# \u4f7f\u7528 `def` \u53ef\u4ee5\u6e05\u695a\u5730\u8868\u660e\u7c7b\u578b\u662f Callable[..., AsyncIterator[int]]\uff0c\n# \u800c\u4f7f\u7528 `async def` \u5b83\u5c06\u662f Callable[..., Coroutine[Any, Any, AsyncIterator[int]]]\n@overload\ndef launch(*, count: int = ...) -&gt; AsyncIterator[int]: ...\n@overload\ndef launch(*, time: float = ...) -&gt; AsyncIterator[int]: ...\n\nasync def launch(*, count: int = 0, time: float = 0) -&gt; AsyncIterator[int]:\n    # launch \u7684\u5b9e\u73b0\u662f\u4e00\u4e2a\u5f02\u6b65\u751f\u6210\u5668\u5e76\u5305\u542b\u4e00\u4e2ayield\n    yield 0\n</code></pre> <p>If you have an asynchronous iterator, you can use the <code>AsyncIterator</code> type in your annotations:</p> <pre><code>from typing import Optional, AsyncIterator\nimport asyncio\n\nclass arange:\n    def __init__(self, start: int, stop: int, step: int) -&gt; None:\n        self.start = start\n        self.stop = stop\n        self.step = step\n        self.count = start - step\n\n    def __aiter__(self) -&gt; AsyncIterator[int]:\n        return self\n\n    async def __anext__(self) -&gt; int:\n        self.count += self.step\n        if self.count == self.stop:\n            raise StopAsyncIteration\n        else:\n            return self.count\n\nasync def run_countdown(tag: str, countdown: AsyncIterator[int]) -&gt; str:\n    async for i in countdown:\n        print(f'T-minus {i} ({tag})')\n        await asyncio.sleep(0.1)\n    return \"Blastoff!\"\n\nasyncio.run(run_countdown(\"Serenity\", arange(5, 0, -1)))\n</code></pre> <p>Async generators (introduced in <code>PEP 525</code>) are an easy way to create async iterators:</p> <pre><code>from typing import AsyncGenerator, Optional\nimport asyncio\n\n# Could also type this as returning AsyncIterator[int]\nasync def arange(start: int, stop: int, step: int) -&gt; AsyncGenerator[int, None]:\n    current = start\n    while (step &gt; 0 and current &lt; stop) or (step &lt; 0 and current &gt; stop):\n        yield current\n        current += step\n\nasyncio.run(run_countdown(\"Battlestar Galactica\", arange(5, 0, -1)))\n</code></pre> <p>One common confusion is that the presence of a <code>yield</code> statement in an <code>async def</code> function has an effect on the type of the function:</p> <pre><code>from typing import AsyncIterator\n\nasync def arange(stop: int) -&gt; AsyncIterator[int]:\n    # When called, arange gives you an async iterator\n    # Equivalent to Callable[[int], AsyncIterator[int]]\n    i = 0\n    while i &lt; stop:\n        yield i\n        i += 1\n\nasync def coroutine(stop: int) -&gt; AsyncIterator[int]:\n    # When called, coroutine gives you something you can await to get an async iterator\n    # Equivalent to Callable[[int], Coroutine[Any, Any, AsyncIterator[int]]]\n    return arange(stop)\n\nasync def main() -&gt; None:\n    reveal_type(arange(5))  # Revealed type is \"typing.AsyncIterator[builtins.int]\"\n    reveal_type(coroutine(5))  # Revealed type is \"typing.Coroutine[Any, Any, typing.AsyncIterator[builtins.int]]\"\n\n    await arange(5)  # Error: Incompatible types in \"await\" (actual type \"AsyncIterator[int]\", expected type \"Awaitable[Any]\")\n    reveal_type(await coroutine(5))  # Revealed type is \"typing.AsyncIterator[builtins.int]\"\n</code></pre> <p>This can sometimes come up when trying to define base classes, Protocols or overloads:</p> <pre><code>from typing import AsyncIterator, Protocol, overload\n\nclass LauncherIncorrect(Protocol):\n    # Because launch does not have yield, this has type\n    # Callable[[], Coroutine[Any, Any, AsyncIterator[int]]]\n    # instead of\n    # Callable[[], AsyncIterator[int]]\n    async def launch(self) -&gt; AsyncIterator[int]:\n        raise NotImplementedError\n\nclass LauncherCorrect(Protocol):\n    def launch(self) -&gt; AsyncIterator[int]:\n        raise NotImplementedError\n\nclass LauncherAlsoCorrect(Protocol):\n    async def launch(self) -&gt; AsyncIterator[int]:\n        raise NotImplementedError\n        if False:\n            yield 0\n\n# The type of the overloads is independent of the implementation.\n# In particular, their type is not affected by whether or not the\n# implementation contains a `yield`.\n# Use of `def`` makes it clear the type is Callable[..., AsyncIterator[int]],\n# whereas with `async def` it would be Callable[..., Coroutine[Any, Any, AsyncIterator[int]]]\n@overload\ndef launch(*, count: int = ...) -&gt; AsyncIterator[int]: ...\n@overload\ndef launch(*, time: float = ...) -&gt; AsyncIterator[int]: ...\n\nasync def launch(*, count: int = 0, time: float = 0) -&gt; AsyncIterator[int]:\n    # The implementation of launch is an async generator and contains a yield\n    yield 0\n</code></pre>"},{"location":"mypy/protocol_and_struct_subtyping/","title":"\u534f\u8bae\u53ca\u5176\u5b50\u7c7b\u578b","text":"\u4e2d\u6587\u82f1\u6587 <p>Python \u7c7b\u578b\u7cfb\u7edf\u652f\u6301\u4e24\u79cd\u786e\u5b9a\u4e24\u4e2a\u5bf9\u8c61\u4f5c\u4e3a\u7c7b\u578b\u662f\u5426\u517c\u5bb9\u7684\u65b9\u6cd5\uff1a\u540d\u4e49\u5b50\u7c7b\u578b\u548c\u7ed3\u6784\u5b50\u7c7b\u578b\u3002</p> <p>\u540d\u4e49\u4e0a\u7684\u5b50\u7c7b\u578b\u4e25\u683c\u57fa\u4e8e\u7c7b\u5c42\u6b21\u7ed3\u6784\u3002 \u5982\u679c\u7c7b\u201cDog\u201d\u7ee7\u627f\u7c7b\u201cAnimal\u201d\uff0c\u90a3\u4e48\u5b83\u662f\u201cAnimal\u201d\u7684\u5b50\u7c7b\u578b\u3002 \u5f53\u9700\u8981\u201cAnimal\u201d\u5b9e\u4f8b\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u201cDog\u201d\u5b9e\u4f8b\u3002 \u8fd9\u79cd\u5f62\u5f0f\u7684\u5b50\u7c7b\u578b\u5316\u662f Python \u7c7b\u578b\u7cfb\u7edf\u4e3b\u8981\u4f7f\u7528\u7684\uff1a\u5b83\u5f88\u5bb9\u6613\u7406\u89e3\u5e76\u751f\u6210\u6e05\u6670\u7b80\u6d01\u7684\u9519\u8bef\u6d88\u606f\uff0c\u5e76\u4e14\u4e0e\u672c\u673a {py:func}<code>isinstance</code> \u68c0\u67e5\u7684\u5de5\u4f5c\u65b9\u5f0f\u76f8\u5339\u914d - \u57fa\u4e8e\u7c7b\u5c42\u6b21\u7ed3\u6784\u3002</p> <p>\u7ed3\u6784\u5b50\u7c7b\u578b\u57fa\u4e8e\u53ef\u4ee5\u5bf9\u5bf9\u8c61\u6267\u884c\u7684\u64cd\u4f5c\u3002 \u5982\u679c\u7c7b\u201cDog\u201d\u5177\u6709\u7c7b\u201cAnimal\u201d\u7684\u6240\u6709\u5c5e\u6027\u548c\u65b9\u6cd5\uff0c\u5e76\u4e14\u5177\u6709\u517c\u5bb9\u7684\u7c7b\u578b\uff0c\u5219\u7c7b\u201cDog\u201d\u662f\u7c7b\u201cAnimal\u201d\u7684\u7ed3\u6784\u5b50\u7c7b\u578b\u3002</p> <p>\u7ed3\u6784\u5b50\u7c7b\u578b\u53ef\u4ee5\u770b\u4f5c\u662f\u9e2d\u5b50\u7c7b\u578b\u7684\u9759\u6001\u7b49\u4ef7\u7269\uff0c\u8fd9\u662f Python \u7a0b\u5e8f\u5458\u6240\u719f\u77e5\u7684\u3002 \u6709\u5173 Python \u4e2d\u534f\u8bae\u548c\u7ed3\u6784\u5b50\u7c7b\u578b\u7684\u8be6\u7ec6\u89c4\u8303\uff0c\u8bf7\u53c2\u9605 <code>PEP 544</code>\u3002</p> <p>Protocols and structural subtyping</p> <p>The Python type system supports two ways of deciding whether two objects are compatible as types: nominal subtyping and structural subtyping.</p> <p>Nominal subtyping is strictly based on the class hierarchy. If class <code>Dog</code> inherits class <code>Animal</code>, it's a subtype of <code>Animal</code>. Instances of <code>Dog</code> can be used when <code>Animal</code> instances are expected. This form of subtyping subtyping is what Python's type system predominantly uses: it's easy to understand and produces clear and concise error messages, and matches how the native <code>isinstance</code> check works -- based on class hierarchy.</p> <p>Structural subtyping is based on the operations that can be performed with an object. Class <code>Dog</code> is a structural subtype of class <code>Animal</code> if the former has all attributes and methods of the latter, and with compatible types.</p> <p>Structural subtyping can be seen as a static equivalent of duck typing, which is well known to Python programmers. See <code>PEP 544</code> for the detailed specification of protocols and structural subtyping in Python.</p>"},{"location":"mypy/protocol_and_struct_subtyping/#\u9884\u5b9a\u4e49\u534f\u8bae","title":"\u9884\u5b9a\u4e49\u534f\u8bae","text":"\u4e2d\u6587\u82f1\u6587 <p><code>typing</code> \u6a21\u5757\u5b9a\u4e49\u4e86\u4e0e\u5e38\u89c1 Python \u534f\u8bae\u76f8\u5bf9\u5e94\u7684\u5404\u79cd\u534f\u8bae\u7c7b\uff0c\u4f8b\u5982 <code>Iterable[T]</code>\u3002 \u5982\u679c\u4e00\u4e2a\u7c7b\u5b9a\u4e49\u4e86\u5408\u9002\u7684 <code>__iter__</code> \u65b9\u6cd5\uff0cmypy \u5c31\u4f1a\u7406\u89e3\u5b83\u5b9e\u73b0\u4e86\u53ef\u8fed\u4ee3\u534f\u8bae\u5e76\u4e14\u4e0e <code>Iterable[T]</code> \u517c\u5bb9\u3002 \u4f8b\u5982\uff0c\u4e0b\u9762\u7684<code>IntList</code>\u662f\u53ef\u8fed\u4ee3\u7684\uff0c\u7c7b\u578b\u662f<code>int</code>\u503c\uff1a</p> <pre><code>from typing import Iterator, Iterable, Optional\n\nclass IntList:\n    def __init__(self, value: int, next: Optional['IntList']) -&gt; None:\n        self.value = value\n        self.next = next\n\n    def __iter__(self) -&gt; Iterator[int]:\n        current = self\n        while current:\n            yield current.value\n            current = current.next\n\ndef print_numbered(items: Iterable[int]) -&gt; None:\n    for n, x in enumerate(items):\n        print(n + 1, x)\n\nx = IntList(3, IntList(5, None))\nprint_numbered(x)  # OK\nprint_numbered([4, 5])  # Also OK\n</code></pre> <p><code>\u9884\u5b9a\u4e49\u534f\u8bae\u53c2\u8003</code> \u5217\u51fa\u4e86 <code>typing</code> \u4e2d\u5b9a\u4e49\u7684\u6240\u6709\u534f\u8bae\u4ee5\u53ca\u60a8\u9700\u8981\u5b9a\u4e49\u4ee5\u5b9e\u73b0\u6bcf\u4e2a\u534f\u8bae\u7684\u76f8\u5e94\u65b9\u6cd5\u7684\u7b7e\u540d\u3002</p> <p>Predefined protocols</p> <p>The <code>typing</code> module defines various protocol classes that correspond to common Python protocols, such as <code>Iterable[T]</code>. If a class defines a suitable <code>__iter__</code> method, mypy understands that it implements the iterable protocol and is compatible with <code>Iterable[T]</code>. For example, <code>IntList</code> below is iterable, over <code>int</code> values:</p> <pre><code>from typing import Iterator, Iterable, Optional\n\nclass IntList:\n    def __init__(self, value: int, next: Optional['IntList']) -&gt; None:\n        self.value = value\n        self.next = next\n\n    def __iter__(self) -&gt; Iterator[int]:\n        current = self\n        while current:\n            yield current.value\n            current = current.next\n\ndef print_numbered(items: Iterable[int]) -&gt; None:\n    for n, x in enumerate(items):\n        print(n + 1, x)\n\nx = IntList(3, IntList(5, None))\nprint_numbered(x)  # OK\nprint_numbered([4, 5])  # Also OK\n</code></pre> <p><code>predefined_protocols_reference</code> lists all protocols defined in <code>typing</code> and the signatures of the corresponding methods you need to define to implement each protocol.</p>"},{"location":"mypy/protocol_and_struct_subtyping/#\u7b80\u5355\u7684\u81ea\u5b9a\u4e49\u534f\u8bae","title":"\u7b80\u5355\u7684\u81ea\u5b9a\u4e49\u534f\u8bae","text":"\u4e2d\u6587\u82f1\u6587 <p>\u60a8\u53ef\u4ee5\u901a\u8fc7\u7ee7\u627f\u7279\u6b8a\u7684 <code>Protocol</code> \u7c7b\u6765\u5b9a\u4e49\u81ea\u5df1\u7684\u534f\u8bae\u7c7b\uff1a</p> <pre><code>from typing import Iterable\nfrom typing_extensions import Protocol\n\nclass SupportsClose(Protocol):\n    #\u7a7a\u65b9\u6cd5\u4f53 (explicit '...')\n    def close(self) -&gt; None: ...\n\nclass Resource:  # No SupportsClose base class!\n\n    def close(self) -&gt; None:\n        self.resource.release()\n\n    # ... \u5176\u4ed6\u65b9\u6cd5 ...\n\ndef close_all(items: Iterable[SupportsClose]) -&gt; None:\n    for item in items:\n        item.close()\n\nclose_all([Resource(), open('some/file')])  # OK\n</code></pre> <p><code>Resource</code> \u662f <code>SupportsClose</code> \u534f\u8bae\u7684\u5b50\u7c7b\u578b\uff0c\u56e0\u4e3a\u5b83\u5b9a\u4e49\u4e86\u517c\u5bb9\u7684 <code>close</code> \u65b9\u6cd5\u3002 <code>open</code> \u8fd4\u56de\u7684\u5e38\u89c4\u6587\u4ef6\u5bf9\u8c61\u540c\u6837\u4e0e\u534f\u8bae\u517c\u5bb9\uff0c\u56e0\u4e3a\u5b83\u4eec\u652f\u6301 <code>close()</code>\u3002</p> <p>Simple user-defined protocols</p> <p>You can define your own protocol class by inheriting the special <code>Protocol</code> class:</p> <pre><code>from typing import Iterable\nfrom typing_extensions import Protocol\n\nclass SupportsClose(Protocol):\n    # Empty method body (explicit '...')\n    def close(self) -&gt; None: ...\n\nclass Resource:  # No SupportsClose base class!\n\n    def close(self) -&gt; None:\n    self.resource.release()\n\n    # ... other methods ...\n\ndef close_all(items: Iterable[SupportsClose]) -&gt; None:\n    for item in items:\n        item.close()\n\nclose_all([Resource(), open('some/file')])  # OK\n</code></pre> <p><code>Resource</code> is a subtype of the <code>SupportsClose</code> protocol since it defines a compatible <code>close</code> method. Regular file objects returned by <code>open</code> are similarly compatible with the protocol, as they support <code>close()</code>.</p>"},{"location":"mypy/protocol_and_struct_subtyping/#\u5b9a\u4e49\u5b50\u534f\u8bae\u548c\u5b50\u7c7b\u5316\u534f\u8bae","title":"\u5b9a\u4e49\u5b50\u534f\u8bae\u548c\u5b50\u7c7b\u5316\u534f\u8bae","text":"\u4e2d\u6587\u82f1\u6587 <p>\u60a8\u8fd8\u53ef\u4ee5\u5b9a\u4e49\u5b50\u534f\u8bae\u3002 \u53ef\u4ee5\u4f7f\u7528\u591a\u91cd\u7ee7\u627f\u6765\u6269\u5c55\u548c\u5408\u5e76\u73b0\u6709\u534f\u8bae\u3002 \u4f8b\u5b50\uff1a</p> <pre><code># ... \u7ee7\u7eed\u4e0a\u4e00\u4e2a\u793a\u4f8b\n\nclass SupportsRead(Protocol):\n    def read(self, amount: int) -&gt; bytes: ...\n\nclass TaggedReadableResource(SupportsClose, SupportsRead, Protocol):\n    label: str\n\nclass AdvancedResource(Resource):\n    def __init__(self, label: str) -&gt; None:\n        self.label = label\n\n    def read(self, amount: int) -&gt; bytes:\n        # some implementation\n        ...\n\nresource: TaggedReadableResource\nresource = AdvancedResource('handle with care')  # OK\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u4ece\u73b0\u6709\u534f\u8bae\u7ee7\u627f\u4e0d\u4f1a\u81ea\u52a8\u5c06\u5b50\u7c7b\u8f6c\u6362\u4e3a\u534f\u8bae - \u5b83\u53ea\u662f\u521b\u5efa\u4e00\u4e2a\u5b9e\u73b0\u7ed9\u5b9a\u534f\u8bae\uff08\u6216\u591a\u4e2a\u534f\u8bae\uff09\u7684\u5e38\u89c4\uff08\u975e\u534f\u8bae\uff09\u7c7b\u6216 ABC\u3002 \u5982\u679c\u60a8\u5b9a\u4e49\u534f\u8bae\uff0c\u5219 <code>Protocol</code> \u57fa\u7c7b\u5fc5\u987b\u59cb\u7ec8\u663e\u5f0f\u5b58\u5728\uff1a</p> <pre><code>class NotAProtocol(SupportsClose):  # \u8fd9\u4e0d\u662f\u4e00\u4e2a\u534f\u8bae\n    new_attr: int\n\nclass Concrete:\nnew_attr: int = 0\n\ndef close(self) -&gt; None:\n    ...\n\n# Error: nominal subtyping used by default\n# Error: \u9ed8\u8ba4\u4f7f\u7528\u7684\u540d\u4e49\u5b50\u7c7b\u578b\nx: NotAProtocol = Concrete()  # Error!\n</code></pre> <p>\u60a8\u8fd8\u53ef\u4ee5\u5728\u534f\u8bae\u4e2d\u5305\u542b\u65b9\u6cd5\u7684\u9ed8\u8ba4\u5b9e\u73b0\u3002 \u5982\u679c\u60a8\u660e\u786e\u5730\u5b50\u7c7b\u5316\u8fd9\u4e9b\u534f\u8bae\uff0c\u60a8\u53ef\u4ee5\u7ee7\u627f\u8fd9\u4e9b\u9ed8\u8ba4\u5b9e\u73b0\u3002</p> <p>\u663e\u5f0f\u5305\u542b\u534f\u8bae\u4f5c\u4e3a\u57fa\u7c7b\u4e5f\u662f\u8bb0\u5f55\u60a8\u7684\u7c7b\u5b9e\u73b0\u7279\u5b9a\u534f\u8bae\u7684\u4e00\u79cd\u65b9\u5f0f\uff0c\u5e76\u4e14\u5b83\u5f3a\u5236 mypy \u9a8c\u8bc1\u60a8\u7684\u7c7b\u5b9e\u73b0\u5b9e\u9645\u4e0a\u4e0e\u8be5\u534f\u8bae\u517c\u5bb9\u3002 \u7279\u522b\u662f\uff0c\u7701\u7565\u5c5e\u6027\u6216\u65b9\u6cd5\u4f53\u7684\u503c\u5c06\u4f7f\u5176\u9690\u5f0f\u62bd\u8c61\uff1a</p> <pre><code>class SomeProto(Protocol):\n    attr: int  # \u6ce8\u610f\uff0c\u6ca1\u6709\u53f3\u624b\u8fb9 \uff08Note, no right hand side\uff09\n    def method(self) -&gt; str: ...  # \u4ece\u5b57\u9762\u4e0a\u770b\u53ea\u662f...\u8fd9\u91cc \uff08Literally just ... here\uff09\n\nclass ExplicitSubclass(SomeProto):\n    pass\n\nExplicitSubclass()  # error: Cannot instantiate abstract class 'ExplicitSubclass'\n                    # with abstract attributes 'attr' and 'method'\n                    # error\uff1a\u65e0\u6cd5\u4f7f\u7528\u62bd\u8c61\u5c5e\u6027\u201cattr\u201d\u548c\u201cmethod\u201d\u5b9e\u4f8b\u5316\u62bd\u8c61\u7c7b\u201cExplicitSubclass\u201d\n</code></pre> <p>\u7c7b\u4f3c\u5730\uff0c\u663e\u5f0f\u5206\u914d\u7ed9\u534f\u8bae\u5b9e\u4f8b\u53ef\u4ee5\u662f\u8981\u6c42\u7c7b\u578b\u68c0\u67e5\u5668\u9a8c\u8bc1\u60a8\u7684\u7c7b\u662f\u5426\u5b9e\u73b0\u534f\u8bae\u7684\u4e00\u79cd\u65b9\u6cd5\uff1a</p> <pre><code>_proto: SomeProto = cast(ExplicitSubclass, None)\n</code></pre> <p>Defining subprotocols and subclassing protocols</p> <p>You can also define subprotocols. Existing protocols can be extended and merged using multiple inheritance. Example:</p> <pre><code># ... continuing from the previous example\n\nclass SupportsRead(Protocol):\n    def read(self, amount: int) -&gt; bytes: ...\n\nclass TaggedReadableResource(SupportsClose, SupportsRead, Protocol):\n    label: str\n\nclass AdvancedResource(Resource):\n    def __init__(self, label: str) -&gt; None:\n        self.label = label\n\n    def read(self, amount: int) -&gt; bytes:\n        # some implementation\n        ...\n\nresource: TaggedReadableResource\nresource = AdvancedResource('handle with care')  # OK\n</code></pre> <p>Note that inheriting from an existing protocol does not automatically turn the subclass into a protocol -- it just creates a regular (non-protocol) class or ABC that implements the given protocol (or protocols). The <code>Protocol</code> base class must always be explicitly present if you are defining a protocol:</p> <pre><code>class NotAProtocol(SupportsClose):  # This is NOT a protocol\n    new_attr: int\n\nclass Concrete:\nnew_attr: int = 0\n\ndef close(self) -&gt; None:\n    ...\n\n# Error: nominal subtyping used by default\nx: NotAProtocol = Concrete()  # Error!\n</code></pre> <p>You can also include default implementations of methods in protocols. If you explicitly subclass these protocols you can inherit these default implementations.</p> <p>Explicitly including a protocol as a base class is also a way of documenting that your class implements a particular protocol, and it forces mypy to verify that your class implementation is actually compatible with the protocol. In particular, omitting a value for an attribute or a method body will make it implicitly abstract:</p> <pre><code>class SomeProto(Protocol):\n    attr: int  # Note, no right hand side\n    def method(self) -&gt; str: ...  # Literally just ... here\n\nclass ExplicitSubclass(SomeProto):\n    pass\n\nExplicitSubclass()  # error: Cannot instantiate abstract class 'ExplicitSubclass'\n                    # with abstract attributes 'attr' and 'method'\n</code></pre> <p>Similarly, explicitly assigning to a protocol instance can be a way to ask the type checker to verify that your class implements a protocol:</p> <pre><code>_proto: SomeProto = cast(ExplicitSubclass, None)\n</code></pre>"},{"location":"mypy/protocol_and_struct_subtyping/#\u534f\u8bae\u5c5e\u6027\u7684\u4e0d\u53d8\u6027","title":"\u534f\u8bae\u5c5e\u6027\u7684\u4e0d\u53d8\u6027","text":"\u4e2d\u6587\u82f1\u6587 <p>\u534f\u8bae\u7684\u4e00\u4e2a\u5e38\u89c1\u95ee\u9898\u662f\u534f\u8bae\u5c5e\u6027\u662f\u4e0d\u53d8\u7684\u3002 \u4f8b\u5982\uff1a</p> <pre><code>class Box(Protocol):\n    content: object\n\nclass IntBox:\n    content: int\n\ndef takes_box(box: Box) -&gt; None: ...\n\ntakes_box(IntBox())  # error: Argument 1 to \"takes_box\" has incompatible type \uff08\u4e0d\u517c\u5bb9\u7c7b\u578b\uff09 \"IntBox\"; expected \"Box\"\n                    # note:  Following member(s) of \"IntBox\" have conflicts:\n                    # note:      content: expected \"object\", got \"int\"\n</code></pre> <p>\u8fd9\u662f\u56e0\u4e3a <code>Box</code> \u5c06 <code>content</code> \u5b9a\u4e49\u4e3a\u53ef\u53d8\u5c5e\u6027\u3002 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u8fd9\u662f\u6709\u95ee\u9898\u7684\uff1a</p> <pre><code>def takes_box_evil(box: Box) -&gt; None:\n    box.content = \"asdf\"  # \u8fd9\u5f88\u7cdf\u7cd5\uff0c\u56e0\u4e3a box.content \u5e94\u8be5\u662f\u4e00\u4e2a\u5bf9\u8c61\n\nmy_int_box = IntBox()\ntakes_box_evil(my_int_box)\nmy_int_box.content + 1  # Oops, TypeError!\n</code></pre> <p>\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 <code>@property</code> \u5728 <code>Box</code> \u534f\u8bae\u4e2d\u5c06 <code>content</code> \u58f0\u660e\u4e3a\u53ea\u8bfb\u6765\u89e3\u51b3\u6b64\u95ee\u9898\uff1a</p> <pre><code>class Box(Protocol):\n    @property\n    def content(self) -&gt; object: ...\n\nclass IntBox:\n    content: int\n\ndef takes_box(box: Box) -&gt; None: ...\n\ntakes_box(IntBox(42))  # OK\n</code></pre> <p>Invariance of protocol attributes</p> <p>A common issue with protocols is that protocol attributes are invariant. For example:</p> <pre><code>class Box(Protocol):\n    content: object\n\nclass IntBox:\n    content: int\n\ndef takes_box(box: Box) -&gt; None: ...\n\ntakes_box(IntBox())  # error: Argument 1 to \"takes_box\" has incompatible type \"IntBox\"; expected \"Box\"\n                    # note:  Following member(s) of \"IntBox\" have conflicts:\n                    # note:      content: expected \"object\", got \"int\"\n</code></pre> <p>This is because <code>Box</code> defines <code>content</code> as a mutable attribute. Here's why this is problematic:</p> <pre><code>def takes_box_evil(box: Box) -&gt; None:\n    box.content = \"asdf\"  # This is bad, since box.content is supposed to be an object\n\nmy_int_box = IntBox()\ntakes_box_evil(my_int_box)\nmy_int_box.content + 1  # Oops, TypeError!\n</code></pre> <p>This can be fixed by declaring <code>content</code> to be read-only in the <code>Box</code> protocol using <code>@property</code>:</p> <pre><code>class Box(Protocol):\n    @property\n    def content(self) -&gt; object: ...\n\nclass IntBox:\n    content: int\n\ndef takes_box(box: Box) -&gt; None: ...\n\ntakes_box(IntBox(42))  # OK\n</code></pre>"},{"location":"mypy/protocol_and_struct_subtyping/#\u9012\u5f52\u534f\u8bae","title":"\u9012\u5f52\u534f\u8bae","text":"\u4e2d\u6587\u82f1\u6587 <p>\u534f\u8bae\u53ef\u4ee5\u662f\u9012\u5f52\u7684\uff08\u81ea\u5f15\u7528\uff09\u548c\u76f8\u4e92\u9012\u5f52\u7684\u3002 \u8fd9\u5bf9\u4e8e\u58f0\u660e\u62bd\u8c61\u9012\u5f52\u96c6\u5408\uff08\u4f8b\u5982\u6811\u548c\u94fe\u8868\uff09\u5f88\u6709\u7528\uff1a</p> <pre><code>from typing import TypeVar, Optional\nfrom typing_extensions import Protocol\n\nclass TreeLike(Protocol):\n    value: int\n\n    @property\n    def left(self) -&gt; Optional['TreeLike']: ...\n\n    @property\n    def right(self) -&gt; Optional['TreeLike']: ...\n\nclass SimpleTree:\n    def __init__(self, value: int) -&gt; None:\n        self.value = value\n        self.left: Optional['SimpleTree'] = None\n        self.right: Optional['SimpleTree'] = None\n\nroot: TreeLike = SimpleTree(0)  # OK\n</code></pre> <p>Recursive protocols</p> <p>Protocols can be recursive (self-referential) and mutually recursive. This is useful for declaring abstract recursive collections such as trees and linked lists:</p> <pre><code>from typing import TypeVar, Optional\nfrom typing_extensions import Protocol\n\nclass TreeLike(Protocol):\n    value: int\n\n    @property\n    def left(self) -&gt; Optional['TreeLike']: ...\n\n    @property\n    def right(self) -&gt; Optional['TreeLike']: ...\n\nclass SimpleTree:\n    def __init__(self, value: int) -&gt; None:\n        self.value = value\n        self.left: Optional['SimpleTree'] = None\n        self.right: Optional['SimpleTree'] = None\n\nroot: TreeLike = SimpleTree(0)  # OK\n</code></pre>"},{"location":"mypy/protocol_and_struct_subtyping/#isinstance-\u548c\u534f\u8bae\u4e00\u8d77\u4f7f\u7528","title":"isinstance() \u548c\u534f\u8bae\u4e00\u8d77\u4f7f\u7528","text":"\u4e2d\u6587\u82f1\u6587 <p>\u5982\u679c\u4f7f\u7528<code>@runtime_checkable</code>\u7c7b\u88c5\u9970\u5668\u88c5\u9970\u534f\u8bae\u7c7b\uff0c\u5219\u53ef\u4ee5\u5c06\u5176\u4e0e <code>isinstance</code> \u4e00\u8d77\u4f7f\u7528\u3002 \u88c5\u9970\u5668\u6dfb\u52a0\u4e86\u5bf9\u8fd0\u884c\u65f6\u7ed3\u6784\u68c0\u67e5\u7684\u57fa\u672c\u652f\u6301\uff1a</p> <pre><code>from typing_extensions import Protocol, runtime_checkable\n\n@runtime_checkable\nclass Portable(Protocol):\n    handles: int\n\nclass Mug:\n    def __init__(self) -&gt; None:\n        self.handles = 1\n\ndef use(handles: int) -&gt; None: ...\n\nmug = Mug()\nif isinstance(mug, Portable):  # Works at runtime!\nuse(mug.handles)\n</code></pre> <p><code>isinstance</code> \u4e5f\u9002\u7528\u4e8e <code>\u9884\u5b9a\u4e49\u534f\u8bae</code> \u5728 <code>typing</code> \u4e2d\uff0c\u4f8b\u5982 <code>Iterable</code>\u3002</p> <p>Warning</p> <p>\u4f7f\u7528\u534f\u8bae\u7684 <code>isinstance</code> \u5728\u8fd0\u884c\u65f6\u5e76\u4e0d\u5b8c\u5168\u5b89\u5168\u3002 \u4f8b\u5982\uff0c\u4e0d\u68c0\u67e5\u65b9\u6cd5\u7684\u7b7e\u540d\u3002 \u8fd0\u884c\u65f6\u5b9e\u73b0\u4ec5\u68c0\u67e5\u6240\u6709\u534f\u8bae\u6210\u5458\u662f\u5426\u5b58\u5728\uff0c\u800c\u4e0d\u68c0\u67e5\u5b83\u4eec\u662f\u5426\u5177\u6709\u6b63\u786e\u7684\u7c7b\u578b\u3002 \u4f7f\u7528\u534f\u8bae\u7684 <code>issubclass</code> \u53ea\u4f1a\u68c0\u67e5\u65b9\u6cd5\u662f\u5426\u5b58\u5728\u3002</p> <p>Note</p> <p>\u4f7f\u7528\u534f\u8bae\u7684 <code>isinstance</code> \u4e5f\u53ef\u80fd\u6162\u5f97\u60ca\u4eba\u3002 \u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528 <code>hasattr</code> \u6765\u68c0\u67e5\u5c5e\u6027\u662f\u5426\u5b58\u5728\u4f1a\u66f4\u597d\u3002</p> <p>Using isinstance() with protocols</p> <p>You can use a protocol class with isinstance() if you decorate it with the @runtime_checkable class decorator. The decorator adds rudimentary support for runtime structural checks:</p> <pre><code>from typing_extensions import Protocol, runtime_checkable\n\n@runtime_checkable\nclass Portable(Protocol):\n    handles: int\n\nclass Mug:\n    def __init__(self) -&gt; None:\n        self.handles = 1\n\ndef use(handles: int) -&gt; None: ...\n\nmug = Mug()\nif isinstance(mug, Portable):  # Works at runtime!\nuse(mug.handles)\n</code></pre> <p>isinstance() also works with the predefined protocols in typing such as Iterable.</p> <p>Warning</p> <p>\u4f7f\u7528\u534f\u8bae\u7684 <code>isinstance</code> \u5728\u8fd0\u884c\u65f6\u5e76\u4e0d\u5b8c\u5168\u5b89\u5168\u3002 \u4f8b\u5982\uff0c\u4e0d\u68c0\u67e5\u65b9\u6cd5\u7684\u7b7e\u540d\u3002 \u8fd0\u884c\u65f6\u5b9e\u73b0\u4ec5\u68c0\u67e5\u6240\u6709\u534f\u8bae\u6210\u5458\u662f\u5426\u5b58\u5728\uff0c\u800c\u4e0d\u68c0\u67e5\u5b83\u4eec\u662f\u5426\u5177\u6709\u6b63\u786e\u7684\u7c7b\u578b\u3002 \u4f7f\u7528\u534f\u8bae\u7684 <code>issubclass</code> \u53ea\u4f1a\u68c0\u67e5\u65b9\u6cd5\u662f\u5426\u5b58\u5728\u3002</p> <p>Note</p> <p>\u4f7f\u7528\u534f\u8bae\u7684 <code>isinstance</code> \u4e5f\u53ef\u80fd\u6162\u5f97\u60ca\u4eba\u3002 \u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528 <code>hasattr</code> \u6765\u68c0\u67e5\u5c5e\u6027\u662f\u5426\u5b58\u5728\u4f1a\u66f4\u597d\u3002</p>"},{"location":"mypy/protocol_and_struct_subtyping/#\u56de\u8c03\u534f\u8bae","title":"\u56de\u8c03\u534f\u8bae","text":"\u4e2d\u6587\u82f1\u6587 <p>\u534f\u8bae\u53ef\u7528\u4e8e\u5b9a\u4e49\u7075\u6d3b\u7684\u56de\u8c03\u7c7b\u578b\uff0c\u8fd9\u4e9b\u7c7b\u578b\u5f88\u96be\uff08\u751a\u81f3\u4e0d\u53ef\u80fd\uff09\u4f7f\u7528 [<code>Callable[...]</code>](https://docs.python.org/3/library/typing.html#types.Callable\uff09\u8bed\u6cd5\uff0c\u4f8b\u5982\u53ef\u53d8\u53c2\u6570\u3001\u91cd\u8f7d\u548c\u590d\u6742\u7684\u6cdb\u578b\u56de\u8c03\u3002 \u5b83\u4eec\u662f\u7528\u7279\u6b8a\u7684 <code>__call__</code> \u6210\u5458\u5b9a\u4e49\u7684\uff1a</p> <pre><code>from typing import Optional, Iterable\nfrom typing_extensions import Protocol\n\nclass Combiner(Protocol):\n    def __call__(self, *vals: bytes, maxlen: Optional[int] = None) -&gt; list[bytes]: ...\n\ndef batch_proc(data: Iterable[bytes], cb_results: Combiner) -&gt; bytes:\n    for item in data:\n        ...\n\ndef good_cb(*vals: bytes, maxlen: Optional[int] = None) -&gt; list[bytes]:\n    ...\ndef bad_cb(*vals: bytes, maxitems: Optional[int]) -&gt; list[bytes]:\n    ...\n\nbatch_proc([], good_cb)  # OK\nbatch_proc([], bad_cb)   # Error! Argument 2 has incompatible type because of\n                        # different name and kind in the callback\n</code></pre> <p>\u56de\u8c03\u534f\u8bae\u548c <code>typing.Callable</code> \u5927\u90e8\u5206\u7c7b\u578b\u53ef\u4ee5\u4e92\u6362\u4f7f\u7528\u3002 <code>__call__</code> \u65b9\u6cd5\u4e2d\u7684\u53c2\u6570\u540d\u79f0\u5fc5\u987b\u76f8\u540c\uff0c\u9664\u975e\u4f7f\u7528\u53cc\u4e0b\u5212\u7ebf\u524d\u7f00\u3002 \u4f8b\u5982\uff1a</p> <pre><code>from typing import Callable, TypeVar\nfrom typing_extensions import Protocol\n\nT = TypeVar('T')\n\nclass Copy(Protocol):\n    def __call__(self, __origin: T) -&gt; T: ...\n\ncopy_a: Callable[[T], T]\ncopy_b: Copy\n\ncopy_a = copy_b  # OK\ncopy_b = copy_a  # Also OK\n</code></pre> <p>Callback protocols</p> <p>Protocols can be used to define flexible callback types that are hard (or even impossible) to express using the <code>Callable[...]</code> syntax, such as variadic, overloaded, and complex generic callbacks. They are defined with a special <code>__call__</code> member:</p> <pre><code>from typing import Optional, Iterable\nfrom typing_extensions import Protocol\n\nclass Combiner(Protocol):\n    def __call__(self, *vals: bytes, maxlen: Optional[int] = None) -&gt; list[bytes]: ...\n\ndef batch_proc(data: Iterable[bytes], cb_results: Combiner) -&gt; bytes:\n    for item in data:\n        ...\n\ndef good_cb(*vals: bytes, maxlen: Optional[int] = None) -&gt; list[bytes]:\n    ...\ndef bad_cb(*vals: bytes, maxitems: Optional[int]) -&gt; list[bytes]:\n    ...\n\nbatch_proc([], good_cb)  # OK\nbatch_proc([], bad_cb)   # Error! Argument 2 has incompatible type because of\n                        # different name and kind in the callback\n</code></pre> <p>Callback protocols and <code>typing.Callable</code> types can be used mostly interchangeably. Argument names in <code>__call__</code> methods must be identical, unless a double underscore prefix is used. For example:</p> <pre><code>from typing import Callable, TypeVar\nfrom typing_extensions import Protocol\n\nT = TypeVar('T')\n\nclass Copy(Protocol):\n    def __call__(self, __origin: T) -&gt; T: ...\n\ncopy_a: Callable[[T], T]\ncopy_b: Copy\n\ncopy_a = copy_b  # OK\ncopy_b = copy_a  # Also OK\n</code></pre>"},{"location":"mypy/protocol_and_struct_subtyping/#\u9884\u5b9a\u4e49\u534f\u8bae\u53c2\u8003","title":"\u9884\u5b9a\u4e49\u534f\u8bae\u53c2\u8003","text":""},{"location":"mypy/protocol_and_struct_subtyping/#\u8fed\u4ee3\u534f\u8bae","title":"\u8fed\u4ee3\u534f\u8bae","text":"<p>Iteration protocols</p> \u4e2d\u6587\u82f1\u6587 <p>\u8fed\u4ee3\u534f\u8bae\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\u90fd\u5f88\u6709\u7528\u3002 \u4f8b\u5982\uff0c\u5b83\u4eec\u5141\u8bb8\u5728 for \u5faa\u73af\u4e2d\u8fed\u4ee3\u5bf9\u8c61\u3002</p> <p>The iteration protocols are useful in many contexts. For example, they allow iteration of objects in for loops.</p>"},{"location":"mypy/protocol_and_struct_subtyping/#\u53ef\u8fed\u4ee3\u6cdb\u578b","title":"\u53ef\u8fed\u4ee3\u6cdb\u578b","text":"<p>Iterable[T]</p> \u4e2d\u6587\u82f1\u6587 <p><code>\u4e0a\u9762\u7684\u4f8b\u5b50</code>\u6709\u4e00\u4e2a <code>__iter__</code> \u65b9\u6cd5\u7684\u7b80\u5355\u5b9e\u73b0\u3002</p> <pre><code>def __iter__(self) -&gt; Iterator[T]\n</code></pre> <p>\u53e6\u8bf7\u53c2\u9605<code>typing.Iterable</code>\u3002</p> <p>The <code>example above</code> has a simple implementation of an <code>__iter__</code> method.</p> <pre><code>def __iter__(self) -&gt; Iterator[T]\n</code></pre> <p>See also <code>typing.Iterable</code>.</p>"},{"location":"mypy/protocol_and_struct_subtyping/#\u8fed\u4ee3\u5668\u6cdb\u578b","title":"\u8fed\u4ee3\u5668\u6cdb\u578b","text":"<p>Iterator[T]</p> \u4e2d\u6587\u82f1\u6587 <pre><code>def __next__(self) -&gt; T\ndef __iter__(self) -&gt; Iterator[T]\n</code></pre> <p>\u4e5f\u53ef\u4ee5\u770b\u770b <code>typing.Iterator</code>.</p> <pre><code>def __next__(self) -&gt; T\ndef __iter__(self) -&gt; Iterator[T]\n</code></pre> <p>See also <code>typing.Iterator</code>.</p>"},{"location":"mypy/protocol_and_struct_subtyping/#\u96c6\u5408\u534f\u8bae","title":"\u96c6\u5408\u534f\u8bae","text":"<p>Collection protocols</p> \u4e2d\u6587\u82f1\u6587 <p>\u5176\u4e2d\u8bb8\u591a\u662f\u901a\u8fc7\u5185\u7f6e\u5bb9\u5668\u7c7b\u578b\u5b9e\u73b0\u7684\uff0c\u4f8b\u5982 <code>list</code> \u548c [<code>dict</code>](https:// docs.python.org/3/library/stdtypes.html#dict\uff09\uff0c\u8fd9\u4e9b\u5bf9\u4e8e\u7528\u6237\u5b9a\u4e49\u7684\u96c6\u5408\u5bf9\u8c61\u4e5f\u5f88\u6709\u7528\u3002</p> <p>Collection protocols</p> <p>Many of these are implemented by built-in container types such as <code>list</code> and <code>dict</code>, and these are also useful for user-defined collection objects.</p>"},{"location":"mypy/protocol_and_struct_subtyping/#sized","title":"Sized","text":"\u4e2d\u6587\u82f1\u6587 <p>\u8fd9\u662f\u652f\u6301 <code>len(x)</code> \u7684\u5bf9\u8c61\u7c7b\u578b\u3002</p> <pre><code>def __len__(self) -&gt; int\n</code></pre> <p>\u4e5f\u53ef\u4ee5\u770b\u770b <code>typing.Sized</code>.</p> <p>This is a type for objects that support <code>len(x)</code>.</p> <pre><code>def __len__(self) -&gt; int\n</code></pre> <p>See also <code>typing.Sized</code>.</p>"},{"location":"mypy/protocol_and_struct_subtyping/#\u6cdb\u578b\u5bb9\u5668","title":"\u6cdb\u578b\u5bb9\u5668","text":"<p>Container[T]</p> \u4e2d\u6587\u82f1\u6587 <p>\u8fd9\u662f\u652f\u6301 <code>in</code> \u8fd0\u7b97\u7b26\u7684\u5bf9\u8c61\u7c7b\u578b\u3002</p> <pre><code>def __contains__(self, x: object) -&gt; bool\n</code></pre> <p>\u540c\u6837\u53c2\u8003 <code>Container</code>.</p> <p>This is a type for objects that support the <code>in</code> operator.</p> <pre><code>def __contains__(self, x: object) -&gt; bool\n</code></pre> <p>See also <code>Container</code>.</p>"},{"location":"mypy/protocol_and_struct_subtyping/#\u96c6\u5408\u6cdb\u578b","title":"\u96c6\u5408\u6cdb\u578b","text":"<p>Collection[T]</p> \u4e2d\u6587\u82f1\u6587 <pre><code>def __len__(self) -&gt; int\ndef __iter__(self) -&gt; Iterator[T]\ndef __contains__(self, x: object) -&gt; bool\n</code></pre> <p>\u540c\u6837\u53c2\u8003 <code>Collection</code>.</p> <pre><code>def __len__(self) -&gt; int\ndef __iter__(self) -&gt; Iterator[T]\ndef __contains__(self, x: object) -&gt; bool\n</code></pre> <p>See also <code>Collection</code>.</p>"},{"location":"mypy/protocol_and_struct_subtyping/#\u4e00\u6b21\u6027\u534f\u8bae","title":"\u4e00\u6b21\u6027\u534f\u8bae","text":"<p>One-off protocols</p> \u4e2d\u6587\u82f1\u6587 <p>\u8fd9\u4e9b\u534f\u8bae\u901a\u5e38\u4ec5\u9002\u7528\u4e8e\u5355\u4e2a\u6807\u51c6\u5e93\u51fd\u6570\u6216\u7c7b\u3002</p> <p>These protocols are typically only useful with a single standard library function or class.</p>"},{"location":"mypy/protocol_and_struct_subtyping/#\u5012\u5e8f\u6cdb\u578b","title":"\u5012\u5e8f\u6cdb\u578b","text":"<p>Reversible[T]</p> \u4e2d\u6587\u82f1\u6587 <p>\u8fd9\u662f\u652f\u6301 <code>reversed(x)</code> \u7684\u5bf9\u8c61\u7c7b\u578b\u3002</p> <pre><code>def __reversed__(self) -&gt; Iterator[T]\n</code></pre> <p>\u540c\u6837\u53c2\u8003 <code>Reversible</code>.</p> <p>This is a type for objects that support <code>reversed(x)</code>.</p> <pre><code>def __reversed__(self) -&gt; Iterator[T]\n</code></pre> <p>See also <code>Reversible</code>.</p>"},{"location":"mypy/protocol_and_struct_subtyping/#\u7edd\u5bf9\u503c\u6cdb\u578b","title":"\u7edd\u5bf9\u503c\u6cdb\u578b","text":"<p>SupportsAbs[T]</p> \u4e2d\u6587\u82f1\u6587 <p>\u8fd9\u662f\u652f\u6301 <code>abs(x)</code> \u7684\u5bf9\u8c61\u7c7b\u578b\u3002 <code>T</code> \u662f <code>abs(x)</code> \u8fd4\u56de\u7684\u503c\u7684\u7c7b\u578b\u3002</p> <pre><code>def __abs__(self) -&gt; T\n</code></pre> <p>\u540c\u6837\u53c2\u8003 <code>SupportsAbs</code>.</p> <p>This is a type for objects that support <code>abs(x)</code>. <code>T</code> is the type of value returned by <code>abs(x)</code>.</p> <pre><code>def __abs__(self) -&gt; T\n</code></pre> <p>See also <code>SupportsAbs</code>.</p>"},{"location":"mypy/protocol_and_struct_subtyping/#\u652f\u6301\u5b57\u8282","title":"\u652f\u6301\u5b57\u8282","text":"<p>SupportsBytes</p> \u4e2d\u6587\u82f1\u6587 <p>\u8fd9\u662f\u652f\u6301 <code>bytes(x)</code> \u7684\u5bf9\u8c61\u7c7b\u578b\u3002</p> <pre><code>def __bytes__(self) -&gt; bytes\n</code></pre> <p>\u53e6\u8bf7\u53c2\u9605 <code>SupportsBytes</code>\u3002</p> <p>This is a type for objects that support <code>bytes(x)</code>.</p> <pre><code>def __bytes__(self) -&gt; bytes\n</code></pre> <p>See also <code>SupportsBytes</code>.</p>"},{"location":"mypy/protocol_and_struct_subtyping/#\u652f\u6301\u590d\u6570","title":"\u652f\u6301\u590d\u6570","text":"<p>SupportsComplex</p> \u4e2d\u6587\u82f1\u6587 <p>\u8fd9\u662f\u652f\u6301 <code>complex(x)</code> \u7684\u5bf9\u8c61\u7c7b\u578b\u3002 \u8bf7\u6ce8\u610f\uff0c\u4e0d\u652f\u6301\u7b97\u672f\u8fd0\u7b97\u3002</p> <pre><code>def __complex__(self) -&gt; complex\n</code></pre> <p>\u53e6\u8bf7\u53c2\u9605 <code>SupportsComplex</code>.</p> <p>This is a type for objects that support <code>complex(x)</code>. Note that no arithmetic operations are supported.</p> <pre><code>def __complex__(self) -&gt; complex\n</code></pre> <p>See also <code>SupportsComplex</code>.</p>"},{"location":"mypy/protocol_and_struct_subtyping/#\u652f\u6301\u6d6e\u70b9\u6570","title":"\u652f\u6301\u6d6e\u70b9\u6570","text":"<p>SupportsFloat</p> \u4e2d\u6587\u82f1\u6587 <p>\u8fd9\u662f\u652f\u6301 <code>float(x)</code> \u7684\u5bf9\u8c61\u7c7b\u578b\u3002 \u8bf7\u6ce8\u610f\uff0c\u4e0d\u652f\u6301\u7b97\u672f\u8fd0\u7b97\u3002</p> <pre><code>def __float__(self) -&gt; float\n</code></pre> <p>\u53e6\u8bf7\u53c2\u9605 <code>SupportsFloat</code>.</p> <p>This is a type for objects that support <code>float(x)</code>. Note that no arithmetic operations are supported.</p> <pre><code>def __float__(self) -&gt; float\n</code></pre> <p>See also <code>SupportsFloat</code>.</p>"},{"location":"mypy/protocol_and_struct_subtyping/#\u652f\u6301\u6574\u6570","title":"\u652f\u6301\u6574\u6570","text":"<p>SupportsInt</p> \u4e2d\u6587\u82f1\u6587 <p>\u8fd9\u662f\u652f\u6301 <code>int(x)</code> \u7684\u5bf9\u8c61\u7c7b\u578b\u3002 \u8bf7\u6ce8\u610f\uff0c\u4e0d\u652f\u6301\u7b97\u672f\u8fd0\u7b97\u3002</p> <pre><code>def __int__(self) -&gt; int\n</code></pre> <p>\u53e6\u8bf7\u53c2\u9605 <code>SupportsInt</code>.</p> <p>This is a type for objects that support <code>int(x)</code>. Note that no arithmetic operations are supported.</p> <pre><code>def __int__(self) -&gt; int\n</code></pre> <p>See also <code>SupportsInt</code>.</p>"},{"location":"mypy/protocol_and_struct_subtyping/#\u652f\u6301round\u6cdb\u578b","title":"\u652f\u6301Round\u6cdb\u578b","text":"<p>SupportsRound[T]</p> \u4e2d\u6587\u82f1\u6587 <p>\u8fd9\u662f\u652f\u6301 <code>round(x)</code> \u7684\u5bf9\u8c61\u7c7b\u578b\u3002</p> <pre><code>def __round__(self) -&gt; T\n</code></pre> <p>\u53e6\u8bf7\u53c2\u9605 <code>SupportsRound</code>.</p> <p>This is a type for objects that support <code>round(x)</code>.</p> <pre><code>def __round__(self) -&gt; T\n</code></pre> <p>See also <code>SupportsRound</code>.</p>"},{"location":"mypy/protocol_and_struct_subtyping/#\u5f02\u6b65\u534f\u8bae","title":"\u5f02\u6b65\u534f\u8bae","text":"<p>Async protocols</p> \u4e2d\u6587\u82f1\u6587 <p>\u8fd9\u4e9b\u534f\u8bae\u5728\u5f02\u6b65\u4ee3\u7801\u4e2d\u5f88\u6709\u7528\u3002 \u8bf7\u53c2\u9605 <code>async-and-await</code> \u4e86\u89e3\u66f4\u591a\u4fe1\u606f\u3002</p> <p>These protocols can be useful in async code. See <code>async-and-await</code> for more information.</p>"},{"location":"mypy/protocol_and_struct_subtyping/#\u53ef\u7b49\u5f85\u6cdb\u578b\u5bf9\u8c61","title":"\u53ef\u7b49\u5f85\u6cdb\u578b\u5bf9\u8c61","text":"<p>Awaitable[T]</p> \u4e2d\u6587\u82f1\u6587 <pre><code>def __await__(self) -&gt; Generator[Any, None, T]\n</code></pre> <p>\u53e6\u8bf7\u53c2\u9605 <code>Awaitable</code>.</p> <pre><code>def __await__(self) -&gt; Generator[Any, None, T]\n</code></pre> <p>See also <code>Awaitable</code>.</p>"},{"location":"mypy/protocol_and_struct_subtyping/#\u5f02\u6b65\u53ef\u8fed\u4ee3\u6cdb\u578b\u5bf9\u8c61","title":"\u5f02\u6b65\u53ef\u8fed\u4ee3\u6cdb\u578b\u5bf9\u8c61","text":"<p>AsyncIterable[T]</p> \u4e2d\u6587\u82f1\u6587 <pre><code>def __aiter__(self) -&gt; AsyncIterator[T]\n</code></pre> <p>\u53e6\u8bf7\u53c2\u9605 <code>AsyncIterable</code>.</p> <pre><code>def __aiter__(self) -&gt; AsyncIterator[T]\n</code></pre> <p>See also <code>AsyncIterable</code>.</p>"},{"location":"mypy/protocol_and_struct_subtyping/#\u5f02\u6b65\u8fed\u4ee3\u5668\u6cdb\u578b\u5bf9\u8c61","title":"\u5f02\u6b65\u8fed\u4ee3\u5668\u6cdb\u578b\u5bf9\u8c61","text":"<p>AsyncIterator[T]</p> \u4e2d\u6587\u82f1\u6587 <pre><code>def __anext__(self) -&gt; Awaitable[T]\ndef __aiter__(self) -&gt; AsyncIterator[T]\n</code></pre> <p>\u53e6\u8bf7\u53c2\u9605 <code>AsyncIterator</code>.</p> <pre><code>def __anext__(self) -&gt; Awaitable[T]\ndef __aiter__(self) -&gt; AsyncIterator[T]\n</code></pre> <p>See also <code>AsyncIterator</code>.</p>"},{"location":"mypy/protocol_and_struct_subtyping/#\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u534f\u8bae","title":"\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u534f\u8bae","text":"<p>Context manager protocols</p> \u4e2d\u6587\u82f1\u6587 <p>\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u6709\u4e24\u79cd\u534f\u8bae\u2014\u2014\u4e00\u79cd\u7528\u4e8e\u5e38\u89c4\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff0c\u53e6\u4e00\u79cd\u7528\u4e8e\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u3002 \u8fd9\u4e9b\u5141\u8bb8\u5b9a\u4e49\u53ef\u5728<code>with</code>\u548c<code>async with</code>\u8bed\u53e5\u4e2d\u4f7f\u7528\u7684\u5bf9\u8c61\u3002</p> <p>There are two protocols for context managers -- one for regular context managers and one for async ones. These allow defining objects that can be used in <code>with</code> and <code>async with</code> statements.</p>"},{"location":"mypy/protocol_and_struct_subtyping/#\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u6cdb\u578b","title":"\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u6cdb\u578b","text":"<p>ContextManager[T]</p> \u4e2d\u6587\u82f1\u6587 <pre><code>def __enter__(self) -&gt; T\ndef __exit__(self,\n            exc_type: Optional[Type[BaseException]],\n            exc_value: Optional[BaseException],\n            traceback: Optional[TracebackType]) -&gt; Optional[bool]\n</code></pre> <p>\u53e6\u8bf7\u53c2\u9605 <code>ContextManager</code>.</p> <pre><code>def __enter__(self) -&gt; T\ndef __exit__(self,\n            exc_type: Optional[Type[BaseException]],\n            exc_value: Optional[BaseException],\n            traceback: Optional[TracebackType]) -&gt; Optional[bool]\n</code></pre> <p>See also <code>ContextManager</code>.</p>"},{"location":"mypy/protocol_and_struct_subtyping/#\u5f02\u6b65\u4e0a\u4e0b\u6587\u6cdb\u578b\u7ba1\u7406\u5668","title":"\u5f02\u6b65\u4e0a\u4e0b\u6587\u6cdb\u578b\u7ba1\u7406\u5668","text":"<p>AsyncContextManager[T]</p> \u4e2d\u6587\u82f1\u6587 <pre><code>def __aenter__(self) -&gt; Awaitable[T]\ndef __aexit__(self,\n            exc_type: Optional[Type[BaseException]],\n            exc_value: Optional[BaseException],\n            traceback: Optional[TracebackType]) -&gt; Awaitable[Optional[bool]]\n</code></pre> <p>\u53e6\u8bf7\u53c2\u9605 <code>AsyncContextManager</code>\u3002</p> <pre><code>def __aenter__(self) -&gt; Awaitable[T]\ndef __aexit__(self,\n            exc_type: Optional[Type[BaseException]],\n            exc_value: Optional[BaseException],\n            traceback: Optional[TracebackType]) -&gt; Awaitable[Optional[bool]]\n</code></pre> <p>See also <code>AsyncContextManager</code>.</p>"},{"location":"mypy/stub_files/","title":"\u5b58\u6839\u6587\u4ef6","text":"\u4e2d\u6587\u82f1\u6587 <p>\u5b58\u6839\u6587\u4ef6 \u662f\u4e00\u4e2a\u5305\u542b Python \u6a21\u5757\u516c\u5171\u63a5\u53e3\u6846\u67b6\u7684\u6587\u4ef6\uff0c\u5305\u62ec\u7c7b\u3001\u53d8\u91cf\u3001\u51fd\u6570\u2014\u2014\u6700\u91cd\u8981\u7684\u662f\u5b83\u4eec\u7684\u7c7b\u578b\u3002</p> <p>Mypy \u4f7f\u7528\u5b58\u50a8\u5728 typeshed \u5b58\u50a8\u5e93\u4e2d\u7684\u5b58\u6839\u6587\u4ef6\u6765\u786e\u5b9a\u6807\u51c6\u5e93\u548c\u7b2c\u4e09\u65b9\u5e93\u51fd\u6570\u3001\u7c7b\u548c\u5176\u4ed6\u5b9a\u4e49\u7684\u7c7b\u578b\u3002 \u60a8\u8fd8\u53ef\u4ee5\u521b\u5efa\u81ea\u5df1\u7684\u5b58\u6839\uff0c\u7528\u4e8e\u5bf9\u4ee3\u7801\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u3002</p> <p>Stub files</p> <p>A stub file is a file containing a skeleton of the public interface of that Python module, including classes, variables, functions -- and most importantly, their types.</p> <p>Mypy uses stub files stored in the typeshed repository to determine the types of standard library and third-party library functions, classes, and other definitions. You can also create your own stubs that will be used to type check your code.</p>"},{"location":"mypy/stub_files/#\u521b\u5efa\u4e00\u4e2a\u5b58\u6839","title":"\u521b\u5efa\u4e00\u4e2a\u5b58\u6839","text":"<p>Creating a stub</p> \u4e2d\u6587\u82f1\u6587 <p>\u4ee5\u4e0b\u662f\u5982\u4f55\u521b\u5efa\u5b58\u6839\u6587\u4ef6\u7684\u6982\u8ff0\uff1a</p> <ul> <li> <p>\u4e3a\u5e93\uff08\u6216\u4efb\u610f\u6a21\u5757\uff09\u7f16\u5199\u5b58\u6839\u6587\u4ef6\uff0c\u5e76\u5c06\u5176\u4f5c\u4e3a<code>.pyi</code>\u6587\u4ef6\u5b58\u50a8\u5728\u4e0e\u5e93\u6a21\u5757\u76f8\u540c\u7684\u76ee\u5f55\u4e2d\u3002</p> </li> <li> <p>\u6216\u8005\uff0c\u5c06\u5b58\u6839\uff08<code>.pyi</code> \u6587\u4ef6\uff09\u653e\u5728\u4e3a\u5b58\u6839\u4fdd\u7559\u7684\u76ee\u5f55\u4e2d\uff08\u4f8b\u5982\uff0c<code>myproject/stubs</code>\uff09\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u5fc5\u987b\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf<code>MYPYPATH</code>\u6765\u5f15\u7528\u8be5\u76ee\u5f55\u3002 \u4f8b\u5982\uff1a</p> <pre><code>export MYPYPATH=~/work/myproject/stubs\n</code></pre> </li> </ul> <p>\u5bf9\u6a21\u5757\u4f7f\u7528\u6b63\u5e38\u7684 Python \u6587\u4ef6\u540d\u7ea6\u5b9a\uff0c\u4f8b\u5982 \u6a21\u5757<code>csv</code>\u7684<code>csv.pyi</code>\u3002 \u4f7f\u7528\u5305\u542b<code>__init__.pyi</code>\u7684\u5b50\u76ee\u5f55\u4f5c\u4e3a\u5305\u3002 \u8bf7\u6ce8\u610f\uff0c\u5fc5\u987b\u5b89\u88c5 <code>PEP 561</code> \u4ec5\u5b58\u6839\u8f6f\u4ef6\u5305\uff0c\u5e76\u4e14\u4e0d\u80fd\u901a\u8fc7 <code>MYPYPATH</code> \u6307\u5411(\u8bf7\u53c2\u9605 <code>PEP 561 \u652f\u6301</code>)\u3002</p> <p>\u5982\u679c\u76ee\u5f55\u5305\u542b\u540c\u4e00\u6a21\u5757\u7684<code>.py</code>\u548c<code>.pyi</code>\u6587\u4ef6\uff0c\u5219<code>.pyi</code>\u6587\u4ef6\u4f18\u5148\u3002 \u8fd9\u6837\uff0c\u5373\u4f7f\u60a8\u4e0d\u60f3\u4fee\u6539\u6e90\u4ee3\u7801\uff0c\u4e5f\u53ef\u4ee5\u8f7b\u677e\u5730\u4e3a\u6a21\u5757\u6dfb\u52a0\u6ce8\u91ca\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u60a8\u5728\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u7b2c 3 \u65b9\u5f00\u6e90\u5e93\uff08\u5e76\u4e14 typeshed \u4e2d\u8fd8\u6ca1\u6709\u5b58\u6839\uff09\uff0c\u8fd9\u53ef\u80fd\u5f88\u6709\u7528\u3002</p> <p>\u5c31\u662f\u8fd9\u6837\uff01</p> <p>\u73b0\u5728\u60a8\u53ef\u4ee5\u5728 mypy \u7a0b\u5e8f\u4e2d\u8bbf\u95ee\u8be5\u6a21\u5757\u5e76\u8f93\u5165\u4f7f\u7528\u8be5\u5e93\u7684\u68c0\u67e5\u4ee3\u7801\u3002 \u5982\u679c\u60a8\u4e3a\u5e93\u6a21\u5757\u7f16\u5199\u5b58\u6839\uff0c\u8bf7\u8003\u8651\u5c06\u5176\u8d21\u732e\u7ed9 typeshed \u5b58\u50a8\u5e93\uff0c\u4ee5\u4f9b\u4f7f\u7528 mypy \u7684\u5176\u4ed6\u7a0b\u5e8f\u5458\u4f7f\u7528\u3002</p> <p>Mypy \u8fd8\u9644\u5e26\u4e86\u4e24\u4e2a\u5de5\u5177\uff0c\u53ef\u4ee5\u66f4\u8f7b\u677e\u5730\u521b\u5efa\u548c\u7ef4\u62a4\u5b58\u6839\uff1a<code>\u81ea\u52a8\u5b58\u6839\u751f\u6210 (stubgen)</code> \u548c [<code>\u81ea\u52a8\u5b58\u6839\u6d4b\u8bd5\uff08stubtest\uff09</code>]\uff08https://mypy.readthedocs.io/en/latest/stubtest.html#stubtest\uff09\u3002</p> <p>\u4ee5\u4e0b\u90e8\u5206\u4ecb\u7ecd\u4e86\u53ef\u4ee5\u5728\u7a0b\u5e8f\u548c\u5b58\u6839\u6587\u4ef6\u4e2d\u4f7f\u7528\u7684\u7c7b\u578b\u6ce8\u91ca\u7c7b\u578b\u3002</p> <p>Note</p> <p>\u60a8\u53ef\u80fd\u60f3\u5c06<code>MYPYPATH</code>\u6307\u5411\u6807\u51c6\u5e93\u6216\u5b89\u88c5\u7b2c 3 \u65b9\u8f6f\u4ef6\u5305\u7684 <code>site-packages</code>\u76ee\u5f55\u3002 \u8fd9\u51e0\u4e4e\u603b\u662f\u4e00\u4e2a\u574f\u4e3b\u610f\u2014\u2014\u60a8\u53ef\u80fd\u4f1a\u6536\u5230\u5927\u91cf\u5173\u4e8e\u60a8\u6ca1\u6709\u7f16\u5199\u7684\u4ee3\u7801\u7684\u9519\u8bef\u6d88\u606f\uff0c\u5e76\u4e14 mypy \u8fd8\u65e0\u6cd5\u5f88\u597d\u5730\u5206\u6790\uff0c\u5e76\u4e14\u5728\u6700\u574f\u7684\u60c5\u51b5\u4e0b\uff0cmypy \u53ef\u80fd\u4f1a\u7531\u4e8e\u67d0\u4e9b\u5b83\u6ca1\u60f3\u5230\u7684\u7b2c 3 \u65b9\u5305\u6784\u6784\u5efa\u800c\u5d29\u6e83, </p> <p>Here is an overview of how to create a stub file:</p> <ul> <li> <p>Write a stub file for the library (or an arbitrary module) and store it as a <code>.pyi</code> file in the same directory as the library module.</p> </li> <li> <p>Alternatively, put your stubs (<code>.pyi</code> files) in a directory reserved for stubs (e.g., {file}<code>myproject/stubs</code>). In this case you have to set the environment variable <code>MYPYPATH</code> to refer to the directory.  For example:</p> </li> </ul> <pre><code>export MYPYPATH=~/work/myproject/stubs\n</code></pre> <p>Use the normal Python file name conventions for modules, e.g. {file}<code>csv.pyi</code> for module <code>csv</code>. Use a subdirectory with <code>__init__.pyi</code> for packages. Note that <code>PEP 561</code> stub-only packages must be installed, and may not be pointed at through the <code>MYPYPATH</code> (see <code>PEP 561 support</code>).</p> <p>If a directory contains both a <code>.py</code> and a <code>.pyi</code> file for the same module, the <code>.pyi</code> file takes precedence. This way you can easily add annotations for a module even if you don't want to modify the source code. This can be useful, for example, if you use 3<sup>rd</sup> party open source libraries in your program (and there are no stubs in typeshed yet).</p> <p>That's it!</p> <p>Now you can access the module in mypy programs and type check code that uses the library. If you write a stub for a library module, consider making it available for other programmers that use mypy by contributing it back to the typeshed repo.</p> <p>Mypy also ships with two tools for making it easier to create and maintain stubs: <code>Automatic stub generation (stubgen)</code> and <code>Automatic stub testing (stubtest)</code>.</p> <p>The following sections explain the kinds of type annotations you can use in your programs and stub files.</p> <p>Note</p> <p>You may be tempted to point <code>MYPYPATH</code> to the standard library or to the {file}<code>site-packages</code> directory where your 3<sup>rd</sup> party packages are installed. This is almost always a bad idea -- you will likely get tons of error messages about code you didn't write and that mypy can't analyze all that well yet, and in the worst case scenario mypy may crash due to some construct in a 3<sup>rd</sup> party package that it didn't expect.</p>"},{"location":"mypy/stub_files/#\u5b58\u6839\u6587\u4ef6\u8bed\u6cd5","title":"\u5b58\u6839\u6587\u4ef6\u8bed\u6cd5","text":"\u4e2d\u6587\u82f1\u6587 <p>\u5b58\u6839\u6587\u4ef6\u662f\u7528\u666e\u901a\u7684 Python \u8bed\u6cd5\u7f16\u5199\u7684\uff0c\u4f46\u901a\u5e38\u4f1a\u7701\u7565\u8fd0\u884c\u65f6\u903b\u8f91\uff0c\u4f8b\u5982\u53d8\u91cf\u521d\u59cb\u503c\u8bbe\u5b9a\u9879\u3001\u51fd\u6570\u4f53\u548c\u9ed8\u8ba4\u53c2\u6570\u3002</p> <p>\u5982\u679c\u4e0d\u53ef\u80fd\u5b8c\u5168\u7701\u7565\u67d0\u4e9b\u8fd0\u884c\u65f6\u903b\u8f91\uff0c\u5efa\u8bae\u7684\u7ea6\u5b9a\u662f\u7528\u7701\u7565\u53f7\u8868\u8fbe\u5f0f\uff08<code>...</code>\uff09\u66ff\u6362\u6216\u5220\u9664\u5b83\u4eec\u3002 \u4e0b\u9762\u7684\u6bcf\u4e2a\u7701\u7565\u53f7\u5b9e\u9645\u4e0a\u90fd\u4ee5\u4e09\u4e2a\u70b9\u7684\u5f62\u5f0f\u5199\u5728\u5b58\u6839\u6587\u4ef6\u4e2d\uff1a</p> <pre><code># \u5e26\u6ce8\u91ca\u7684\u53d8\u91cf\u4e0d\u9700\u8981\u8d4b\u503c\u3002\n# \u56e0\u6b64\u6309\u7167\u60ef\u4f8b\uff0c\u6211\u4eec\u5728\u5b58\u6839\u6587\u4ef6\u4e2d\u7701\u7565\u5b83\u4eec\u3002\nx: int\n\n# \u51fd\u6570\u4f53\u65e0\u6cd5\u5b8c\u5168\u53bb\u9664\u3002 \u6309\u7167\u60ef\u4f8b\uff0c\n# \u6211\u4eec\u5c06\u5b83\u4eec\u66ff\u6362\u4e3a\u201c...\u201d\u800c\u4e0d\u662f\u201cpass\u201d\u8bed\u53e5\u3002\ndef func_1(code: str) -&gt; int: ...\n\n# \u6211\u4eec\u53ef\u4ee5\u5bf9\u9ed8\u8ba4\u53c2\u6570\u6267\u884c\u76f8\u540c\u7684\u64cd\u4f5c\u3002\ndef func_2(a: int, b: int = ...) -&gt; int: ...\n</code></pre> <p>Note</p> <p>\u7701\u7565\u53f7<code>...</code>\u5728<code>\u53ef\u8c03\u7528\u7c7b\u578b</code>\u548c<code>\u5143\u7ec4\u7c7b\u578b</code>\u4e2d\u4e5f\u6709\u4e0d\u540c\u7684\u542b\u4e49\u3002</p> <p>Stub files are written in normal Python syntax, but generally leaving out runtime logic like variable initializers, function bodies, and default arguments.</p> <p>If it is not possible to completely leave out some piece of runtime logic, the recommended convention is to replace or elide them with ellipsis expressions (<code>...</code>). Each ellipsis below is literally written in the stub file as three dots:</p> <pre><code># Variables with annotations do not need to be assigned a value.\n# So by convention, we omit them in the stub file.\nx: int\n\n# Function bodies cannot be completely removed. By convention,\n# we replace them with `...` instead of the `pass` statement.\ndef func_1(code: str) -&gt; int: ...\n\n# We can do the same with default arguments.\ndef func_2(a: int, b: int = ...) -&gt; int: ...\n</code></pre> <p>Note</p> <p>The ellipsis <code>...</code> is also used with a different meaning in <code>callable types</code> and <code>tuple types</code>.</p>"},{"location":"mypy/stub_files/#\u5728\u8fd0\u884c\u65f6\u4f7f\u7528\u5b58\u6839\u6587\u4ef6\u8bed\u6cd5","title":"\u5728\u8fd0\u884c\u65f6\u4f7f\u7528\u5b58\u6839\u6587\u4ef6\u8bed\u6cd5","text":"<p>Using stub file syntax at runtime</p> \u4e2d\u6587\u82f1\u6587 <p>\u60a8\u6709\u65f6\u53ef\u80fd\u8fd8\u9700\u8981\u7701\u7565\u5e38\u89c4 Python \u4ee3\u7801\u4e2d\u7684\u5b9e\u9645\u903b\u8f91\u2014\u2014\u4f8b\u5982\uff0c\u5728\u4f7f\u7528 <code>\u51fd\u6570\u91cd\u8f7d</code> \u6216 <code>\u81ea\u5b9a\u4e49\u534f\u8bae</code>\u7f16\u5199\u65b9\u6cd5\u65f6.</p> <p>\u63a8\u8350\u7684\u98ce\u683c\u662f\u4f7f\u7528\u7701\u7565\u53f7\u6765\u6267\u884c\u6b64\u64cd\u4f5c\uff0c\u5c31\u50cf\u5728\u5b58\u6839\u6587\u4ef6\u4e2d\u4e00\u6837\u3002 \u5728\u4ee3\u7801\u7684\u7528\u6237\u53ef\u80fd\u610f\u5916\u8c03\u7528\u6ca1\u6709\u5b9e\u9645\u529f\u80fd\u7684\u51fd\u6570\u7684\u60c5\u51b5\u4e0b\uff0c\u629b\u51fa <code>NotImplementedError</code> \u4e5f\u88ab\u8ba4\u4e3a\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002 \u903b\u8f91\u3002</p> <p>\u53ea\u8981\u51fd\u6570\u4f53\u4e0d\u5305\u542b\u8fd0\u884c\u65f6\u903b\u8f91\uff0c\u60a8\u4e5f\u53ef\u4ee5\u7701\u7565\u9ed8\u8ba4\u53c2\u6570\uff1a\u51fd\u6570\u4f53\u4ec5\u5305\u542b\u5355\u4e2a\u7701\u7565\u53f7\u3001pass \u8bed\u53e5\u6216<code>raise NotImplementedError()</code>\u3002 \u51fd\u6570\u4f53\u5305\u542b\u6587\u6863\u5b57\u7b26\u4e32\u4e5f\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002 \u4f8b\u5982\uff1a</p> <pre><code>from typing_extensions import Protocol\n\nclass Resource(Protocol):\n    def ok_1(self, foo: list[str] = ...) -&gt; None: ...\n\n    def ok_2(self, foo: list[str] = ...) -&gt; None:\n        raise NotImplementedError()\n\n    def ok_3(self, foo: list[str] = ...) -&gt; None:\n        \"\"\"Some docstring\"\"\"\n        pass\n\n    # Error: Incompatible default for argument \"foo\" (default has type \"ellipsis\", argument has type \"list[str]\")\n    def not_ok(self, foo: list[str] = ...) -&gt; None:\n        print(foo)\n</code></pre> <p>You may also occasionally need to elide actual logic in regular Python code -- for example, when writing methods in <code>overload variants</code> or <code>custom protocols</code>.</p> <p>The recommended style is to use ellipses to do so, just like in stub files. It is also considered stylistically acceptable to throw a <code>NotImplementedError</code> in cases where the user of the code may accidentally call functions with no actual logic.</p> <p>You can also elide default arguments as long as the function body also contains no runtime logic: the function body only contains a single ellipsis, the pass statement, or a <code>raise NotImplementedError()</code>. It is also acceptable for the function body to contain a docstring. For example:</p> <pre><code>from typing_extensions import Protocol\n\nclass Resource(Protocol):\n    def ok_1(self, foo: list[str] = ...) -&gt; None: ...\n\n    def ok_2(self, foo: list[str] = ...) -&gt; None:\n        raise NotImplementedError()\n\n    def ok_3(self, foo: list[str] = ...) -&gt; None:\n        \"\"\"Some docstring\"\"\"\n        pass\n\n    # Error: Incompatible default for argument \"foo\" (default has\n    # type \"ellipsis\", argument has type \"list[str]\")\n    def not_ok(self, foo: list[str] = ...) -&gt; None:\n        print(foo)\n</code></pre>"},{"location":"mypy/type_inference_type_annotations/","title":"\u7c7b\u578b\u63a8\u65ad\u548c\u7c7b\u578b\u6ce8\u89e3","text":"<p>Type inference and type annotations</p>"},{"location":"mypy/type_inference_type_annotations/#\u7c7b\u578b\u63a8\u65ad","title":"\u7c7b\u578b\u63a8\u65ad","text":"\u4e2d\u6587\u82f1\u6587 <p>\u5bf9\u4e8e\u5927\u591a\u6570\u53d8\u91cf\uff0c\u5982\u679c\u60a8\u6ca1\u6709\u663e\u5f0f\u6307\u5b9a\u5176\u7c7b\u578b\uff0cmypy \u5c06\u6839\u636e\u6700\u521d\u5206\u914d\u7ed9\u53d8\u91cf\u7684\u7c7b\u578b\u63a8\u65ad\u51fa\u6b63\u786e\u7684\u7c7b\u578b\u3002</p> <pre><code># \u5c3d\u7ba1\u6ca1\u6709\u6ce8\u91ca\uff0cMypy \u4ecd\u4f1a\u63a8\u65ad\u8fd9\u4e9b\u53d8\u91cf\u7684\u7c7b\u578b\ni = 1\nreveal_type(i)  # \u663e\u793a\u7684\u7c7b\u578b\u662f \u201cbuiltins.int\u201d\nl = [1, 2]\nreveal_type(l)  # \u663e\u793a\u7c7b\u578b\u4e3a \u201cbuiltins.list[builtins.int]\u201d\n</code></pre> <p>\u7b14\u8bb0</p> <p>\u8bf7\u6ce8\u610f\uff0cmypy \u4e0d\u4f1a\u5728\u52a8\u6001\u7c7b\u578b\u51fd\u6570\uff08\u6ca1\u6709\u51fd\u6570\u7c7b\u578b\u6ce8\u91ca\u7684\u51fd\u6570\uff09\u4e2d\u4f7f\u7528\u7c7b\u578b\u63a8\u65ad - \u5728\u6b64\u7c7b\u51fd\u6570\u4e2d\uff0c\u6bcf\u4e2a\u5c40\u90e8\u53d8\u91cf\u7c7b\u578b\u9ed8\u8ba4\u4e3a\u201cAny\u201d\u3002 \u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605<code>dynamic-typing</code>\u3002</p> <pre><code>def untyped_function():\n    i = 1\n    reveal_type(i) # \u63ed\u793a\u7684\u7c7b\u578b\u662f \"Any\"\n                   # \u201creveal_type\u201d\u5728\u672a\u7ecf\u68c0\u67e5\u7684\u51fd\u6570\u4e2d\u59cb\u7ec8\u8f93\u51fa\u201cAny\u201d\n</code></pre> <p>Type inference</p> <p>For most variables, if you do not explicitly specify its type, mypy will infer the correct type based on what is initially assigned to the variable.</p> <pre><code># Mypy will infer the type of these variables, despite no annotations\ni = 1\nreveal_type(i)  # Revealed type is \"builtins.int\"\nl = [1, 2]\nreveal_type(l)  # Revealed type is \"builtins.list[builtins.int]\"\n</code></pre> <p>Note</p> <p>Note that mypy will not use type inference in dynamically typed functions (those without a function type annotation) \u2014 every local variable type defaults to <code>Any</code> in such functions. For more details, see <code>dynamic-typing</code>.</p> <pre><code>def untyped_function():\n    i = 1\n    reveal_type(i) # Revealed type is \"Any\"\n                   # 'reveal_type' always outputs 'Any' in unchecked functions\n</code></pre>"},{"location":"mypy/type_inference_type_annotations/#\u53d8\u91cf\u7684\u663e\u5f0f\u7c7b\u578b","title":"\u53d8\u91cf\u7684\u663e\u5f0f\u7c7b\u578b","text":"\u4e2d\u6587\u82f1\u6587 <p>\u60a8\u53ef\u4ee5\u4f7f\u7528\u53d8\u91cf\u7c7b\u578b\u6ce8\u91ca\u8986\u76d6\u53d8\u91cf\u7684\u63a8\u65ad\u7c7b\u578b\uff1a</p> <pre><code>from typing import Union\n\nx: Union[int, str] = 1\n</code></pre> <p>\u5982\u679c\u6ca1\u6709\u7c7b\u578b\u6ce8\u91ca\uff0c\u201cx\u201d \u7684\u7c7b\u578b\u5c06\u53ea\u662f \u201cint\u201d \u3002 \u6211\u4eec\u4f7f\u7528\u6ce8\u91ca\u7ed9\u5b83\u4e00\u4e2a\u66f4\u901a\u7528\u7684\u7c7b\u578b \u201cUnion[int, str]\u201d\uff08\u8be5\u7c7b\u578b\u610f\u5473\u7740\u8be5\u503c\u53ef\u4ee5\u662f \u201cint\u201d \u6216 \u201cstr\u201d \uff09\u3002</p> <p>\u8003\u8651\u8fd9\u4e2a\u95ee\u9898\u7684\u6700\u4f73\u65b9\u6cd5\u662f\u7c7b\u578b\u6ce8\u91ca\u8bbe\u7f6e\u53d8\u91cf\u7684\u7c7b\u578b\uff0c\u800c\u4e0d\u662f\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u3002 \u4f8b\u5982\uff0cmypy \u4f1a\u62b1\u6028\u4ee5\u4e0b\u4ee3\u7801\uff1a</p> <pre><code>x: Union[int, str] = 1.1  # error: \u8d4b\u503c\u4e2d\u7684\u7c7b\u578b\u4e0d\u517c\u5bb9\uff08\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u4e3a\u201cfloat\u201d\uff0c\u53d8\u91cf\u7684\u7c7b\u578b\u4e3a\u201cUnion[int, str]\u201d\uff09\n</code></pre> <p>Note</p> <p>\u8981\u663e\u5f0f\u8986\u76d6\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 [<code>cast(\\&lt;type\\&gt;, \\&lt;expression\\&gt;) &lt;typing.cast&gt;</code>](https://docs.python.org/3/library/typing.html#typing.cast\uff09\u3002 \u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 <code>casts</code>\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u60a8\u53ef\u4ee5\u663e\u5f0f\u58f0\u660e\u53d8\u91cf\u7684\u7c7b\u578b\u800c\u4e0d\u4e3a\u5176\u6307\u5b9a\u521d\u59cb\u503c\uff1a</p> <pre><code>    # \u6211\u4eec\u53ea\u89e3\u538b\u4e24\u4e2a\u503c\uff0c\u56e0\u6b64 mypy \u6ca1\u6709\u53f3\u4fa7\u503c\u6765\u63a8\u65ad\u201ccs\u201d\u7684\u7c7b\u578b\uff1a\n    a, b, *cs = 1, 2  # error: \u9700\u8981\u201ccs\u201d\u7684\u7c7b\u578b\u6ce8\u89e3\n\n    rs: list[int]  # no assignment!\n    p, q, *rs = 1, 2  # OK\n</code></pre> <p>Explicit types for variables</p> <p>You can override the inferred type of a variable by using a variable type annotation:</p> <pre><code>from typing import Union\n\nx: Union[int, str] = 1\n</code></pre> <p>Without the type annotation, the type of <code>x</code> would be just <code>int</code>. We use an annotation to give it a more general type <code>Union[int, str]</code> (this type means that the value can be either an <code>int</code> or a <code>str</code>).</p> <p>The best way to think about this is that the type annotation sets the type of the variable, not the type of the expression. For instance, mypy will complain about the following code:</p> <pre><code>x: Union[int, str] = 1.1  # error: Incompatible types in assignment\n                          # (expression has type \"float\", variable has type \"Union[int, str]\")\n</code></pre> <p>Note</p> <p>To explicitly override the type of an expression you can use <code>cast(\\&lt;type\\&gt;, \\&lt;expression\\&gt;) &lt;typing.cast&gt;</code>. See <code>casts</code> for details.</p> <p>Note that you can explicitly declare the type of a variable without giving it an initial value:</p> <pre><code>    # We only unpack two values, so there's no right-hand side value\n    # for mypy to infer the type of \"cs\" from:\n    a, b, *cs = 1, 2  # error: Need type annotation for \"cs\"\n\n    rs: list[int]  # no assignment!\n    p, q, *rs = 1, 2  # OK\n</code></pre>"},{"location":"mypy/type_inference_type_annotations/#\u96c6\u5408\u7684\u663e\u5f0f\u7c7b\u578b","title":"\u96c6\u5408\u7684\u663e\u5f0f\u7c7b\u578b","text":"\u4e2d\u6587\u82f1\u6587 <p>\u7c7b\u578b\u68c0\u67e5\u5668\u4e0d\u80fd\u603b\u662f\u63a8\u65ad\u51fa\u5217\u8868\u6216\u5b57\u5178\u7684\u7c7b\u578b\u3002 \u5f53\u521b\u5efa\u7a7a\u5217\u8868\u6216\u5b57\u5178\u5e76\u5c06\u5176\u5206\u914d\u7ed9\u6ca1\u6709\u663e\u5f0f\u53d8\u91cf\u7c7b\u578b\u7684\u65b0\u53d8\u91cf\u65f6\uff0c\u901a\u5e38\u4f1a\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\u3002 \u8fd9\u662f\u4e00\u4e2a\u793a\u4f8b\uff0c\u5176\u4e2d mypy \u5728\u6ca1\u6709\u5e2e\u52a9\u7684\u60c5\u51b5\u4e0b\u65e0\u6cd5\u63a8\u65ad\u7c7b\u578b\uff1a</p> <pre><code>l = []  # Error: \u9700\u8981\u53d8\u91cf \"l\" \u7684\u7c7b\u578b\u6ce8\u89e3\n</code></pre> <p>\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u7c7b\u578b\u6ce8\u91ca\u663e\u5f0f\u6307\u5b9a\u7c7b\u578b\uff1a</p> <pre><code>l: list[int] = []       # \u521b\u5efa int \u7684\u7a7a\u5217\u8868\nd: dict[str, int] = {}  # \u521b\u5efa\u7a7a\u5b57\u5178\uff08str -&gt; int\uff09\n</code></pre> <p>Note</p> <p>\u5728\u5185\u7f6e\u96c6\u5408\u4e0a\u4f7f\u7528\u7c7b\u578b\u53c2\u6570\uff08\u4f8b\u5982\u201clist[int]\u201d\uff09\uff0c\u4f8b\u5982 <code>list</code>\u3001<code>dict</code>\u3001<code>tuple</code> \u548c <code>set</code> \u4ec5\u9002\u7528\u4e8e Python 3.9 \u53ca\u66f4\u9ad8\u7248\u672c\u3002 \u5bf9\u4e8ePython 3.8\u53ca\u66f4\u65e9\u7248\u672c\uff0c\u60a8\u5fc5\u987b\u4f7f\u7528<code>List</code>\uff08\u4f8b\u5982<code>List[int]</code>\uff09\uff0c<code>Dict</code>\uff0c\u7b49\u7b49\u3002</p> <p>Explicit types for collections</p> <p>The type checker cannot always infer the type of a list or a dictionary. This often arises when creating an empty list or dictionary and assigning it to a new variable that doesn't have an explicit variable type. Here is an example where mypy can't infer the type without some help:</p> <pre><code>l = []  # Error: Need type annotation for \"l\"\n</code></pre> <p>In these cases you can give the type explicitly using a type annotation:</p> <pre><code>l: list[int] = []       # Create empty list of int\nd: dict[str, int] = {}  # Create empty dictionary (str -&gt; int)\n</code></pre> <p>Note</p> <p>Using type arguments (e.g. <code>list[int]</code>) on builtin collections like <code>list</code>,  <code>dict</code>, <code>tuple</code>, and  <code>set</code> only works in Python 3.9 and later. For Python 3.8 and earlier, you must use <code>List</code> (e.g. <code>List[int]</code>), <code>Dict</code>, and so on.</p>"},{"location":"mypy/type_inference_type_annotations/#\u5bb9\u5668\u7c7b\u578b\u7684\u517c\u5bb9\u6027","title":"\u5bb9\u5668\u7c7b\u578b\u7684\u517c\u5bb9\u6027","text":"\u4e2d\u6587\u82f1\u6587 <p>\u5feb\u901f\u8bf4\u660e\uff1a\u5bb9\u5668\u7c7b\u578b\u6709\u65f6\u53ef\u80fd\u4e0d\u76f4\u89c2\u3002 \u6211\u4eec\u5c06\u5728<code>variance</code>\u4e2d\u8be6\u7ec6\u8ba8\u8bba\u8fd9\u4e00\u70b9\u3002 \u4f8b\u5982\uff0c\u4ee5\u4e0b\u7a0b\u5e8f\u4f1a\u751f\u6210 mypy \u9519\u8bef\uff0c\u56e0\u4e3a mypy \u5c06 <code>list[int]</code> \u89c6\u4e3a\u4e0e <code>list[object]</code> \u4e0d\u517c\u5bb9\uff1a</p> <pre><code>def f(l: list[object], k: list[int]) -&gt; None:\n    l = k  # error: \u8d4b\u503c\u4e2d\u7684\u7c7b\u578b\u4e0d\u517c\u5bb9\n</code></pre> <p>\u4e0d\u5141\u8bb8\u4e0a\u8ff0\u8d4b\u503c\u7684\u539f\u56e0\u662f\u5141\u8bb8\u8d4b\u503c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u975e int \u503c\u5b58\u50a8\u5728 \u201cint\u201d \u5217\u8868\u4e2d\uff1a</p> <pre><code>def f(l: list[object], k: list[int]) -&gt; None:\n   l = k\n   l.append('x')\n   print(k[-1])  # \u54ce\u54df; list[int] \u4e2d\u7684\u5b57\u7b26\u4e32\n</code></pre> <p>\u5176\u4ed6\u5bb9\u5668\u7c7b\u578b\uff0c\u5982 <code>dict</code> \u548c <code>set</code> /stdtypes.html#set) \u7684\u884c\u4e3a\u7c7b\u4f3c\u3002</p> <p>\u60a8\u4ecd\u7136\u53ef\u4ee5\u8fd0\u884c\u4e0a\u9762\u7684\u7a0b\u5e8f\uff1b \u5b83\u6253\u5370 \u201cx\u201d\u3002 \u8fd9\u8bf4\u660e\u9759\u6001\u7c7b\u578b\u4e0d\u4f1a\u5f71\u54cd\u7a0b\u5e8f\u7684\u8fd0\u884c\u65f6\u884c\u4e3a\u3002 \u60a8\u53ef\u4ee5\u8fd0\u884c\u7c7b\u578b\u68c0\u67e5\u5931\u8d25\u7684\u7a0b\u5e8f\uff0c\u8fd9\u5728\u6267\u884c\u5927\u578b\u91cd\u6784\u65f6\u901a\u5e38\u975e\u5e38\u65b9\u4fbf\u3002 \u56e0\u6b64\uff0c\u60a8\u59cb\u7ec8\u53ef\u4ee5\u201c\u89e3\u51b3\u201d\u7c7b\u578b\u7cfb\u7edf\uff0c\u5e76\u4e14\u5b83\u5e76\u4e0d\u4f1a\u771f\u6b63\u9650\u5236\u60a8\u5728\u7a0b\u5e8f\u4e2d\u53ef\u4ee5\u6267\u884c\u7684\u64cd\u4f5c\u3002</p> <p>Compatibility of container types</p> <p>A quick note: container types can sometimes be unintuitive. We'll discuss this more in <code>variance</code>. For example, the following program generates a mypy error, because mypy treats <code>list[int]</code> as incompatible with <code>list[object]</code>:</p> <pre><code>def f(l: list[object], k: list[int]) -&gt; None:\n    l = k  # error: Incompatible types in assignment\n</code></pre> <p>The reason why the above assignment is disallowed is that allowing the assignment could result in non-int values stored in a list of <code>int</code>:</p> <pre><code>def f(l: list[object], k: list[int]) -&gt; None:\n   l = k\n   l.append('x')\n   print(k[-1])  # Ouch; a string in list[int]\n</code></pre> <p>Other container types like <code>dict</code> and <code>set</code> behave similarly.</p> <p>You can still run the above program; it prints <code>x</code>. This illustrates the fact that static types do not affect the runtime behavior of programs. You can run programs with type check failures, which is often very handy when performing a large refactoring. Thus you can always 'work around' the type system, and it doesn't really limit what you can do in your program.</p>"},{"location":"mypy/type_inference_type_annotations/#\u7c7b\u578b\u63a8\u65ad\u4e2d\u7684\u4e0a\u4e0b\u6587","title":"\u7c7b\u578b\u63a8\u65ad\u4e2d\u7684\u4e0a\u4e0b\u6587","text":"\u4e2d\u6587\u82f1\u6587 <p>\u7c7b\u578b\u63a8\u65ad\u662f\u53cc\u5411\u7684\u5e76\u8003\u8651\u4e0a\u4e0b\u6587\u3002</p> <p>Mypy \u5728\u63a8\u65ad\u53f3\u4fa7\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u65f6\u4f1a\u8003\u8651\u8d4b\u503c\u5de6\u4fa7\u53d8\u91cf\u7684\u7c7b\u578b\u3002 \u4f8b\u5982\uff0c\u4ee5\u4e0b\u5185\u5bb9\u5c06\u7c7b\u578b\u68c0\u67e5\uff1a</p> <pre><code>def f(l: list[object]) -&gt; None:\n    l = [1, 2]  # \u63a8\u65ad [1, 2] \u7684\u7c7b\u578b\u4e3a list[object]\uff0c\u800c\u4e0d\u662f list[int]\n</code></pre> <p>\u503c\u8868\u8fbe\u5f0f \u201c[1, 2]\u201d \u4f7f\u7528\u9644\u52a0\u4e0a\u4e0b\u6587\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\uff0c\u8be5\u4e0a\u4e0b\u6587\u88ab\u5206\u914d\u7ed9 \u201clist[object]\u201d \u7c7b\u578b\u7684\u53d8\u91cf\u3002 \u8fd9\u7528\u4e8e\u5c06\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u63a8\u65ad\u4e3a \u201clist[object]\u201d \u3002</p> <p>\u58f0\u660e\u7684\u53c2\u6570\u7c7b\u578b\u4e5f\u7528\u4e8e\u7c7b\u578b\u4e0a\u4e0b\u6587\u3002 \u5728\u8fd9\u4e2a\u7a0b\u5e8f\u4e2d\uff0cmypy \u77e5\u9053\u7a7a\u5217\u8868 <code>[]</code> \u5e94\u8be5\u5177\u6709\u7c7b\u578b <code>list[int]</code>\uff0c\u57fa\u4e8e <code>foo</code> \u4e2d <code>arg</code> \u7684\u58f0\u660e\u7c7b\u578b\uff1a</p> <pre><code>def foo(arg: list[int]) -&gt; None:\n    print('Items:', ''.join(str(a) for a in arg))\n\nfoo([])  # OK\n</code></pre> <p>\u4f46\u662f\uff0c\u4e0a\u4e0b\u6587\u4ec5\u5728\u5355\u4e2a\u8bed\u53e5\u4e2d\u8d77\u4f5c\u7528\u3002 \u8fd9\u91cc mypy \u9700\u8981\u7a7a\u5217\u8868\u7684\u6ce8\u91ca\uff0c\u56e0\u4e3a\u4e0a\u4e0b\u6587\u4ec5\u5728\u4ee5\u4e0b\u8bed\u53e5\u4e2d\u53ef\u7528\uff1a</p> <pre><code>def foo(arg: list[int]) -&gt; None:\n    print('Items:', ', '.join(arg))\n\na = []  # Error: \u9700\u8981\u201ca\u201d\u7684\u7c7b\u578b\u6ce8\u89e3\nfoo(a)\n</code></pre> <p>\u901a\u8fc7\u6dfb\u52a0\u7c7b\u578b\u6ce8\u89e3\u53ef\u4ee5\u8f7b\u677e\u89e3\u51b3\u8be5\u95ee\u9898\uff1a</p> <pre><code>...\na: list[int] = []  # OK\nfoo(a)\n</code></pre> <p>Context in type inference</p> <p>Type inference is bidirectional and takes context into account.</p> <p>Mypy will take into account the type of the variable on the left-hand side of an assignment when inferring the type of the expression on the right-hand side. For example, the following will type check:</p> <pre><code>def f(l: list[object]) -&gt; None:\n    l = [1, 2]  # Infer type list[object] for [1, 2], not list[int]\n</code></pre> <p>The value expression <code>[1, 2]</code> is type checked with the additional context that it is being assigned to a variable of type <code>list[object]</code>. This is used to infer the type of the expression as <code>list[object]</code>.</p> <p>Declared argument types are also used for type context. In this program mypy knows that the empty list <code>[]</code> should have type <code>list[int]</code> based on the declared type of <code>arg</code> in <code>foo</code>:</p> <pre><code>def foo(arg: list[int]) -&gt; None:\n    print('Items:', ''.join(str(a) for a in arg))\n\nfoo([])  # OK\n</code></pre> <p>However, context only works within a single statement. Here mypy requires an annotation for the empty list, since the context would only be available in the following statement:</p> <pre><code>def foo(arg: list[int]) -&gt; None:\n    print('Items:', ', '.join(arg))\n\na = []  # Error: Need type annotation for \"a\"\nfoo(a)\n</code></pre> <p>Working around the issue is easy by adding a type annotation:</p> <pre><code>...\na: list[int] = []  # OK\nfoo(a)\n</code></pre>"},{"location":"mypy/type_inference_type_annotations/#\u6d88\u9664\u7c7b\u578b\u9519\u8bef","title":"\u6d88\u9664\u7c7b\u578b\u9519\u8bef","text":"\u4e2d\u6587\u82f1\u6587 <p>\u60a8\u53ef\u80fd\u5e0c\u671b\u7981\u7528\u7279\u5b9a\u884c\u6216\u4ee3\u7801\u5e93\u4e2d\u7279\u5b9a\u6587\u4ef6\u5185\u7684\u7c7b\u578b\u68c0\u67e5\u3002 \u4e3a\u6b64\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 <code># type:ignore</code> \u6ce8\u91ca\u3002</p> <p>\u4f8b\u5982\uff0c\u5728\u6700\u65b0\u66f4\u65b0\u4e2d\uff0c\u60a8\u4f7f\u7528\u7684 Web \u6846\u67b6\u73b0\u5728\u53ef\u4ee5\u5c06\u6574\u6570\u53c2\u6570\u4f20\u9012\u7ed9\u201crun()\u201d\uff0c\u4ece\u800c\u5728\u8be5\u7aef\u53e3\u4e0a\u7684\u672c\u5730\u4e3b\u673a\u4e0a\u542f\u52a8\u5b83\u3002 \u5c31\u50cf\u8fd9\u6837\uff1a</p> <pre><code># \u542f\u52a8\u5e94\u7528\u7a0b\u5e8f http://localhost:8000\napp.run(8000)\n</code></pre> <p>\u7136\u800c\uff0c\u5f00\u53d1\u4eba\u5458\u5fd8\u8bb0\u66f4\u65b0\u201crun\u201d\u7684\u7c7b\u578b\u6ce8\u91ca\uff0c\u56e0\u6b64 mypy \u4ecd\u7136\u8ba4\u4e3a\u201crun\u201d\u53ea\u9700\u8981\u201cstr\u201d\u7c7b\u578b\u3002 \u8fd9\u4f1a\u7ed9\u4f60\u5e26\u6765\u4ee5\u4e0b\u9519\u8bef\uff1a</p> <pre><code>error: Argument 1 to \"run\" of \"A\" has incompatible type \"int\"; expected \"str\"\n</code></pre> <p>\u5982\u679c\u60a8\u81ea\u5df1\u65e0\u6cd5\u76f4\u63a5\u4fee\u590d Web \u6846\u67b6\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u6dfb\u52a0 <code># type:ignore</code> \u6765\u4e34\u65f6\u7981\u7528\u8be5\u884c\u7684\u7c7b\u578b\u68c0\u67e5\uff1a</p> <pre><code># \u542f\u52a8\u5e94\u7528\u7a0b\u5e8f http://localhost:8000\napp.run(8000)  # type: ignore\n</code></pre> <p>\u8fd9\u5c06\u6291\u5236\u8be5\u7279\u5b9a\u884c\u4e0a\u51fa\u73b0\u7684\u4efb\u4f55 mypy \u9519\u8bef\u3002</p> <p>\u60a8\u53ef\u80fd\u5e94\u8be5\u5728<code># type:ignore</code>\u6ce8\u91ca\u4e0a\u6dfb\u52a0\u66f4\u591a\u4fe1\u606f\uff0c\u4ee5\u89e3\u91ca\u4e3a\u4ec0\u4e48\u9996\u5148\u6dfb\u52a0\u5ffd\u7565\u3002 \u8fd9\u53ef\u80fd\u662f\u6307\u5411\u8d1f\u8d23\u7c7b\u578b\u5b58\u6839\u7684\u5b58\u50a8\u5e93\u4e2d\u7684\u95ee\u9898\u7684\u94fe\u63a5\uff0c\u4e5f\u53ef\u80fd\u662f\u5bf9\u8be5\u9519\u8bef\u7684\u7b80\u77ed\u89e3\u91ca\u3002 \u4e3a\u6b64\uff0c\u8bf7\u4f7f\u7528\u4ee5\u4e0b\u683c\u5f0f\uff1a</p> <pre><code># \u542f\u52a8\u5e94\u7528\u7a0b\u5e8f http://localhost:8000\napp.run(8000)  # type: ignore  # `run()` in v2.0 accepts an `int`, as a port\n</code></pre> <p>Silencing type errors</p> <p>You might want to disable type checking on specific lines, or within specific files in your codebase. To do that, you can use a <code># type: ignore</code> comment.</p> <p>For example, say in its latest update, the web framework you use can now take an integer argument to <code>run()</code>, which starts it on localhost on that port. Like so:</p> <pre><code># Starting app on http://localhost:8000\napp.run(8000)\n</code></pre> <p>However, the devs forgot to update their type annotations for <code>run</code>, so mypy still thinks <code>run</code> only expects <code>str</code> types. This would give you the following error:</p> <pre><code>error: Argument 1 to \"run\" of \"A\" has incompatible type \"int\"; expected \"str\"\n</code></pre> <p>If you cannot directly fix the web framework yourself, you can temporarily disable type checking on that line, by adding a <code># type: ignore</code>:</p> <pre><code># Starting app on http://localhost:8000\napp.run(8000)  # type: ignore\n</code></pre> <p>This will suppress any mypy errors that would have raised on that specific line.</p> <p>You should probably add some more information on the <code># type: ignore</code> comment, to explain why the ignore was added in the first place. This could be a link to an issue on the repository responsible for the type stubs, or it could be a short explanation of the bug. To do that, use this format:</p> <pre><code># Starting app on http://localhost:8000\napp.run(8000)  # type: ignore  # `run()` in v2.0 accepts an `int`, as a port\n</code></pre>"},{"location":"mypy/type_inference_type_annotations/#\u8f93\u5165\u5ffd\u7565\u9519\u8bef\u4ee3\u7801","title":"\u8f93\u5165\u5ffd\u7565\u9519\u8bef\u4ee3\u7801","text":"\u4e2d\u6587\u82f1\u6587 <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cmypy \u663e\u793a\u6bcf\u4e2a\u9519\u8bef\u7684\u9519\u8bef\u4ee3\u7801\uff1a</p> <pre><code>error: \"str\" has no attribute \"trim\"  [attr-defined]\n</code></pre> <p>\u53ef\u4ee5\u5728\u5ffd\u7565\u6ce8\u91ca\u4e2d\u6dfb\u52a0\u7279\u5b9a\u7684\u9519\u8bef\u4ee3\u7801\uff08\u4f8b\u5982 <code># type:ignore[attr-defined]</code>\uff09\u4ee5\u9610\u660e\u6b63\u5728\u6c89\u9ed8\u7684\u5185\u5bb9\u3002 \u60a8\u53ef\u4ee5\u5728\u6b64\u5904`\u627e\u5230\u6709\u5173\u9519\u8bef\u4ee3\u7801\u7684\u66f4\u591a\u4fe1\u606f\u3002</p> <p>Type ignore error codes</p> <p>By default, mypy displays an error code for each error:</p> <pre><code>error: \"str\" has no attribute \"trim\"  [attr-defined]\n</code></pre> <p>It is possible to add a specific error-code in your ignore comment (e.g. <code># type: ignore[attr-defined]</code>) to clarify what's being silenced. You can find more information about error codes <code>here</code>.</p>"},{"location":"mypy/type_inference_type_annotations/#\u5176\u4ed6\u6d88\u9664\u9519\u8bef\u7684\u65b9\u6cd5","title":"\u5176\u4ed6\u6d88\u9664\u9519\u8bef\u7684\u65b9\u6cd5","text":"\u4e2d\u6587\u82f1\u6587 <p>\u60a8\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u201cAny\u201d\u52a8\u6001\u952e\u5165\u7279\u5b9a\u53d8\u91cf\u6765\u8ba9 mypy \u6d88\u9664\u6709\u5173\u7279\u5b9a\u53d8\u91cf\u7684\u9519\u8bef\u3002 \u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605<code>dynamic-typing</code>\u3002</p> <pre><code>from typing import Any\n\ndef f(x: Any, y: str) -&gt; None:\n    x = 'hello'\n    x += 1  # OK\n</code></pre> <p>\u60a8\u53ef\u4ee5\u901a\u8fc7\u5728\u6587\u4ef6\u9876\u90e8\u6dfb\u52a0 <code># mypy:ignore-errors</code> \u6765\u5ffd\u7565\u6587\u4ef6\u4e2d\u7684\u6240\u6709 mypy \u9519\u8bef\uff1a</p> <pre><code># mypy: ignore-errors\n# \u8fd9\u662f\u4e00\u4e2a\u6d4b\u8bd5\u6587\u4ef6\uff0c\u8df3\u8fc7\u5176\u4e2d\u7684\u7c7b\u578b\u68c0\u67e5\u3002\nimport unittest\n...\n</code></pre> <p>\u60a8\u8fd8\u53ef\u4ee5\u5728 <code>mypy \u914d\u7f6e\u6587\u4ef6</code> \u4e2d\u6307\u5b9a\u6bcf\u4e2a\u6a21\u5757\u7684\u914d\u7f6e\u9009\u9879\u3002 \u4f8b\u5982\uff1a</p> <pre><code># Don't report errors in the 'package_to_fix_later' package\n[mypy-package_to_fix_later.*]\nignore_errors = True\n\n# Disable specific error codes in the 'tests' package\n# Also don't require type annotations\n[mypy-tests.*]\ndisable_error_code = var-annotated, has-type\nallow_untyped_defs = True\n\n# Silence import errors from the 'library_missing_types' package\n[mypy-library_missing_types.*]\nignore_missing_imports = True\n</code></pre> <p>Finally, adding a <code>@typing.no_type_check</code> decorator to a class, method or function causes mypy to avoid type checking that class, method or function and to treat it as not having any type annotations.</p> <pre><code>@typing.no_type_check\ndef foo() -&gt; str:\n   return 12345  # No error!\n</code></pre> <p>Other ways to silence errors</p> <p>You can get mypy to silence errors about a specific variable by dynamically typing it with <code>Any</code>. See <code>dynamic-typing</code> for more information.</p> <pre><code>from typing import Any\n\ndef f(x: Any, y: str) -&gt; None:\n    x = 'hello'\n    x += 1  # OK\n</code></pre> <p>You can ignore all mypy errors in a file by adding a <code># mypy: ignore-errors</code> at the top of the file:</p> <pre><code># mypy: ignore-errors\n# This is a test file, skipping type checking in it.\nimport unittest\n...\n</code></pre> <p>You can also specify per-module configuration options in your <code>The mypy configuration file</code>. For example:</p> <pre><code># Don't report errors in the 'package_to_fix_later' package\n[mypy-package_to_fix_later.*]\nignore_errors = True\n\n# Disable specific error codes in the 'tests' package\n# Also don't require type annotations\n[mypy-tests.*]\ndisable_error_code = var-annotated, has-type\nallow_untyped_defs = True\n\n# Silence import errors from the 'library_missing_types' package\n[mypy-library_missing_types.*]\nignore_missing_imports = True\n</code></pre> <p>Finally, adding a <code>@typing.no_type_check</code> decorator to a class, method or function causes mypy to avoid type checking that class, method or function and to treat it as not having any type annotations.</p> <pre><code>@typing.no_type_check\ndef foo() -&gt; str:\n   return 12345  # No error!\n</code></pre>"},{"location":"mypy/type_narrowing/","title":"\u7c7b\u578b\u6536\u7f29","text":"\u4e2d\u6587\u82f1\u6587 <p>\u672c\u8282\u4e13\u95e8\u4ecb\u7ecd mypy \u652f\u6301\u7684\u51e0\u79cd\u7c7b\u578b\u6536\u7f29\u6280\u672f\u3002</p> <p>\u7c7b\u578b\u7f29\u5c0f\u662f\u6307\u60a8\u8ba9\u7c7b\u578b\u68c0\u67e5\u5668\u76f8\u4fe1\u66f4\u5e7f\u6cdb\u7684\u7c7b\u578b\u5b9e\u9645\u4e0a\u66f4\u5177\u4f53\uff0c\u4f8b\u5982\uff0c<code>Shape</code> \u7c7b\u578b\u7684\u5bf9\u8c61\u5b9e\u9645\u4e0a\u662f\u66f4\u7a84\u7684 <code>Square</code> \u7c7b\u578b\u3002</p> <p>Type narrowing</p> <p>This section is dedicated to  several type narrowing techniques which are supported by mypy.</p> <p>Type narrowing is when you convince a type checker that a broader type is actually more specific, for instance, that an object of type <code>Shape</code> is actually of the narrower type <code>Square</code>.</p>"},{"location":"mypy/type_narrowing/#\u7c7b\u578b\u6536\u7f29\u8868\u8fbe\u5f0f","title":"\u7c7b\u578b\u6536\u7f29\u8868\u8fbe\u5f0f","text":"<p>Type narrowing expressions</p> \u4e2d\u6587\u82f1\u6587 <p>\u7f29\u5c0f\u7c7b\u578b\u8303\u56f4\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u662f\u4f7f\u7528\u53d7\u652f\u6301\u7684\u8868\u8fbe\u5f0f\u4e4b\u4e00\uff1a</p> <ul> <li><code>isinstance</code> \u5c31\u50cf <code>isinstance(obj, float)</code> \u4f1a\u5c06 <code>obj</code> \u7f29\u5c0f\u4e3a <code>float</code> \u7c7b\u578b</li> <li><code>issubclass</code> \u5c31\u50cf <code>issubclass(cls, MyClass)</code> \u4f1a\u5c06<code>cls</code> \u7f29\u5c0f\u4e3a <code>Type[MyClass]</code> \u7c7b\u578b</li> <li><code>type</code> \u5c31\u50cf <code>type(obj) is int</code> \u4f1a\u5c06 <code>obj</code> \u7f29\u5c0f\u4e3a <code>int</code> \u7c7b\u578b</li> <li><code>callable</code> \u5c31\u50cf <code>callable(obj)</code> \u5c06\u5bf9\u8c61\u7f29\u5c0f\u4e3a\u53ef\u8c03\u7528\u7c7b\u578b</li> </ul> <p>\u7c7b\u578b\u7f29\u5c0f\u662f\u6839\u636e\u4e0a\u4e0b\u6587\u800c\u5b9a\u7684\u3002 \u4f8b\u5982\uff0c\u6839\u636e\u6761\u4ef6\uff0cmypy \u5c06\u4ec5\u5728<code>if</code>\u5206\u652f\u5185\u7f29\u5c0f\u8868\u8fbe\u5f0f\uff1a</p> <pre><code>def function(arg: object):\n    if isinstance(arg, int):\n        # \u7c7b\u578b\u4ec5\u5728\u201cif\u201d\u5206\u652f\u5185\u7f29\u5c0f\n        reveal_type(arg)  # \u663e\u793a\u7c7b\u578b\uff1a\u201cbuiltins.int\u201d\n    elif isinstance(arg, str) or isinstance(arg, bool):\n        # \u5728\u8fd9\u4e2a elif \u5206\u652f\u4e2d\uff0c\u7c7b\u578b\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u7f29\u5c0f\uff1a\n        reveal_type(arg)  # \u663e\u793a\u7c7b\u578b\uff1a\u201cbuiltins.str |builtins.bool\u201d\n\n        # \u540e\u7eed\u7684\u7f29\u5c0f\u64cd\u4f5c\u5c06\u8fdb\u4e00\u6b65\u7f29\u5c0f\u7c7b\u578b\n        if isinstance(arg, bool):\n            reveal_type(arg)  # \u663e\u793a\u7c7b\u578b: \"builtins.bool\"\n\n    # \u56de\u5230\u201cif\u201d\u8bed\u53e5\u4e4b\u5916\uff0c\u7c7b\u578b\u6ca1\u6709\u7f29\u5c0f\uff1a\n    reveal_type(arg)  # \u663e\u793a\u7c7b\u578b: \"builtins.object\"\n</code></pre> <p>Mypy \u7406\u89e3<code>return</code>\u6216\u5f02\u5e38\u5f15\u53d1\u5bf9\u5bf9\u8c61\u7c7b\u578b\u7684\u5f71\u54cd\uff1a</p> <pre><code>def function(arg: int | str):\n    if isinstance(arg, int):\n        return\n\n    # \u6b64\u65f6 `arg` \u4e0d\u80fd\u662f `int`\uff1a\n    reveal_type(arg)  # \u663e\u793a\u7c7b\u578b: \"builtins.str\"\n</code></pre> <p>\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528<code>assert</code>\u6765\u7f29\u5c0f\u76f8\u540c\u4e0a\u4e0b\u6587\u4e2d\u7684\u7c7b\u578b\uff1a</p> <pre><code>def function(arg: Any):\n    assert isinstance(arg, int)\n    reveal_type(arg)  # \u663e\u793a\u7c7b\u578b: \"builtins.int\"\n</code></pre> <p>Note</p> <p>\u4f7f\u7528 <code>--warn-unreachable</code> \u5c06\u7c7b\u578b\u7f29\u5c0f\u5230\u67d0\u4e9b\u4e0d\u53ef\u80fd\u7684\u72b6\u6001\u5c06\u88ab\u89c6\u4e3a\u9519\u8bef\u3002</p> <pre><code>def function(arg: int):\n    # error: \u201cint\u201d\u548c\u201cstr\u201d\u7684\u5b50\u7c7b\u4e0d\u80fd\u5b58\u5728\uff1a\n    # \u4f1a\u6709\u4e0d\u517c\u5bb9\u7684\u65b9\u6cd5\u7b7e\u540d\n    assert isinstance(arg, str)\n\n    # error: \u58f0\u660e\u65e0\u6cd5\u8bbf\u95ee(Statement is unreachable)\n    print(\"so mypy concludes the assert will always trigger\")\n</code></pre> <p>\u5982\u679c\u6ca1\u6709<code>--warn-unreachable</code>\uff0cmypy \u5c06\u4e0d\u4f1a\u68c0\u67e5\u5b83\u8ba4\u4e3a\u65e0\u6cd5\u8bbf\u95ee\u7684\u4ee3\u7801\u3002 \u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605<code>\u65e0\u6cd5\u8bbf\u95ee\u7684\u4ee3\u7801</code>\u3002</p> <pre><code>x: int = 1\nassert isinstance(x, str)\nreveal_type(x)  # \u663e\u793a\u7c7b\u578b \"builtins.int\"\nprint(x + '!')  # \u4f7f\u7528`mypy`\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\uff0c\u4f46\u5728\u8fd0\u884c\u65f6\u5931\u8d25\u3002\n</code></pre> <p>The simplest way to narrow a type is to use one of the supported expressions:</p> <ul> <li><code>isinstance</code> like in <code>isinstance(obj, float)</code> will narrow <code>obj</code> to have <code>float</code> type</li> <li><code>issubclass</code> like in <code>issubclass(cls, MyClass)</code> will narrow <code>cls</code> to be <code>Type[MyClass]</code></li> <li><code>type</code> like in <code>type(obj) is int</code> will narrow <code>obj</code> to have <code>int</code> type</li> <li><code>callable</code> like in <code>callable(obj)</code> will narrow object to callable type</li> </ul> <p>Type narrowing is contextual. For example, based on the condition, mypy will narrow an expression only within an <code>if</code> branch:</p> <pre><code>def function(arg: object):\n    if isinstance(arg, int):\n        # Type is narrowed within the ``if`` branch only\n        reveal_type(arg)  # Revealed type: \"builtins.int\"\n    elif isinstance(arg, str) or isinstance(arg, bool):\n        # Type is narrowed differently within this ``elif`` branch:\n        reveal_type(arg)  # Revealed type: \"builtins.str | builtins.bool\"\n\n        # Subsequent narrowing operations will narrow the type further\n        if isinstance(arg, bool):\n            reveal_type(arg)  # Revealed type: \"builtins.bool\"\n\n    # Back outside of the ``if`` statement, the type isn't narrowed:\n    reveal_type(arg)  # Revealed type: \"builtins.object\"\n</code></pre> <p>Mypy understands the implications <code>return</code> or exception raising can have for what type an object could be:</p> <pre><code>def function(arg: int | str):\n    if isinstance(arg, int):\n        return\n\n    # `arg` can't be `int` at this point:\n    reveal_type(arg)  # Revealed type: \"builtins.str\"\n</code></pre> <p>We can also use <code>assert</code> to narrow types in the same context:</p> <pre><code>def function(arg: Any):\n    assert isinstance(arg, int)\n    reveal_type(arg)  # Revealed type: \"builtins.int\"\n</code></pre> <p>Note</p> <p>With <code>--warn-unreachable</code> narrowing types to some impossible state will be treated as an error.</p> <pre><code>def function(arg: int):\n    # error: Subclass of \"int\" and \"str\" cannot exist:\n    # would have incompatible method signatures\n    assert isinstance(arg, str)\n\n    # error: Statement is unreachable\n    print(\"so mypy concludes the assert will always trigger\")\n</code></pre> <p>Without <code>--warn-unreachable</code> mypy will simply not check code it deems to be unreachable. See <code>unreachable code</code> for more information.</p> <pre><code>x: int = 1\nassert isinstance(x, str)\nreveal_type(x)  # Revealed type is \"builtins.int\"\nprint(x + '!')  # Typechecks with `mypy`, but fails in runtime.\n</code></pre>"},{"location":"mypy/type_narrowing/#\u662f\u5426\u4e3a\u5b50\u7c7b","title":"\u662f\u5426\u4e3a\u5b50\u7c7b","text":"<p>issubclass</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u8fd8\u53ef\u4ee5\u4f7f\u7528 <code>issubclass</code> \u5728\u5904\u7406\u7c7b\u578b\u548c\u5143\u7c7b\u65f6\u8fdb\u884c\u66f4\u597d\u7684\u7c7b\u578b\u63a8\u65ad\uff1a</p> <pre><code>class MyCalcMeta(type):\n    @classmethod\n    def calc(cls) -&gt; int:\n        ...\n\ndef f(o: object) -&gt; None:\n    t = type(o)  # \u6211\u4eec\u5fc5\u987b\u5728\u8fd9\u91cc\u4f7f\u7528\u4e00\u4e2a\u53d8\u91cf\n    reveal_type(t)  # \u63ed\u793a\u7684\u7c7b\u578b\u662f \"builtins.type\"\n\n    if issubclass(t, MyCalcMeta):  # `issubclass(type(o), MyCalcMeta)` \u4e0d\u8d77\u4f5c\u7528\n        reveal_type(t)  # \u63ed\u793a\u7684\u7c7b\u578b\u662f \"Type[MyCalcMeta]\"\n        t.calc()  # Okay\n</code></pre> <p>Mypy can also use <code>issubclass</code> for better type inference when working with types and metaclasses:</p> <pre><code>class MyCalcMeta(type):\n    @classmethod\n    def calc(cls) -&gt; int:\n        ...\n\ndef f(o: object) -&gt; None:\n    t = type(o)  # We must use a variable here\n    reveal_type(t)  # Revealed type is \"builtins.type\"\n\n    if issubclass(t, MyCalcMeta):  # `issubclass(type(o), MyCalcMeta)` won't work\n        reveal_type(t)  # Revealed type is \"Type[MyCalcMeta]\"\n        t.calc()  # Okay\n</code></pre>"},{"location":"mypy/type_narrowing/#\u662f\u5426\u53ef\u8c03\u7528","title":"\u662f\u5426\u53ef\u8c03\u7528","text":"<p>callable</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u5728\u7c7b\u578b\u68c0\u67e5\u671f\u95f4\u77e5\u9053\u54ea\u4e9b\u7c7b\u578b\u53ef\u8c03\u7528\uff0c\u54ea\u4e9b\u7c7b\u578b\u4e0d\u53ef\u8c03\u7528\u3002 \u6240\u4ee5\uff0c\u6211\u4eec\u77e5\u9053 <code>callable()</code> \u4f1a\u8fd4\u56de\u4ec0\u4e48\u3002 \u4f8b\u5982\uff1a</p> <pre><code>from typing import Callable\n\nx: Callable[[], int]\n\nif callable(x):\n    reveal_type(x)  # N: \u63ed\u793a\u7684\u7c7b\u578b\u662f \"def () -&gt; builtins.int\"\nelse:\n    ...  # \u6c38\u8fdc\u4e0d\u4f1a\u88ab\u6267\u884c\u5e76\u4e14\u4f1a\u5f15\u53d1\u9519\u8bef `--warn-unreachable`\n</code></pre> <p><code>callable</code> \u51fd\u6570\u751a\u81f3\u53ef\u4ee5\u5c06 <code>Union</code> \u7c7b\u578b\u62c6\u5206\u4e3a\u53ef\u8c03\u7528\u90e8\u5206\u548c\u4e0d\u53ef\u8c03\u7528\u90e8\u5206\uff1a</p> <pre><code>from typing import Callable, Union\n\nx: Union[int, Callable[[], int]]\n\nif callable(x):\n    reveal_type(x)  # N: \u63ed\u793a\u7684\u7c7b\u578b\u662f \"def () -&gt; builtins.int\"\nelse:\n    reveal_type(x)  # N: \u63ed\u793a\u7684\u7c7b\u578b\u662f \"builtins.int\"\n</code></pre> <p>Mypy knows what types are callable and which ones are not during type checking. So, we know what <code>callable()</code> will return. For example:</p> <pre><code>from typing import Callable\n\nx: Callable[[], int]\n\nif callable(x):\n    reveal_type(x)  # N: Revealed type is \"def () -&gt; builtins.int\"\nelse:\n    ...  # Will never be executed and will raise error with `--warn-unreachable`\n</code></pre> <p><code>callable</code> function can even split <code>Union</code> type for callable and non-callable parts:</p> <pre><code>from typing import Callable, Union\n\nx: Union[int, Callable[[], int]]\n\nif callable(x):\n    reveal_type(x)  # N: Revealed type is \"def () -&gt; builtins.int\"\nelse:\n    reveal_type(x)  # N: Revealed type is \"builtins.int\"\n</code></pre>"},{"location":"mypy/type_narrowing/#\u8f6c\u6362","title":"\u8f6c\u6362","text":"<p>Casts</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u652f\u6301\u7c7b\u578b\u8f6c\u6362\uff0c\u901a\u5e38\u7528\u4e8e\u5c06\u9759\u6001\u7c7b\u578b\u503c\u5f3a\u5236\u8f6c\u6362\u4e3a\u5b50\u7c7b\u578b\u3002 \u7136\u800c\uff0c\u4e0e Java \u6216 C# \u7b49\u8bed\u8a00\u4e0d\u540c\uff0cmypy \u5f3a\u5236\u8f6c\u6362\u4ec5\u7528\u4f5c\u7c7b\u578b\u68c0\u67e5\u5668\u7684\u63d0\u793a\uff0c\u5e76\u4e14\u4e0d\u6267\u884c\u8fd0\u884c\u65f6\u7c7b\u578b\u68c0\u67e5\u3002 \u4f7f\u7528\u51fd\u6570 <code>typing.cast</code> \u6267\u884c\u8f6c\u6362\uff1a</p> <pre><code>from typing import cast\n\no: object = [1]\nx = cast(list[int], o)  # OK\ny = cast(list[str], o)  # OK (\u5f3a\u5236\u8f6c\u6362\u4e0d\u6267\u884c\u5b9e\u9645\u7684\u8fd0\u884c\u65f6\u68c0\u67e5)\n</code></pre> <p>\u4e3a\u4e86\u652f\u6301\u4e0a\u8ff0\u7c7b\u578b\u8f6c\u6362\u7684\u8fd0\u884c\u65f6\u68c0\u67e5\uff0c\u6211\u4eec\u5fc5\u987b\u68c0\u67e5\u6240\u6709\u5217\u8868\u9879\u7684\u7c7b\u578b\uff0c\u8fd9\u5bf9\u4e8e\u5927\u578b\u5217\u8868\u6765\u8bf4\u6548\u7387\u975e\u5e38\u4f4e\u3002 \u5f3a\u5236\u8f6c\u6362\u7528\u4e8e\u6d88\u9664\u865a\u5047\u7684\u7c7b\u578b\u68c0\u67e5\u5668\u8b66\u544a\uff0c\u5e76\u5728\u7c7b\u578b\u68c0\u67e5\u5668\u65e0\u6cd5\u5b8c\u5168\u7406\u89e3\u6b63\u5728\u53d1\u751f\u7684\u60c5\u51b5\u65f6\u4e3a\u7c7b\u578b\u68c0\u67e5\u5668\u63d0\u4f9b\u4e00\u4e9b\u5e2e\u52a9\u3002</p> <p>Note</p> <p>You can use an assertion if you want to perform an actual runtime check:</p> <pre><code>def foo(o: object) -&gt; None:\n    print(o + 5)  # Error: can't add 'object' and 'int'\n    assert isinstance(o, int)\n    print(o + 5)  # OK: type of 'o' is 'int' here\n</code></pre> <p>\u6b63\u5982\u524d\u9762\u6240\u89e3\u91ca\u7684\uff0c\u60a8\u4e0d\u9700\u8981\u5bf9<code>Any</code>\u7c7b\u578b\u7684\u8868\u8fbe\u5f0f\u8fdb\u884c\u5f3a\u5236\u8f6c\u6362\uff0c\u6216\u8005\u5728\u5206\u914d\u7ed9\u7c7b\u578b\u4e3a<code>Any</code>\u7684\u53d8\u91cf\u65f6\u8fdb\u884c\u5f3a\u5236\u8f6c\u6362\u3002 \u60a8\u8fd8\u53ef\u4ee5\u4f7f\u7528<code>Any</code>\u4f5c\u4e3a\u8f6c\u6362\u76ee\u6807\u7c7b\u578b\u2014\u2014\u8fd9\u5141\u8bb8\u60a8\u5bf9\u7ed3\u679c\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u3002 \u4f8b\u5982\uff1a</p> <pre><code>from typing import cast, Any\n\nx = 1\nx.whatever()  # Type check error\ny = cast(Any, x)\ny.whatever()  # Type check OK (runtime error)\n</code></pre> <p>Mypy supports type casts that are usually used to coerce a statically typed value to a subtype. Unlike languages such as Java or C#, however, mypy casts are only used as hints for the type checker, and they don't perform a runtime type check. Use the function <code>typing.cast</code> to perform a cast:</p> <pre><code>from typing import cast\n\no: object = [1]\nx = cast(list[int], o)  # OK\ny = cast(list[str], o)  # OK (cast performs no actual runtime check)\n</code></pre> <p>To support runtime checking of casts such as the above, we'd have to check the types of all list items, which would be very inefficient for large lists. Casts are used to silence spurious type checker warnings and give the type checker a little help when it can't quite understand what is going on.</p> <p>Note</p> <p>You can use an assertion if you want to perform an actual runtime check:</p> <pre><code>def foo(o: object) -&gt; None:\n    print(o + 5)  # Error: can't add 'object' and 'int'\n    assert isinstance(o, int)\n    print(o + 5)  # OK: type of 'o' is 'int' here\n</code></pre> <p>You don't need a cast for expressions with type <code>Any</code>, or when assigning to a variable with type <code>Any</code>, as was explained earlier. You can also use <code>Any</code> as the cast target type -- this lets you perform any operations on the result. For example:</p> <pre><code>from typing import cast, Any\n\nx = 1\nx.whatever()  # Type check error\ny = cast(Any, x)\ny.whatever()  # Type check OK (runtime error)\n</code></pre>"},{"location":"mypy/type_narrowing/#\u7528\u6237\u5b9a\u4e49\u7684\u7c7b\u578b\u4fdd\u62a4","title":"\u7528\u6237\u5b9a\u4e49\u7684\u7c7b\u578b\u4fdd\u62a4","text":"<p>User-Defined Type Guards</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u652f\u6301\u7528\u6237\u5b9a\u4e49\u7684\u7c7b\u578b\u9632\u62a4 (<code>PEP 647</code>).</p> <p>\u7c7b\u578b\u4fdd\u62a4\u662f\u7a0b\u5e8f\u5f71\u54cd\u7c7b\u578b\u68c0\u67e5\u5668\u57fa\u4e8e\u8fd0\u884c\u65f6\u68c0\u67e5\u6240\u91c7\u7528\u7684\u6761\u4ef6\u7c7b\u578b\u7f29\u5c0f\u7684\u4e00\u79cd\u65b9\u5f0f\u3002</p> <p>\u57fa\u672c\u4e0a\uff0c<code>TypeGuard</code>\u662f<code>bool</code>\u7c7b\u578b\u7684\u201c\u667a\u80fd(smart)\u201d\u522b\u540d\u3002 \u8ba9\u6211\u4eec\u770b\u4e00\u4e0b\u5e38\u89c4\u7684<code>bool</code>\u793a\u4f8b\uff1a</p> <pre><code>def is_str_list(val: list[object]) -&gt; bool:\n\"\"\"\u5224\u65ad\u5217\u8868\u4e2d\u7684\u6240\u6709\u5bf9\u8c61\u662f\u5426\u90fd\u662f\u5b57\u7b26\u4e32\"\"\"\nreturn all(isinstance(x, str) for x in val)\n\ndef func1(val: list[object]) -&gt; None:\n    if is_str_list(val):\n        reveal_type(val)  # Reveals list[object]\n        print(\" \".join(val)) # Error: incompatible type\n</code></pre> <p>\u4e0e<code>TypeGuard</code>\u76f8\u540c\u7684\u793a\u4f8b:</p> <pre><code>from typing import TypeGuard  # use `typing_extensions` for Python 3.9 and below\n\ndef is_str_list(val: list[object]) -&gt; TypeGuard[list[str]]:\n    \"\"\"\u5224\u65ad\u5217\u8868\u4e2d\u7684\u6240\u6709\u5bf9\u8c61\u662f\u5426\u90fd\u662f\u5b57\u7b26\u4e32\"\"\"\n    return all(isinstance(x, str) for x in val)\n\ndef func1(val: list[object]) -&gt; None:\n    if is_str_list(val):\n        reveal_type(val)  # list[str]\n        print(\" \".join(val)) # ok\n</code></pre> <p>\u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff1f <code>TypeGuard</code> \u5c06\u7b2c\u4e00\u4e2a\u51fd\u6570\u53c2\u6570 (<code>val</code>) \u7f29\u5c0f\u4e3a\u6307\u5b9a\u4e3a\u7b2c\u4e00\u4e2a\u7c7b\u578b\u53c2\u6570 (<code>list[str]</code>) \u7684\u7c7b\u578b\u3002</p> <p>Note</p> <p>\u7f29\u5c0f\u8303\u56f4\u4e0d\u4e25\u683c(not strict)\u3002 \u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u5c06<code>str</code>\u7f29\u5c0f\u4e3a<code>int</code>\uff1a</p> <pre><code>def f(value: str) -&gt; TypeGuard[int]:\n    return True\n</code></pre> <p>\u6ce8\u610f: \u7531\u4e8e\u4e0d\u5f3a\u5236\u6267\u884c\u4e25\u683c\u7684\u7f29\u5c0f\uff0c\u56e0\u6b64\u5f88\u5bb9\u6613\u7834\u574f\u7c7b\u578b\u5b89\u5168\u3002</p> <p>\u7136\u800c\uff0c\u575a\u5b9a\u6216\u4e0d\u77e5\u60c5\u7684\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u901a\u8fc7\u591a\u79cd\u65b9\u5f0f\u7834\u574f\u7c7b\u578b\u5b89\u5168\u2014\u2014\u6700\u5e38\u89c1\u7684\u662f\u4f7f\u7528\u5f3a\u5236\u8f6c\u6362\u6216 Any\u3002 \u5982\u679c Python \u5f00\u53d1\u4eba\u5458\u82b1\u65f6\u95f4\u5728\u4ee3\u7801\u4e2d\u5b66\u4e60\u548c\u5b9e\u73b0\u7528\u6237\u5b9a\u4e49\u7684\u7c7b\u578b\u4fdd\u62a4\uff0c\u5219\u53ef\u4ee5\u5b89\u5168\u5730\u5047\u8bbe\u4ed6\u4eec\u5bf9\u7c7b\u578b\u5b89\u5168\u611f\u5174\u8da3\uff0c\u5e76\u4e14\u4e0d\u4f1a\u4ee5\u7834\u574f\u7c7b\u578b\u5b89\u5168\u6216\u7834\u574f\u7c7b\u578b\u5b89\u5168\u7684\u65b9\u5f0f\u7f16\u5199\u7c7b\u578b\u4fdd\u62a4\u51fd\u6570\u3002 \u4ea7\u751f\u65e0\u610f\u4e49\u7684\u7ed3\u679c\u3002</p> <p>Mypy supports User-Defined Type Guards (<code>PEP 647</code>).</p> <p>A type guard is a way for programs to influence conditional type narrowing employed by a type checker based on runtime checks.</p> <p>Basically, a <code>TypeGuard</code> is a \"smart\" alias for a <code>bool</code> type. Let's have a look at the regular <code>bool</code> example:</p> <pre><code>def is_str_list(val: list[object]) -&gt; bool:\n\"\"\"Determines whether all objects in the list are strings\"\"\"\nreturn all(isinstance(x, str) for x in val)\n\ndef func1(val: list[object]) -&gt; None:\n    if is_str_list(val):\n        reveal_type(val)  # Reveals list[object]\n        print(\" \".join(val)) # Error: incompatible type\n</code></pre> <p>The same example with <code>TypeGuard</code>:</p> <pre><code>from typing import TypeGuard  # use `typing_extensions` for Python 3.9 and below\n\ndef is_str_list(val: list[object]) -&gt; TypeGuard[list[str]]:\n    \"\"\"Determines whether all objects in the list are strings\"\"\"\n    return all(isinstance(x, str) for x in val)\n\ndef func1(val: list[object]) -&gt; None:\n    if is_str_list(val):\n        reveal_type(val)  # list[str]\n        print(\" \".join(val)) # ok\n</code></pre> <p>How does it work? <code>TypeGuard</code> narrows the first function argument (<code>val</code>) to the type specified as the first type parameter (<code>list[str]</code>).</p> <p>Note</p> <p>Narrowing is not strict. For example, you can narrow <code>str</code> to <code>int</code>:</p> <pre><code>def f(value: str) -&gt; TypeGuard[int]:\n    return True\n</code></pre> <p>Note: since strict narrowing is not enforced, it's easy to break type safety.</p> <p>However, there are many ways a determined or uninformed developer can subvert type safety -- most commonly by using cast or Any. If a Python developer takes the time to learn about and implement user-defined type guards within their code, it is safe to assume that they are interested in type safety and will not write their type guard functions in a way that will undermine type safety or produce nonsensical results.</p>"},{"location":"mypy/type_narrowing/#\u6cdb\u578b\u7c7b\u578b\u4fdd\u62a4","title":"\u6cdb\u578b\u7c7b\u578b\u4fdd\u62a4","text":"\u4e2d\u6587\u82f1\u6587 <p><code>TypeGuard</code> \u4e5f\u53ef\u4ee5\u4f7f\u7528\u6cdb\u578b\u7c7b\u578b\uff1a</p> <pre><code>from typing import TypeVar\nfrom typing import TypeGuard  # use `typing_extensions` for `python&lt;3.10`\n\n_T = TypeVar(\"_T\")\n\ndef is_two_element_tuple(val: tuple[_T, ...]) -&gt; TypeGuard[tuple[_T, _T]]:\n    return len(val) == 2\n\ndef func(names: tuple[str, ...]):\n    if is_two_element_tuple(names):\n        reveal_type(names)  # tuple[str, str]\n    else:\n        reveal_type(names)  # tuple[str, ...]\n</code></pre> <p><code>TypeGuard</code> can also work with generic types:</p> <pre><code>from typing import TypeVar\nfrom typing import TypeGuard  # use `typing_extensions` for `python&lt;3.10`\n\n_T = TypeVar(\"_T\")\n\ndef is_two_element_tuple(val: tuple[_T, ...]) -&gt; TypeGuard[tuple[_T, _T]]:\n    return len(val) == 2\n\ndef func(names: tuple[str, ...]):\n    if is_two_element_tuple(names):\n        reveal_type(names)  # tuple[str, str]\n    else:\n        reveal_type(names)  # tuple[str, ...]\n</code></pre>"},{"location":"mypy/type_narrowing/#\u5e26\u53c2\u6570\u7684\u7c7b\u578b\u4fdd\u62a4","title":"\u5e26\u53c2\u6570\u7684\u7c7b\u578b\u4fdd\u62a4","text":"<p>Typeguards with parameters</p> \u4e2d\u6587\u82f1\u6587 <p>\u7c7b\u578b\u4fdd\u62a4\u51fd\u6570\u53ef\u4ee5\u63a5\u53d7\u989d\u5916\u7684\u53c2\u6570\uff1a</p> <pre><code>from typing import Type, TypeVar\nfrom typing import TypeGuard  # use `typing_extensions` for `python&lt;3.10`\n\n_T = TypeVar(\"_T\")\n\ndef is_set_of(val: set[Any], type: Type[_T]) -&gt; TypeGuard[set[_T]]:\n    return all(isinstance(x, type) for x in val)\n\nitems: set[Any]\nif is_set_of(items, str):\n    reveal_type(items)  # set[str]\n</code></pre> <p>Type guard functions can accept extra arguments:</p> <pre><code>from typing import Type, TypeVar\nfrom typing import TypeGuard  # use `typing_extensions` for `python&lt;3.10`\n\n_T = TypeVar(\"_T\")\n\ndef is_set_of(val: set[Any], type: Type[_T]) -&gt; TypeGuard[set[_T]]:\n    return all(isinstance(x, type) for x in val)\n\nitems: set[Any]\nif is_set_of(items, str):\n    reveal_type(items)  # set[str]\n</code></pre>"},{"location":"mypy/type_narrowing/#\u4f5c\u4e3a\u65b9\u6cd5\u7684\u7c7b\u578b\u4fdd\u62a4","title":"\u4f5c\u4e3a\u65b9\u6cd5\u7684\u7c7b\u578b\u4fdd\u62a4","text":"<p>TypeGuards as methods</p> \u4e2d\u6587\u82f1\u6587 <p>\u65b9\u6cd5\u4e5f\u53ef\u4ee5\u5145\u5f53<code>TypeGuard</code>\uff1a</p> <pre><code>class StrValidator:\n    def is_valid(self, instance: object) -&gt; TypeGuard[str]:\n        return isinstance(instance, str)\n\ndef func(to_validate: object) -&gt; None:\n    if StrValidator().is_valid(to_validate):\n        reveal_type(to_validate)  # Revealed type is \"builtins.str\"\n</code></pre> <p>Note</p> <p>\u8bf7\u6ce8\u610f\uff0c<code>TypeGuard</code>\u4e0d\u4f1a\u7f29\u5c0f<code>self</code>\u7684\u7c7b\u578b \u6216<code>cls</code>\u9690\u5f0f\u53c2\u6570\u3002</p> <p>\u5982\u679c\u9700\u8981\u7f29\u5c0f<code>self</code>\u6216<code>cls</code>\uff0c\u5219\u53ef\u4ee5\u5c06\u8be5\u503c\u4f5c\u4e3a\u663e\u5f0f\u53c2\u6570\u4f20\u9012\u7ed9\u7c7b\u578b\u4fdd\u62a4\u51fd\u6570\uff1a</p> <pre><code>class Parent:\n    def method(self) -&gt; None:\n        reveal_type(self)  # Revealed type is \"Parent\"\n        if is_child(self):\n            reveal_type(self)  # Revealed type is \"Child\"\n\nclass Child(Parent):\n    ...\n\ndef is_child(instance: Parent) -&gt; TypeGuard[Child]:\n    return isinstance(instance, Child)\n</code></pre> <p>A method can also serve as the <code>TypeGuard</code>:</p> <pre><code>class StrValidator:\n    def is_valid(self, instance: object) -&gt; TypeGuard[str]:\n        return isinstance(instance, str)\n\ndef func(to_validate: object) -&gt; None:\n    if StrValidator().is_valid(to_validate):\n        reveal_type(to_validate)  # Revealed type is \"builtins.str\"\n</code></pre> <p>Note</p> <p>Note, that <code>TypeGuard</code> does not narrow types of <code>self</code> or <code>cls</code> implicit arguments.</p> <p>If narrowing of <code>self</code> or <code>cls</code> is required, the value can be passed as an explicit argument to a type guard function:</p> <pre><code>class Parent:\n    def method(self) -&gt; None:\n        reveal_type(self)  # Revealed type is \"Parent\"\n        if is_child(self):\n            reveal_type(self)  # Revealed type is \"Child\"\n\nclass Child(Parent):\n    ...\n\ndef is_child(instance: Parent) -&gt; TypeGuard[Child]:\n    return isinstance(instance, Child)\n</code></pre>"},{"location":"mypy/type_narrowing/#\u4f5c\u4e3a\u7c7b\u578b\u4fdd\u62a4\u7684\u8d4b\u503c\u8868\u8fbe\u5f0f","title":"\u4f5c\u4e3a\u7c7b\u578b\u4fdd\u62a4\u7684\u8d4b\u503c\u8868\u8fbe\u5f0f","text":"<p>Assignment expressions as TypeGuards</p> \u4e2d\u6587\u82f1\u6587 <p>\u6709\u65f6\u60a8\u53ef\u80fd\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u65b0\u53d8\u91cf\u5e76\u540c\u65f6\u5c06\u5176\u7f29\u5c0f\u4e3a\u67d0\u79cd\u7279\u5b9a\u7c7b\u578b\u3002 \u8fd9\u53ef\u4ee5\u901a\u8fc7\u5c06<code>TypeGuard</code>\u4e0e := \u8fd0\u7b97\u7b26 \u4e00\u8d77\u4f7f\u7528\u6765\u5b9e\u73b0\u3002</p> <pre><code>from typing import TypeGuard  # use `typing_extensions` for `python&lt;3.10`\n\ndef is_float(a: object) -&gt; TypeGuard[float]:\n    return isinstance(a, float)\n\ndef main(a: object) -&gt; None:\n    if is_float(x := a):\n        reveal_type(x)  # N: Revealed type is 'builtins.float'\n        reveal_type(a)  # N: Revealed type is 'builtins.object'\n    reveal_type(x)  # N: Revealed type is 'builtins.object'\n    reveal_type(a)  # N: Revealed type is 'builtins.object'\n</code></pre> <p>\u8fd9\u91cc\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f</p> <ol> <li>\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u65b0\u53d8\u91cf<code>x</code>\u5e76\u4e3a\u5176\u5206\u914d\u503c<code>a</code></li> <li>\u6211\u4eec\u5728<code>x</code>\u4e0a\u8fd0\u884c<code>is_float()</code>\u7c7b\u578b\u4fdd\u62a4</li> <li>\u5b83\u5c06<code>x</code>\u7f29\u5c0f\u4e3a<code>if</code>\u4e0a\u4e0b\u6587\u4e2d\u7684<code>float</code>\uff0c\u5e76\u4e14\u4e0d\u6d89\u53ca<code>a</code></li> </ol> <p>Note</p> <p>\u8fd9\u540c\u6837\u9002\u7528\u4e8e<code>isinstance(x := a, float)</code>\u3002</p> <p>Sometimes you might need to create a new variable and narrow it to some specific type at the same time. This can be achieved by using <code>TypeGuard</code> together with := operator.</p> <pre><code>from typing import TypeGuard  # use `typing_extensions` for `python&lt;3.10`\n\ndef is_float(a: object) -&gt; TypeGuard[float]:\n    return isinstance(a, float)\n\ndef main(a: object) -&gt; None:\n    if is_float(x := a):\n        reveal_type(x)  # N: Revealed type is 'builtins.float'\n        reveal_type(a)  # N: Revealed type is 'builtins.object'\n    reveal_type(x)  # N: Revealed type is 'builtins.object'\n    reveal_type(a)  # N: Revealed type is 'builtins.object'\n</code></pre> <p>What happens here?</p> <ol> <li>We create a new variable <code>x</code> and assign a value of <code>a</code> to it</li> <li>We run <code>is_float()</code> type guard on <code>x</code></li> <li>It narrows <code>x</code> to be <code>float</code> in the <code>if</code> context and does not touch <code>a</code></li> </ol> <p>Note</p> <p>The same will work with <code>isinstance(x := a, float)</code> as well.</p>"},{"location":"mypy/typeddict/","title":"\u7c7b\u578b\u5b57\u5178","text":"<p>TypedDict</p> \u4e2d\u6587\u82f1\u6587 <p>Python \u7a0b\u5e8f\u7ecf\u5e38\u4f7f\u7528\u5e26\u6709\u5b57\u7b26\u4e32\u952e\u7684\u5b57\u5178\u6765\u8868\u793a\u5bf9\u8c61\u3002 <code>TypedDict</code> \u5141\u8bb8\u60a8\u4e3a\u8868\u793a\u5177\u6709\u56fa\u5b9a\u6a21\u5f0f\u7684\u5bf9\u8c61\u7684\u5b57\u5178\u63d0\u4f9b\u7cbe\u786e\u7684\u7c7b\u578b\uff0c\u4f8b\u5982 <code>{'id': 1, 'items': ['x']}</code>\u3002</p> <p>\u8fd9\u662f\u4e00\u4e2a\u5178\u578b\u7684\u4f8b\u5b50\uff1a</p> <pre><code>movie = {'name': 'Blade Runner', 'year': 1982}\n</code></pre> <p>\u4ec5\u9700\u8981\u4e00\u7ec4\u56fa\u5b9a\u7684\u5b57\u7b26\u4e32\u952e\uff08\u4e0a\u9762\u7684\u201cname\u201d\u548c\u201cyear\u201d\uff09\uff0c\u5e76\u4e14\u6bcf\u4e2a\u952e\u90fd\u6709\u4e00\u4e2a\u72ec\u7acb\u7684\u503c\u7c7b\u578b\uff08\u201cstr\u201d\u4ee3\u8868\u201cname\u201d\uff0c\u201cint\u201d\u4ee3\u8868\u201cyear\u201d '` \u4e0a\u9762\uff09\u3002 \u6211\u4eec\u4e4b\u524d\u5df2\u7ecf\u770b\u5230\u8fc7\u201cdict[K, V]\u201d\u7c7b\u578b\uff0c\u5b83\u5141\u8bb8\u60a8\u58f0\u660e\u7edf\u4e00\u7684\u5b57\u5178\u7c7b\u578b\uff0c\u5176\u4e2d\u6bcf\u4e2a\u503c\u90fd\u5177\u6709\u76f8\u540c\u7684\u7c7b\u578b\uff0c\u5e76\u4e14\u652f\u6301\u4efb\u610f\u952e\u3002 \u8fd9\u663e\u7136\u4e0d\u592a\u9002\u5408\u4e0a\u9762\u7684\u201c\u7535\u5f71\u201d\u3002 \u76f8\u53cd\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u201cTypedDict\u201d\u4e3a\u201cmovie\u201d\u7b49\u5bf9\u8c61\u63d0\u4f9b\u7cbe\u786e\u7684\u7c7b\u578b\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5b57\u5178\u503c\u7684\u7c7b\u578b\u53d6\u51b3\u4e8e\u952e\uff1a</p> <pre><code>from typing_extensions import TypedDict\n\nMovie = TypedDict('Movie', {'name': str, 'year': int})\n\nmovie: Movie = {'name': 'Blade Runner', 'year': 1982}\n</code></pre> <p><code>Movie</code> \u662f\u4e00\u4e2a <code>TypedDict</code> \u7c7b\u578b\uff0c\u5305\u542b\u4e24\u9879\uff1a<code>'name'</code>\uff08\u7c7b\u578b\u4e3a <code>str</code>\uff09\u548c <code>'year'</code>\uff08\u7c7b\u578b\u4e3a <code>int</code>\uff09\u3002 \u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u5bf9\u201cmovie\u201d\u53d8\u91cf\u4f7f\u7528\u4e86\u663e\u5f0f\u7c7b\u578b\u6ce8\u91ca\u3002 \u8fd9\u79cd\u7c7b\u578b\u6ce8\u91ca\u5f88\u91cd\u8981\u2014\u2014\u6ca1\u6709\u5b83\uff0cmypy \u5c06\u5c1d\u8bd5\u4e3a\u201cmovie\u201d\u63a8\u65ad\u51fa\u5e38\u89c4\u7684\u3001\u7edf\u4e00\u7684 <code>dict</code> \u7c7b\u578b \uff0c\u8fd9\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684\u3002</p> <p>Note</p> <p>\u5982\u679c\u5c06 <code>TypedDict</code> \u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u51fd\u6570\uff0c\u901a\u5e38\u4e0d\u9700\u8981\u7c7b\u578b\u6ce8\u91ca\uff0c\u56e0\u4e3a mypy \u53ef\u4ee5\u6839\u636e\u58f0\u660e\u7684\u53c2\u6570\u7c7b\u578b\u63a8\u65ad\u6240\u9700\u7684\u7c7b\u578b\u3002 \u53e6\u5916\uff0c\u5982\u679c\u4e4b\u524d\u5df2\u7ecf\u5b9a\u4e49\u4e86\u8d4b\u503c\u76ee\u6807\uff0c\u5e76\u4e14\u5b83\u5177\u6709 <code>TypedDict</code> \u7c7b\u578b\uff0c\u5219 mypy \u4f1a\u5c06\u5206\u914d\u7684\u503c\u89c6\u4e3a <code>TypedDict</code>\uff0c\u800c\u4e0d\u662f <code>dict</code>\u3002</p> <p>\u73b0\u5728 mypy \u4f1a\u8bc6\u522b\u8fd9\u4e9b\u662f\u6709\u6548\u7684\uff1a</p> <pre><code>name = movie['name']  # Okay; type of name is str\nyear = movie['year']  # Okay; type of year is int\n</code></pre> <p>Mypy \u4f1a\u5c06\u65e0\u6548\u5bc6\u94a5\u68c0\u6d4b\u4e3a\u9519\u8bef\uff1a</p> <pre><code>director = movie['director']  # Error: 'director' is not a valid key\n</code></pre> <p>Mypy \u8fd8\u5c06\u62d2\u7edd\u8fd0\u884c\u65f6\u8ba1\u7b97\u7684\u8868\u8fbe\u5f0f\u4f5c\u4e3a\u5bc6\u94a5\uff0c\u56e0\u4e3a\u5b83\u65e0\u6cd5\u9a8c\u8bc1\u5b83\u662f\u5426\u662f\u6709\u6548\u7684\u5bc6\u94a5\u3002 \u60a8\u53ea\u80fd\u4f7f\u7528\u5b57\u7b26\u4e32\u6587\u5b57\u4f5c\u4e3a\u201cTypedDict\u201d\u952e\u3002</p> <p><code>TypedDict</code> \u7c7b\u578b\u5bf9\u8c61\u4e5f\u53ef\u4ee5\u5145\u5f53\u6784\u9020\u51fd\u6570\u3002 \u5b83\u5728\u8fd0\u884c\u65f6\u8fd4\u56de\u4e00\u4e2a\u666e\u901a\u7684 <code>dict</code> \u5bf9\u8c61\u2014\u2014<code>TypedDict</code> \u4e0d\u5b9a\u4e49\u65b0\u7684\u8fd0\u884c\u65f6\u7c7b\u578b\uff1a</p> <pre><code>toy_story = Movie(name='Toy Story', year=1995)\n</code></pre> <p>\u8fd9\u76f8\u5f53\u4e8e\u76f4\u63a5\u4f7f\u7528 <code>{ ... }</code> \u6216 <code>dict(key=value, ...)</code> \u6784\u9020\u4e00\u4e2a\u5b57\u5178\u3002 \u6784\u9020\u51fd\u6570\u5f62\u5f0f\u6709\u65f6\u5f88\u65b9\u4fbf\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u5728\u6ca1\u6709\u7c7b\u578b\u6ce8\u91ca\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\uff0c\u5e76\u4e14\u5b83\u8fd8\u4f7f\u5bf9\u8c61\u7684\u7c7b\u578b\u663e\u5f0f\u5316\u3002</p> <p>\u4e0e\u6240\u6709\u7c7b\u578b\u4e00\u6837\uff0c\u201cTypedDict\u201d\u53ef\u4ee5\u7528\u4f5c\u7ec4\u4ef6\u6765\u6784\u5efa\u4efb\u610f\u590d\u6742\u7684\u7c7b\u578b\u3002 \u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u201cTypedDict\u201d\u9879\u5b9a\u4e49\u5d4c\u5957\u7684\u201cTypedDict\u201d\u548c\u5bb9\u5668\u3002 \u4e0e\u5927\u591a\u6570\u5176\u4ed6\u7c7b\u578b\u4e0d\u540c\uff0cmypy \u4f7f\u7528 TypedDict \u7684\u7ed3\u6784\u517c\u5bb9\u6027\u68c0\u67e5\uff08\u6216\u7ed3\u6784\u5b50\u7c7b\u578b\uff09\u3002 \u5047\u8bbe\u9879\u76ee\u7c7b\u578b\u517c\u5bb9\uff0c\u5177\u6709\u989d\u5916\u9879\u76ee\u7684\u201cTypedDict\u201d\u5bf9\u8c61\u4e0e\u8f83\u7a84\u7684\u201cTypedDict\u201d\uff08\u5b50\u7c7b\u578b\uff09\u517c\u5bb9\uff08totality\u4e5f\u4f1a\u5f71\u54cd\u5b50\u7c7b\u578b\uff0c\u5982\u4e0b\u6240\u8ff0\uff09\u3002</p> <p><code>TypedDict</code> \u5bf9\u8c61\u4e0d\u662f\u5e38\u89c4 <code>dict[...]</code> \u7c7b\u578b\u7684\u5b50\u7c7b\u578b\uff08\u53cd\u4e4b\u4ea6\u7136\uff09\uff0c\u56e0\u4e3a <code>dict</code> \u5141\u8bb8\u6dfb\u52a0\u548c\u5220\u9664\u4efb\u610f\u952e\uff0c\u4e0e\u201cTypedDict\u201d\u4e0d\u540c\u3002 \u7136\u800c\uff0c\u4efb\u4f55 <code>TypedDict</code> \u5bf9\u8c61\u90fd\u662f <code>Mapping[str, object]</code> \u7684\u5b50\u7c7b\u578b\uff08\u5373\u517c\u5bb9\uff09\uff0c\u56e0\u4e3a <code>Mapping</code> \u4ec5\u63d0\u4f9b\u5bf9\u5b57\u5178\u9879\u7684\u53ea\u8bfb\u8bbf\u95ee\uff1a</p> <pre><code>def print_typed_dict(obj: Mapping[str, object]) -&gt; None:\n    for key, value in obj.items():\n        print(f'{key}: {value}')\n\nprint_typed_dict(Movie(name='Toy Story', year=1995))  # OK\n</code></pre> <p>Note</p> <p>\u9664\u975e\u60a8\u4f7f\u7528\u7684\u662f Python 3.8 \u6216\u66f4\u9ad8\u7248\u672c\uff08\u5176\u4e2d\u6807\u51c6\u5e93 <code>typing</code> \u6a21\u5757\u4e2d\u63d0\u4f9b\u4e86 <code>TypedDict</code>\uff09\uff0c\u5426\u5219\u60a8\u9700\u8981\u4f7f\u7528 pip \u5b89\u88c5 <code>typing_extensions</code> \u4ee5\u4f7f\u7528 <code>TypedDict</code>\uff1a</p> <pre><code>python3 -m pip install --upgrade typing-extensions\n</code></pre> <p>Python programs often use dictionaries with string keys to represent objects. <code>TypedDict</code> lets you give precise types for dictionaries that represent objects with a fixed schema, such as <code>{'id': 1, 'items': ['x']}</code>.</p> <p>Here is a typical example:</p> <pre><code>movie = {'name': 'Blade Runner', 'year': 1982}\n</code></pre> <p>Only a fixed set of string keys is expected (<code>'name'</code> and <code>'year'</code> above), and each key has an independent value type (<code>str</code> for <code>'name'</code> and <code>int</code> for <code>'year'</code> above). We've previously seen the <code>dict[K, V]</code> type, which lets you declare uniform dictionary types, where every value has the same type, and arbitrary keys are supported. This is clearly not a good fit for <code>movie</code> above. Instead, you can use a <code>TypedDict</code> to give a precise type for objects like <code>movie</code>, where the type of each dictionary value depends on the key:</p> <pre><code>from typing_extensions import TypedDict\n\nMovie = TypedDict('Movie', {'name': str, 'year': int})\n\nmovie: Movie = {'name': 'Blade Runner', 'year': 1982}\n</code></pre> <p><code>Movie</code> is a <code>TypedDict</code> type with two items: <code>'name'</code> (with type <code>str</code>) and <code>'year'</code> (with type <code>int</code>). Note that we used an explicit type annotation for the <code>movie</code> variable. This type annotation is important -- without it, mypy will try to infer a regular, uniform <code>dict</code> type for <code>movie</code>, which is not what we want here.</p> <p>Note</p> <p>If you pass a <code>TypedDict</code> object as an argument to a function, no type annotation is usually necessary since mypy can infer the desired type based on the declared argument type. Also, if an assignment target has been previously defined, and it has a <code>TypedDict</code> type, mypy will treat the assigned value as a <code>TypedDict</code>, not <code>dict</code>.</p> <p>Now mypy will recognize these as valid:</p> <pre><code>name = movie['name']  # Okay; type of name is str\nyear = movie['year']  # Okay; type of year is int\n</code></pre> <p>Mypy will detect an invalid key as an error:</p> <pre><code>director = movie['director']  # Error: 'director' is not a valid key\n</code></pre> <p>Mypy will also reject a runtime-computed expression as a key, as it can't verify that it's a valid key. You can only use string literals as <code>TypedDict</code> keys.</p> <p>The <code>TypedDict</code> type object can also act as a constructor. It returns a normal <code>dict</code> object at runtime -- a <code>TypedDict</code> does not define a new runtime type:</p> <pre><code>toy_story = Movie(name='Toy Story', year=1995)\n</code></pre> <p>This is equivalent to just constructing a dictionary directly using <code>{ ... }</code> or <code>dict(key=value, ...)</code>. The constructor form is sometimes convenient, since it can be used without a type annotation, and it also makes the type of the object explicit.</p> <p>Like all types, <code>TypedDict</code>s can be used as components to build arbitrarily complex types. For example, you can define nested <code>TypedDict</code>s and containers with <code>TypedDict</code> items. Unlike most other types, mypy uses structural compatibility checking (or structural subtyping) with <code>TypedDict</code>s. A <code>TypedDict</code> object with extra items is compatible with (a subtype of) a narrower <code>TypedDict</code>, assuming item types are compatible (totality also affects subtyping, as discussed below).</p> <p>A <code>TypedDict</code> object is not a subtype of the regular <code>dict[...]</code> type (and vice versa), since <code>dict</code> allows arbitrary keys to be added and removed, unlike <code>TypedDict</code>. However, any <code>TypedDict</code> object is a subtype of (that is, compatible with) <code>Mapping[str, object]</code>, since <code>Mapping</code> only provides read-only access to the dictionary items:</p> <pre><code>def print_typed_dict(obj: Mapping[str, object]) -&gt; None:\n    for key, value in obj.items():\n        print(f'{key}: {value}')\n\nprint_typed_dict(Movie(name='Toy Story', year=1995))  # OK\n</code></pre> <p>Note</p> <p>Unless you are on Python 3.8 or newer (where <code>TypedDict</code> is available in standard library <code>typing</code> module) you need to install <code>typing_extensions</code> using pip to use <code>TypedDict</code>:</p> <pre><code>python3 -m pip install --upgrade typing-extensions\n</code></pre>"},{"location":"mypy/typeddict/#\u6574\u4f53\u6027","title":"\u6574\u4f53\u6027","text":"<p>Totality</p> \u4e2d\u6587\u82f1\u6587 <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cmypy \u786e\u4fdd\u201cTypedDict\u201d\u5bf9\u8c61\u5177\u6709\u6240\u6709\u6307\u5b9a\u7684\u952e\u3002 \u8fd9\u5c06\u88ab\u6807\u8bb0\u4e3a\u9519\u8bef\uff1a</p> <pre><code># Error: 'year' missing\ntoy_story: Movie = {'name': 'Toy Story'}\n</code></pre> <p>\u6709\u65f6\u60a8\u5e0c\u671b\u5728\u521b\u5efa\u201cTypedDict\u201d\u5bf9\u8c61\u65f6\u5141\u8bb8\u7701\u7565\u952e\u3002 \u60a8\u53ef\u4ee5\u5411\u201cTypedDict(...)\u201d\u63d0\u4f9b\u201ctotal=False\u201d\u53c2\u6570\u6765\u5b9e\u73b0\u6b64\u76ee\u7684\uff1a</p> <pre><code>GuiOptions = TypedDict(\n    'GuiOptions', {'language': str, 'color': str}, total=False)\noptions: GuiOptions = {}  # Okay\noptions['language'] = 'en'\n</code></pre> <p>\u60a8\u53ef\u80fd\u9700\u8981\u4f7f\u7528 <code>dict.get</code> \u6765\u8bbf\u95ee\u90e8\u5206\uff08\u975e\u5168\u90e8\uff09<code>TypedDict</code> \u7684\u9879\u76ee\uff0c \u56e0\u4e3a\u4f7f\u7528 <code>[]</code> \u8fdb\u884c\u7d22\u5f15\u53ef\u80fd\u4f1a\u5728\u8fd0\u884c\u65f6\u5931\u8d25\u3002 \u7136\u800c\uff0cmypy \u4ecd\u7136\u5141\u8bb8\u4f7f\u7528\u5e26\u6709\u90e8\u5206 <code>TypedDict</code> \u7684 <code>[]</code> \u2014\u2014\u4f60\u53ea\u9700\u8981\u5c0f\u5fc3\u5b83\uff0c\u56e0\u4e3a\u5b83\u53ef\u80fd\u4f1a\u5bfc\u81f4 <code>KeyError</code>\u3002 \u5230\u5904\u90fd\u9700\u8981 <code>dict.get</code> \u592a\u9ebb\u70e6\u4e86\u3002 \uff08\u8bf7\u6ce8\u610f\uff0c\u60a8\u4e5f\u53ef\u4ee5\u81ea\u7531\u4f7f\u7528 <code>dict.get</code> \u4ee5\u53ca\u6240\u6709 <code>TypedDict</code>\u3002\uff09</p> <p>\u4e0d\u9700\u8981\u7684\u952e\u5728\u9519\u8bef\u6d88\u606f\u4e2d\u663e\u793a\u4e3a\u201c\uff1f\u201d\uff1a</p> <pre><code># Revealed type is \"TypedDict('GuiOptions', {'language'?: builtins.str,\n#                                            'color'?: builtins.str})\"\nreveal_type(options)\n</code></pre> <p>\u6574\u4f53\u6027\u4e5f\u4f1a\u5f71\u54cd\u7ed3\u6784\u517c\u5bb9\u6027\u3002 \u5f53\u9700\u8981\u5b8c\u6574\u7684\u201cTypedDict\u201d\u65f6\uff0c\u60a8\u4e0d\u80fd\u4f7f\u7528\u90e8\u5206\u201cTypedDict\u201d\u3002 \u6b64\u5916\uff0c\u5f53\u9700\u8981\u90e8\u5206\u201cTypedDict\u201d\u65f6\uff0c\u6574\u4e2a\u201cTypedDict\u201d\u65e0\u6548\u3002</p> <p>By default mypy ensures that a <code>TypedDict</code> object has all the specified keys. This will be flagged as an error:</p> <pre><code># Error: 'year' missing\ntoy_story: Movie = {'name': 'Toy Story'}\n</code></pre> <p>Sometimes you want to allow keys to be left out when creating a <code>TypedDict</code> object. You can provide the <code>total=False</code> argument to <code>TypedDict(...)</code> to achieve this:</p> <pre><code>GuiOptions = TypedDict(\n    'GuiOptions', {'language': str, 'color': str}, total=False)\noptions: GuiOptions = {}  # Okay\noptions['language'] = 'en'\n</code></pre> <p>You may need to use <code>dict.get</code> to access items of a partial (non-total) <code>TypedDict</code>, since indexing using <code>[]</code> could fail at runtime. However, mypy still lets use <code>[]</code> with a partial <code>TypedDict</code> -- you just need to be careful with it, as it could result in a <code>KeyError</code>. Requiring <code>dict.get</code> everywhere would be too cumbersome. (Note that you are free to use <code>dict.get</code> with total <code>TypedDict</code>s as well.)</p> <p>Keys that aren't required are shown with a <code>?</code> in error messages:</p> <pre><code># Revealed type is \"TypedDict('GuiOptions', {'language'?: builtins.str,\n#                                            'color'?: builtins.str})\"\nreveal_type(options)\n</code></pre> <p>Totality also affects structural compatibility. You can't use a partial <code>TypedDict</code> when a total one is expected. Also, a total <code>TypedDict</code> is not valid when a partial one is expected.</p>"},{"location":"mypy/typeddict/#\u652f\u6301\u7684\u64cd\u4f5c","title":"\u652f\u6301\u7684\u64cd\u4f5c","text":"<p>Supported operations</p> \u4e2d\u6587\u82f1\u6587 <p><code>TypedDict</code> \u5bf9\u8c61\u652f\u6301\u5b57\u5178\u64cd\u4f5c\u548c\u65b9\u6cd5\u7684\u5b50\u96c6\u3002 \u8c03\u7528\u5927\u591a\u6570\u65b9\u6cd5\u65f6\u5fc5\u987b\u4f7f\u7528\u5b57\u7b26\u4e32\u6587\u5b57\u4f5c\u4e3a\u952e\uff0c\u5426\u5219 mypy \u5c06\u65e0\u6cd5\u68c0\u67e5\u8be5\u952e\u662f\u5426\u6709\u6548\u3002 \u652f\u6301\u7684\u64cd\u4f5c\u5217\u8868\uff1a</p> <ul> <li> <p><code>typing.Mapping</code>\u4e2d\u5305\u542b\u7684\u4efb\u4f55\u5185\u5bb9:</p> </li> <li> <p><code>d[key]</code></p> </li> <li><code>key in d</code></li> <li><code>len(d)</code></li> <li><code>for key in d</code> (iteration)</li> <li><code>d.get(key[, default])</code></li> <li><code>d.keys()</code></li> <li><code>d.values()</code></li> <li> <p><code>d.items()</code></p> </li> <li> <p><code>d.copy()</code></p> </li> <li><code>d.setdefault(key, default)</code></li> <li><code>d1.update(d2)</code></li> <li><code>d.pop(key[, default])</code> (partial <code>TypedDict</code>s only)</li> <li><code>del d[key]</code> (partial <code>TypedDict</code>s only)</li> </ul> <p>Note</p> <p><code>dict.clear</code> \u548c <code>dict.popitem</code> \u4e0d\u652f\u6301\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e0d\u5b89\u5168\u2014\u2014\u5b83\u4eec\u53ef\u4ee5\u5220\u9664\u7531\u4e8e\u7ed3\u6784\u5b50\u7c7b\u578b\u800c\u5bf9 mypy \u4e0d\u53ef\u89c1\u7684\u5fc5\u9700\u7684\u201cTypedDict\u201d\u9879\u3002</p> <p><code>TypedDict</code> objects support a subset of dictionary operations and methods. You must use string literals as keys when calling most of the methods, as otherwise mypy won't be able to check that the key is valid. List of supported operations:</p> <ul> <li> <p>Anything included in <code>typing.Mapping</code>:</p> </li> <li> <p><code>d[key]</code></p> </li> <li><code>key in d</code></li> <li><code>len(d)</code></li> <li><code>for key in d</code> (iteration)</li> <li><code>d.get(key[, default])</code></li> <li><code>d.keys()</code></li> <li><code>d.values()</code></li> <li> <p><code>d.items()</code></p> </li> <li> <p><code>d.copy()</code></p> </li> <li><code>d.setdefault(key, default)</code></li> <li><code>d1.update(d2)</code></li> <li><code>d.pop(key[, default])</code> (partial <code>TypedDict</code>s only)</li> <li><code>del d[key]</code> (partial <code>TypedDict</code>s only)</li> </ul> <p>Note</p> <p><code>dict.clear</code> and <code>dict.popitem</code> are not supported since they are unsafe -- they could delete required <code>TypedDict</code> items that are not visible to mypy because of structural subtyping.</p>"},{"location":"mypy/typeddict/#\u57fa\u4e8e\u7c7b\u7684\u8bed\u6cd5","title":"\u57fa\u4e8e\u7c7b\u7684\u8bed\u6cd5","text":"<p>Class-based syntax</p> \u4e2d\u6587\u82f1\u6587 <p>Python 3.6 \u53ca\u66f4\u9ad8\u7248\u672c\u652f\u6301\u53e6\u4e00\u79cd\u57fa\u4e8e\u7c7b\u7684\u8bed\u6cd5\u6765\u5b9a\u4e49\u201cTypedDict\u201d\uff1a</p> <pre><code>from typing_extensions import TypedDict\n\nclass Movie(TypedDict):\n    name: str\n    year: int\n</code></pre> <p>\u4e0a\u9762\u7684\u5b9a\u4e49\u76f8\u5f53\u4e8e\u539f\u6765\u7684\u201cMovie\u201d\u5b9a\u4e49\u3002 \u5b83\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u5b9a\u4e49\u771f\u6b63\u7684\u7c7b\u3002 \u6b64\u8bed\u6cd5\u8fd8\u652f\u6301\u4e00\u79cd\u7ee7\u627f\u5f62\u5f0f\u2014\u2014\u5b50\u7c7b\u53ef\u4ee5\u5b9a\u4e49\u9644\u52a0\u9879\u3002 \u7136\u800c\uff0c\u8fd9\u4e3b\u8981\u662f\u4e00\u79cd\u7b26\u53f7\u5feb\u6377\u65b9\u5f0f\u3002 \u7531\u4e8e mypy \u4f7f\u7528\u4e0e TypedDict \u7684\u7ed3\u6784\u517c\u5bb9\u6027\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u7ee7\u627f\u6765\u5b9e\u73b0\u517c\u5bb9\u6027\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u7ee7\u627f\u7684\u4f8b\u5b50\uff1a</p> <pre><code>class Movie(TypedDict):\n    name: str\n    year: int\n\nclass BookBasedMovie(Movie):\n    based_on: str\n</code></pre> <p>\u73b0\u5728\u201cBookBasedMovie\u201d\u6709\u952e\u201cname\u201d\u3001\u201cyear\u201d\u548c\u201cbased_on\u201d\u3002</p> <p>An alternative, class-based syntax to define a <code>TypedDict</code> is supported in Python 3.6 and later:</p> <pre><code>from typing_extensions import TypedDict\n\nclass Movie(TypedDict):\n    name: str\n    year: int\n</code></pre> <p>The above definition is equivalent to the original <code>Movie</code> definition. It doesn't actually define a real class. This syntax also supports a form of inheritance -- subclasses can define additional items. However, this is primarily a notational shortcut. Since mypy uses structural compatibility with <code>TypedDict</code>s, inheritance is not required for compatibility. Here is an example of inheritance:</p> <pre><code>class Movie(TypedDict):\n    name: str\n    year: int\n\nclass BookBasedMovie(Movie):\n    based_on: str\n</code></pre> <p>Now <code>BookBasedMovie</code> has keys <code>name</code>, <code>year</code> and <code>based_on</code>.</p>"},{"location":"mypy/typeddict/#\u6df7\u5408\u5fc5\u9700\u548c\u975e\u5fc5\u9700\u7684\u9879\u76ee","title":"\u6df7\u5408\u5fc5\u9700\u548c\u975e\u5fc5\u9700\u7684\u9879\u76ee","text":"<p>Mixing required and non-required items</p> \u4e2d\u6587\u82f1\u6587 <p>\u9664\u4e86\u5141\u8bb8\u8de8\u201cTypedDict\u201d\u7c7b\u578b\u91cd\u7528\u4e4b\u5916\uff0c\u7ee7\u627f\u8fd8\u5141\u8bb8\u60a8\u5728\u5355\u4e2a\u201cTypedDict\u201d\u4e2d\u6df7\u5408\u5fc5\u9700\u548c\u975e\u5fc5\u9700\uff08\u4f7f\u7528\u201ctotal=False\u201d\uff09\u9879\u3002 \u4f8b\u5b50\uff1a</p> <pre><code>class MovieBase(TypedDict):\n    name: str\n    year: int\n\nclass Movie(MovieBase, total=False):\n    based_on: str\n</code></pre> <p>\u73b0\u5728\u201cMovie\u201d\u9700\u8981\u952e\u201cname\u201d\u548c\u201cyear\u201d\uff0c\u800c\u201cbased_on\u201d\u5728\u6784\u9020\u5bf9\u8c61\u65f6\u53ef\u4ee5\u7701\u7565\u3002 \u6df7\u5408\u4e86\u5fc5\u9700\u548c\u975e\u5fc5\u9700\u952e\u7684\u201cTypedDict\u201d\uff08\u4f8b\u5982\u4e0a\u9762\u7684\u201cMovie\u201d\uff09\u4ec5\u5f53\u5176\u4ed6\u201cTypedDict\u201d\u4e2d\u7684\u6240\u6709\u5fc5\u9700\u952e\u90fd\u662f\u7b2c\u4e00\u4e2a\u201cTypedDict\u201d\u4e2d\u7684\u5fc5\u9700\u952e\u65f6\u624d\u4e0e\u53e6\u4e00\u4e2a\u201cTypedDict\u201d\u517c\u5bb9 \uff0c\u5e76\u4e14\u5176\u4ed6\u201cTypedDict\u201d\u7684\u6240\u6709\u975e\u5fc5\u9700\u952e\u4e5f\u662f\u7b2c\u4e00\u4e2a\u201cTypedDict\u201d\u4e2d\u7684\u975e\u5fc5\u9700\u952e\u3002</p> <p>In addition to allowing reuse across <code>TypedDict</code> types, inheritance also allows you to mix required and non-required (using <code>total=False</code>) items in a single <code>TypedDict</code>. Example:</p> <pre><code>class MovieBase(TypedDict):\n    name: str\n    year: int\n\nclass Movie(MovieBase, total=False):\n    based_on: str\n</code></pre> <p>Now <code>Movie</code> has required keys <code>name</code> and <code>year</code>, while <code>based_on</code> can be left out when constructing an object. A <code>TypedDict</code> with a mix of required and non-required keys, such as <code>Movie</code> above, will only be compatible with another <code>TypedDict</code> if all required keys in the other <code>TypedDict</code> are required keys in the first <code>TypedDict</code>, and all non-required keys of the other <code>TypedDict</code> are also non-required keys in the first <code>TypedDict</code>.</p>"},{"location":"mypy/typeddict/#typeddict-\u7684\u8054\u5408","title":"TypedDict \u7684\u8054\u5408","text":"<p>Unions of TypedDicts</p> \u4e2d\u6587\u82f1\u6587 <p>\u7531\u4e8e TypedDict \u5728\u8fd0\u884c\u65f6\u5b9e\u9645\u4e0a\u53ea\u662f\u5e38\u89c4\u5b57\u5178\uff0c\u56e0\u6b64\u4e0d\u53ef\u80fd\u4f7f\u7528\u201cisinstance\u201d\u68c0\u67e5\u6765\u533a\u5206 TypedDict Union \u7684\u4e0d\u540c\u53d8\u4f53\uff0c\u5c31\u50cf\u5904\u7406\u5e38\u89c4\u5bf9\u8c61\u4e00\u6837\u3002</p> <p>\u76f8\u53cd\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528<code>\u6807\u8bb0\u8054\u5408\u6a21\u5f0f</code>\u3002 \u6587\u6863\u7684\u5f15\u7528\u90e8\u5206\u6709\u5b8c\u6574\u7684\u63cf\u8ff0\u548c\u793a\u4f8b\uff0c\u4f46\u7b80\u800c\u8a00\u4e4b\uff0c\u60a8\u9700\u8981\u4e3a\u6bcf\u4e2a TypedDict \u63d0\u4f9b\u76f8\u540c\u7684\u952e\uff0c\u5176\u4e2d\u6bcf\u4e2a\u503c\u90fd\u6709\u552f\u4e00\u7684 <code>Literal type</code>\u3002 \u7136\u540e\uff0c\u68c0\u67e5\u8be5\u952e\u4ee5\u533a\u5206\u60a8\u7684 TypedDict\u3002</p> <p>Since TypedDicts are really just regular dicts at runtime, it is not possible to use <code>isinstance</code> checks to distinguish between different variants of a Union of TypedDict in the same way you can with regular objects.</p> <p>Instead, you can use the <code>tagged union pattern</code>. The referenced section of the docs has a full description with an example, but in short, you will need to give each TypedDict the same key where each value has a unique <code>Literal type</code>. Then, check that key to distinguish between your TypedDicts.</p>"},{"location":"mypy_conf/","title":"\u914d\u7f6e\u548c\u8fd0\u884cmypy","text":"<p>\u6682\u6ca1\u6709\u65f6\u95f4\u6c49\u5316\uff0c\u770b\u539f\u6587...</p>"},{"location":"mypy_conf/command_line/","title":"mypy \u547d\u4ee4\u884c","text":"<p>The mypy command line</p> \u4e2d\u6587\u82f1\u6587 <p>\u672c\u8282\u6587\u6863\u4ecb\u7ecd\u4e86 mypy \u7684\u547d\u4ee4\u884c\u63a5\u53e3\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u8fd0\u884c mypy --help \u67e5\u770b\u53ef\u7528\u6807\u5fd7\u7684\u7b80\u8981\u603b\u7ed3\u3002</p> <p>Note</p> <p>\u547d\u4ee4\u884c\u6807\u5fd7\u53ef\u80fd\u4f1a\u5728\u4e0d\u540c\u7248\u672c\u4e4b\u95f4\u53d1\u751f\u53d8\u5316\u3002</p> <p>This section documents mypy's command line interface. You can view a quick summary of the available flags by running mypy --help.</p> <p>Note</p> <p>Command line flags are liable to change between releases.</p>"},{"location":"mypy_conf/command_line/#\u6307\u5b9a\u9700\u8981\u7c7b\u578b\u68c0\u67e5\u7684\u5185\u5bb9","title":"\u6307\u5b9a\u9700\u8981\u7c7b\u578b\u68c0\u67e5\u7684\u5185\u5bb9","text":"<p>Specifying what to type check</p> \u4e2d\u6587\u82f1\u6587 <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u8def\u5f84\u6765\u6307\u5b9a\u8981\u8ba9 mypy \u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u7684\u4ee3\u7801\uff1a</p> <pre><code>$ mypy foo.py bar.py some_directory\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u76ee\u5f55\u4f1a\u88ab\u9012\u5f52\u68c0\u67e5\u3002</p> <p>Mypy \u8fd8\u5141\u8bb8\u4f60\u901a\u8fc7\u5176\u4ed6\u51e0\u79cd\u65b9\u5f0f\u6307\u5b9a\u8981\u68c0\u67e5\u7684\u4ee3\u7801\u3002\u4ee5\u4e0b\u662f\u76f8\u5173\u6807\u5fd7\u7684\u7b80\u8981\u603b\u7ed3\uff1a\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 running-mypy\u3002</p> <code>-m MODULE, --module MODULE</code> <p>\u8bf7\u6c42 mypy \u68c0\u67e5\u63d0\u4f9b\u7684\u6a21\u5757\u3002\u8fd9\u4e2a\u6807\u5fd7\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u591a\u6b21\u3002</p> <p>Mypy \u4e0d\u4f1a \u9012\u5f52\u5730\u68c0\u67e5\u63d0\u4f9b\u6a21\u5757\u7684\u4efb\u4f55\u5b50\u6a21\u5757\u3002</p> <code>-p PACKAGE, --package PACKAGE</code> <p>\u8bf7\u6c42 mypy \u68c0\u67e5\u63d0\u4f9b\u7684\u5305\u3002\u8fd9\u4e2a\u6807\u5fd7\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u591a\u6b21\u3002</p> <p>Mypy \u4f1a \u9012\u5f52\u5730\u68c0\u67e5\u63d0\u4f9b\u5305\u7684\u6240\u6709\u5b50\u6a21\u5757\u3002\u8fd9\u4e2a\u6807\u5fd7\u4e0e --module \u7684\u552f\u4e00\u533a\u522b\u5728\u4e8e\u8fd9\u79cd\u884c\u4e3a\u3002</p> <code>-c PROGRAM_TEXT, --command PROGRAM_TEXT</code> <p>\u8bf7\u6c42 mypy \u5c06\u63d0\u4f9b\u7684\u5b57\u7b26\u4e32\u4f5c\u4e3a\u7a0b\u5e8f\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u3002</p> <code>--exclude</code> <p>\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u7528\u4e8e\u5339\u914d\u6587\u4ef6\u540d\u3001\u76ee\u5f55\u540d\u548c\u8def\u5f84\uff0cmy py \u5728\u9012\u5f52\u53d1\u73b0\u8981\u68c0\u67e5\u7684\u6587\u4ef6\u65f6\u5e94\u5ffd\u7565\u8fd9\u4e9b\u5339\u914d\u7684\u5185\u5bb9\u3002\u5728\u6240\u6709\u5e73\u53f0\u4e0a\u4f7f\u7528\u6b63\u659c\u6760\u3002</p> <p>\u4f8b\u5982\uff0c\u4e3a\u4e86\u907f\u514d\u53d1\u73b0\u4efb\u4f55\u540d\u4e3a <code>setup.py</code> \u7684\u6587\u4ef6\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 <code>--exclude '/setup\\.py$'</code>\u3002\u7c7b\u4f3c\u5730\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f8b\u5982 <code>--exclude /build/</code> \u5ffd\u7565\u5177\u6709\u7279\u5b9a\u540d\u79f0\u7684\u76ee\u5f55\uff0c\u6216\u901a\u8fc7 <code>--exclude /project/vendor/</code> \u5ffd\u7565\u5339\u914d\u5b50\u8def\u5f84\u7684\u76ee\u5f55\u3002\u8981\u5ffd\u7565\u591a\u4e2a\u6587\u4ef6/\u76ee\u5f55/\u8def\u5f84\uff0c\u4f60\u53ef\u4ee5\u591a\u6b21\u63d0\u4f9b --exclude \u6807\u5fd7\uff0c\u4f8b\u5982 <code>--exclude '/setup\\.py$' --exclude '/build/'</code>\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e2a\u6807\u5fd7\u53ea\u5f71\u54cd\u9012\u5f52\u76ee\u5f55\u6811\u53d1\u73b0\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53 mypy \u5728\u76ee\u5f55\u6811\u6216\u5305\u7684\u5b50\u6a21\u5757\u4e2d\u53d1\u73b0\u6587\u4ef6\u65f6\u4f1a\u88ab\u5ffd\u7565\u3002\u5982\u679c\u4f60\u660e\u786e\u5730\u4f20\u9012\u4e86\u6587\u4ef6\u6216\u6a21\u5757\uff0c\u5b83\u4ecd\u7136\u4f1a\u88ab\u68c0\u67e5\u3002\u4f8b\u5982\uff0c<code>mypy --exclude '/setup.py$' but_still_check/setup.py</code>\u3002</p> <p>\u7279\u522b\u662f\uff0c<code>--exclude</code> \u4e0d\u5f71\u54cd mypy \u7684 \u5bfc\u5165\u8ddf\u968f\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u6bcf\u6a21\u5757\u7684 follow_imports \u914d\u7f6e\u9009\u9879\uff0c\u989d\u5916\u907f\u514d mypy \u8ddf\u968f\u5bfc\u5165\u5e76\u68c0\u67e5\u4f60\u4e0d\u5e0c\u671b\u68c0\u67e5\u7684\u4ee3\u7801\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0cmypy \u6c38\u8fdc\u4e0d\u4f1a\u9012\u5f52\u53d1\u73b0\u540d\u4e3a \"site-packages\"\u3001\"node_modules\" \u6216 \"__pycache__\" \u7684\u6587\u4ef6\u548c\u76ee\u5f55\uff0c\u6216\u540d\u79f0\u4ee5\u70b9\u53f7\u5f00\u5934\u7684\u6587\u4ef6\u5939\uff0c\u5c31\u50cf <code>--exclude '/(site-packages|node_modules|__pycache__|\\..*)/$'</code> \u6240\u505a\u7684\u90a3\u6837\u3002Mypy \u4e5f\u4e0d\u4f1a\u9012\u5f52\u53d1\u73b0\u6269\u5c55\u540d\u4e0d\u662f <code>.py</code> \u6216 <code>.pyi</code> \u7684\u6587\u4ef6\u3002</p> <p>By default, you can specify what code you want mypy to type check by passing in the paths to what you want to have type checked</p> <pre><code>$ mypy foo.py bar.py some_directory\n</code></pre> <p>Note that directories are checked recursively.</p> <p>Mypy also lets you specify what code to type check in several other ways. A short summary of the relevant flags is included below: for full details, see running-mypy.</p> <code>-m MODULE, --module MODULE</code> <p>Asks mypy to type check the provided module. This flag may be repeated multiple times.</p> <p>Mypy will not recursively type check any submodules of the provided module.</p> <code>-p PACKAGE, --package PACKAGE</code> <p>Asks mypy to type check the provided package. This flag may be repeated multiple times.</p> <p>Mypy will recursively type check any submodules of the provided package. This flag is identical to --module apart from this behavior.</p> <code>-c PROGRAM_TEXT, --command PROGRAM_TEXT</code> <p>Asks mypy to type check the provided string as a program.</p> <code>--exclude</code> <p>A regular expression that matches file names, directory names and paths which mypy should ignore while recursively discovering files to check. Use forward slashes on all platforms.</p> <p>For instance, to avoid discovering any files named <code>setup.py</code> you could pass <code>--exclude '/setup\\.py$'</code>. Similarly, you can ignore discovering directories with a given name by e.g. <code>--exclude /build/</code> or those matching a subpath with <code>--exclude /project/vendor/</code>. To ignore multiple files / directories / paths, you can provide the --exclude flag more than once, e.g <code>--exclude '/setup\\.py$' --exclude '/build/'</code>.</p> <p>Note that this flag only affects recursive directory tree discovery, that is, when mypy is discovering files within a directory tree or submodules of a package to check. If you pass a file or module explicitly it will still be checked. For instance, <code>mypy --exclude '/setup.py$' but_still_check/setup.py</code>.</p> <p>In particular, <code>--exclude</code> does not affect mypy's import following. You can use a per-module follow_imports config option to additionally avoid mypy from following imports and checking code you do not wish to be checked.</p> <p>Note that mypy will never recursively discover files and directories named \"site-packages\", \"node_modules\" or \"__pycache__\", or those whose name starts with a period, exactly as <code>--exclude '/(site-packages|node_modules|__pycache__|\\..*)/$'</code> would. Mypy will also never recursively discover files with extensions other than <code>.py</code> or <code>.pyi</code>.</p>"},{"location":"mypy_conf/command_line/#\u53ef\u9009\u53c2\u6570","title":"\u53ef\u9009\u53c2\u6570","text":"<p>Optional arguments</p> \u4e2d\u6587\u82f1\u6587 <code>-h, --help</code> <p>\u663e\u793a\u5e2e\u52a9\u4fe1\u606f\u5e76\u9000\u51fa\u3002</p> <code>-v, --verbose</code> <p>\u663e\u793a\u66f4\u8be6\u7ec6\u7684\u6d88\u606f\u3002</p> <code>-V, --version</code> <p>\u663e\u793a\u7a0b\u5e8f\u7684\u7248\u672c\u53f7\u5e76\u9000\u51fa\u3002</p> <code>-h, --help</code> <p>Show help message and exit.</p> <code>-v, --verbose</code> <p>More verbose messages.</p> <code>-V, --version</code> <p>Show program's version number and exit.</p>"},{"location":"mypy_conf/command_line/#\u914d\u7f6e\u6587\u4ef6","title":"\u914d\u7f6e\u6587\u4ef6","text":"<p>Config file</p> \u4e2d\u6587\u82f1\u6587 <code>--config-file CONFIG_FILE</code> <p>\u8be5\u9009\u9879\u4f7f mypy \u4ece\u6307\u5b9a\u7684\u914d\u7f6e\u6587\u4ef6\u4e2d\u8bfb\u53d6\u914d\u7f6e\u8bbe\u7f6e\u3002</p> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8bbe\u7f6e\u4f1a\u4ece\u5f53\u524d\u76ee\u5f55\u4e0b\u7684 <code>mypy.ini</code>, <code>.mypy.ini</code>, <code>pyproject.toml</code> \u6216 <code>setup.cfg</code> \u6587\u4ef6\u4e2d\u8bfb\u53d6\u3002\u914d\u7f6e\u8bbe\u7f6e\u4f1a\u8986\u76d6 mypy \u7684\u5185\u7f6e\u9ed8\u8ba4\u503c\uff0c\u800c\u547d\u4ee4\u884c\u6807\u5fd7\u53ef\u4ee5\u8986\u76d6\u8fd9\u4e9b\u8bbe\u7f6e\u3002</p> <p>\u6307\u5b9a config-file=\uff08\u4e0d\u5e26\u6587\u4ef6\u540d\uff09\u5c06\u5ffd\u7565 \u6240\u6709 \u914d\u7f6e\u6587\u4ef6\u3002</p> <p>\u6709\u5173\u914d\u7f6e\u6587\u4ef6\u7684\u8bed\u6cd5\uff0c\u8bf7\u53c2\u89c1 config-file\u3002</p> <code>--warn-unused-configs</code> <p>\u8be5\u9009\u9879\u4f7f mypy \u5bf9\u672a\u4f7f\u7528\u7684 <code>[mypy-&lt;pattern&gt;]</code> \u914d\u7f6e\u6587\u4ef6\u90e8\u5206\u53d1\u51fa\u8b66\u544a\u3002\uff08\u8fd9\u9700\u8981\u4f7f\u7528 --no-incremental \u5173\u95ed\u589e\u91cf\u6a21\u5f0f\u3002\uff09</p> <code>--config-file CONFIG_FILE</code> <p>This flag makes mypy read configuration settings from the given file.</p> <p>By default settings are read from <code>mypy.ini</code>, <code>.mypy.ini</code>, <code>pyproject.toml</code>, or <code>setup.cfg</code> in the current directory. Settings override mypy's built-in defaults and command line flags can override settings.</p> <p>Specifying config-file=(with no filename) will ignore all config files.</p> <p>See config-file for the syntax of configuration files.</p> <code>--warn-unused-configs</code> <p>This flag makes mypy warn about unused <code>[mypy-&lt;pattern&gt;]</code> config file sections. (This requires turning off incremental mode using --no-incremental.)</p>"},{"location":"mypy_conf/command_line/#\u5bfc\u5165\u53d1\u73b0","title":"\u5bfc\u5165\u53d1\u73b0","text":"<p>Import discovery</p> \u4e2d\u6587\u82f1\u6587 <p>\u4ee5\u4e0b\u9009\u9879\u7528\u4e8e\u81ea\u5b9a\u4e49 mypy \u53d1\u73b0\u548c\u8ddf\u968f\u5bfc\u5165\u7684\u5177\u4f53\u65b9\u5f0f\u3002</p> <code>--explicit-package-bases</code> <p>\u8be5\u9009\u9879\u544a\u8bc9 mypy \u9876\u7ea7\u5305\u5c06\u57fa\u4e8e\u5f53\u524d\u76ee\u5f55\uff0c\u6216\u8005 <code>MYPYPATH</code> \u73af\u5883\u53d8\u91cf\u6216 mypy_path \u914d\u7f6e\u9009\u9879\u7684\u6210\u5458\u3002\u6b64\u9009\u9879\u4ec5\u5728\u7f3a\u5c11 <code>__init__.py</code> \u6587\u4ef6\u65f6\u6709\u7528\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 Mapping file paths to modules\u3002</p> <code>--ignore-missing-imports</code> <p>\u8be5\u9009\u9879\u4f7f mypy \u5ffd\u7565\u6240\u6709\u7f3a\u5931\u7684\u5bfc\u5165\u3002\u8fd9\u76f8\u5f53\u4e8e\u5728\u4ee3\u7801\u5e93\u4e2d\u7684\u6240\u6709\u672a\u89e3\u6790\u5bfc\u5165\u5904\u6dfb\u52a0 <code># type: ignore</code> \u6ce8\u91ca\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u6b64\u9009\u9879 \u4e0d\u4f1a \u6291\u5236\u5173\u4e8e\u6210\u529f\u89e3\u6790\u7684\u6a21\u5757\u4e2d\u7f3a\u5931\u540d\u79f0\u7684\u9519\u8bef\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6709\u4ee5\u4e0b\u6587\u4ef6</p> <p><pre><code>package/__init__.py\npackage/mod.py\n</code></pre> \u90a3\u4e48\u4f7f\u7528 --ignore-missing-imports \u65f6\uff0cmypy \u5c06\u751f\u6210\u4ee5\u4e0b\u9519\u8bef\uff1a</p> <pre><code>import package.unknown      # \u65e0\u9519\u8bef\uff0c\u5df2\u5ffd\u7565\nx = package.unknown.func()  # OK. 'func' \u88ab\u5047\u5b9a\u4e3a 'Any' \u7c7b\u578b\n\nfrom package import unknown          # \u65e0\u9519\u8bef\uff0c\u5df2\u5ffd\u7565\nfrom package.mod import NonExisting  # \u9519\u8bef: \u6a21\u5757\u6ca1\u6709\u5c5e\u6027 'NonExisting'\n</code></pre> <p>\u66f4\u591a\u7ec6\u8282\uff0c\u8bf7\u53c2\u89c1 ignore-missing-imports\u3002</p> <code>--follow-imports {normal,silent,skip,error}</code> <p>\u8be5\u9009\u9879\u8c03\u6574 mypy \u5982\u4f55\u8ddf\u968f\u901a\u8fc7\u547d\u4ee4\u884c\u672a\u660e\u786e\u4f20\u5165\u7684\u5bfc\u5165\u6a21\u5757\u3002</p> <p>\u9ed8\u8ba4\u9009\u9879\u662f <code>normal</code>\uff1amypy \u5c06\u8ddf\u968f\u5e76\u7c7b\u578b\u68c0\u67e5\u6240\u6709\u6a21\u5757\u3002\u6709\u5173\u5176\u4ed6\u9009\u9879\u7684\u4f5c\u7528\uff0c\u8bf7\u53c2\u89c1 Following imports\u3002</p> <code>--python-executable EXECUTABLE</code> <p>\u8be5\u9009\u9879\u4f7f mypy \u4ece\u4e3a Python \u53ef\u6267\u884c\u6587\u4ef6 <code>EXECUTABLE</code> \u5b89\u88c5\u7684 PEP 561 \u517c\u5bb9\u5305\u4e2d\u6536\u96c6\u7c7b\u578b\u4fe1\u606f\u3002\u5982\u679c\u672a\u63d0\u4f9b\uff0cmypy \u5c06\u4f7f\u7528\u4e3a\u8fd0\u884c mypy \u7684 Python \u53ef\u6267\u884c\u6587\u4ef6\u5b89\u88c5\u7684 PEP 561 \u517c\u5bb9\u5305\u3002</p> <p>\u6709\u5173\u5982\u4f55\u5236\u4f5c PEP 561 \u517c\u5bb9\u5305\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 installed-packages\u3002</p> <code>--no-site-packages</code> <p>\u8be5\u9009\u9879\u5c06\u7981\u7528\u5bf9 PEP 561 \u517c\u5bb9\u5305\u7684\u641c\u7d22\u3002\u8fd9\u4e5f\u5c06\u7981\u7528\u5bf9\u53ef\u7528 Python \u53ef\u6267\u884c\u6587\u4ef6\u7684\u641c\u7d22\u3002</p> <p>\u5982\u679c mypy \u65e0\u6cd5\u627e\u5230\u9002\u7528\u4e8e\u68c0\u67e5\u7684 Python \u7248\u672c\u7684 Python \u53ef\u6267\u884c\u6587\u4ef6\uff0c\u5e76\u4e14\u4e0d\u9700\u8981\u4f7f\u7528 PEP 561 \u7c7b\u578b\u7684\u5305\uff0c\u8bf7\u4f7f\u7528\u6b64\u9009\u9879\u3002\u5426\u5219\uff0c\u8bf7\u4f7f\u7528 --python-executable\u3002</p> <code>--no-silence-site-packages</code> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cmypy \u4f1a\u6291\u5236\u5728 PEP 561 \u517c\u5bb9\u5305\u4e2d\u751f\u6210\u7684\u4efb\u4f55\u9519\u8bef\u6d88\u606f\u3002\u6dfb\u52a0\u6b64\u9009\u9879\u5c06\u7981\u7528\u6b64\u884c\u4e3a\u3002</p> <code>--fast-module-lookup</code> <p>\u9ed8\u8ba4\u903b\u8f91\u7528\u4e8e\u626b\u63cf\u641c\u7d22\u8def\u5f84\u4ee5\u89e3\u6790\u5bfc\u5165\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u5177\u6709\u4e8c\u6b21\u6700\u574f\u60c5\u51b5\u884c\u4e3a\uff0c\u4f8b\u5982\uff0c\u7531\u5927\u91cf\u5171\u4eab\u9876\u7ea7\u547d\u540d\u7a7a\u95f4\u7684\u6587\u4ef6\u5939\u89e6\u53d1\uff0c\u5982\u4e0b\u6240\u793a</p> <pre><code>    foo/\n        company/\n            foo/\n                a.py\n    bar/\n        company/\n            bar/\n                b.py\n    baz/\n        company/\n            baz/\n                c.py\n    ...\n</code></pre> <p>\u5982\u679c\u4f60\u9047\u5230\u8fd9\u79cd\u60c5\u51b5\uff0c\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e --fast-module-lookup \u9009\u9879\u542f\u7528\u5b9e\u9a8c\u6027\u7684\u5feb\u901f\u8def\u5f84\u3002</p> <code>--no-namespace-packages</code> <p>\u8be5\u9009\u9879\u7981\u7528\u5bf9\u547d\u540d\u7a7a\u95f4\u5305\u7684\u5bfc\u5165\u53d1\u73b0\uff08\u89c1 PEP 420\uff09\u3002\u7279\u522b\u662f\uff0c\u8fd9\u4f1a\u9632\u6b62\u53d1\u73b0\u6ca1\u6709 <code>__init__.py</code>\uff08\u6216 <code>__init__.pyi</code>\uff09\u6587\u4ef6\u7684\u5305\u3002</p> <p>\u8be5\u9009\u9879\u5f71\u54cd mypy \u5982\u4f55\u627e\u5230\u5728\u547d\u4ee4\u884c\u4e0a\u660e\u786e\u4f20\u9012\u7684\u6a21\u5757\u548c\u5305\u3002\u5b83\u4e5f\u5f71\u54cd mypy \u5982\u4f55\u786e\u5b9a\u4f20\u9012\u5728\u547d\u4ee4\u884c\u4e0a\u7684\u6587\u4ef6\u7684\u5b8c\u5168\u9650\u5b9a\u6a21\u5757\u540d\u79f0\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 Mapping file paths to modules\u3002</p> <p>The following flags customize how exactly mypy discovers and follows imports.</p> <code>--explicit-package-bases</code> <p>This flag tells mypy that top-level packages will be based in either the current directory, or a member of the <code>MYPYPATH</code> environment variable or mypy_path config option. This option is only useful in the absence of <code>__init__.py</code>. See Mapping file paths to modules for details.</p> <code>--ignore-missing-imports</code> <p>This flag makes mypy ignore all missing imports. It is equivalent to adding <code># type: ignore</code> comments to all unresolved imports within your codebase.</p> <p>Note that this flag does not suppress errors about missing names in successfully resolved modules. For example, if one has the following files</p> <p><pre><code>package/__init__.py\npackage/mod.py\n</code></pre> Then mypy will generate the following errors with --ignore-missing-imports:</p> <pre><code>import package.unknown      # No error, ignored\nx = package.unknown.func()  # OK. 'func' is assumed to be of type 'Any'\n\nfrom package import unknown          # No error, ignored\nfrom package.mod import NonExisting  # Error: Module has no attribute 'NonExisting'\n</code></pre> <p>For more details, see ignore-missing-imports.</p> <code>--follow-imports {normal,silent,skip,error}</code> <p>This flag adjusts how mypy follows imported modules that were not explicitly passed in via the command line.</p> <p>The default option is <code>normal</code>: mypy will follow and type check all modules. For more information on what the other options do, see Following imports.</p> <code>--python-executable EXECUTABLE</code> <p>This flag will have mypy collect type information from PEP 561 compliant packages installed for the Python executable <code>EXECUTABLE</code>. If not provided, mypy will use PEP 561 compliant packages installed for the Python executable running mypy.</p> <p>See installed-packages for more on making PEP 561 compliant packages.</p> <code>--no-site-packages</code> <p>This flag will disable searching for PEP 561 compliant packages. This will also disable searching for a usable Python executable.</p> <p>Use this  flag if mypy cannot find a Python executable for the version of Python being checked, and you don't need to use PEP 561 typed packages. Otherwise, use --python-executable.</p> <code>--no-silence-site-packages</code> <p>By default, mypy will suppress any error messages generated within PEP 561 compliant packages. Adding this flag will disable this behavior.</p> <code>--fast-module-lookup</code> <p>The default logic used to scan through search paths to resolve imports has a quadratic worse-case behavior in some cases, which is for instance triggered by a large number of folders sharing a top-level namespace as in</p> <pre><code>    foo/\n        company/\n            foo/\n                a.py\n    bar/\n        company/\n            bar/\n                b.py\n    baz/\n        company/\n            baz/\n                c.py\n    ...\n</code></pre> <p>If you are in this situation, you can enable an experimental fast path by setting the --fast-module-lookup option.</p> <code>--no-namespace-packages</code> <p>This flag disables import discovery of namespace packages (see PEP 420). In particular, this prevents discovery of packages that don't have an <code>__init__.py</code> (or <code>__init__.pyi</code>) file.</p> <p>This flag affects how mypy finds modules and packages explicitly passed on the command line. It also affects how mypy determines fully qualified module names for files passed on the command line. See Mapping file paths to modules for details.</p>"},{"location":"mypy_conf/command_line/#\u5e73\u53f0\u914d\u7f6e","title":"\u5e73\u53f0\u914d\u7f6e","text":"<p>Platform configuration</p> \u4e2d\u6587\u82f1\u6587 <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cmypy \u4f1a\u5047\u5b9a\u4f60\u6253\u7b97\u4f7f\u7528\u4e0e\u8fd0\u884c mypy \u672c\u8eab\u76f8\u540c\u7684\u64cd\u4f5c\u7cfb\u7edf\u548c Python \u7248\u672c\u6765\u8fd0\u884c\u4f60\u7684\u4ee3\u7801\u3002\u4ee5\u4e0b\u9009\u9879\u5141\u8bb8\u4f60\u4fee\u6539\u8fd9\u4e00\u884c\u4e3a\u3002</p> <p>\u6709\u5173\u5982\u4f55\u4f7f\u7528\u8fd9\u4e9b\u9009\u9879\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 Python version and system platform checks\u3002</p> <code>--python-version X.Y</code> <p>\u8be5\u9009\u9879\u5c06\u4f7f mypy \u5728\u7c7b\u578b\u68c0\u67e5\u4f60\u7684\u4ee3\u7801\u65f6\u5047\u5b9a\u5b83\u5728 Python \u7248\u672c X.Y \u4e0b\u8fd0\u884c\u3002\u5982\u679c\u6ca1\u6709\u6b64\u9009\u9879\uff0cmypy \u5c06\u9ed8\u8ba4\u4f7f\u7528\u8fd0\u884c mypy \u7684 Python \u7248\u672c\u3002</p> <p>\u6b64\u9009\u9879\u4f1a\u5c1d\u8bd5\u67e5\u627e\u5bf9\u5e94\u7248\u672c\u7684 Python \u53ef\u6267\u884c\u6587\u4ef6\uff0c\u4ee5\u641c\u7d22\u7b26\u5408 PEP 561 \u7684\u5305\u3002\u5982\u679c\u4f60\u60f3\u7981\u7528\u6b64\u529f\u80fd\uff0c\u53ef\u4ee5\u4f7f\u7528 --no-site-packages \u9009\u9879\uff08\u6709\u5173\u66f4\u591a\u7ec6\u8282\uff0c\u8bf7\u53c2\u89c1 import-discovery\uff09\u3002</p> <code>--platform PLATFORM</code> <p>\u8be5\u9009\u9879\u5c06\u4f7f mypy \u5728\u7c7b\u578b\u68c0\u67e5\u4f60\u7684\u4ee3\u7801\u65f6\u5047\u5b9a\u5b83\u5728\u6307\u5b9a\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e0b\u8fd0\u884c\u3002\u5982\u679c\u6ca1\u6709\u6b64\u9009\u9879\uff0cmypy \u5c06\u9ed8\u8ba4\u4f7f\u7528\u4f60\u5f53\u524d\u4f7f\u7528\u7684\u64cd\u4f5c\u7cfb\u7edf\u3002</p> <p><code>PLATFORM</code> \u53c2\u6570\u53ef\u4ee5\u662f sys.platform \u652f\u6301\u7684\u4efb\u4f55\u5b57\u7b26\u4e32\u3002</p> <code>--always-true NAME</code> <p>\u8be5\u9009\u9879\u5c06\u628a\u6240\u6709\u540d\u4e3a <code>NAME</code> \u7684\u53d8\u91cf\u89c6\u4e3a\u59cb\u7ec8\u4e3a\u771f\uff08compile-time constants\uff09\u3002\u6b64\u9009\u9879\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u3002</p> <code>--always-false NAME</code> <p>\u8be5\u9009\u9879\u5c06\u628a\u6240\u6709\u540d\u4e3a <code>NAME</code> \u7684\u53d8\u91cf\u89c6\u4e3a\u59cb\u7ec8\u4e3a\u5047\uff08compile-time constants\uff09\u3002\u6b64\u9009\u9879\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u3002</p> <p>By default, mypy will assume that you intend to run your code using the same operating system and Python version you are using to run mypy itself. The following flags let you modify this behavior.</p> <p>For more information on how to use these flags, see Python version and system platform checks.</p> <code>--python-version X.Y</code> <p>This flag will make mypy type check your code as if it were run under Python version X.Y. Without this option, mypy will default to using whatever version of Python is running mypy.</p> <p>This flag will attempt to find a Python executable of the corresponding version to search for PEP 561 compliant packages. If you'd like to disable this, use the --no-site-packages flag (see import-discovery for more details).</p> <code>--platform PLATFORM</code> <p>This flag will make mypy type check your code as if it were run under the given operating system. Without this option, mypy will default to using whatever operating system you are currently using.</p> <p>The <code>PLATFORM</code> parameter may be any string supported by sys.platform.</p> <code>--always-true NAME</code> <p>This flag will treat all variables named <code>NAME</code> as compile-time constants that are always true.  This flag may be repeated.</p> <code>--always-false NAME</code> <p>This flag will treat all variables named <code>NAME</code> as compile-time constants that are always false.  This flag may be repeated.</p>"},{"location":"mypy_conf/command_line/#\u7981\u6b62\u52a8\u6001\u7c7b\u578b","title":"\u7981\u6b62\u52a8\u6001\u7c7b\u578b","text":"<p>Disallow dynamic typing</p> \u4e2d\u6587\u82f1\u6587 <p><code>Any</code> \u7c7b\u578b\u7528\u4e8e\u8868\u793a\u5177\u6709 \u52a8\u6001\u7c7b\u578b \u7684\u503c\u3002<code>--disallow-any</code> \u7cfb\u5217\u6807\u5fd7\u53ef\u4ee5\u7981\u6b62\u5728\u6a21\u5757\u4e2d\u4f7f\u7528 <code>Any</code> \u7c7b\u578b\uff0c\u8fd9\u6837\u53ef\u4ee5\u5728\u53d7\u63a7\u7684\u65b9\u5f0f\u4e0b\u6218\u7565\u6027\u5730\u7981\u7528\u52a8\u6001\u7c7b\u578b\u3002</p> <p>\u4ee5\u4e0b\u662f\u53ef\u7528\u7684\u9009\u9879\uff1a</p> <code>--disallow-any-unimported</code> <p>\u8be5\u9009\u9879\u7981\u6b62\u4f7f\u7528\u6765\u81ea\u672a\u8ddf\u968f\u5bfc\u5165\u7684\u7c7b\u578b\uff08\u8fd9\u4e9b\u7c7b\u578b\u4f1a\u88ab\u89c6\u4f5c <code>Any</code> \u7684\u522b\u540d\uff09\u3002\u672a\u8ddf\u968f\u7684\u5bfc\u5165\u53d1\u751f\u5728\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5\u4e4b\u4e00\uff1a\u5bfc\u5165\u7684\u6a21\u5757\u4e0d\u5b58\u5728\uff0c\u6216\u8005\u8bbe\u7f6e\u4e86 --follow-imports=skip\u3002</p> <code>--disallow-any-expr</code> <p>\u8be5\u9009\u9879\u7981\u6b62\u6a21\u5757\u4e2d\u6240\u6709\u7c7b\u578b\u4e3a <code>Any</code> \u7684\u8868\u8fbe\u5f0f\u3002\u5982\u679c\u6a21\u5757\u4e2d\u51fa\u73b0\u4e86\u7c7b\u578b\u4e3a <code>Any</code> \u7684\u8868\u8fbe\u5f0f\uff0c\u9664\u975e\u8be5\u8868\u8fbe\u5f0f\u7acb\u5373\u7528\u4f5c cast() \u7684\u53c2\u6570\u6216\u8d4b\u503c\u7ed9\u5177\u6709\u663e\u5f0f\u7c7b\u578b\u6ce8\u89e3\u7684\u53d8\u91cf\uff0c\u5426\u5219 mypy \u5c06\u8f93\u51fa\u9519\u8bef\u3002</p> <p>\u6b64\u5916\uff0c\u58f0\u660e <code>Any</code> \u7c7b\u578b\u7684\u53d8\u91cf\u6216\u5f3a\u5236\u8f6c\u6362\u4e3a <code>Any</code> \u7c7b\u578b\u4e5f\u662f\u4e0d\u5141\u8bb8\u7684\u3002\u8bf7\u6ce8\u610f\uff0c\u8c03\u7528\u63a5\u53d7 <code>Any</code> \u7c7b\u578b\u53c2\u6570\u7684\u51fd\u6570\u4ecd\u7136\u662f\u5141\u8bb8\u7684\u3002</p> <code>--disallow-any-decorated</code> <p>\u8be5\u9009\u9879\u7981\u6b62\u5728\u88c5\u9970\u5668\u8f6c\u6362\u540e\u5177\u6709 <code>Any</code> \u7c7b\u578b\u7684\u51fd\u6570\u3002</p> <code>--disallow-any-explicit</code> <p>\u8be5\u9009\u9879\u7981\u6b62\u5728\u7c7b\u578b\u6ce8\u89e3\u548c\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\u7b49\u7c7b\u578b\u4f4d\u7f6e\u4e0a\u663e\u5f0f\u4f7f\u7528 <code>Any</code>\u3002</p> <code>--disallow-any-generics</code> <p>\u8be5\u9009\u9879\u7981\u6b62\u4f7f\u7528\u672a\u6307\u5b9a\u663e\u5f0f\u7c7b\u578b\u53c2\u6570\u7684\u6cdb\u578b\u7c7b\u578b\u3002\u4f8b\u5982\uff0c\u4f60\u4e0d\u80fd\u4f7f\u7528\u88f8\u7684 <code>x: list</code>\uff0c\u800c\u5fc5\u987b\u59cb\u7ec8\u5199\u6210\u7c7b\u4f3c <code>x: list[int]</code> \u7684\u5f62\u5f0f\u3002</p> <code>--disallow-subclassing-any</code> <p>\u8be5\u9009\u9879\u62a5\u544a\u9519\u8bef\uff0c\u5f53\u4e00\u4e2a\u7c7b\u7ee7\u627f\u4e86\u7c7b\u578b\u4e3a <code>Any</code> \u7684\u503c\u65f6\u3002 \u8fd9\u53ef\u80fd\u53d1\u751f\u5728\u57fa\u7c7b\u4ece\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u6a21\u5757\u4e2d\u5bfc\u5165\uff08\u5f53\u4f7f\u7528 --ignore-missing-imports\uff09\u6216\u7531\u4e8e --follow-imports=skip \u6216 <code>import</code> \u8bed\u53e5\u4e0a\u7684 <code># type: ignore</code> \u6ce8\u91ca\u800c\u88ab\u5ffd\u7565\u65f6\u3002</p> <p>\u7531\u4e8e\u6a21\u5757\u88ab\u9759\u9ed8\u5904\u7406\uff0c\u5bfc\u5165\u7684\u7c7b\u88ab\u8d4b\u4e88 <code>Any</code> \u7c7b\u578b\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cmypy \u4f1a\u5047\u8bbe\u5b50\u7c7b\u6b63\u786e\u5730\u7ee7\u627f\u4e86\u57fa\u7c7b\uff0c\u5c3d\u7ba1\u5b9e\u9645\u60c5\u51b5\u53ef\u80fd\u5e76\u975e\u5982\u6b64\u3002\u6b64\u9009\u9879\u4f1a\u4f7f mypy \u62a5\u544a\u9519\u8bef\u3002</p> <p>The <code>Any</code> type is used to represent a value that has a dynamic type. The <code>--disallow-any</code> family of flags will disallow various uses of the <code>Any</code> type in a module -- this lets us strategically disallow the use of dynamic typing in a controlled way.</p> <p>The following options are available:</p> <code>--disallow-any-unimported</code> <p>This flag disallows usage of types that come from unfollowed imports (such types become aliases for <code>Any</code>). Unfollowed imports occur either when the imported module does not exist or when --follow-imports=skip is set.</p> <code>--disallow-any-expr</code> <p>This flag disallows all expressions in the module that have type <code>Any</code>. If an expression of type <code>Any</code> appears anywhere in the module mypy will output an error unless the expression is immediately used as an argument to cast() or assigned to a variable with an explicit type annotation.</p> <p>In addition, declaring a variable of type <code>Any</code> or casting to type <code>Any</code> is not allowed. Note that calling functions that take parameters of type <code>Any</code> is still allowed.</p> <code>--disallow-any-decorated</code> <p>This flag disallows functions that have <code>Any</code> in their signature after decorator transformation.</p> <code>--disallow-any-explicit</code> <p>This flag disallows explicit <code>Any</code> in type positions such as type annotations and generic type parameters.</p> <code>--disallow-any-generics</code> <p>This flag disallows usage of generic types that do not specify explicit type parameters. For example, you can't use a bare <code>x: list</code>. Instead, you must always write something like <code>x: list[int]</code>.</p> <code>--disallow-subclassing-any</code> <p>This flag reports an error whenever a class subclasses a value of type <code>Any</code>.  This may occur when the base class is imported from a module that doesn't exist (when using --ignore-missing-imports) or is ignored due to --follow-imports=skip or a <code># type: ignore</code> comment on the <code>import</code> statement.</p> <p>Since the module is silenced, the imported class is given a type of <code>Any</code>. By default mypy will assume that the subclass correctly inherited the base class even though that may not actually be the case.  This flag makes mypy raise an error instead.</p>"},{"location":"mypy_conf/command_line/#\u672a\u7c7b\u578b\u5316\u7684\u5b9a\u4e49\u4e0e\u8c03\u7528","title":"\u672a\u7c7b\u578b\u5316\u7684\u5b9a\u4e49\u4e0e\u8c03\u7528","text":"<p>Untyped definitions and calls</p> \u4e2d\u6587\u82f1\u6587 <p>\u4ee5\u4e0b\u6807\u5fd7\u7528\u4e8e\u914d\u7f6e mypy \u5904\u7406\u672a\u7c7b\u578b\u6ce8\u89e3\u7684\u51fd\u6570\u5b9a\u4e49\u6216\u8c03\u7528\u7684\u65b9\u5f0f\u3002</p> <code>--disallow-untyped-calls</code> <p>\u8be5\u6807\u5fd7\u5728\u51fd\u6570\u8c03\u7528\u65f6\uff0c\u5982\u679c\u8c03\u7528\u7684\u51fd\u6570\u6ca1\u6709\u7c7b\u578b\u6ce8\u89e3\uff0c\u5219\u4f1a\u62a5\u544a\u9519\u8bef\u3002\u6b64\u9009\u9879\u9002\u7528\u4e8e\u5177\u6709\u7c7b\u578b\u6ce8\u89e3\u7684\u51fd\u6570\u8c03\u7528\u672a\u6ce8\u89e3\u7684\u51fd\u6570\u3002</p> <code>--untyped-calls-exclude</code> <p>\u8be5\u6807\u5fd7\u5141\u8bb8\u9009\u62e9\u6027\u5730\u7981\u7528 --disallow-untyped-calls \u5bf9\u7279\u5b9a\u5305\u3001\u6a21\u5757\u6216\u7c7b\u4e2d\u5b9a\u4e49\u7684\u51fd\u6570\u548c\u65b9\u6cd5\u7684\u9650\u5236\u3002\u8bf7\u6ce8\u610f\uff0c\u6bcf\u4e2a\u6392\u9664\u6761\u76ee\u4f5c\u4e3a\u524d\u7f00\u8fdb\u884c\u5339\u914d\u3002\u4f8b\u5982\uff08\u5047\u8bbe\u6ca1\u6709\u53ef\u7528\u7684 <code>third_party_lib</code> \u7c7b\u578b\u6ce8\u89e3\uff09\uff1a</p> <pre><code># mypy --disallow-untyped-calls\n#      --untyped-calls-exclude=third_party_lib.module_a\n#      --untyped-calls-exclude=foo.A\nfrom third_party_lib.module_a import some_func\nfrom third_party_lib.module_b import other_func\nimport foo\n\nsome_func()  # OK, \u51fd\u6570\u6765\u81ea\u6a21\u5757 `third_party_lib.module_a`\nother_func()  # E: \u5728\u7c7b\u578b\u5316\u4e0a\u4e0b\u6587\u4e2d\u8c03\u7528\u672a\u6ce8\u89e3\u7684\u51fd\u6570 \"other_func\"\n\nfoo.A().meth()  # OK, \u65b9\u6cd5\u5b9a\u4e49\u5728\u7c7b `foo.A` \u4e2d\nfoo.B().meth()  # E: \u5728\u7c7b\u578b\u5316\u4e0a\u4e0b\u6587\u4e2d\u8c03\u7528\u672a\u6ce8\u89e3\u7684\u51fd\u6570 \"meth\"\n\n# \u6587\u4ef6 foo.py\nclass A:\n    def meth(self): pass\nclass B:\n    def meth(self): pass\n</code></pre> <code>--disallow-untyped-defs</code> <p>\u8be5\u6807\u5fd7\u5728\u9047\u5230\u672a\u6ce8\u89e3\u6216\u6ce8\u89e3\u4e0d\u5b8c\u6574\u7684\u51fd\u6570\u5b9a\u4e49\u65f6\u62a5\u544a\u9519\u8bef\u3002\u5b83\u662f --disallow-incomplete-defs \u7684\u8d85\u96c6\u3002</p> <p>\u4f8b\u5982\uff0c\u5b83\u4f1a\u5bf9 <code>def f(a, b)</code> \u548c <code>def f(a: int, b)</code> \u62a5\u544a\u9519\u8bef\u3002</p> <code>--disallow-incomplete-defs</code> <p>\u8be5\u6807\u5fd7\u5728\u9047\u5230\u90e8\u5206\u6ce8\u89e3\u7684\u51fd\u6570\u5b9a\u4e49\u65f6\u62a5\u544a\u9519\u8bef\uff0c\u4f46\u5141\u8bb8\u5b8c\u5168\u672a\u6ce8\u89e3\u7684\u5b9a\u4e49\u3002</p> <p>\u4f8b\u5982\uff0c\u5b83\u4f1a\u5bf9 <code>def f(a: int, b)</code> \u62a5\u544a\u9519\u8bef\uff0c\u4f46\u4e0d\u4f1a\u5bf9 <code>def f(a, b)</code> \u62a5\u544a\u9519\u8bef\u3002</p> <code>--check-untyped-defs</code> <p>\u8be5\u6807\u5fd7\u6bd4\u524d\u4e24\u4e2a\u9009\u9879\u7684\u9650\u5236\u5bbd\u677e -- \u5b83\u4f1a\u5bf9\u6bcf\u4e2a\u51fd\u6570\u7684\u4e3b\u4f53\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\uff0c\u65e0\u8bba\u51fd\u6570\u662f\u5426\u5177\u6709\u7c7b\u578b\u6ce8\u89e3\u3002\uff08\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u672a\u6ce8\u89e3\u7684\u51fd\u6570\u4e3b\u4f53\u4e0d\u4f1a\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u3002\uff09</p> <p>\u5b83\u4f1a\u5047\u8bbe\u6240\u6709\u53c2\u6570\u7684\u7c7b\u578b\u4e3a <code>Any</code>\uff0c\u5e76\u4e14\u59cb\u7ec8\u63a8\u65ad\u8fd4\u56de\u7c7b\u578b\u4e3a <code>Any</code>\u3002</p> <code>--disallow-untyped-decorators</code> <p>\u8be5\u6807\u5fd7\u5728\u5177\u6709\u7c7b\u578b\u6ce8\u89e3\u7684\u51fd\u6570\u88ab\u672a\u6ce8\u89e3\u7684\u88c5\u9970\u5668\u88c5\u9970\u65f6\u62a5\u544a\u9519\u8bef\u3002</p> <p>The following flags configure how mypy handles untyped function definitions or calls.</p> <code>--disallow-untyped-calls</code> <p>This flag reports an error whenever a function with type annotations calls a function defined without annotations.</p> <code>--untyped-calls-exclude</code> <p>This flag allows to selectively disable --disallow-untyped-calls for functions and methods defined in specific packages, modules, or classes. Note that each exclude entry acts as a prefix. For example (assuming there are no type annotations for <code>third_party_lib</code> available):</p> <pre><code># mypy --disallow-untyped-calls\n#      --untyped-calls-exclude=third_party_lib.module_a\n#      --untyped-calls-exclude=foo.A\nfrom third_party_lib.module_a import some_func\nfrom third_party_lib.module_b import other_func\nimport foo\n\nsome_func()  # OK, function comes from module `third_party_lib.module_a`\nother_func()  # E: Call to untyped function \"other_func\" in typed context\n\nfoo.A().meth()  # OK, method was defined in class `foo.A`\nfoo.B().meth()  # E: Call to untyped function \"meth\" in typed context\n\n# file foo.py\nclass A:\n    def meth(self): pass\nclass B:\n    def meth(self): pass\n</code></pre> <code>--disallow-untyped-defs</code> <p>This flag reports an error whenever it encounters a function definition without type annotations or with incomplete type annotations. (a superset of --disallow-incomplete-defs).</p> <p>For example, it would report an error for <code>def f(a, b)</code> and <code>def f(a: int, b)</code>.</p> <code>--disallow-incomplete-defs</code> <p>This flag reports an error whenever it encounters a partly annotated function definition, while still allowing entirely unannotated definitions.</p> <p>For example, it would report an error for <code>def f(a: int, b)</code> but not <code>def f(a, b)</code>.</p> <code>--check-untyped-defs</code> <p>This flag is less severe than the previous two options -- it type checks the body of every function, regardless of whether it has type annotations. (By default the bodies of functions without annotations are not type checked.)</p> <p>It will assume all arguments have type <code>Any</code> and always infer <code>Any</code> as the return type.</p> <code>--disallow-untyped-decorators</code> <p>This flag reports an error whenever a function with type annotations is decorated with a decorator without annotations.</p>"},{"location":"mypy_conf/command_line/#none-\u548c-optional-\u7684\u5904\u7406","title":"None \u548c Optional \u7684\u5904\u7406","text":"<p>None and Optional handling</p> \u4e2d\u6587\u82f1\u6587 <p>\u4ee5\u4e0b\u6807\u5fd7\u8c03\u6574 mypy \u5904\u7406\u7c7b\u578b\u4e3a <code>None</code> \u7684\u503c\u7684\u65b9\u5f0f\u3002</p> <code>--implicit-optional</code> <p>\u8be5\u6807\u5fd7\u4f7f mypy \u5c06\u5177\u6709 <code>None</code> \u9ed8\u8ba4\u503c\u7684\u53c2\u6570\u89c6\u4e3a\u5177\u6709\u9690\u5f0f\u7684 Optional \u7c7b\u578b\u3002</p> <p>\u4f8b\u5982\uff0c\u5982\u679c\u8bbe\u7f6e\u4e86\u6b64\u6807\u5fd7\uff0c\u5219\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u7247\u6bb5\u4e2d\uff0cmypy \u5c06\u5047\u8bbe <code>x</code> \u53c2\u6570\u5b9e\u9645\u4e0a\u662f <code>Optional[int]</code> \u7c7b\u578b\uff0c\u56e0\u4e3a\u9ed8\u8ba4\u53c2\u6570\u662f <code>None</code>\uff1a</p> <pre><code>def foo(x: int = None) -&gt; None:\n    print(x)\n</code></pre> <p>\u6ce8\u610f\uff1a \u4ece mypy 0.980 \u5f00\u59cb\uff0c\u6b64\u529f\u80fd\u9ed8\u8ba4\u88ab\u7981\u7528\u3002</p> <code>--no-strict-optional</code> <p>\u8be5\u6807\u5fd7\u6709\u6548\u5730\u7981\u7528\u5bf9 Optional \u7c7b\u578b\u548c <code>None</code> \u503c\u7684\u68c0\u67e5\u3002\u542f\u7528\u6b64\u9009\u9879\u540e\uff0cmypy \u901a\u5e38\u4e0d\u4f1a\u68c0\u67e5 <code>None</code> \u503c\u7684\u4f7f\u7528 -- \u5b83\u88ab\u89c6\u4e3a\u4e0e\u6240\u6709\u7c7b\u578b\u517c\u5bb9\u3002</p> <p>Warning</p> <p><code>--no-strict-optional</code> \u662f\u4e0d\u63a8\u8350\u7684\u3002\u907f\u514d\u4f7f\u7528\u6b64\u9009\u9879\uff0c\u5e76\u4e14\u5728\u4e0d\u4e86\u89e3\u5176\u4f5c\u7528\u7684\u60c5\u51b5\u4e0b\u7edd\u5bf9\u4e0d\u8981\u4f7f\u7528\u5b83\u3002</p> <p>The following flags adjust how mypy handles values of type <code>None</code>.</p> <code>--implicit-optional</code> <p>This flag causes mypy to treat arguments with a <code>None</code> default value as having an implicit Optional type.</p> <p>For example, if this flag is set, mypy would assume that the <code>x</code> parameter is actually of type <code>Optional[int]</code> in the code snippet below since the default parameter is <code>None</code>:</p> <pre><code>def foo(x: int = None) -&gt; None:\n    print(x)\n</code></pre> <p>Note: This was disabled by default starting in mypy 0.980.</p> <code>--no-strict-optional</code> <p>This flag effectively disables checking of Optional types and <code>None</code> values. With this option, mypy doesn't generally check the use of <code>None</code> values -- it is treated as compatible with every type.</p> <p>Warning</p> <p><code>--no-strict-optional</code> is evil. Avoid using it and definitely do not use it without understanding what it does.</p>"},{"location":"mypy_conf/command_line/#\u914d\u7f6e\u8b66\u544awarnings","title":"\u914d\u7f6e\u8b66\u544a(warnings)","text":"<p>Configuring warnings</p> \u4e2d\u6587\u82f1\u6587 <p>\u4ee5\u4e0b\u6807\u5fd7\u7528\u4e8e\u542f\u7528\u5bf9\u4ee3\u7801\u7684\u8b66\u544a\uff0c\u8fd9\u4e9b\u4ee3\u7801\u5728\u8bed\u4e49\u4e0a\u662f\u6b63\u786e\u7684\uff0c\u4f46\u53ef\u80fd\u5b58\u5728\u6f5c\u5728\u95ee\u9898\u6216\u5197\u4f59\u3002</p> <code>--warn-redundant-casts</code> <p>\u8be5\u6807\u5fd7\u4f7f mypy \u5728\u4ee3\u7801\u4e2d\u4f7f\u7528\u4e86\u4e0d\u5fc5\u8981\u7684\u7c7b\u578b\u8f6c\u6362\u65f6\u62a5\u544a\u9519\u8bef\uff0c\u8fd9\u4e9b\u8f6c\u6362\u53ef\u4ee5\u5b89\u5168\u5730\u79fb\u9664\u3002</p> <code>--warn-unused-ignores</code> <p>\u8be5\u6807\u5fd7\u4f7f mypy \u5728\u4ee3\u7801\u4e2d\u4f7f\u7528\u4e86 <code># type: ignore</code> \u6ce8\u91ca\u7684\u884c\u6ca1\u6709\u5b9e\u9645\u751f\u6210\u9519\u8bef\u6d88\u606f\u65f6\u62a5\u544a\u9519\u8bef\u3002</p> <p>\u8be5\u6807\u5fd7\u548c --warn-redundant-casts \u6807\u5fd7\u5728\u5347\u7ea7 mypy \u65f6\u7279\u522b\u6709\u7528\u3002\u4e4b\u524d\uff0c\u53ef\u80fd\u9700\u8981\u6dfb\u52a0\u7c7b\u578b\u8f6c\u6362\u6216 <code># type: ignore</code> \u6ce8\u91ca\u6765\u7ed5\u8fc7 mypy \u4e2d\u7684\u9519\u8bef\u6216\u7f3a\u5c11\u7b2c\u4e09\u65b9\u5e93\u7684\u7c7b\u578b\u5b58\u6839\u3002</p> <p>\u8fd9\u4e24\u4e2a\u6807\u5fd7\u5e2e\u52a9\u60a8\u53d1\u73b0\u90a3\u4e9b\u4e0d\u518d\u9700\u8981\u7684\u4fee\u590d\u65b9\u6cd5\u3002</p> <code>--no-warn-no-return</code> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5f53\u51fd\u6570\u5728\u67d0\u4e9b\u6267\u884c\u8def\u5f84\u4e2d\u7f3a\u5c11\u8fd4\u56de\u8bed\u53e5\u65f6\uff0cmypy \u4f1a\u751f\u6210\u9519\u8bef\u3002\u552f\u4e00\u7684\u4f8b\u5916\u662f\uff1a</p> <ul> <li>\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u4e3a <code>None</code> \u6216 <code>Any</code></li> <li>\u51fd\u6570\u7684\u4e3b\u4f53\u4e3a\u7a7a\uff0c\u5e76\u4e14\u6807\u8bb0\u4e3a\u62bd\u8c61\u65b9\u6cd5\u3001\u5728\u534f\u8bae\u7c7b\u4e2d\u6216\u5728\u5b58\u6839\u6587\u4ef6\u4e2d</li> <li>\u6267\u884c\u8def\u5f84\u6c38\u8fdc\u4e0d\u4f1a\u8fd4\u56de\uff0c\u4f8b\u5982\u603b\u662f\u629b\u51fa\u5f02\u5e38</li> </ul> <p>\u4f7f\u7528 --no-warn-no-return \u9009\u9879\u5c06\u7981\u7528\u6240\u6709\u60c5\u51b5\u4e0b\u7684\u8fd9\u4e9b\u9519\u8bef\u6d88\u606f\u3002</p> <code>--warn-return-any</code> <p>\u8be5\u6807\u5fd7\u4f7f mypy \u5728\u4ece\u4e00\u4e2a\u58f0\u660e\u4e86\u975e <code>Any</code> \u8fd4\u56de\u7c7b\u578b\u7684\u51fd\u6570\u4e2d\u8fd4\u56de\u7c7b\u578b\u4e3a <code>Any</code> \u7684\u503c\u65f6\u751f\u6210\u8b66\u544a\u3002</p> <code>--warn-unreachable</code> <p>\u8be5\u6807\u5fd7\u4f7f mypy \u5728\u6267\u884c\u7c7b\u578b\u5206\u6790\u540e\u9047\u5230\u88ab\u786e\u5b9a\u4e3a\u4e0d\u53ef\u8fbe\u6216\u5197\u4f59\u7684\u4ee3\u7801\u65f6\u62a5\u544a\u9519\u8bef\u3002\u8fd9\u662f\u68c0\u6d4b\u4ee3\u7801\u4e2d\u67d0\u4e9b\u7c7b\u578b\u9519\u8bef\u7684\u6709\u7528\u65b9\u6cd5\u3002</p> <p>\u4f8b\u5982\uff0c\u542f\u7528\u6b64\u6807\u5fd7\u5c06\u4f7f mypy \u62a5\u544a <code>x &gt; 7</code> \u68c0\u67e5\u662f\u5197\u4f59\u7684\uff0c\u5e76\u4e14\u4ee5\u4e0b\u7684 <code>else</code> \u5757\u662f\u4e0d\u53ef\u8fbe\u7684\u3002</p> <pre><code>def process(x: int) -&gt; None:\n    # \u9519\u8bef: \"or\" \u7684\u53f3\u64cd\u4f5c\u6570\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u8bc4\u4f30\n    if isinstance(x, int) or x &gt; 7:\n        # \u9519\u8bef: \u4e0d\u652f\u6301\u7684\u64cd\u4f5c\u6570\u7c7b\u578b for + (\"int\" \u548c \"str\")\n        print(x + \"bad\")\n    else:\n        # \u9519\u8bef: '\u8bed\u53e5\u4e0d\u53ef\u8fbe' \u9519\u8bef\n        print(x + \"bad\")\n</code></pre> <p>\u4e3a\u4e86\u5e2e\u52a9\u9632\u6b62 mypy \u751f\u6210\u865a\u5047\u7684\u8b66\u544a\uff0c\u201c\u8bed\u53e5\u4e0d\u53ef\u8fbe\u201d\u8b66\u544a\u5c06\u5728\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5\u4e0b\u88ab\u9759\u9ed8\uff1a</p> <ol> <li>\u5f53\u4e0d\u53ef\u8fbe\u7684\u8bed\u53e5\u662f <code>raise</code> \u8bed\u53e5\u3001<code>assert False</code> \u8bed\u53e5\uff0c\u6216\u8c03\u7528\u5177\u6709 NoReturn \u8fd4\u56de\u7c7b\u578b\u63d0\u793a\u7684\u51fd\u6570\u65f6\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5f53\u4e0d\u53ef\u8fbe\u7684\u8bed\u53e5\u629b\u51fa\u9519\u8bef\u6216\u4ee5\u67d0\u79cd\u65b9\u5f0f\u7ec8\u6b62\u7a0b\u5e8f\u65f6\u3002</li> <li>\u5f53\u4e0d\u53ef\u8fbe\u7684\u8bed\u53e5\u88ab \u6545\u610f \u6807\u8bb0\u4e3a\u4e0d\u53ef\u8fbe\u65f6\uff0c\u4f7f\u7528 Python \u7248\u672c\u548c\u7cfb\u7edf\u5e73\u53f0\u68c0\u67e5\u3002</li> </ol> <p>Note</p> <p>\u76ee\u524d mypy \u65e0\u6cd5\u68c0\u6d4b\u548c\u62a5\u544a\u4f7f\u7528 \u503c\u9650\u5236\u7684\u7c7b\u578b\u53d8\u91cf \u7684\u4efb\u4f55\u51fd\u6570\u5185\u90e8\u7684\u4e0d\u53ef\u8fbe\u6216\u5197\u4f59\u4ee3\u7801\u3002</p> <p>\u8fd9\u79cd\u9650\u5236\u5c06\u5728 future \u7248\u672c\u7684 mypy \u4e2d\u79fb\u9664\u3002</p> <p>The following flags enable warnings for code that is sound but is potentially problematic or redundant in some way.</p> <code>--warn-redundant-casts</code> <p>This flag will make mypy report an error whenever your code uses an unnecessary cast that can safely be removed.</p> <code>--warn-unused-ignores</code> <p>This flag will make mypy report an error whenever your code uses a <code># type: ignore</code> comment on a line that is not actually generating an error message.</p> <p>This flag, along with the --warn-redundant-casts flag, are both particularly useful when you are upgrading mypy. Previously, you may have needed to add casts or <code># type: ignore</code> annotations to work around bugs in mypy or missing stubs for 3<sup>rd</sup> party libraries.</p> <p>These two flags let you discover cases where either workarounds are no longer necessary.</p> <code>--no-warn-no-return</code> <p>By default, mypy will generate errors when a function is missing return statements in some execution paths. The only exceptions are when:</p> <ul> <li>The function has a <code>None</code> or <code>Any</code> return type</li> <li>The function has an empty body and is marked as an abstract method, is in a protocol class, or is in a stub file</li> <li>The execution path can never return; for example, if an exception is always raised</li> </ul> <p>Passing in --no-warn-no-return will disable these error messages in all cases.</p> <code>--warn-return-any</code> <p>This flag causes mypy to generate a warning when returning a value with type <code>Any</code> from a function declared with a non-<code>Any</code> return type.</p> <code>--warn-unreachable</code> <p>This flag will make mypy report an error whenever it encounters code determined to be unreachable or redundant after performing type analysis. This can be a helpful way of detecting certain kinds of bugs in your code.</p> <p>For example, enabling this flag will make mypy report that the <code>x &gt; 7</code> check is redundant and that the <code>else</code> block below is unreachable.</p> <pre><code>def process(x: int) -&gt; None:\n    # Error: Right operand of \"or\" is never evaluated\n    if isinstance(x, int) or x &gt; 7:\n        # Error: Unsupported operand types for + (\"int\" and \"str\")\n        print(x + \"bad\")\n    else:\n        # Error: 'Statement is unreachable' error\n        print(x + \"bad\")\n</code></pre> <p>To help prevent mypy from generating spurious warnings, the \"Statement is unreachable\" warning will be silenced in exactly two cases:</p> <ol> <li>When the unreachable statement is a <code>raise</code> statement, is an <code>assert False</code> statement, or calls a function that has the NoReturn return type hint. In other words, when the unreachable statement throws an error or terminates the program in some way.</li> <li>When the unreachable statement was intentionally marked as unreachable using Python version and system platform checks.</li> </ol> <p>Note</p> <p>Mypy currently cannot detect and report unreachable or redundant code inside any functions using  Type variables with value restriction.</p> <p>This limitation will be removed in future releases of mypy.</p>"},{"location":"mypy_conf/command_line/#\u5176\u4ed6\u4e25\u683c\u6027\u6807\u5fd7","title":"\u5176\u4ed6\u4e25\u683c\u6027\u6807\u5fd7","text":"<p>Miscellaneous strictness flags</p> \u4e2d\u6587\u82f1\u6587 <p>\u4ee5\u4e0b\u6807\u5fd7\u7528\u4e8e\u914d\u7f6e mypy \u5904\u7406\u4e0d\u7b26\u5408\u4e0a\u8ff0\u4efb\u4f55\u90e8\u5206\u7684\u60c5\u51b5\u3002</p> <code>--allow-untyped-globals</code> <p>\u8be5\u6807\u5fd7\u4f7f mypy \u6291\u5236\u56e0\u65e0\u6cd5\u5b8c\u5168\u63a8\u65ad\u5168\u5c40\u548c\u7c7b\u53d8\u91cf\u7c7b\u578b\u800c\u4ea7\u751f\u7684\u9519\u8bef\u3002</p> <code>--allow-redefinition</code> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cmypy \u4e0d\u5141\u8bb8\u5c06\u53d8\u91cf\u91cd\u65b0\u5b9a\u4e49\u4e3a\u4e0d\u76f8\u5173\u7684\u7c7b\u578b\u3002\u6b64\u6807\u5fd7\u542f\u7528\u5728\u67d0\u4e9b\u4e0a\u4e0b\u6587\u4e2d\u91cd\u65b0\u5b9a\u4e49\u53d8\u91cf\u4e3a\u4efb\u610f\u7c7b\u578b\uff1a\u4ec5\u5141\u8bb8\u5728\u4e0e\u539f\u59cb\u5b9a\u4e49\u76f8\u540c\u7684\u5757\u548c\u5d4c\u5957\u6df1\u5ea6\u5185\u7684\u91cd\u65b0\u5b9a\u4e49\u3002\u4f8b\u5982\uff0c\u4ee5\u4e0b\u4ee3\u7801\u53ef\u80fd\u4f1a\u6709\u6240\u5e2e\u52a9\uff1a</p> <pre><code>def process(items: list[str]) -&gt; None:\n    # 'items' \u7684\u7c7b\u578b\u662f list[str]\n    items = [item.split() for item in items]\n    # \u73b0\u5728 'items' \u7684\u7c7b\u578b\u662f list[list[str]]\n</code></pre> <p>\u53d8\u91cf\u5fc5\u987b\u5728\u91cd\u65b0\u5b9a\u4e49\u4e4b\u524d\u88ab\u4f7f\u7528\uff1a</p> <pre><code>def process(items: list[str]) -&gt; None:\n    items = \"mypy\"  # \u65e0\u6548\u7684\u91cd\u65b0\u5b9a\u4e49\u4e3a str\uff0c\u56e0\u4e3a\u53d8\u91cf\u5c1a\u672a\u4f7f\u7528\n    print(items)\n    items = \"100\"  # \u6709\u6548\uff0citems \u73b0\u5728\u662f str \u7c7b\u578b\n    items = int(items)  # \u6709\u6548\uff0citems \u73b0\u5728\u662f int \u7c7b\u578b\n</code></pre> <code>--local-partial-types</code> <p>\u5728 mypy \u4e2d\uff0c\u6700\u5e38\u89c1\u7684\u90e8\u5206\u7c7b\u578b\u60c5\u51b5\u662f\u4f7f\u7528 <code>None</code> \u521d\u59cb\u5316\u7684\u53d8\u91cf\uff0c\u4f46\u6ca1\u6709\u663e\u5f0f\u7684 <code>Optional</code> \u6ce8\u89e3\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cmypy \u4e0d\u4f1a\u68c0\u67e5\u8de8\u6a21\u5757\u9876\u5c42\u6216\u7c7b\u9876\u5c42\u7684\u90e8\u5206\u7c7b\u578b\u3002\u6b64\u6807\u5fd7\u66f4\u6539\u4e86\u884c\u4e3a\uff0c\u53ea\u5141\u8bb8\u5728\u5c40\u90e8\u7ea7\u522b\u8fdb\u884c\u90e8\u5206\u7c7b\u578b\uff0c\u56e0\u6b64\u4e0d\u5141\u8bb8\u5728\u4e0d\u540c\u4f5c\u7528\u57df\u4e2d\u7684\u4e24\u4e2a\u8d4b\u503c\u63a8\u65ad\u53d8\u91cf\u7c7b\u578b\u3002\u4f8b\u5982\uff1a</p> <pre><code>from typing import Optional\n\na = None  # \u5982\u679c\u4f7f\u7528 --local-partial-types\uff0c\u8fd9\u91cc\u9700\u8981\u7c7b\u578b\u6ce8\u89e3\nb: Optional[int] = None\n\nclass Foo:\n    bar = None  # \u5982\u679c\u4f7f\u7528 --local-partial-types\uff0c\u8fd9\u91cc\u9700\u8981\u7c7b\u578b\u6ce8\u89e3\n    baz: Optional[int] = None\n\n    def __init__(self) -&gt; None:\n        self.bar = 1\n\nreveal_type(Foo().bar)  # \u5982\u679c\u6ca1\u6709 --local-partial-types\uff0c\u4f1a\u662f Union[int, None]\n</code></pre> <p>\u6ce8\u610f\uff1a\u6b64\u9009\u9879\u5728 mypy \u5b88\u62a4\u8fdb\u7a0b\u4e2d\u59cb\u7ec8\u9690\u5f0f\u542f\u7528\uff0c\u5e76\u4e14\u5c06\u5728\u672a\u6765\u7684 mypy \u7248\u672c\u4e2d\u9ed8\u8ba4\u542f\u7528\u3002</p> <code>--no-implicit-reexport</code> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5bfc\u5165\u5230\u6a21\u5757\u7684\u503c\u88ab\u89c6\u4e3a\u5df2\u5bfc\u51fa\uff0cmypy \u5141\u8bb8\u5176\u4ed6\u6a21\u5757\u5bfc\u5165\u5b83\u4eec\u3002\u6b64\u6807\u5fd7\u66f4\u6539\u4e86\u884c\u4e3a\uff0c\u53ea\u6709\u5f53\u9879\u76ee\u4f7f\u7528 <code>from-as</code> \u5bfc\u5165\u6216\u5305\u542b\u5728 <code>__all__</code> \u4e2d\u65f6\u624d\u4f1a\u91cd\u65b0\u5bfc\u51fa\u3002\u6ce8\u610f\uff0c\u8fd9\u5728\u5b58\u6839\u6587\u4ef6\u4e2d\u59cb\u7ec8\u88ab\u89c6\u4e3a\u542f\u7528\u3002\u4f8b\u5982\uff1a</p> <pre><code># \u8fd9\u4e0d\u4f1a\u91cd\u65b0\u5bfc\u51fa\u503c\nfrom foo import bar\n\n# \u8fd9\u4e5f\u4e0d\u4f1a\nfrom foo import bar as bang\n\n# \u8fd9\u5c06\u91cd\u65b0\u5bfc\u51fa\u4e3a bar \u5e76\u5141\u8bb8\u5176\u4ed6\u6a21\u5757\u5bfc\u5165\nfrom foo import bar as bar\n\n# \u8fd9\u4e5f\u5c06\u91cd\u65b0\u5bfc\u51fa bar\nfrom foo import bar\n__all__ = ['bar']\n</code></pre> <code>--strict-equality</code> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cmypy \u5141\u8bb8\u50cf <code>42 == 'no'</code> \u8fd9\u6837\u7684\u6c38\u8fdc\u4e3a\u5047\u7684\u6bd4\u8f83\u3002\u4f7f\u7528\u6b64\u6807\u5fd7\u53ef\u4ee5\u7981\u6b62\u8fd9\u79cd\u975e\u91cd\u53e0\u7c7b\u578b\u7684\u6bd4\u8f83\uff0c\u4ee5\u53ca\u7c7b\u4f3c\u7684\u8eab\u4efd\u548c\u5bb9\u5668\u68c0\u67e5\uff1a</p> <pre><code>from typing import Text\n\nitems: list[int]\nif 'some string' in items:  # \u9519\u8bef: \u975e\u91cd\u53e0\u5bb9\u5668\u68c0\u67e5\uff01\n    ...\n\ntext: Text\nif text != b'other bytes':  # \u9519\u8bef: \u975e\u91cd\u53e0\u7b49\u4e8e\u68c0\u67e5\uff01\n    ...\n\nassert text is not None  # OK\uff0c\u68c0\u67e5 None \u662f\u5141\u8bb8\u7684\u7279\u4f8b\u3002\n</code></pre> <code>--extra-checks</code> <p>\u8be5\u6807\u5fd7\u542f\u7528\u989d\u5916\u7684\u68c0\u67e5\uff0c\u8fd9\u4e9b\u68c0\u67e5\u5728\u6280\u672f\u4e0a\u662f\u6b63\u786e\u7684\uff0c\u4f46\u5728\u5b9e\u9645\u4ee3\u7801\u4e2d\u53ef\u80fd\u4e0d\u592a\u5b9e\u7528\u3002\u7279\u522b\u5730\uff0c\u5b83\u7981\u6b62 <code>TypedDict</code> \u66f4\u65b0\u4e2d\u7684\u90e8\u5206\u91cd\u53e0\uff0c\u5e76\u4f7f\u901a\u8fc7 <code>Concatenate</code> \u4f20\u9012\u7684\u53c2\u6570\u4ec5\u9650\u4e8e\u4f4d\u7f6e\u53c2\u6570\u3002\u4f8b\u5982\uff1a</p> <pre><code>from typing import TypedDict\n\nclass Foo(TypedDict):\n    a: int\n\nclass Bar(TypedDict):\n    a: int\n    b: int\n\ndef test(foo: Foo, bar: Bar) -&gt; None:\n    # \u8fd9\u5728\u6280\u672f\u4e0a\u662f\u4e0d\u5b89\u5168\u7684\uff0c\u56e0\u4e3a foo \u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u5177\u6709 Foo \u7684\u5b50\u7c7b\u578b\uff0c\n    # \u5176\u4e2d\u952e \"b\" \u7684\u7c7b\u578b\u4e0e int \u4e0d\u517c\u5bb9\uff0c\u5982\u4e0b\u6240\u793a\n    bar.update(foo)\n\nclass Bad(Foo):\n    b: str\nbad: Bad = {\"a\": 0, \"b\": \"no\"}\ntest(bad, bar)\n</code></pre> <code>--strict</code> <p>\u6b64\u6807\u5fd7\u6a21\u5f0f\u542f\u7528\u6240\u6709\u53ef\u9009\u9519\u8bef\u68c0\u67e5\u6807\u5fd7\u3002\u60a8\u53ef\u4ee5\u5728\u5b8c\u6574\u7684 mypy --help \u8f93\u51fa\u4e2d\u67e5\u770b\u4e25\u683c\u6a21\u5f0f\u542f\u7528\u7684\u6807\u5fd7\u5217\u8868\u3002</p> <p>\u6ce8\u610f\uff1a\u8fd0\u884c --strict \u542f\u7528\u7684\u6807\u5fd7\u7684\u786e\u5207\u5217\u8868\u53ef\u80fd\u4f1a\u968f\u7740\u65f6\u95f4\u800c\u53d8\u5316\u3002</p> <code>--disable-error-code</code> <p>\u8be5\u6807\u5fd7\u5141\u8bb8\u5168\u5c40\u7981\u7528\u4e00\u4e2a\u6216\u591a\u4e2a\u9519\u8bef\u4ee3\u7801\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 \u9519\u8bef\u4ee3\u7801\u3002</p> <pre><code># \u65e0\u6807\u5fd7\nx = 'a string'\nx.trim()  # \u9519\u8bef: \"str\" \u6ca1\u6709\u5c5e\u6027 \"trim\"  [attr-defined]\n\n# \u4f7f\u7528 --disable-error-code attr-defined\nx = 'a string'\nx.trim()\n</code></pre> <code>--enable-error-code</code> <p>\u8be5\u6807\u5fd7\u5141\u8bb8\u5168\u5c40\u542f\u7528\u4e00\u4e2a\u6216\u591a\u4e2a\u9519\u8bef\u4ee3\u7801\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 \u9519\u8bef\u4ee3\u7801\u3002</p> <p>\u6ce8\u610f\uff1a\u6b64\u6807\u5fd7\u5c06\u8986\u76d6 --disable-error-code \u6807\u5fd7\u4e2d\u7981\u7528\u7684\u9519\u8bef\u4ee3\u7801\u3002</p> <pre><code># \u4f7f\u7528 --disable-error-code attr-defined\nx = 'a string'\nx.trim()\n\n# --disable-error-code attr-defined --enable-error-code attr-defined\nx = 'a string'\nx.trim()  # \u9519\u8bef: \"str\" \u6ca1\u6709\u5c5e\u6027 \"trim\"  [attr-defined]\n</code></pre> <p>This section documents any other flags that do not neatly fall under any of the above sections.</p> <code>--allow-untyped-globals</code> <p>This flag causes mypy to suppress errors caused by not being able to fully infer the types of global and class variables.</p> <code>--allow-redefinition</code> <p>By default, mypy won't allow a variable to be redefined with an unrelated type. This flag enables redefinition of a variable with an arbitrary type in some contexts: only redefinitions within the same block and nesting depth as the original definition are allowed. Example where this can be useful:</p> <pre><code>def process(items: list[str]) -&gt; None:\n    # 'items' has type list[str]\n    items = [item.split() for item in items]\n    # 'items' now has type list[list[str]]\n</code></pre> <p>The variable must be used before it can be redefined:</p> <pre><code>def process(items: list[str]) -&gt; None:\n    items = \"mypy\"  # invalid redefinition to str because the variable hasn't been used yet\n    print(items)\n    items = \"100\"  # valid, items now has type str\n    items = int(items)  # valid, items now has type int\n</code></pre> <code>--local-partial-types</code> <p>In mypy, the most common cases for partial types are variables initialized using <code>None</code>, but without explicit <code>Optional</code> annotations. By default, mypy won't check partial types spanning module top level or class top level. This flag changes the behavior to only allow partial types at local level, therefore it disallows inferring variable type for <code>None</code> from two assignments in different scopes. For example:</p> <pre><code>from typing import Optional\n\na = None  # Need type annotation here if using --local-partial-types\nb: Optional[int] = None\n\nclass Foo:\n    bar = None  # Need type annotation here if using --local-partial-types\n    baz: Optional[int] = None\n\n    def __init__(self) -&gt; None:\n        self.bar = 1\n\nreveal_type(Foo().bar)  # Union[int, None] without --local-partial-types\n</code></pre> <p>Note: this option is always implicitly enabled in mypy daemon and will become enabled by default for mypy in a future release.</p> <code>--no-implicit-reexport</code> <p>By default, imported values to a module are treated as exported and mypy allows other modules to import them. This flag changes the behavior to not re-export unless the item is imported using from-as or is included in <code>__all__</code>. Note this is always treated as enabled for stub files. For example:</p> <pre><code># This won't re-export the value\nfrom foo import bar\n\n# Neither will this\nfrom foo import bar as bang\n\n# This will re-export it as bar and allow other modules to import it\nfrom foo import bar as bar\n\n# This will also re-export bar\nfrom foo import bar\n__all__ = ['bar']\n</code></pre> <code>--strict-equality</code> <p>By default, mypy allows always-false comparisons like <code>42 == 'no'</code>. Use this flag to prohibit such comparisons of non-overlapping types, and similar identity and container checks:</p> <pre><code>from typing import Text\n\nitems: list[int]\nif 'some string' in items:  # Error: non-overlapping container check!\n    ...\n\ntext: Text\nif text != b'other bytes':  # Error: non-overlapping equality check!\n    ...\n\nassert text is not None  # OK, check against None is allowed as a special case.\n</code></pre> <code>--extra-checks</code> <p>This flag enables additional checks that are technically correct but may be impractical in real code. In particular, it prohibits partial overlap in <code>TypedDict</code> updates, and makes arguments prepended via <code>Concatenate</code> positional-only. For example:</p> <pre><code>from typing import TypedDict\n\nclass Foo(TypedDict):\n    a: int\n\nclass Bar(TypedDict):\n    a: int\n    b: int\n\ndef test(foo: Foo, bar: Bar) -&gt; None:\n    # This is technically unsafe since foo can have a subtype of Foo at\n    # runtime, where type of key \"b\" is incompatible with int, see below\n    bar.update(foo)\n\nclass Bad(Foo):\n    b: str\nbad: Bad = {\"a\": 0, \"b\": \"no\"}\ntest(bad, bar)\n</code></pre> <code>--strict</code> <p>This flag mode enables all optional error checking flags.  You can see the list of flags enabled by strict mode in the full mypy --help output.</p> <p>Note: the exact list of flags enabled by running --strict may change over time.</p> <code>--disable-error-code</code> <p>This flag allows disabling one or multiple error codes globally. See Error codes for more information.</p> <pre><code># no flag\nx = 'a string'\nx.trim()  # error: \"str\" has no attribute \"trim\"  [attr-defined]\n\n# When using --disable-error-code attr-defined\nx = 'a string'\nx.trim()\n</code></pre> <code>--enable-error-code</code> <p>This flag allows enabling one or multiple error codes globally. See Error codes for more information.</p> <p>Note: This flag will override disabled error codes from the --disable-error-code flag.</p> <pre><code># When using --disable-error-code attr-defined\nx = 'a string'\nx.trim()\n\n# --disable-error-code attr-defined --enable-error-code attr-defined\nx = 'a string'\nx.trim()  # error: \"str\" has no attribute \"trim\"  [attr-defined]\n</code></pre>"},{"location":"mypy_conf/command_line/#\u914d\u7f6e\u9519\u8bef\u6d88\u606f","title":"\u914d\u7f6e\u9519\u8bef\u6d88\u606f","text":"<p>Configuring error messages</p> \u4e2d\u6587\u82f1\u6587 <p>\u4ee5\u4e0b\u6807\u5fd7\u5141\u8bb8\u60a8\u8c03\u6574 mypy \u5728\u9519\u8bef\u6d88\u606f\u4e2d\u663e\u793a\u7684\u8be6\u7ec6\u7a0b\u5ea6\u3002</p> <code>--show-error-context</code> <p>\u8be5\u6807\u5fd7\u4f1a\u5728\u6240\u6709\u9519\u8bef\u6d88\u606f\u524d\u9762\u6dfb\u52a0\u201cnote\u201d\u4fe1\u606f\uff0c\u89e3\u91ca\u9519\u8bef\u7684\u4e0a\u4e0b\u6587\u3002\u4f8b\u5982\uff0c\u8003\u8651\u4ee5\u4e0b\u7a0b\u5e8f\uff1a</p> <pre><code>class Test:\n    def foo(self, x: int) -&gt; int:\n        return x + \"bar\"\n</code></pre> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cmypy \u663e\u793a\u7684\u9519\u8bef\u6d88\u606f\u5982\u4e0b\uff1a</p> <pre><code>main.py:3: error: Unsupported operand types for + (\"int\" and \"str\")\n</code></pre> <p>\u5982\u679c\u542f\u7528\u6b64\u6807\u5fd7\uff0c\u9519\u8bef\u6d88\u606f\u5c06\u53d8\u4e3a\uff1a</p> <pre><code>main.py: note: In member \"foo\" of class \"Test\":\nmain.py:3: error: Unsupported operand types for + (\"int\" and \"str\")\n</code></pre> <code>--show-column-numbers</code> <p>\u8be5\u6807\u5fd7\u4f1a\u5728\u9519\u8bef\u6d88\u606f\u4e2d\u6dfb\u52a0\u5217\u504f\u79fb\u3002\u4f8b\u5982\uff0c\u4ee5\u4e0b\u8868\u793a\u5728\u7b2c 12 \u884c\uff0c\u7b2c 9 \u5217\u53d1\u751f\u9519\u8bef\uff08\u6ce8\u610f\u5217\u504f\u79fb\u4ece 0 \u5f00\u59cb\uff09\uff1a</p> <pre><code>main.py:12:9: error: Unsupported operand types for / (\"int\" and \"str\")\n</code></pre> <code>--show-error-code-links</code> <p>\u8be5\u6807\u5fd7\u8fd8\u4f1a\u663e\u793a\u4e00\u4e2a\u6307\u5411\u9519\u8bef\u4ee3\u7801\u6587\u6863\u7684\u94fe\u63a5\uff0c\u94fe\u63a5\u5230\u7531 mypy \u62a5\u544a\u7684\u9519\u8bef\u4ee3\u7801\u3002\u76f8\u5e94\u7684\u9519\u8bef\u4ee3\u7801\u5c06\u5728\u6587\u6863\u9875\u9762\u4e2d\u9ad8\u4eae\u663e\u793a\u3002\u5982\u679c\u542f\u7528\u6b64\u6807\u5fd7\uff0c\u9519\u8bef\u6d88\u606f\u5c06\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>main.py:3: error: Unsupported operand types for - (\"int\" and \"str\")  [operator]\nmain.py:3: note: See 'https://mypy.rtfd.io/en/stable/_refs.html#code-operator' for more info\n</code></pre> <code>--show-error-end</code> <p>\u8be5\u6807\u5fd7\u4f7f mypy \u663e\u793a\u9519\u8bef\u7684\u8d77\u59cb\u4f4d\u7f6e\u548c\u76f8\u5173\u8868\u8fbe\u5f0f\u7684\u7ed3\u675f\u4f4d\u7f6e\u3002\u8fd9\u6837\uff0c\u5404\u79cd\u5de5\u5177\u53ef\u4ee5\u8f7b\u677e\u9ad8\u4eae\u663e\u793a\u6574\u4e2a\u9519\u8bef\u8303\u56f4\u3002\u683c\u5f0f\u4e3a <code>file:line:column:end_line:end_column</code>\u3002\u6b64\u9009\u9879\u9690\u542b\u542f\u7528 <code>--show-column-numbers</code>\u3002</p> <code>--hide-error-codes</code> <p>\u8be5\u6807\u5fd7\u4f1a\u5728\u9519\u8bef\u6d88\u606f\u4e2d\u9690\u85cf\u9519\u8bef\u4ee3\u7801 <code>[&lt;code&gt;]</code>\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u9519\u8bef\u4ee3\u7801\u5728\u6bcf\u6761\u9519\u8bef\u6d88\u606f\u4e4b\u540e\u663e\u793a\uff1a</p> <pre><code>prog.py:1: error: \"str\" has no attribute \"trim\"  [attr-defined]\n</code></pre> <p>\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 \u9519\u8bef\u4ee3\u7801\u3002</p> <code>--pretty</code> <p>\u5728\u9519\u8bef\u6d88\u606f\u4e2d\u4f7f\u7528\u89c6\u89c9\u4e0a\u66f4\u7f8e\u89c2\u7684\u8f93\u51fa\uff1a\u4f7f\u7528\u8f6f\u6362\u884c\uff0c\u663e\u793a\u6e90\u4ee3\u7801\u7247\u6bb5\uff0c\u5e76\u663e\u793a\u9519\u8bef\u4f4d\u7f6e\u6807\u8bb0\u3002</p> <code>--no-color-output</code> <p>\u8be5\u6807\u5fd7\u4f1a\u7981\u7528\u9519\u8bef\u6d88\u606f\u4e2d\u7684\u5f69\u8272\u8f93\u51fa\uff0c\u9ed8\u8ba4\u542f\u7528\u3002</p> <code>--no-error-summary</code> <p>\u8be5\u6807\u5fd7\u4f1a\u7981\u7528\u9519\u8bef\u603b\u7ed3\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cmypy \u4f1a\u663e\u793a\u4e00\u884c\u603b\u7ed3\uff0c\u5305\u62ec\u9519\u8bef\u603b\u6570\u3001\u5305\u542b\u9519\u8bef\u7684\u6587\u4ef6\u6570\u548c\u68c0\u67e5\u8fc7\u7684\u6587\u4ef6\u6570\u3002</p> <code>--show-absolute-path</code> <p>\u663e\u793a\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84\u3002</p> <code>--soft-error-limit N</code> <p>\u8be5\u6807\u5fd7\u4f1a\u8c03\u6574\u4e00\u4e2a\u9650\u5236\uff0c\u8d85\u51fa\u8be5\u9650\u5236\u540e\uff0cmypy \u5c06\uff08\u6709\u65f6\uff09\u7981\u7528\u62a5\u544a\u5927\u591a\u6570\u989d\u5916\u9519\u8bef\u3002\u8be5\u9650\u5236\u4ec5\u5728\u5927\u591a\u6570\u5269\u4f59\u9519\u8bef\u4f3c\u4e4e\u4e0d\u6709\u7528\u6216\u8fc7\u4e8e\u5608\u6742\u65f6\u9002\u7528\u3002\u5982\u679c <code>N</code> \u4e3a\u8d1f\u6570\uff0c\u5219\u6ca1\u6709\u9650\u5236\u3002\u9ed8\u8ba4\u9650\u5236\u4e3a -1\u3002</p> <code>--force-uppercase-builtins</code> <p>\u59cb\u7ec8\u5728\u9519\u8bef\u6d88\u606f\u4e2d\u4f7f\u7528 <code>List</code> \u800c\u4e0d\u662f <code>list</code>\uff0c\u5373\u4f7f\u5728 Python 3.9+ \u4e2d\u4e5f\u662f\u5982\u6b64\u3002</p> <code>--force-union-syntax</code> <p>\u59cb\u7ec8\u5728\u9519\u8bef\u6d88\u606f\u4e2d\u4f7f\u7528 <code>Union[]</code> \u548c <code>Optional[]</code> \u8868\u793a\u8054\u5408\u7c7b\u578b\uff08\u800c\u4e0d\u662f <code>|</code> \u8fd0\u7b97\u7b26\uff09\uff0c\u5373\u4f7f\u5728 Python 3.10+ \u4e2d\u4e5f\u662f\u5982\u6b64\u3002</p> <p>The following flags let you adjust how much detail mypy displays in error messages.</p> <code>--show-error-context</code> <p>This flag will precede all errors with \"note\" messages explaining the context of the error. For example, consider the following program:</p> <pre><code>class Test:\n    def foo(self, x: int) -&gt; int:\n        return x + \"bar\"\n</code></pre> <p>Mypy normally displays an error message that looks like this</p> <pre><code>main.py:3: error: Unsupported operand types for + (\"int\" and \"str\")\n</code></pre> <p>If we enable this flag, the error message now looks like this</p> <pre><code>main.py: note: In member \"foo\" of class \"Test\":\nmain.py:3: error: Unsupported operand types for + (\"int\" and \"str\")\n</code></pre> <code>--show-column-numbers</code> <p>This flag will add column offsets to error messages. For example, the following indicates an error in line 12, column 9 (note that column offsets are 0-based)</p> <pre><code>main.py:12:9: error: Unsupported operand types for / (\"int\" and \"str\")\n</code></pre> <code>--show-error-code-links</code> <p>This flag will also display a link to error code documentation, anchored to the error code reported by mypy. The corresponding error code will be highlighted within the documentation page. If we enable this flag, the error message now looks like this</p> <pre><code>main.py:3: error: Unsupported operand types for - (\"int\" and \"str\")  [operator]\nmain.py:3: note: See 'https://mypy.rtfd.io/en/stable/_refs.html#code-operator' for more info\n</code></pre> <code>--show-error-end</code> <p>This flag will make mypy show not just that start position where an error was detected, but also the end position of the relevant expression. This way various tools can easily highlight the whole error span. The format is <code>file:line:column:end_line:end_column</code>. This option implies <code>--show-column-numbers</code>.</p> <code>--hide-error-codes</code> <p>This flag will hide the error code <code>[&lt;code&gt;]</code> from error messages. By default, the error code is shown after each error message</p> <pre><code>prog.py:1: error: \"str\" has no attribute \"trim\"  [attr-defined]\n</code></pre> <p>See Error codes for more information.</p> <code>--pretty</code> <p>Use visually nicer output in error messages: use soft word wrap, show source code snippets, and show error location markers.</p> <code>--no-color-output</code> <p>This flag will disable color output in error messages, enabled by default.</p> <code>--no-error-summary</code> <p>This flag will disable error summary. By default mypy shows a summary line including total number of errors, number of files with errors, and number of files checked.</p> <code>--show-absolute-path</code> <p>Show absolute paths to files.</p> <code>--soft-error-limit N</code> <p>This flag will adjust the limit after which mypy will (sometimes) disable reporting most additional errors. The limit only applies if it seems likely that most of the remaining errors will not be useful or they may be overly noisy. If <code>N</code> is negative, there is no limit. The default limit is -1.</p> <code>--force-uppercase-builtins</code> <p>Always use <code>List</code> instead of <code>list</code> in error messages, even on Python 3.9+.</p> <code>--force-union-syntax</code> <p>Always use <code>Union[]</code> and <code>Optional[]</code> for union types in error messages (instead of the <code>|</code> operator), even on Python 3.10+.</p>"},{"location":"mypy_conf/command_line/#\u589e\u91cf\u6a21\u5f0f","title":"\u589e\u91cf\u6a21\u5f0f","text":"<p>Incremental mode</p> \u4e2d\u6587\u82f1\u6587 <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cmypy \u4f1a\u5c06\u7c7b\u578b\u4fe1\u606f\u5b58\u50a8\u5230\u7f13\u5b58\u4e2d\u3002mypy \u4f1a\u5229\u7528\u8fd9\u4e9b\u4fe1\u606f\u6765\u907f\u514d\u5728\u91cd\u65b0\u68c0\u67e5\u4ee3\u7801\u65f6\u8fdb\u884c\u4e0d\u5fc5\u8981\u7684\u91cd\u65b0\u8ba1\u7b97\u3002\u8fd9\u53ef\u4ee5\u5e2e\u52a9\u52a0\u5feb\u7c7b\u578b\u68c0\u67e5\u8fc7\u7a0b\uff0c\u7279\u522b\u662f\u5f53\u5927\u591a\u6570\u7a0b\u5e8f\u90e8\u5206\u81ea\u4e0a\u6b21 mypy \u6267\u884c\u4ee5\u6765\u6ca1\u6709\u53d8\u5316\u65f6\u3002</p> <p>\u5982\u679c\u60a8\u5e0c\u671b\u5728\u589e\u91cf\u6a21\u5f0f\u6240\u80fd\u63d0\u4f9b\u7684\u901f\u5ea6\u63d0\u5347\u4e4b\u5916\u8fdb\u4e00\u6b65\u52a0\u5feb\u4ee3\u7801\u91cd\u65b0\u68c0\u67e5\u7684\u65f6\u95f4\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u5728 \u5b88\u62a4\u8fdb\u7a0b\u6a21\u5f0f \u4e0b\u8fd0\u884c mypy\u3002</p> <code>--no-incremental</code> <p>\u8be5\u6807\u5fd7\u7981\u7528\u589e\u91cf\u6a21\u5f0f\uff1amypy \u5728\u91cd\u65b0\u8fd0\u884c\u65f6\u5c06\u4e0d\u518d\u53c2\u8003\u7f13\u5b58\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u5373\u4f7f\u589e\u91cf\u6a21\u5f0f\u88ab\u7981\u7528\uff0cmypy \u4ecd\u4f1a\u5c06\u6570\u636e\u5199\u5165\u7f13\u5b58\uff1a\u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1\u4e0b\u9762\u7684 --cache-dir \u6807\u5fd7\u3002</p> <code>--cache-dir DIR</code> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cmypy \u5c06\u6240\u6709\u7f13\u5b58\u6570\u636e\u5b58\u50a8\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u540d\u4e3a <code>.mypy_cache</code> \u7684\u6587\u4ef6\u5939\u4e2d\u3002\u6b64\u6807\u5fd7\u5141\u8bb8\u60a8\u66f4\u6539\u6b64\u6587\u4ef6\u5939\u7684\u4f4d\u7f6e\u3002\u6b64\u6807\u5fd7\u8fd8\u53ef\u7528\u4e8e\u5728\u4f7f\u7528 \u8fdc\u7a0b\u7f13\u5b58 \u65f6\u63a7\u5236\u7f13\u5b58\u7684\u4f7f\u7528\u3002</p> <p>\u6b64\u8bbe\u7f6e\u4f1a\u8986\u76d6 <code>MYPY_CACHE_DIR</code> \u73af\u5883\u53d8\u91cf\uff08\u5982\u679c\u5df2\u8bbe\u7f6e\uff09\u3002</p> <p>\u5373\u4f7f\u5728\u7981\u7528\u589e\u91cf\u6a21\u5f0f\u65f6\uff0cmypy \u4e5f\u4f1a\u59cb\u7ec8\u5199\u5165\u7f13\u5b58\uff0c\u4ee5\u4fbf\u201c\u9884\u70ed\u201d\u7f13\u5b58\u3002\u8981\u7981\u7528\u5199\u5165\u7f13\u5b58\uff0c\u8bf7\u4f7f\u7528 <code>--cache-dir=/dev/null</code>\uff08UNIX\uff09\u6216 <code>--cache-dir=nul</code>\uff08Windows\uff09\u3002</p> <code>--sqlite-cache</code> <p>\u4f7f\u7528 SQLite \u6570\u636e\u5e93\u5b58\u50a8\u7f13\u5b58\u3002</p> <code>--cache-fine-grained</code> <p>\u5728\u7f13\u5b58\u4e2d\u5305\u542b\u7ec6\u7c92\u5ea6\u7684\u4f9d\u8d56\u4fe1\u606f\uff0c\u7528\u4e8e mypy \u5b88\u62a4\u8fdb\u7a0b\u3002</p> <code>--skip-version-check</code> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cmypy \u4f1a\u5ffd\u7565\u7531\u4e0d\u540c\u7248\u672c\u7684 mypy \u751f\u6210\u7684\u7f13\u5b58\u6570\u636e\u3002\u6b64\u6807\u5fd7\u7981\u7528\u6b64\u884c\u4e3a\u3002</p> <code>--skip-cache-mtime-checks</code> <p>\u8df3\u8fc7\u57fa\u4e8e mtime \u7684\u7f13\u5b58\u5185\u90e8\u4e00\u81f4\u6027\u68c0\u67e5\u3002</p> <p>By default, mypy will store type information into a cache. Mypy will use this information to avoid unnecessary recomputation when it type checks your code again.  This can help speed up the type checking process, especially when most parts of your program have not changed since the previous mypy run.</p> <p>If you want to speed up how long it takes to recheck your code beyond what incremental mode can offer, try running mypy in daemon mode.</p> <code>--no-incremental</code> <p>This flag disables incremental mode: mypy will no longer reference the cache when re-run.</p> <p>Note that mypy will still write out to the cache even when incremental mode is disabled: see the --cache-dir flag below for more details.</p> <code>--cache-dir DIR</code> <p>By default, mypy stores all cache data inside of a folder named <code>.mypy_cache</code> in the current directory. This flag lets you change this folder. This flag can also be useful for controlling cache use when using remote caching.</p> <p>This setting will override the <code>MYPY_CACHE_DIR</code> environment variable if it is set.</p> <p>Mypy will also always write to the cache even when incremental mode is disabled so it can \"warm up\" the cache. To disable writing to the cache, use <code>--cache-dir=/dev/null</code> (UNIX) or <code>--cache-dir=nul</code> (Windows).</p> <code>--sqlite-cache</code> <p>Use an SQLite database to store the cache.</p> <code>--cache-fine-grained</code> <p>Include fine-grained dependency information in the cache for the mypy daemon.</p> <code>--skip-version-check</code> <p>By default, mypy will ignore cache data generated by a different version of mypy. This flag disables that behavior.</p> <code>--skip-cache-mtime-checks</code> <p>Skip cache internal consistency checks based on mtime.</p>"},{"location":"mypy_conf/command_line/#\u9ad8\u7ea7\u9009\u9879","title":"\u9ad8\u7ea7\u9009\u9879","text":"<p>Advanced options</p> \u4e2d\u6587\u82f1\u6587 <p>\u4ee5\u4e0b\u6807\u5fd7\u4e3b\u8981\u9002\u7528\u4e8e\u5bf9\u5f00\u53d1\u6216\u8c03\u8bd5 mypy \u5185\u90e8\u5de5\u4f5c\u611f\u5174\u8da3\u7684\u7528\u6237\u3002</p> <code>--pdb</code> <p>\u8fd9\u4e2a\u6807\u5fd7\u4f1a\u5728 mypy \u9047\u5230\u81f4\u547d\u9519\u8bef\u65f6\u8c03\u7528 Python \u8c03\u8bd5\u5668\uff08pdb\uff09\u3002</p> <code>--show-traceback, --tb</code> <p>\u5982\u679c\u8bbe\u7f6e\u4e86\u6b64\u6807\u5fd7\uff0cmypy \u5728\u9047\u5230\u81f4\u547d\u9519\u8bef\u65f6\u4f1a\u663e\u793a\u5b8c\u6574\u7684\u56de\u6eaf\u4fe1\u606f\u3002</p> <code>--raise-exceptions</code> <p>\u5728\u9047\u5230\u81f4\u547d\u9519\u8bef\u65f6\u5f15\u53d1\u5f02\u5e38\u3002</p> <code>--custom-typing-module MODULE</code> <p>\u8fd9\u4e2a\u6807\u5fd7\u5141\u8bb8\u60a8\u4f7f\u7528\u81ea\u5b9a\u4e49\u6a21\u5757\u6765\u66ff\u4ee3 mod:<code>typing</code> \u6a21\u5757\u3002</p> <code>--custom-typeshed-dir DIR</code> <p>\u8fd9\u4e2a\u6807\u5fd7\u6307\u5b9a mypy \u67e5\u627e\u6807\u51c6\u5e93\u7c7b\u578b\u7684\u76ee\u5f55\uff0c\u800c\u4e0d\u662f\u4f7f\u7528 mypy \u81ea\u5e26\u7684 typeshed\u3002\u8fd9\u4e3b\u8981\u7528\u4e8e\u5728\u5c06 typeshed \u66f4\u6539\u63d0\u4ea4\u5230\u4e0a\u6e38\u4e4b\u524d\u8fdb\u884c\u6d4b\u8bd5\uff0c\u4f46\u4e5f\u5141\u8bb8\u60a8\u4f7f\u7528 typeshed \u7684\u5206\u53c9\u7248\u672c\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e0d\u4f1a\u5f71\u54cd\u7b2c\u4e09\u65b9\u5e93\u7684\u5b58\u6839\u3002\u8981\u6d4b\u8bd5\u7b2c\u4e09\u65b9\u5b58\u6839\uff0c\u4f8b\u5982\u53ef\u4ee5\u5c1d\u8bd5 <code>MYPYPATH=stubs/six mypy ...</code>\u3002</p> <code>--warn-incomplete-stub</code> <p>\u8fd9\u4e2a\u6807\u5fd7\u4f1a\u4fee\u6539 --disallow-untyped-defs \u548c --disallow-incomplete-defs \u6807\u5fd7\uff0c\u4f7f\u5b83\u4eec\u5728 typeshed \u4e2d\u7684\u5b58\u6839\u7f3a\u5c11\u7c7b\u578b\u6ce8\u89e3\u6216\u5b58\u5728\u4e0d\u5b8c\u6574\u7684\u6ce8\u89e3\u65f6\u4e5f\u62a5\u544a\u9519\u8bef\u3002\u5982\u679c\u4e24\u4e2a\u6807\u5fd7\u90fd\u6ca1\u6709\u8bbe\u7f6e\uff0c--warn-incomplete-stub \u4e5f\u4e0d\u4f1a\u8d77\u4f5c\u7528\u3002</p> <p>\u8fd9\u4e2a\u6807\u5fd7\u4e3b\u8981\u4f9b\u90a3\u4e9b\u5e0c\u671b\u4e3a typeshed \u8d21\u732e\u4ee3\u7801\u7684\u4eba\u4f7f\u7528\uff0c\u4ee5\u4fbf\u65b9\u4fbf\u5730\u53d1\u73b0\u7c7b\u578b\u6ce8\u89e3\u7684\u7f3a\u53e3\u548c\u9057\u6f0f\u3002</p> <p>\u5982\u679c\u60a8\u5e0c\u671b mypy \u62a5\u544a\u4ee3\u7801\u5e93\u4e2d\u4f7f\u7528\u672a\u6ce8\u89e3\u7684\u51fd\u6570\u7684\u9519\u8bef\uff08\u65e0\u8bba\u8be5\u51fd\u6570\u662f\u5426\u5728 typeshed \u4e2d\u5b9a\u4e49\uff09\uff0c\u8bf7\u4f7f\u7528 --disallow-untyped-calls \u6807\u5fd7\u3002\u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 \u672a\u7c7b\u578b\u5316\u7684\u5b9a\u4e49\u4e0e\u8c03\u7528\u3002</p> <code>--shadow-file SOURCE_FILE SHADOW_FILE</code> <p>\u5f53 mypy \u88ab\u8981\u6c42\u68c0\u67e5 <code>SOURCE_FILE</code> \u65f6\uff0c\u8fd9\u4e2a\u6807\u5fd7\u4f1a\u4f7f mypy \u4ece <code>SHADOW_FILE</code> \u4e2d\u8bfb\u53d6\u5e76\u68c0\u67e5\u5185\u5bb9\u3002\u7136\u800c\uff0c\u8bca\u65ad\u4fe1\u606f\u4ecd\u4f1a\u53c2\u8003 <code>SOURCE_FILE</code>\u3002</p> <p>\u6307\u5b9a\u6b64\u53c2\u6570\u591a\u6b21\uff08<code>--shadow-file X1 Y1 --shadow-file X2 Y2</code>\uff09\u5c06\u5141\u8bb8 mypy \u6267\u884c\u591a\u4e2a\u66ff\u6362\u3002</p> <p>\u8fd9\u4f7f\u5f97\u5de5\u5177\u53ef\u4ee5\u521b\u5efa\u5177\u6709\u6709\u7528\u4fee\u6539\u7684\u4e34\u65f6\u6587\u4ef6\uff0c\u800c\u4e0d\u9700\u8981\u76f4\u63a5\u66f4\u6539\u6e90\u6587\u4ef6\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u7ba1\u9053\uff0c\u5b83\u4e3a\u67d0\u4e9b\u53d8\u91cf\u6dfb\u52a0 <code>reveal_type</code>\u3002\u8fd9\u4e2a\u7ba1\u9053\u5728 <code>original.py</code> \u4e0a\u8fd0\u884c\u4ee5\u751f\u6210 <code>temp.py</code>\u3002\u8fd0\u884c <code>mypy --shadow-file original.py temp.py original.py</code> \u5c06\u4f7f mypy \u68c0\u67e5 <code>temp.py</code> \u7684\u5185\u5bb9\uff0c\u800c\u4e0d\u662f <code>original.py</code>\uff0c\u4f46\u9519\u8bef\u4fe1\u606f\u4ecd\u4f1a\u5f15\u7528 <code>original.py</code>\u3002</p> <p>The following flags are useful mostly for people who are interested in developing or debugging mypy internals.</p> <code>--pdb</code> <p>This flag will invoke the Python debugger when mypy encounters a fatal error.</p> <code>--show-traceback, --tb</code> <p>If set, this flag will display a full traceback when mypy encounters a fatal error.</p> <code>--raise-exceptions</code> <p>Raise exception on fatal error.</p> <code>--custom-typing-module MODULE</code> <p>This flag lets you use a custom module as a substitute for the mod:<code>typing</code> module.</p> <code>--custom-typeshed-dir DIR</code> <p>This flag specifies the directory where mypy looks for standard library typeshed stubs, instead of the typeshed that ships with mypy.  This is primarily intended to make it easier to test typeshed changes before submitting them upstream, but also allows you to use a forked version of typeshed.</p> <p>Note that this doesn't affect third-party library stubs. To test third-party stubs, for example try <code>MYPYPATH=stubs/six mypy ...</code>.</p> <code>--warn-incomplete-stub</code> <p>This flag modifies both the --disallow-untyped-defs and --disallow-incomplete-defs flags so they also report errors if stubs in typeshed are missing type annotations or has incomplete annotations. If both flags are missing, --warn-incomplete-stub also does nothing.</p> <p>This flag is mainly intended to be used by people who want contribute to typeshed and would like a convenient way to find gaps and omissions.</p> <p>If you want mypy to report an error when your codebase uses an untyped function, whether that function is defined in typeshed or not, use the --disallow-untyped-calls flag. See Untyped definitions and calls for more details.</p> <code>--shadow-file SOURCE_FILE SHADOW_FILE</code> <p>When mypy is asked to type check <code>SOURCE_FILE</code>, this flag makes mypy read from and type check the contents of <code>SHADOW_FILE</code> instead. However, diagnostics will continue to refer to <code>SOURCE_FILE</code>.</p> <p>Specifying this argument multiple times (<code>--shadow-file X1 Y1 --shadow-file X2 Y2</code>) will allow mypy to perform multiple substitutions.</p> <p>This allows tooling to create temporary files with helpful modifications without having to change the source file in place. For example, suppose we have a pipeline that adds <code>reveal_type</code> for certain variables. This pipeline is run on <code>original.py</code> to produce <code>temp.py</code>. Running <code>mypy --shadow-file original.py temp.py original.py</code> will then cause mypy to type check the contents of <code>temp.py</code> instead of  <code>original.py</code>, but error messages will still reference <code>original.py</code>.</p>"},{"location":"mypy_conf/command_line/#\u62a5\u544a\u751f\u6210","title":"\u62a5\u544a\u751f\u6210","text":"<p>Report generation</p> \u4e2d\u6587\u82f1\u6587 <p>\u5982\u679c\u8bbe\u7f6e\u4e86\u8fd9\u4e9b\u6807\u5fd7\uff0cmypy \u5c06\u4f1a\u4ee5\u6307\u5b9a\u7684\u683c\u5f0f\u751f\u6210\u62a5\u544a\uff0c\u5e76\u5c06\u5176\u8f93\u51fa\u5230\u6307\u5b9a\u7684\u76ee\u5f55\u3002</p> <code>--any-exprs-report DIR</code> <p>\u4f7f mypy \u751f\u6210\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\u62a5\u544a\uff0c\u8bb0\u5f55\u4ee3\u7801\u5e93\u4e2d\u5b58\u5728\u7684 <code>Any</code> \u7c7b\u578b\u8868\u8fbe\u5f0f\u7684\u6570\u91cf\u3002</p> <code>--cobertura-xml-report DIR</code> <p>\u4f7f mypy \u751f\u6210\u4e00\u4e2a Cobertura XML \u7c7b\u578b\u68c0\u67e5\u8986\u76d6\u7387\u62a5\u544a\u3002</p> <p>\u8981\u751f\u6210\u6b64\u62a5\u544a\uff0c\u60a8\u5fc5\u987b\u624b\u52a8\u5b89\u88c5 [lxml] \u5e93\uff0c\u6216\u6307\u5b9a\u5e26\u6709 setuptools \u9644\u52a0\u9009\u9879 <code>mypy[reports]</code> \u7684 mypy \u5b89\u88c5\u3002</p> <code>--html-report / --xslt-html-report DIR</code> <p>\u4f7f mypy \u751f\u6210\u4e00\u4e2a HTML \u7c7b\u578b\u68c0\u67e5\u8986\u76d6\u7387\u62a5\u544a\u3002</p> <p>\u8981\u751f\u6210\u6b64\u62a5\u544a\uff0c\u60a8\u5fc5\u987b\u624b\u52a8\u5b89\u88c5 [lxml] \u5e93\uff0c\u6216\u6307\u5b9a\u5e26\u6709 setuptools \u9644\u52a0\u9009\u9879 <code>mypy[reports]</code> \u7684 mypy \u5b89\u88c5\u3002</p> <code>--linecount-report DIR</code> <p>\u4f7f mypy \u751f\u6210\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\u62a5\u544a\uff0c\u8bb0\u5f55\u4ee3\u7801\u5e93\u4e2d\u5df2\u7c7b\u578b\u5316\u548c\u672a\u7c7b\u578b\u5316\u7684\u51fd\u6570\u548c\u884c\u6570\u3002</p> <code>--linecoverage-report DIR</code> <p>\u4f7f mypy \u751f\u6210\u4e00\u4e2a JSON \u6587\u4ef6\uff0c\u5c06\u6bcf\u4e2a\u6e90\u6587\u4ef6\u7684\u7edd\u5bf9\u6587\u4ef6\u540d\u6620\u5c04\u5230\u8be5\u6587\u4ef6\u4e2d\u5c5e\u4e8e\u5df2\u7c7b\u578b\u5316\u51fd\u6570\u7684\u884c\u53f7\u5217\u8868\u3002</p> <code>--lineprecision-report DIR</code> <p>\u4f7f mypy \u751f\u6210\u4e00\u4e2a\u5e73\u9762\u6587\u672c\u6587\u4ef6\u62a5\u544a\uff0c\u5305\u542b\u6bcf\u4e2a\u6a21\u5757\u7684\u7edf\u8ba1\u6570\u636e\uff0c\u5982\u68c0\u67e5\u4e86\u591a\u5c11\u884c\u4ee3\u7801\u7b49\u3002</p> <code>--txt-report / --xslt-txt-report DIR</code> <p>\u4f7f mypy \u751f\u6210\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\u7c7b\u578b\u68c0\u67e5\u8986\u76d6\u7387\u62a5\u544a\u3002</p> <p>\u8981\u751f\u6210\u6b64\u62a5\u544a\uff0c\u60a8\u5fc5\u987b\u624b\u52a8\u5b89\u88c5 [lxml] \u5e93\uff0c\u6216\u6307\u5b9a\u5e26\u6709 setuptools \u9644\u52a0\u9009\u9879 <code>mypy[reports]</code> \u7684 mypy \u5b89\u88c5\u3002</p> <code>--xml-report DIR</code> <p>\u4f7f mypy \u751f\u6210\u4e00\u4e2a XML \u7c7b\u578b\u68c0\u67e5\u8986\u76d6\u7387\u62a5\u544a\u3002</p> <p>\u8981\u751f\u6210\u6b64\u62a5\u544a\uff0c\u60a8\u5fc5\u987b\u624b\u52a8\u5b89\u88c5 [lxml] \u5e93\uff0c\u6216\u6307\u5b9a\u5e26\u6709 setuptools \u9644\u52a0\u9009\u9879 <code>mypy[reports]</code> \u7684 mypy \u5b89\u88c5\u3002</p> <p>If these flags are set, mypy will generate a report in the specified format into the specified directory.</p> <code>--any-exprs-report DIR</code> <p>Causes mypy to generate a text file report documenting how many expressions of type <code>Any</code> are present within your codebase.</p> <code>--cobertura-xml-report DIR</code> <p>Causes mypy to generate a Cobertura XML type checking coverage report.</p> <p>To generate this report, you must either manually install the [lxml] library or specify mypy installation with the setuptools extra <code>mypy[reports]</code>.</p> <code>--html-report / --xslt-html-report DIR</code> <p>Causes mypy to generate an HTML type checking coverage report.</p> <p>To generate this report, you must either manually install the [lxml] library or specify mypy installation with the setuptools extra <code>mypy[reports]</code>.</p> <code>--linecount-report DIR</code> <p>Causes mypy to generate a text file report documenting the functions and lines that are typed and untyped within your codebase.</p> <code>--linecoverage-report DIR</code> <p>Causes mypy to generate a JSON file that maps each source file's absolute filename to a list of line numbers that belong to typed functions in that file.</p> <code>--lineprecision-report DIR</code> <p>Causes mypy to generate a flat text file report with per-module statistics of how many lines are typechecked etc.</p> <code>--txt-report / --xslt-txt-report DIR</code> <p>Causes mypy to generate a text file type checking coverage report.</p> <p>To generate this report, you must either manually install the [lxml] library or specify mypy installation with the setuptools extra <code>mypy[reports]</code>.</p> <code>--xml-report DIR</code> <p>Causes mypy to generate an XML type checking coverage report.</p> <p>To generate this report, you must either manually install the [lxml] library or specify mypy installation with the setuptools extra <code>mypy[reports]</code>.</p>"},{"location":"mypy_conf/command_line/#\u542f\u7528\u4e0d\u5b8c\u6574\u6216\u5b9e\u9a8c\u6027\u529f\u80fd","title":"\u542f\u7528\u4e0d\u5b8c\u6574\u6216\u5b9e\u9a8c\u6027\u529f\u80fd","text":"<p>Enabling incomplete/experimental features</p> \u4e2d\u6587\u82f1\u6587 <code>--enable-incomplete-feature {PreciseTupleTypes, NewGenericSyntax, InlineTypedDict}</code> <p>\u4e00\u4e9b\u529f\u80fd\u53ef\u80fd\u9700\u8981\u591a\u4e2a mypy \u7248\u672c\u6765\u5b9e\u73b0\uff0c\u4f8b\u5982\u7531\u4e8e\u5176\u590d\u6742\u6027\u3001\u6f5c\u5728\u7684\u5411\u540e\u4e0d\u517c\u5bb9\u6027\u6216\u53ef\u80fd\u4ece\u793e\u533a\u53cd\u9988\u4e2d\u83b7\u76ca\u7684\u6a21\u7cca\u8bed\u4e49\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u6b64\u6807\u5fd7\u542f\u7528\u8fd9\u4e9b\u529f\u80fd\u4ee5\u8fdb\u884c\u65e9\u671f\u9884\u89c8\u3002\u8bf7\u6ce8\u610f\uff0c\u5e76\u4e0d\u4fdd\u8bc1\u6240\u6709\u529f\u80fd\u6700\u7ec8\u90fd\u4f1a\u9ed8\u8ba4\u542f\u7528\u3002\u5728 \u6781\u5c11\u6570\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u80fd\u51b3\u5b9a\u4e0d\u7ee7\u7eed\u63a8\u8fdb\u67d0\u4e9b\u529f\u80fd\u3002</p> <p>\u5f53\u524d\u4e0d\u5b8c\u6574/\u5b9e\u9a8c\u6027\u529f\u80fd\u5217\u8868\uff1a</p> <ul> <li> <p><code>PreciseTupleTypes</code>: \u6b64\u529f\u80fd\u5c06\u5728\u5404\u79cd\u573a\u666f\u4e2d\u63a8\u65ad\u66f4\u7cbe\u786e\u7684\u5143\u7ec4\u7c7b\u578b\u3002\u5728 PEP 646 \u6dfb\u52a0\u53d8\u53c2\u7c7b\u578b\u4e4b\u524d\uff0c\u65e0\u6cd5\u8868\u8fbe\u50cf\u201c\u81f3\u5c11\u5305\u542b\u4e24\u4e2a\u6574\u6570\u7684\u5143\u7ec4\u201d\u8fd9\u6837\u7684\u7c7b\u578b\u3002\u6700\u597d\u7684\u7c7b\u578b\u662f <code>tuple[int, ...]</code>\u3002\u56e0\u6b64\uff0cmypy \u5bf9\u53d8\u957f\u5143\u7ec4\u8fdb\u884c\u4e86\u975e\u5e38\u5bbd\u677e\u7684\u68c0\u67e5\u3002\u73b0\u5728\uff0c\u8fd9\u79cd\u7c7b\u578b\u53ef\u4ee5\u8868\u793a\u4e3a <code>tuple[int, int, *tuple[int, ...]]</code>\u3002\u5bf9\u4e8e\u8fd9\u6837\u7684\u66f4\u7cbe\u786e\u7c7b\u578b\uff08\u5f53\u7528\u6237\u663e\u5f0f \u5b9a\u4e49 \u65f6\uff09\uff0c\u4f8b\u5982\uff0cmypy \u4f1a\u8b66\u544a\u4e0d\u5b89\u5168\u7684\u7d22\u5f15\u8bbf\u95ee\uff0c\u5e76\u4ee5\u7c7b\u578b\u5b89\u5168\u7684\u65b9\u5f0f\u5904\u7406\u5b83\u4eec\u3002\u7136\u800c\uff0c\u4e3a\u4e86\u907f\u514d\u73b0\u6709\u4ee3\u7801\u4e2d\u7684\u95ee\u9898\uff0cmypy \u5e76\u4e0d\u4f1a \u63a8\u65ad \u8fd9\u4e9b\u7cbe\u786e\u7c7b\u578b\uff0c\u5373\u4f7f\u6280\u672f\u4e0a\u53ef\u4ee5\u3002\u4ee5\u4e0b\u662f <code>PreciseTupleTypes</code> \u63a8\u65ad\u66f4\u7cbe\u786e\u7c7b\u578b\u7684\u663e\u8457\u793a\u4f8b\uff1a</p> <pre><code>numbers: tuple[int, ...]\n\nmore_numbers = (1, *numbers, 1)\nreveal_type(more_numbers)\n# \u6ca1\u6709 PreciseTupleTypes: tuple[int, ...]\n# \u6709 PreciseTupleTypes: tuple[int, *tuple[int, ...], int]\n\nother_numbers = (1, 1) + numbers\nreveal_type(other_numbers)\n# \u6ca1\u6709 PreciseTupleTypes: tuple[int, ...]\n# \u6709 PreciseTupleTypes: tuple[int, int, *tuple[int, ...]]\n\nif len(numbers) &gt; 2:\n    reveal_type(numbers)\n    # \u6ca1\u6709 PreciseTupleTypes: tuple[int, ...]\n    # \u6709 PreciseTupleTypes: tuple[int, int, int, *tuple[int, ...]]\nelse:\n    reveal_type(numbers)\n    # \u6ca1\u6709 PreciseTupleTypes: tuple[int, ...]\n    # \u6709 PreciseTupleTypes: tuple[()] | tuple[int] | tuple[int, int]\n</code></pre> </li> <li> <p><code>NewGenericSyntax</code>: \u6b64\u529f\u80fd\u542f\u7528\u5bf9 PEP 695 \u5b9a\u4e49\u7684\u8bed\u6cd5\u7684\u652f\u6301\u3002\u4f8b\u5982\uff1a</p> <pre><code>class Container[T]:  # \u5b9a\u4e49\u4e00\u4e2a\u6cdb\u578b\u7c7b\n    content: T\n\ndef first[T](items: list[T]) -&gt; T:  # \u5b9a\u4e49\u4e00\u4e2a\u6cdb\u578b\u51fd\u6570\n    return items[0]\n\ntype Items[T] = list[tuple[T, T]]  # \u5b9a\u4e49\u4e00\u4e2a\u6cdb\u578b\u7c7b\u578b\u522b\u540d\n</code></pre> </li> <li> <p><code>InlineTypedDict</code>: \u6b64\u529f\u80fd\u542f\u7528\u7528\u4e8e\u5185\u8054 TypedDicts \u7684\u975e\u6807\u51c6\u8bed\u6cd5\uff0c\u4f8b\u5982\uff1a</p> <pre><code>def test_values() -&gt; {\"int\": int, \"str\": str}:\n    return {\"int\": 42, \"str\": \"test\"}\n</code></pre> </li> </ul> <code>--enable-incomplete-feature {PreciseTupleTypes, NewGenericSyntax, InlineTypedDict}</code> <p>Some features may require several mypy releases to implement, for example due to their complexity, potential for backwards incompatibility, or ambiguous semantics that would benefit from feedback from the community. You can enable such features for early preview using this flag. Note that it is not guaranteed that all features will be ultimately enabled by default. In rare cases we may decide to not go ahead with certain features.</p> <p>List of currently incomplete/experimental features:</p> <ul> <li> <p><code>PreciseTupleTypes</code>: this feature will infer more precise tuple types in various scenarios. Before variadic types were added to the Python type system by PEP 646, it was impossible to express a type like \"a tuple with at least two integers\". The best type available was <code>tuple[int, ...]</code>. Therefore, mypy applied very lenient checking for variable-length tuples. Now this type can be expressed as <code>tuple[int, int, *tuple[int, ...]]</code>. For such more precise types (when explicitly defined by a user) mypy, for example, warns about unsafe index access, and generally handles them in a type-safe manner. However, to avoid problems in existing code, mypy does not infer these precise types when it technically can. Here are notable examples where <code>PreciseTupleTypes</code> infers more precise types:</p> <pre><code>numbers: tuple[int, ...]\n\nmore_numbers = (1, *numbers, 1)\nreveal_type(more_numbers)\n# Without PreciseTupleTypes: tuple[int, ...]\n# With PreciseTupleTypes: tuple[int, *tuple[int, ...], int]\n\nother_numbers = (1, 1) + numbers\nreveal_type(other_numbers)\n# Without PreciseTupleTypes: tuple[int, ...]\n# With PreciseTupleTypes: tuple[int, int, *tuple[int, ...]]\n\nif len(numbers) &gt; 2:\n    reveal_type(numbers)\n    # Without PreciseTupleTypes: tuple[int, ...]\n    # With PreciseTupleTypes: tuple[int, int, int, *tuple[int, ...]]\nelse:\n    reveal_type(numbers)\n    # Without PreciseTupleTypes: tuple[int, ...]\n    # With PreciseTupleTypes: tuple[()] | tuple[int] | tuple[int, int]\n</code></pre> </li> <li> <p><code>NewGenericSyntax</code>: this feature enables support for syntax defined by PEP 695. For example:</p> <pre><code>class Container[T]:  # defines a generic class\n    content: T\n\ndef first[T](items: list[T]) -&gt; T:  # defines a generic function\n    return items[0]\n\ntype Items[T] = list[tuple[T, T]]  # defines a generic type alias\n</code></pre> </li> <li> <p><code>InlineTypedDict</code>: this feature enables non-standard syntax for inline TypedDicts, for example:</p> <pre><code>def test_values() -&gt; {\"int\": int, \"str\": str}:\n    return {\"int\": 42, \"str\": \"test\"}\n</code></pre> </li> </ul>"},{"location":"mypy_conf/command_line/#\u5176\u4ed6","title":"\u5176\u4ed6","text":"<p>Miscellaneous</p> \u4e2d\u6587\u82f1\u6587 <code>--install-types</code> <p>\u6b64\u6807\u5fd7\u4f7f mypy \u4f7f\u7528 pip \u5b89\u88c5\u5df2\u77e5\u7f3a\u5931\u7684\u7b2c\u4e09\u65b9\u5e93\u7684 stub \u5305\u3002\u5b83\u5c06\u663e\u793a\u5c06\u8981\u8fd0\u884c\u7684 pip \u547d\u4ee4\uff0c\u5e76\u5728\u5b89\u88c5\u4efb\u4f55\u5185\u5bb9\u4e4b\u524d\u8981\u6c42\u786e\u8ba4\u3002\u51fa\u4e8e\u5b89\u5168\u539f\u56e0\uff0c\u8fd9\u4e9b stub \u5305\u4ec5\u9650\u4e8e\u4e00\u4e2a\u5c0f\u7684\u624b\u52a8\u9009\u62e9\u7684\u5b50\u96c6\uff0c\u8fd9\u4e9b\u5305\u5df2\u7531 typeshed \u56e2\u961f\u9a8c\u8bc1\u3002\u8fd9\u4e9b\u5305\u4ec5\u5305\u542b stub \u6587\u4ef6\uff0c\u4e0d\u5305\u542b\u53ef\u6267\u884c\u4ee3\u7801\u3002</p> <p>\u5982\u679c\u4f7f\u7528\u6b64\u9009\u9879\u800c\u672a\u63d0\u4f9b\u4efb\u4f55\u6587\u4ef6\u6216\u6a21\u5757\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\uff0cmypy \u5c06\u5b89\u88c5\u5728\u4e4b\u524d\u7684 mypy \u8fd0\u884c\u4e2d\u5efa\u8bae\u7684 stub \u5305\u3002\u5982\u679c\u63d0\u4f9b\u4e86\u6587\u4ef6\u6216\u6a21\u5757\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\uff0cmypy \u4f1a\u9996\u5148\u68c0\u67e5\u8fd9\u4e9b\u6587\u4ef6\uff0c\u7136\u540e\u5728\u8fd0\u884c\u7ed3\u675f\u65f6\u5efa\u8bae\u5b89\u88c5\u7f3a\u5931\u7684 stub\uff0c\u4f46\u4ec5\u5f53\u68c0\u6d4b\u5230\u7f3a\u5931\u7684\u6a21\u5757\u65f6\u624d\u4f1a\u8fd9\u6837\u505a\u3002</p> <p>\u6ce8\u610f</p> <p>\u8fd9\u662f mypy 0.900 \u4e2d\u7684\u65b0\u529f\u80fd\u3002\u4e4b\u524d\u7684 mypy \u7248\u672c\u5305\u62ec\u4e86\u7b2c\u4e09\u65b9\u5305 stub \u7684\u9009\u62e9\uff0c\u800c\u4e0d\u662f\u5355\u72ec\u5b89\u88c5\u5b83\u4eec\u3002</p> <code>--non-interactive</code> <p>\u4e0e --install-types \u4e00\u8d77\u4f7f\u7528\u65f6\uff0c\u6b64\u6807\u5fd7\u4f1a\u4f7f mypy \u4f7f\u7528 pip \u81ea\u52a8\u5b89\u88c5\u6240\u6709\u5efa\u8bae\u7684 stub \u5305\uff0c\u800c\u65e0\u9700\u786e\u8ba4\uff0c\u7136\u540e\u7ee7\u7eed\u4f7f\u7528\u5df2\u5b89\u88c5\u7684 stubs \u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\uff08\u5982\u679c\u63d0\u4f9b\u4e86\u6587\u4ef6\u6216\u6a21\u5757\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\uff09\u3002</p> <p>\u8fd9\u5728\u5185\u90e8\u5b9e\u73b0\u4e3a\u6700\u591a\u4e24\u6b21 mypy \u8fd0\u884c\u3002\u7b2c\u4e00\u6b21\u8fd0\u884c\u7528\u4e8e\u67e5\u627e\u7f3a\u5931\u7684 stub \u5305\uff0c\u4ec5\u5728\u672a\u627e\u5230\u7f3a\u5931\u7684 stub \u5305\u65f6\u624d\u4f1a\u663e\u793a\u6b64\u8fd0\u884c\u7684\u8f93\u51fa\u3002\u5982\u679c\u53d1\u73b0\u7f3a\u5931\u7684 stub \u5305\uff0c\u5219\u4f1a\u5b89\u88c5\u5b83\u4eec\uff0c\u7136\u540e\u6267\u884c\u53e6\u4e00\u6b21\u8fd0\u884c\u3002</p> <code>--junit-xml JUNIT_XML</code> <p>\u6b64\u6807\u5fd7\u4f7f mypy \u751f\u6210\u4e00\u4e2a\u5305\u542b\u7c7b\u578b\u68c0\u67e5\u7ed3\u679c\u7684 JUnit XML \u6d4b\u8bd5\u7ed3\u679c\u6587\u6863\u3002\u8fd9\u53ef\u4ee5\u66f4\u5bb9\u6613\u5730\u5c06 mypy \u96c6\u6210\u5230\u6301\u7eed\u96c6\u6210\uff08CI\uff09\u5de5\u5177\u4e2d\u3002</p> <code>--find-occurrences CLASS.MEMBER</code> <p>\u6b64\u6807\u5fd7\u5c06\u4f7f mypy \u6253\u5370\u51fa\u57fa\u4e8e\u9759\u6001\u7c7b\u578b\u4fe1\u606f\u7684\u7c7b\u6210\u5458\u7684\u6240\u6709\u4f7f\u7528\u60c5\u51b5\u3002\u6b64\u529f\u80fd\u662f\u5b9e\u9a8c\u6027\u7684\u3002</p> <code>--scripts-are-modules</code> <p>\u6b64\u6807\u5fd7\u5c06\u4f7f\u547d\u4ee4\u884c\u53c2\u6570\u4e2d\u770b\u8d77\u6765\u50cf\u811a\u672c\u7684\u6587\u4ef6\uff08\u5373\u540d\u79f0\u4e0d\u4ee5 <code>.py</code> \u7ed3\u5c3e\u7684\u6587\u4ef6\uff09\u83b7\u5f97\u4e00\u4e2a\u4ece\u811a\u672c\u540d\u79f0\u6d3e\u751f\u7684\u6a21\u5757\u540d\u79f0\uff0c\u800c\u4e0d\u662f\u56fa\u5b9a\u7684\u540d\u79f0 __main__\u3002</p> <p>\u8fd9\u4f7f\u60a8\u53ef\u4ee5\u5728\u4e00\u6b21 mypy \u8c03\u7528\u4e2d\u68c0\u67e5\u591a\u4e2a\u811a\u672c\u3002\uff08\u9ed8\u8ba4\u7684 __main__ \u4ece\u6280\u672f\u4e0a\u8bb2\u66f4\u6b63\u786e\uff0c\u4f46\u5982\u679c\u60a8\u6709\u8bb8\u591a\u811a\u672c\u5bfc\u5165\u5927\u578b\u5305\uff0c\u5219\u6b64\u6807\u5fd7\u542f\u7528\u7684\u884c\u4e3a\u901a\u5e38\u66f4\u65b9\u4fbf\u3002\uff09</p> <code>--install-types</code> <p>This flag causes mypy to install known missing stub packages for third-party libraries using pip.  It will display the pip command that will be run, and expects a confirmation before installing anything. For security reasons, these stubs are limited to only a small subset of manually selected packages that have been verified by the typeshed team. These packages include only stub files and no executable code.</p> <p>If you use this option without providing any files or modules to type check, mypy will install stub packages suggested during the previous mypy run. If there are files or modules to type check, mypy first type checks those, and proposes to install missing stubs at the end of the run, but only if any missing modules were detected.</p> <p>Note</p> <p>This is new in mypy 0.900. Previous mypy versions included a selection of third-party package stubs, instead of having them installed separately.</p> <code>--non-interactive</code> <p>hen used together with --install-types, this causes mypy to install all suggested stub packages using pip without asking for confirmation, and then continues to perform type checking using the installed stubs, if some files or modules are provided to type check.</p> <p>This is implemented as up to two mypy runs internally. The first run is used to find missing stub packages, and output is shown from this run only if no missing stub packages were found. If missing stub packages were found, they are installed and then another run is performed.</p> <code>--junit-xml JUNIT_XML</code> <p>Causes mypy to generate a JUnit XML test result document with type checking results. This can make it easier to integrate mypy with continuous integration (CI) tools.</p> <code>--find-occurrences CLASS.MEMBER</code> <p>This flag will make mypy print out all usages of a class member based on static type information. This feature is experimental.</p> <code>--scripts-are-modules</code> <p>This flag will give command line arguments that appear to be scripts (i.e. files whose name does not end in <code>.py</code>) a module name derived from the script name rather than the fixed name __main__.</p> <p>This lets you check more than one script in a single mypy invocation. (The default __main__ is technically more correct, but if you have many scripts that import a large package, the behavior enabled by this flag is often more convenient.)</p>"},{"location":"mypy_conf/config_file/","title":"mypy \u914d\u7f6e\u6587\u4ef6","text":"<p>The mypy configuration file</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u662f\u975e\u5e38\u53ef\u914d\u7f6e\u7684\u3002\u8fd9\u4e00\u70b9\u5728\u5c06\u7c7b\u578b\u5f15\u5165\u73b0\u6709\u4ee3\u7801\u5e93\u65f6\u5c24\u4e3a\u91cd\u8981\u3002\u6709\u5173\u8fd9\u79cd\u60c5\u51b5\u7684\u5177\u4f53\u5efa\u8bae\uff0c\u8bf7\u53c2\u9605\u5728\u73b0\u6709\u4ee3\u7801\u5e93\u4e2d\u4f7f\u7528 mypy\u3002</p> <p>Mypy \u652f\u6301\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u914d\u7f6e\u8bbe\u7f6e\uff0c\u5176\u4f18\u5148\u7ea7\u987a\u5e8f\u5982\u4e0b\uff1a</p> <pre><code>1. ./mypy.ini\n2. ./.mypy.ini\n3. ./pyproject.toml\n4. ./setup.cfg\n5. $XDG_CONFIG_HOME/mypy/config\n6. ~/.config/mypy/config\n7. ~/.mypy.ini\n</code></pre> <p>\u91cd\u8981\u7684\u662f\u8981\u7406\u89e3\uff0c\u914d\u7f6e\u6587\u4ef6\u4e0d\u4f1a\u8fdb\u884c\u5408\u5e76\uff0c\u56e0\u4e3a\u90a3\u6837\u4f1a\u5bfc\u81f4\u6b67\u4e49\u3002--config-file \u547d\u4ee4\u884c\u6807\u5fd7\u5177\u6709\u6700\u9ad8\u4f18\u5148\u7ea7\uff0c\u5fc5\u987b\u6b63\u786e\uff1b\u5426\u5219 mypy \u4f1a\u62a5\u544a\u9519\u8bef\u5e76\u9000\u51fa\u3002\u5982\u679c\u6ca1\u6709\u547d\u4ee4\u884c\u9009\u9879\uff0cmypy \u5c06\u6309\u7167\u4e0a\u8ff0\u4f18\u5148\u7ea7\u987a\u5e8f\u67e5\u627e\u914d\u7f6e\u6587\u4ef6\u3002</p> <p>\u5927\u591a\u6570\u6807\u5fd7\u4e0e\u547d\u4ee4\u884c\u6807\u5fd7\u975e\u5e38\u63a5\u8fd1\uff0c\u4f46\u4e5f\u6709\u4e00\u4e9b\u6807\u5fd7\u540d\u79f0\u7684\u4e0d\u540c\uff0c\u4e14\u67d0\u4e9b\u6807\u5fd7\u7684\u503c\u53ef\u80fd\u4f1a\u6839\u636e\u6b63\u5728\u5904\u7406\u7684\u6a21\u5757\u6709\u6240\u4e0d\u540c\u3002</p> <p>\u4e00\u4e9b\u6807\u5fd7\u652f\u6301\u7528\u6237\u4e3b\u76ee\u5f55\u548c\u73af\u5883\u53d8\u91cf\u6269\u5c55\u3002\u8981\u5f15\u7528\u7528\u6237\u4e3b\u76ee\u5f55\uff0c\u8bf7\u5728\u8def\u5f84\u5f00\u5934\u4f7f\u7528 <code>~</code>\u3002\u8981\u6269\u5c55\u73af\u5883\u53d8\u91cf\uff0c\u8bf7\u4f7f\u7528 <code>$VARNAME</code> \u6216 <code>${VARNAME}</code>\u3002</p> <p>Mypy is very configurable. This is most useful when introducing typing to an existing codebase. See Using mypy with an existing codebase for concrete advice for that situation.</p> <p>Mypy supports reading configuration settings from a file with the following precedence order:</p> <pre><code>1. ./mypy.ini\n2. ./.mypy.ini\n3. ./pyproject.toml\n4. ./setup.cfg\n5. $XDG_CONFIG_HOME/mypy/config\n6. ~/.config/mypy/config\n7. ~/.mypy.ini\n</code></pre> <p>It is important to understand that there is no merging of configuration files, as it would lead to ambiguity. The --config-file command-line flag has the highest precedence and must be correct; otherwise mypy will report an error and exit. Without the command line option, mypy will look for configuration files in the precedence order above.</p> <p>Most flags correspond closely to command-line flags but there are some differences in flag names and some flags may take a different value based on the module being processed.</p> <p>Some flags support user home directory and environment variable expansion. To refer to the user home directory, use <code>~</code> at the beginning of the path. To expand environment variables use <code>$VARNAME</code> or <code>${VARNAME}</code>.</p>"},{"location":"mypy_conf/config_file/#\u914d\u7f6e\u6587\u4ef6\u683c\u5f0f","title":"\u914d\u7f6e\u6587\u4ef6\u683c\u5f0f","text":"<p>Config file format</p> \u4e2d\u6587\u82f1\u6587 <p>\u914d\u7f6e\u6587\u4ef6\u683c\u5f0f\u662f\u901a\u5e38\u7684 ini \u6587\u4ef6 \u683c\u5f0f\u3002\u5b83\u5e94\u5305\u542b\u7528\u65b9\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u90e8\u5206\u540d\u79f0\uff0c\u4ee5\u53ca\u5f62\u5f0f\u4e3a <code>NAME = VALUE</code> \u7684\u6807\u5fd7\u8bbe\u7f6e\u3002\u6ce8\u91ca\u4ee5 <code>#</code> \u5b57\u7b26\u5f00\u5934\u3002</p> <ul> <li> <p>\u5fc5\u987b\u5b58\u5728\u4e00\u4e2a\u540d\u4e3a <code>[mypy]</code> \u7684\u90e8\u5206\u3002\u8fd9\u6307\u5b9a\u4e86\u5168\u5c40\u6807\u5fd7\u3002</p> </li> <li> <p>\u53ef\u80fd\u5b58\u5728\u540d\u4e3a <code>[mypy-PATTERN1,PATTERN2,...]</code> \u7684\u9644\u52a0\u90e8\u5206\uff0c\u5176\u4e2d <code>PATTERN1</code>\u3001<code>PATTERN2</code> \u7b49\u662f\u9017\u53f7\u5206\u9694\u7684\u5b8c\u5168\u9650\u5b9a\u6a21\u5757\u540d\u79f0\u6a21\u5f0f\uff0c\u67d0\u4e9b\u7ec4\u4ef6\u53ef\u4ee5\u7528 <code>*</code> \u5b57\u7b26\u66ff\u4ee3\uff08\u4f8b\u5982 <code>foo.bar</code>\u3001<code>foo.bar.*</code>\u3001<code>foo.*.baz</code>\uff09\u3002\u8fd9\u4e9b\u90e8\u5206\u6307\u5b9a\u4e86\u4ec5\u9002\u7528\u4e8e\u540d\u79f0\u5339\u914d\u81f3\u5c11\u4e00\u4e2a\u6a21\u5f0f\u7684 \u6a21\u5757 \u7684\u9644\u52a0\u6807\u5fd7\u3002</p> <p>\u5f62\u5f0f\u4e3a <code>qualified_module_name</code> \u7684\u6a21\u5f0f\u4ec5\u5339\u914d\u6307\u5b9a\u7684\u6a21\u5757\uff0c\u800c <code>dotted_module_name.*</code> \u5339\u914d <code>dotted_module_name</code> \u53ca\u5176\u6240\u6709\u5b50\u6a21\u5757\uff08\u4f8b\u5982 <code>foo.bar.*</code> \u4f1a\u5339\u914d <code>foo.bar</code>\u3001<code>foo.bar.baz</code> \u548c <code>foo.bar.baz.quux</code>\uff09\u3002</p> <p>\u6a21\u5f0f\u4e5f\u53ef\u4ee5\u662f\u201c\u975e\u7ed3\u6784\u5316\u201d\u7684\u901a\u914d\u7b26\uff0c\u5176\u4e2d\u661f\u53f7\u53ef\u4ee5\u51fa\u73b0\u5728\u540d\u79f0\u7684\u4e2d\u95f4\uff08\u4f8b\u5982 <code>site.*.migrations.*</code>\uff09\u3002\u661f\u53f7\u5339\u914d\u96f6\u4e2a\u6216\u591a\u4e2a\u6a21\u5757\u7ec4\u4ef6\uff08\u56e0\u6b64 <code>site.*.migrations.*</code> \u53ef\u4ee5\u5339\u914d <code>site.migrations</code>\uff09\u3002</p> <p>\u5f53\u9009\u9879\u51b2\u7a81\u65f6\uff0c\u914d\u7f6e\u7684\u4f18\u5148\u7ea7\u987a\u5e8f\u662f\uff1a</p> <p>1.\u00a0\u6e90\u6587\u4ef6\u4e2d\u7684\u5185\u8054\u914d\u7f6e</p> <p>2.\u00a0\u5177\u6709\u5177\u4f53\u6a21\u5757\u540d\u79f0\u7684\u90e8\u5206\uff08<code>foo.bar</code>\uff09</p> <p>3.\u00a0\u5177\u6709\u201c\u975e\u7ed3\u6784\u5316\u201d\u901a\u914d\u7b26\u6a21\u5f0f\u7684\u90e8\u5206\uff08<code>foo.*.baz</code>\uff09\uff0c\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u540e\u9762\u7684\u90e8\u5206\u4f1a\u8986\u76d6\u524d\u9762\u7684\u90e8\u5206\u3002</p> <p>4.\u00a0\u5177\u6709\u201c\u7ed3\u6784\u5316\u201d\u901a\u914d\u7b26\u6a21\u5f0f\u7684\u90e8\u5206\uff08<code>foo.bar.*</code>\uff09\uff0c\u66f4\u5177\u4f53\u7684\u6a21\u5f0f\u4f1a\u8986\u76d6\u66f4\u4e00\u822c\u7684\u6a21\u5f0f\u3002</p> <p>5.\u00a0\u547d\u4ee4\u884c\u9009\u9879\u3002</p> <p>6.\u00a0\u9876\u7ea7\u914d\u7f6e\u6587\u4ef6\u9009\u9879\u3002</p> </li> </ul> <p>\u201c\u7ed3\u6784\u5316\u201d\u6a21\u5f0f\uff08\u6309\u7279\u5f02\u6027\uff09\u4e0e\u201c\u975e\u7ed3\u6784\u5316\u201d\u6a21\u5f0f\uff08\u6309\u6587\u4ef6\u987a\u5e8f\uff09\u7684\u4f18\u5148\u7ea7\u987a\u5e8f\u5dee\u5f02\u662f\u4e0d\u5e78\u7684\uff0c\u5e76\u4e14\u53ef\u80fd\u5728\u672a\u6765\u7684\u7248\u672c\u4e2d\u4f1a\u53d1\u751f\u53d8\u5316\u3002</p> <p>Note</p> <p>warn_unused_configs \u6807\u5fd7\u53ef\u80fd\u6709\u52a9\u4e8e\u8c03\u8bd5\u62fc\u5199\u9519\u8bef\u7684\u90e8\u5206\u540d\u79f0\u3002</p> <p>Note</p> <p>\u914d\u7f6e\u6807\u5fd7\u5728\u7248\u672c\u66f4\u65b0\u4e4b\u95f4\u53ef\u80fd\u4f1a\u53d1\u751f\u53d8\u5316\u3002</p> <p>The configuration file format is the usual ini file format. It should contain section names in square brackets and flag settings of the form <code>NAME = VALUE</code>. Comments start with <code>#</code> characters.</p> <ul> <li> <p>A section named <code>[mypy]</code> must be present.  This specifies the global flags.</p> </li> <li> <p>Additional sections named <code>[mypy-PATTERN1,PATTERN2,...]</code> may be present, where <code>PATTERN1</code>, <code>PATTERN2</code>, etc., are comma-separated patterns of fully-qualified module names, with some components optionally replaced by the '' character (e.g. <code>foo.bar</code>, <code>foo.bar.*</code>, <code>foo.*.baz</code>). These sections specify additional flags that only apply to modules* whose name matches at least one of the patterns.</p> <p>A pattern of the form <code>qualified_module_name</code> matches only the named module, while <code>dotted_module_name.*</code> matches <code>dotted_module_name</code> and any submodules (so <code>foo.bar.*</code> would match all of <code>foo.bar</code>, <code>foo.bar.baz</code>, and <code>foo.bar.baz.quux</code>).</p> <p>Patterns may also be \"unstructured\" wildcards, in which stars may appear in the middle of a name (e.g <code>site.*.migrations.*</code>). Stars match zero or more module components (so <code>site.*.migrations.*</code> can match <code>site.migrations</code>).</p> <p>When options conflict, the precedence order for configuration is:</p> <p>1.\u00a0Inline configuration in the source file</p> <p>2.\u00a0Sections with concrete module names (<code>foo.bar</code>)</p> <p>3.\u00a0Sections with \"unstructured\" wildcard patterns (<code>foo.*.baz</code>), with sections later in the configuration file overriding sections earlier.</p> <p>4.\u00a0Sections with \"well-structured\" wildcard patterns (<code>foo.bar.*</code>), with more specific overriding more general.</p> <p>5.\u00a0Command line options.</p> <p>6.\u00a0Top-level configuration file options.</p> </li> </ul> <p>The difference in precedence order between \"structured\" patterns (by specificity) and \"unstructured\" patterns (by order in the file) is unfortunate, and is subject to change in future versions.</p> <p>Note</p> <p>The warn_unused_configs flag may be useful to debug misspelled section names.</p> <p>Note</p> <p>Configuration flags are liable to change between releases.</p>"},{"location":"mypy_conf/config_file/#\u6bcf\u4e2a\u6a21\u5757\u548c\u5168\u5c40\u9009\u9879","title":"\u6bcf\u4e2a\u6a21\u5757\u548c\u5168\u5c40\u9009\u9879","text":"<p>Per-module and global options</p> \u4e2d\u6587\u82f1\u6587 <p>\u67d0\u4e9b\u914d\u7f6e\u9009\u9879\u53ef\u4ee5\u5728\u5168\u5c40\uff08<code>[mypy]</code> \u90e8\u5206\uff09\u6216\u6309\u6a21\u5757\uff08\u4f8b\u5982 <code>[mypy-foo.bar]</code> \u90e8\u5206\uff09\u8bbe\u7f6e\u3002</p> <p>\u5982\u679c\u4e00\u4e2a\u9009\u9879\u65e2\u5728\u5168\u5c40\u4e2d\u8bbe\u7f6e\uff0c\u4e5f\u5728\u7279\u5b9a\u6a21\u5757\u4e2d\u8bbe\u7f6e\uff0c\u5219\u6a21\u5757\u914d\u7f6e\u9009\u9879\u5177\u6709\u4f18\u5148\u6743\u3002\u8fd9\u5141\u8bb8\u4f60\u8bbe\u7f6e\u5168\u5c40\u9ed8\u8ba4\u503c\uff0c\u5e76\u5728\u9010\u4e2a\u6a21\u5757\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u8986\u76d6\u3002\u5982\u679c\u591a\u4e2a\u6a21\u5f0f\u90e8\u5206\u5339\u914d\u4e00\u4e2a\u6a21\u5757\uff0c\u5219\u4f7f\u7528\u6700\u5177\u4f53\u7684\u90e8\u5206\u4e2d\u7684\u9009\u9879\uff0c\u5f53\u5b83\u4eec\u4e0d\u4e00\u81f4\u65f6\u3002</p> <p>\u6839\u636e\u5176\u63cf\u8ff0\uff0c\u67d0\u4e9b\u5176\u4ed6\u9009\u9879\u53ef\u80fd\u53ea\u80fd\u5728\u5168\u5c40\u90e8\u5206\uff08<code>[mypy]</code>\uff09\u4e2d\u8bbe\u7f6e\u3002</p> <p>Some of the config options may be set either globally (in the <code>[mypy]</code> section) or on a per-module basis (in sections like <code>[mypy-foo.bar]</code>).</p> <p>If you set an option both globally and for a specific module, the module configuration options take precedence. This lets you set global defaults and override them on a module-by-module basis. If multiple pattern sections match a module, the options from the most specific section are used where they disagree.</p> <p>Some other options, as specified in their description, may only be set in the global section (<code>[mypy]</code>).</p>"},{"location":"mypy_conf/config_file/#\u53cd\u8f6c\u9009\u9879\u503c","title":"\u53cd\u8f6c\u9009\u9879\u503c","text":"<p>Inverting option values</p> \u4e2d\u6587\u82f1\u6587 <p>\u53d6\u5e03\u5c14\u503c\u7684\u9009\u9879\u53ef\u4ee5\u901a\u8fc7\u5728\u5176\u540d\u79f0\u524d\u6dfb\u52a0 <code>no_</code> \u6765\u8fdb\u884c\u53cd\u8f6c\uff0c\u6216\u8005\uff08\u5728\u9002\u7528\u65f6\uff09\u901a\u8fc7\u5c06\u5176\u524d\u7f00\u4ece <code>disallow</code> \u6539\u4e3a <code>allow</code>\uff08\u53cd\u4e4b\u4ea6\u7136\uff09\u6765\u8fdb\u884c\u53cd\u8f6c\u3002</p> <p>Options that take a boolean value may be inverted by adding <code>no_</code> to their name or by (when applicable) swapping their prefix from <code>disallow</code> to <code>allow</code> (and vice versa).</p>"},{"location":"mypy_conf/config_file/#\u793a\u4f8b-mypyini","title":"\u793a\u4f8b <code>mypy.ini</code>","text":"<p>Example <code>mypy.ini</code></p> \u4e2d\u6587\u82f1\u6587 <p>\u4e0b\u9762\u662f\u4e00\u4e2a <code>mypy.ini</code> \u6587\u4ef6\u7684\u793a\u4f8b\u3002\u8981\u4f7f\u7528\u6b64\u914d\u7f6e\u6587\u4ef6\uff0c\u5c06\u5176\u653e\u7f6e\u5728\u4f60\u7684\u4ee3\u7801\u5e93\u6839\u76ee\u5f55\u4e0b\uff0c\u7136\u540e\u8fd0\u884c mypy\u3002</p> <pre><code># \u5168\u5c40\u9009\u9879\uff1a\n\n[mypy]\nwarn_return_any = True\nwarn_unused_configs = True\n\n# \u6309\u6a21\u5757\u8bbe\u7f6e\u7684\u9009\u9879\uff1a\n\n[mypy-mycode.foo.*]\ndisallow_untyped_defs = True\n\n[mypy-mycode.bar]\nwarn_return_any = False\n\n[mypy-somelibrary]\nignore_missing_imports = True\n</code></pre> <p>\u8fd9\u4e2a\u914d\u7f6e\u6587\u4ef6\u5728 <code>[mypy]</code> \u90e8\u5206\u6307\u5b9a\u4e86\u4e24\u4e2a\u5168\u5c40\u9009\u9879\u3002\u8fd9\u4e24\u4e2a\u9009\u9879\u5c06\uff1a</p> <ol> <li> <p>\u5f53\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u88ab\u63a8\u65ad\u4e3a\u7c7b\u578b <code>Any</code> \u7684\u503c\u65f6\u62a5\u544a\u9519\u8bef\u3002</p> </li> <li> <p>\u62a5\u544a mypy \u672a\u4f7f\u7528\u7684\u914d\u7f6e\u9009\u9879\u3002\uff08\u8fd9\u6709\u52a9\u4e8e\u6211\u4eec\u5728\u4fee\u6539\u914d\u7f6e\u6587\u4ef6\u65f6\u6355\u83b7\u62fc\u5199\u9519\u8bef\uff09\u3002</p> </li> </ol> <p>\u63a5\u4e0b\u6765\uff0c\u8fd9\u4e2a\u914d\u7f6e\u6587\u4ef6\u6307\u5b9a\u4e86\u4e09\u4e2a\u6309\u6a21\u5757\u8bbe\u7f6e\u7684\u9009\u9879\u3002\u524d\u4e24\u4e2a\u9009\u9879\u66f4\u6539\u4e86 mypy \u5982\u4f55\u5728 <code>mycode.foo.*</code> \u548c <code>mycode.bar</code> \u6a21\u5757\u4e2d\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u5047\u8bbe\u8fd9\u662f\u4f60\u7f16\u5199\u7684\u4e24\u4e2a\u6a21\u5757\u3002\u6700\u540e\u4e00\u4e2a\u914d\u7f6e\u9009\u9879\u66f4\u6539\u4e86 mypy \u5982\u4f55\u5bf9 <code>somelibrary</code> \u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u5047\u8bbe\u8fd9\u662f\u4f60\u5b89\u88c5\u5e76\u5bfc\u5165\u7684\u67d0\u4e2a\u7b2c\u4e09\u65b9\u5e93\u3002\u8fd9\u4e9b\u9009\u9879\u5c06\uff1a</p> <ol> <li> <p>\u4ec5\u5728 <code>mycode.foo</code> \u5305\u5185\uff08\u5373\u4ec5\u5728 <code>mycode/foo</code> \u76ee\u5f55\u4e0b\u5b9a\u4e49\u7684\u51fd\u6570\uff09\u9009\u62e9\u6027\u5730\u7981\u6b62\u672a\u6307\u5b9a\u7c7b\u578b\u7684\u51fd\u6570\u5b9a\u4e49\u3002</p> </li> <li> <p>\u4ec5\u5728 <code>mycode.bar</code> \u5185\u9009\u62e9\u6027\u5730 \u7981\u7528 \u201c\u51fd\u6570\u8fd4\u56de\u4efb\u4f55\u7c7b\u578b\u201d \u7684\u8b66\u544a\u3002\u8fd9\u8986\u76d6\u4e86\u6211\u4eec\u4e4b\u524d\u8bbe\u7f6e\u7684\u5168\u5c40\u9ed8\u8ba4\u503c\u3002</p> </li> <li> <p>\u6291\u5236\u5f53\u4f60\u7684\u4ee3\u7801\u5e93\u5c1d\u8bd5\u5bfc\u5165\u6a21\u5757 <code>somelibrary</code> \u65f6\u751f\u6210\u7684\u4efb\u4f55\u9519\u8bef\u6d88\u606f\u3002\u5982\u679c <code>somelibrary</code> \u662f\u67d0\u4e2a\u7f3a\u5c11\u7c7b\u578b\u63d0\u793a\u7684\u7b2c\u4e09\u65b9\u5e93\uff0c\u8fd9\u4e00\u70b9\u5f88\u6709\u7528\u3002</p> </li> </ol> <p>Here is an example of a <code>mypy.ini</code> file. To use this config file, place it at the root of your repo and run mypy.</p> <pre><code># Global options:\n\n[mypy]\nwarn_return_any = True\nwarn_unused_configs = True\n\n# Per-module options:\n\n[mypy-mycode.foo.*]\ndisallow_untyped_defs = True\n\n[mypy-mycode.bar]\nwarn_return_any = False\n\n[mypy-somelibrary]\nignore_missing_imports = True\n</code></pre> <p>This config file specifies two global options in the <code>[mypy]</code> section. These two options will:</p> <ol> <li> <p>Report an error whenever a function returns a value that is inferred to have type <code>Any</code>.</p> </li> <li> <p>Report any config options that are unused by mypy. (This will help us catch typos when making changes to our config file).</p> </li> </ol> <p>Next, this module specifies three per-module options. The first two options change how mypy type checks code in <code>mycode.foo.*</code> and <code>mycode.bar</code>, which we assume here are two modules that you wrote. The final config option changes how mypy type checks <code>somelibrary</code>, which we assume here is some 3<sup>rd</sup> party library you've installed and are importing. These options will:</p> <ol> <li> <p>Selectively disallow untyped function definitions only within the <code>mycode.foo</code> package -- that is, only for function definitions defined in the <code>mycode/foo</code> directory.</p> </li> <li> <p>Selectively disable the \"function is returning any\" warnings within <code>mycode.bar</code> only. This overrides the global default we set earlier.</p> </li> <li> <p>Suppress any error messages generated when your codebase tries importing the module <code>somelibrary</code>. This is useful if <code>somelibrary</code> is some 3<sup>rd</sup> party library missing type hints.</p> </li> </ol>"},{"location":"mypy_conf/config_file/#\u5bfc\u5165\u53d1\u73b0","title":"\u5bfc\u5165\u53d1\u73b0","text":"<p>Import discovery</p> \u4e2d\u6587\u82f1\u6587 <p>\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u547d\u4ee4\u884c\u6587\u6863\u4e2d\u7684\u5bfc\u5165\u53d1\u73b0\u90e8\u5206\u3002</p> <code>mypy_path</code> <p>\u7c7b\u578b\uff1a \u5b57\u7b26\u4e32</p> <p>\u6307\u5b9a\u5728\u5c1d\u8bd5 <code>MYPYPATH</code> \u73af\u5883\u53d8\u91cf\u4e2d\u7684\u8def\u5f84\u540e\u4f7f\u7528\u7684\u8def\u5f84\u3002\u5982\u679c\u4f60\u5e0c\u671b\u5c06\u5b58\u6839\u4fdd\u5b58\u5728\u4ee3\u7801\u5e93\u4e2d\uff0c\u5e76\u4e0e\u914d\u7f6e\u6587\u4ef6\u4e00\u8d77\u4f7f\u7528\uff0c\u8fd9\u4e00\u70b9\u5f88\u6709\u7528\u3002\u591a\u4e2a\u8def\u5f84\u59cb\u7ec8\u7528 <code>:</code> \u6216 <code>,</code> \u5206\u9694\uff0c\u4e0d\u8bba\u5e73\u53f0\u5982\u4f55\u3002\u7528\u6237\u4e3b\u76ee\u5f55\u548c\u73af\u5883\u53d8\u91cf\u5c06\u88ab\u6269\u5c55\u3002</p> <p>\u76f8\u5bf9\u8def\u5f84\u662f\u76f8\u5bf9\u4e8e mypy \u547d\u4ee4\u7684\u5de5\u4f5c\u76ee\u5f55\uff0c\u800c\u4e0d\u662f\u914d\u7f6e\u6587\u4ef6\u7684\u8def\u5f84\u3002\u4f7f\u7528 <code>MYPY_CONFIG_FILE_DIR</code> \u73af\u5883\u53d8\u91cf\u6765\u5f15\u7528\u76f8\u5bf9\u4e8e\u914d\u7f6e\u6587\u4ef6\u7684\u8def\u5f84\uff08\u4f8b\u5982 <code>mypy_path = $MYPY_CONFIG_FILE_DIR/src</code>\uff09\u3002</p> <p>\u6b64\u9009\u9879\u53ea\u80fd\u5728\u5168\u5c40\u90e8\u5206\uff08<code>[mypy]</code>\uff09\u4e2d\u8bbe\u7f6e\u3002</p> <p>\u6ce8\u610f\uff1a \u5728 Windows \u4e0a\uff0c\u4f7f\u7528 UNC \u8def\u5f84\u4ee5\u907f\u514d\u4f7f\u7528 <code>:</code>\uff08\u4f8b\u5982 <code>\\\\127.0.0.1\\X$\\MyDir</code>\uff0c\u5176\u4e2d <code>X</code> \u662f\u9a71\u52a8\u5668\u5b57\u6bcd\uff09\u3002</p> <code>files</code> <p>\u7c7b\u578b\uff1a \u4ee5\u9017\u53f7\u5206\u9694\u7684\u5b57\u7b26\u4e32\u5217\u8868</p> <p>\u4e00\u4e2a\u4ee5\u9017\u53f7\u5206\u9694\u7684\u8def\u5f84\u5217\u8868\uff0c\u5982\u679c\u547d\u4ee4\u884c\u4e0a\u672a\u63d0\u4f9b\u8def\u5f84\uff0c\u5219 mypy \u5c06\u68c0\u67e5\u8fd9\u4e9b\u8def\u5f84\u3002\u652f\u6301\u4f7f\u7528 glob \u8fdb\u884c\u9012\u5f52\u6587\u4ef6\u5339\u914d\uff0c\u5176\u4e2d <code>*</code>\uff08\u4f8b\u5982 <code>*.py</code>\uff09\u5339\u914d\u5f53\u524d\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\uff0c<code>**/</code>\uff08\u4f8b\u5982 <code>**/*.py</code>\uff09\u5339\u914d\u5f53\u524d\u76ee\u5f55\u4e0b\u4efb\u4f55\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u3002\u7528\u6237\u4e3b\u76ee\u5f55\u548c\u73af\u5883\u53d8\u91cf\u5c06\u88ab\u6269\u5c55\u3002</p> <p>\u6b64\u9009\u9879\u53ea\u80fd\u5728\u5168\u5c40\u90e8\u5206\uff08<code>[mypy]</code>\uff09\u4e2d\u8bbe\u7f6e\u3002</p> <code>modules</code> <p>\u7c7b\u578b\uff1a \u4ee5\u9017\u53f7\u5206\u9694\u7684\u5b57\u7b26\u4e32\u5217\u8868</p> <p>\u4e00\u4e2a\u4ee5\u9017\u53f7\u5206\u9694\u7684\u5305\u5217\u8868\uff0c\u5982\u679c\u547d\u4ee4\u884c\u4e0a\u672a\u63d0\u4f9b\uff0c\u5219 mypy \u5c06\u68c0\u67e5\u8fd9\u4e9b\u5305\u3002Mypy \u4e0d\u4f1a \u9012\u5f52\u5730\u5bf9\u63d0\u4f9b\u7684\u6a21\u5757\u7684\u4efb\u4f55\u5b50\u6a21\u5757\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u3002</p> <p>\u6b64\u9009\u9879\u53ea\u80fd\u5728\u5168\u5c40\u90e8\u5206\uff08<code>[mypy]</code>\uff09\u4e2d\u8bbe\u7f6e\u3002</p> <code>packages</code> <p>\u7c7b\u578b\uff1a \u4ee5\u9017\u53f7\u5206\u9694\u7684\u5b57\u7b26\u4e32\u5217\u8868</p> <p>\u4e00\u4e2a\u4ee5\u9017\u53f7\u5206\u9694\u7684\u5305\u5217\u8868\uff0c\u5982\u679c\u547d\u4ee4\u884c\u4e0a\u672a\u63d0\u4f9b\uff0c\u5219 mypy \u5c06\u68c0\u67e5\u8fd9\u4e9b\u5305\u3002Mypy \u4f1a \u9012\u5f52\u5730\u5bf9\u63d0\u4f9b\u7684\u5305\u7684\u4efb\u4f55\u5b50\u6a21\u5757\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u3002\u6b64\u6807\u5fd7\u4e0e modules \u76f8\u540c\uff0c\u552f\u4e00\u7684\u533a\u522b\u5728\u4e8e\u6b64\u884c\u4e3a\u3002</p> <p>\u6b64\u9009\u9879\u53ea\u80fd\u5728\u5168\u5c40\u90e8\u5206\uff08<code>[mypy]</code>\uff09\u4e2d\u8bbe\u7f6e\u3002</p> <code>exclude</code> <p>\u7c7b\u578b\uff1a \u6b63\u5219\u8868\u8fbe\u5f0f</p> <p>\u4e00\u4e2a\u5339\u914d\u6587\u4ef6\u540d\u3001\u76ee\u5f55\u540d\u548c\u8def\u5f84\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\uff0cmy.py \u5728\u9012\u5f52\u53d1\u73b0\u8981\u68c0\u67e5\u7684\u6587\u4ef6\u65f6\u5e94\u5ffd\u7565\u8fd9\u4e9b\u5339\u914d\u9879\u3002\u8bf7\u5728\u6240\u6709\u5e73\u53f0\u4e0a\u4f7f\u7528\u6b63\u659c\u6760\uff08<code>/</code>\uff09\u4f5c\u4e3a\u76ee\u5f55\u5206\u9694\u7b26\u3002</p> <pre><code>[mypy]\nexclude = (?x)(\n    ^one\\.py$    # \u6587\u4ef6\u540d\u4e3a \"one.py\"\n    | two\\.pyi$  # \u6216\u4ee5 \"two.pyi\" \u7ed3\u5c3e\u7684\u6587\u4ef6\n    | ^three\\.   # \u6216\u4ee5 \"three.\" \u5f00\u5934\u7684\u6587\u4ef6\n    )\n</code></pre> <p>\u5236\u4f5c\u4e00\u4e2a\u65e2\u6392\u9664\u591a\u4e2a\u6587\u4ef6\u53c8\u4fdd\u6301\u53ef\u8bfb\u6027\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u53ef\u80fd\u662f\u4e00\u4e2a\u6311\u6218\u3002\u4e0a\u9762\u7684\u793a\u4f8b\u5c55\u793a\u4e86\u4e00\u79cd\u65b9\u6cd5\u3002<code>(?x)</code> \u542f\u7528\u540e\u7eed\u6b63\u5219\u8868\u8fbe\u5f0f\u7684 <code>VERBOSE</code> \u6807\u5fd7\uff0c\u8fd9\u6837\u53ef\u4ee5 \u5ffd\u7565\u5927\u90e8\u5206\u7a7a\u767d\u5b57\u7b26\u5e76\u652f\u6301\u6ce8\u91ca\u3002\u4e0a\u8ff0\u6b63\u5219\u8868\u8fbe\u5f0f\u7b49\u540c\u4e8e\uff1a<code>(^one\\.py$|two\\.pyi$|^three\\.)</code>\u3002</p> <p>\u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 --exclude\u3002</p> <p>\u6b64\u9009\u9879\u53ea\u80fd\u5728\u5168\u5c40\u90e8\u5206\uff08<code>[mypy]</code>\uff09\u4e2d\u8bbe\u7f6e\u3002</p> <p>Note</p> <p>\u8bf7\u6ce8\u610f\uff0cTOML \u7684\u7b49\u6548\u9879\u7565\u6709\u4e0d\u540c\u3002\u5b83\u53ef\u4ee5\u662f\u4e00\u4e2a\u5355\u4e00\u7684\u5b57\u7b26\u4e32\uff08\u5305\u62ec\u591a\u884c\u5b57\u7b26\u4e32\uff09\u2014\u2014\u4f5c\u4e3a\u5355\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u5904\u7406\u2014\u2014\u6216\u8005\u662f\u8fd9\u6837\u7684\u5b57\u7b26\u4e32\u6570\u7ec4\u3002\u4ee5\u4e0b TOML \u793a\u4f8b\u4e0e\u4e0a\u8ff0 INI \u793a\u4f8b\u7b49\u6548\u3002</p> <p>\u5b57\u7b26\u4e32\u6570\u7ec4\uff1a</p> <pre><code>[tool.mypy]\nexclude = [\n    \"^one\\\\.py$\",  # TOML \u7684\u53cc\u5f15\u53f7\u5b57\u7b26\u4e32\u9700\u8981\u8f6c\u4e49\u53cd\u659c\u6760\n    'two\\.pyi$',  # TOML \u7684\u5355\u5f15\u53f7\u5b57\u7b26\u4e32\u4e0d\u9700\u8981\n    '^three\\.',\n]\n</code></pre> <p>\u5355\u4e2a\u591a\u884c\u5b57\u7b26\u4e32\uff1a</p> <pre><code>[tool.mypy]\nexclude = '''(?x)(\n    ^one\\.py$    # \u6587\u4ef6\u540d\u4e3a \"one.py\"\n    | two\\.pyi$  # \u6216\u4ee5 \"two.pyi\" \u7ed3\u5c3e\u7684\u6587\u4ef6\n    | ^three\\.   # \u6216\u4ee5 \"three.\" \u5f00\u5934\u7684\u6587\u4ef6\n)'''  # TOML \u7684\u5355\u5f15\u53f7\u5b57\u7b26\u4e32\u4e0d\u9700\u8981\u8f6c\u4e49\u53cd\u659c\u6760\n</code></pre> <p>\u53c2\u89c1 \u4f7f\u7528 pyproject.toml \u6587\u4ef6\u3002</p> <code>namespace_packages</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a True</p> <p>\u542f\u7528 PEP 420 \u98ce\u683c\u7684\u547d\u540d\u7a7a\u95f4\u5305\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1\u5bf9\u5e94\u7684\u6807\u5fd7 --no-namespace-packages\u3002</p> <p>\u6b64\u9009\u9879\u53ea\u80fd\u5728\u5168\u5c40\u90e8\u5206\uff08<code>[mypy]</code>\uff09\u4e2d\u8bbe\u7f6e\u3002</p> <code>explicit_package_bases</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a False</p> <p>\u6b64\u6807\u5fd7\u544a\u77e5 mypy \u9876\u7ea7\u5305\u5c06\u57fa\u4e8e\u5f53\u524d\u76ee\u5f55\u3001<code>MYPYPATH</code> \u73af\u5883\u53d8\u91cf\u6216 mypy_path \u914d\u7f6e\u9009\u9879\u4e2d\u7684\u6210\u5458\u3002\u6b64\u9009\u9879\u4ec5\u5728\u6ca1\u6709 <code>__init__.py</code> \u6587\u4ef6\u7684\u60c5\u51b5\u4e0b\u6709\u7528\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 \u6620\u5c04\u6587\u4ef6\u8def\u5f84\u5230\u6a21\u5757\u3002</p> <p>\u6b64\u9009\u9879\u53ea\u80fd\u5728\u5168\u5c40\u90e8\u5206\uff08<code>[mypy]</code>\uff09\u4e2d\u8bbe\u7f6e\u3002</p> <code>ignore_missing_imports</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a False</p> <p>\u6291\u5236\u5173\u4e8e\u65e0\u6cd5\u89e3\u6790\u7684\u5bfc\u5165\u7684\u9519\u8bef\u6d88\u606f\u3002</p> <p>\u5982\u679c\u6b64\u9009\u9879\u5728\u6309\u6a21\u5757\u90e8\u5206\u4e2d\u4f7f\u7528\uff0c\u6a21\u5757\u540d\u79f0\u5e94\u4e0e \u5bfc\u5165\u7684 \u6a21\u5757\u540d\u79f0\u5339\u914d\uff0c\u800c\u4e0d\u662f\u5305\u542b\u5bfc\u5165\u8bed\u53e5\u7684\u6a21\u5757\u540d\u79f0\u3002</p> <code>follow_imports</code> <p>\u7c7b\u578b\uff1a \u5b57\u7b26\u4e32</p> <p>\u9ed8\u8ba4\u503c\uff1a <code>normal</code></p> <p>\u6307\u5b9a\u5f53\u5bfc\u5165\u7684\u6a21\u5757\u4f5c\u4e3a <code>.py</code> \u6587\u4ef6\u627e\u5230\u4e14\u4e0d\u5c5e\u4e8e\u547d\u4ee4\u884c\u63d0\u4f9b\u7684\u6587\u4ef6\u3001\u6a21\u5757\u548c\u5305\u65f6\u5e94\u8be5\u600e\u4e48\u5904\u7406\u3002</p> <p>\u56db\u4e2a\u53ef\u80fd\u7684\u503c\u662f <code>normal</code>\u3001<code>silent</code>\u3001<code>skip</code> \u548c <code>error</code>\u3002\u6709\u5173\u89e3\u91ca\uff0c\u8bf7\u53c2\u89c1 --follow-imports \u547d\u4ee4\u884c\u6807\u5fd7\u7684\u8ba8\u8bba\u3002</p> <p>\u5728\u6309\u6a21\u5757\u90e8\u5206\u4e2d\u4f7f\u7528\u6b64\u9009\u9879\uff08\u53ef\u80fd\u4f7f\u7528\u901a\u914d\u7b26\uff0c\u5982\u672c\u9875\u9876\u90e8\u6240\u8ff0\uff09\u662f\u4e00\u79cd\u9632\u6b62 mypy \u68c0\u67e5\u4ee3\u7801\u90e8\u5206\u7684\u597d\u65b9\u6cd5\u3002</p> <p>\u5982\u679c\u6b64\u9009\u9879\u5728\u6309\u6a21\u5757\u90e8\u5206\u4e2d\u4f7f\u7528\uff0c\u6a21\u5757\u540d\u79f0\u5e94\u4e0e \u5bfc\u5165\u7684 \u6a21\u5757\u540d\u79f0\u5339\u914d\uff0c\u800c\u4e0d\u662f\u5305\u542b\u5bfc\u5165\u8bed\u53e5\u7684\u6a21\u5757\u540d\u79f0\u3002</p> <code>follow_imports_for_stubs</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a False</p> <p>\u786e\u5b9a\u662f\u5426\u5373\u4f7f\u5bf9\u4e8e\u5b58\u6839\uff08<code>.pyi</code>\uff09\u6587\u4ef6\u4e5f\u5c0a\u91cd follow_imports \u8bbe\u7f6e\u3002</p> <p>\u4e0e follow_imports=skip \u4e00\u8d77\u4f7f\u7528\uff0c\u53ef\u4ee5\u7528\u4e8e\u6291\u5236\u4ece <code>typeshed</code> \u5bfc\u5165\u6a21\u5757\uff0c\u5c06\u5176\u66ff\u6362\u4e3a <code>Any</code>\u3002</p> <p>\u4e0e follow_imports=error \u4e00\u8d77\u4f7f\u7528\uff0c\u53ef\u4ee5\u7528\u4e8e\u5c06\u7279\u5b9a <code>typeshed</code> \u6a21\u5757\u7684\u4efb\u4f55\u4f7f\u7528\u89c6\u4e3a\u9519\u8bef\u3002</p> <p>Note</p> <p>\u8fd9\u5728 mypy \u5b88\u62a4\u8fdb\u7a0b\u4e2d\u4e0d\u53d7\u652f\u6301\u3002</p> <code>python_executable</code> <p>\u7c7b\u578b\uff1a \u5b57\u7b26\u4e32</p> <p>\u6307\u5b9a\u8981\u68c0\u67e5\u7684 Python \u53ef\u6267\u884c\u6587\u4ef6\u7684\u8def\u5f84\uff0c\u4ee5\u6536\u96c6\u53ef\u7528\u7684 PEP 561 \u5305 \u7684\u5217\u8868\u3002\u7528\u6237\u4e3b\u76ee\u5f55\u548c\u73af\u5883\u53d8\u91cf\u5c06\u88ab\u6269\u5c55\u3002\u9ed8\u8ba4\u503c\u4e3a\u7528\u4e8e\u8fd0\u884c mypy \u7684\u53ef\u6267\u884c\u6587\u4ef6\u3002</p> <p>\u6b64\u9009\u9879\u53ea\u80fd\u5728\u5168\u5c40\u90e8\u5206\uff08<code>[mypy]</code>\uff09\u4e2d\u8bbe\u7f6e\u3002</p> <code>no_site_packages</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a False</p> <p>\u7981\u7528\u4f7f\u7528\u5df2\u5b89\u88c5\u5305\u4e2d\u7684\u7c7b\u578b\u4fe1\u606f\uff08\u53c2\u89c1 PEP 561\uff09\u3002\u8fd9\u8fd8\u5c06\u7981\u7528\u641c\u7d22\u53ef\u7528\u7684 Python \u53ef\u6267\u884c\u6587\u4ef6\u3002\u6b64\u9009\u9879\u7684\u884c\u4e3a\u4e0e --no-site-packages \u547d\u4ee4\u884c\u6807\u5fd7\u76f8\u540c\u3002</p> <code>no_silence_site_packages</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a False</p> <p>\u542f\u7528\u62a5\u544a\u5728\u5df2\u5b89\u88c5\u5305\u4e2d\u751f\u6210\u7684\u9519\u8bef\u6d88\u606f\uff08\u6709\u5173\u5206\u53d1\u7c7b\u578b\u4fe1\u606f\u7684\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 PEP 561\uff09\u3002\u8fd9\u4e9b\u9519\u8bef\u6d88\u606f\u9ed8\u8ba4\u88ab\u6291\u5236\uff0c\u56e0\u4e3a\u4f60\u901a\u5e38\u65e0\u6cd5\u63a7\u5236\u7b2c\u4e09\u65b9\u4ee3\u7801\u4e2d\u7684\u9519\u8bef\u3002</p> <p>\u6b64\u9009\u9879\u53ea\u80fd\u5728\u5168\u5c40\u90e8\u5206\uff08<code>[mypy]</code>\uff09\u4e2d\u8bbe\u7f6e\u3002</p> <p>For more information, see the Import discovery section of the command line docs.</p> <code>mypy_path</code> <p>type: string</p> <p>Specifies the paths to use, after trying the paths from <code>MYPYPATH</code> environment variable.  Useful if you'd like to keep stubs in your repo, along with the config file. Multiple paths are always separated with a <code>:</code> or <code>,</code> regardless of the platform. User home directory and environment variables will be expanded.</p> <p>Relative paths are treated relative to the working directory of the mypy command, not the config file. Use the <code>MYPY_CONFIG_FILE_DIR</code> environment variable to refer to paths relative to the config file (e.g. <code>mypy_path = $MYPY_CONFIG_FILE_DIR/src</code>).</p> <p>This option may only be set in the global section (<code>[mypy]</code>).</p> <p>Note: On Windows, use UNC paths to avoid using <code>:</code> (e.g. <code>\\\\127.0.0.1\\X$\\MyDir</code> where <code>X</code> is the driv letter).</p> <code>files</code> <p>type: comma-separated list of strings</p> <p>A comma-separated list of paths which should be checked by mypy if none are given on the command line. Supports recursive file globbing using glob, where <code>*</code> (e.g. <code>*.py</code>) matches files in the current directory and <code>**/</code> (e.g. <code>**/*.py</code>) matches files in any directories below the current one. User home directory and environment variables will be expanded.</p> <p>This option may only be set in the global section (<code>[mypy]</code>).</p> <code>modules</code> <p>type: comma-separated list of strings</p> <p>A comma-separated list of packages which should be checked by mypy if none are given on the command line. Mypy will not recursively type check any submodules of the provided module.</p> <p>This option may only be set in the global section (<code>[mypy]</code>).</p> <code>packages</code> <p>type: comma-separated list of strings</p> <p>A comma-separated list of packages which should be checked by mypy if none are given on the command line.  Mypy will recursively type check any submodules of the provided package. This flag is identical to modules apart from this behavior.</p> <p>This option may only be set in the global section (<code>[mypy]</code>).</p> <code>exclude</code> <p>type: regular expression</p> <p>A regular expression that matches file names, directory names and paths which mypy should ignore while recursively discovering files to check. Use forward slashes (<code>/</code>) as directory separators on all platforms.</p> <pre><code>[mypy]\nexclude = (?x)(\n    ^one\\.py$    # files named \"one.py\"\n    | two\\.pyi$  # or files ending with \"two.pyi\"\n    | ^three\\.   # or files starting with \"three.\"\n    )\n</code></pre> <p>Crafting a single regular expression that excludes multiple files while remaining human-readable can be a challenge. The above example demonstrates one approach. <code>(?x)</code> enables the <code>VERBOSE</code> flag for the subsequent regular expression, which ignores most whitespace and supports comments. The above is equivalent to: <code>(^one\\.py$|two\\.pyi$|^three\\.)</code>.</p> <p>For more details, see --exclude.</p> <p>This option may only be set in the global section (<code>[mypy]</code>).</p> <p>Note</p> <p>Note that the TOML equivalent differs slightly. It can be either a single string (including a multi-line string) -- which is treated as a single regular expression -- or an array of such strings. The following TOML examples are equivalent to the above INI example.</p> <p>Array of strings:</p> <pre><code>[tool.mypy]\nexclude = [\n    \"^one\\\\.py$\",  # TOML's double-quoted strings require escaping backslashes\n    'two\\.pyi$',  # but TOML's single-quoted strings do not\n    '^three\\.',\n]\n</code></pre> <p>A single, multi-line string:</p> <pre><code>[tool.mypy]\nexclude = '''(?x)(\n    ^one\\.py$    # files named \"one.py\"\n    | two\\.pyi$  # or files ending with \"two.pyi\"\n    | ^three\\.   # or files starting with \"three.\"\n)'''  # TOML's single-quoted strings do not require escaping backslashes\n</code></pre> <p>See Using a pyproject.toml file.</p> <p><code>namespace_packages</code></p> <pre><code>:    **type:** boolean\n\n**default:** True\n\nEnables [PEP 420](https://peps.python.org/pep-0420/) style namespace packages.  See the corresponding flag [--no-namespace-packages](./command_line.md#no-namespace-packages) for more information.\n\nThis option may only be set in the global section (``[mypy]``).\n</code></pre> <p><code>explicit_package_bases</code></p> <pre><code>:    **type:** boolean\n\n**default:** False\n\nThis flag tells mypy that top-level packages will be based in either the current directory, or a member of the ``MYPYPATH`` environment variable or [mypy_path](#mypy_path) config option. This option is only useful in the absence of `__init__.py`. See [Mapping file paths to modules](./running_mypy.md#\u6620\u5c04\u6587\u4ef6\u8def\u5f84\u5230\u6a21\u5757) for details.\n\nThis option may only be set in the global section (``[mypy]``).\n</code></pre> <p><code>ignore_missing_imports</code></p> <pre><code>:    **type:** boolean\n\n**default:** False\n\nSuppresses error messages about imports that cannot be resolved.\n\nIf this option is used in a per-module section, the module name should match the name of the *imported* module, not the module containing the import statement.\n</code></pre> <p><code>follow_imports</code></p> <pre><code>:    **type:** string\n\n**default:** ``normal``\n\nDirects what to do with imports when the imported module is found as a ``.py`` file and not part of the files, modules and packages provided on the command line.\n\nThe four possible values are ``normal``, ``silent``, ``skip`` and ``error``.  For explanations see the discussion for the [--follow-imports](./command_line.md#follow-imports) command line flag.\n\nUsing this option in a per-module section (potentially with a wildcard, as described at the top of this page) is a good way to prevent mypy from checking portions of your code.\n\nIf this option is used in a per-module section, the module name should match the name of the *imported* module, not the module containing the import statement.\n</code></pre> <p><code>follow_imports_for_stubs</code></p> <pre><code>:    **type:** boolean\n\n**default:** False\n\nDetermines whether to respect the [follow_imports](#follow_imports) setting even for stub (``.pyi``) files.\n\nUsed in conjunction with [follow_imports=skip](#follow_imports), this can be used to suppress the import of a module from ``typeshed``, replacing it with ``Any``.\n\nUsed in conjunction with [follow_imports=error](#follow_imports), this can be used to make any use of a particular ``typeshed`` module an error.\n\n!!! note\n\n    This is not supported by the mypy daemon.\n</code></pre> <p><code>python_executable</code></p> <pre><code>:    **type:** string\n\nSpecifies the path to the Python executable to inspect to collect a list of available [PEP 561 packages](https://mypy.readthedocs.io/en/stable/installed_packages.html#installed-packages). User home directory and environment variables will be expanded. Defaults to the executable used to run mypy.\n\nThis option may only be set in the global section (``[mypy]``).\n</code></pre> <p><code>no_site_packages</code></p> <pre><code>:    **type:** boolean\n\n**default:** False\n\nDisables using type information in installed packages (see [PEP 561](https://peps.python.org/pep-0561/)). This will also disable searching for a usable Python executable. This acts the same as [--no-site-packages](./command_line.md#no-site-packages) command line flag.\n</code></pre> <p><code>no_silence_site_packages</code></p> <pre><code>:    **type:** boolean\n\n**default:** False\n\nEnables reporting error messages generated within installed packages (see [PEP 561](https://peps.python.org/pep-0561/) for more details on distributing type information). Those error messages are suppressed by default, since you are usually not able to control errors in 3rd party code.\n\nThis option may only be set in the global section (``[mypy]``).\n</code></pre>"},{"location":"mypy_conf/config_file/#\u5e73\u53f0\u914d\u7f6e","title":"\u5e73\u53f0\u914d\u7f6e","text":"<p>Platform configuration</p> \u4e2d\u6587\u82f1\u6587 <code>python_version</code> <p>\u7c7b\u578b\uff1a \u5b57\u7b26\u4e32</p> <p>\u6307\u5b9a\u7528\u4e8e\u89e3\u6790\u548c\u68c0\u67e5\u76ee\u6807\u7a0b\u5e8f\u7684 Python \u7248\u672c\u3002\u5b57\u7b26\u4e32\u683c\u5f0f\u5e94\u4e3a <code>MAJOR.MINOR</code>\u2014\u2014\u4f8b\u5982 <code>2.7</code>\u3002\u9ed8\u8ba4\u503c\u662f\u7528\u4e8e\u8fd0\u884c mypy \u7684 Python \u89e3\u91ca\u5668\u7684\u7248\u672c\u3002</p> <p>\u6b64\u9009\u9879\u53ea\u80fd\u5728\u5168\u5c40\u90e8\u5206\uff08<code>[mypy]</code>\uff09\u4e2d\u8bbe\u7f6e\u3002</p> <code>platform</code> <p>\u7c7b\u578b\uff1a \u5b57\u7b26\u4e32</p> <p>\u6307\u5b9a\u76ee\u6807\u7a0b\u5e8f\u7684\u64cd\u4f5c\u7cfb\u7edf\u5e73\u53f0\uff0c\u4f8b\u5982 <code>darwin</code> \u6216 <code>win32</code>\uff08\u5206\u522b\u8868\u793a OS X \u6216 Windows\uff09\u3002\u9ed8\u8ba4\u503c\u662f Python \u7684 sys.platform \u53d8\u91cf\u6240\u63ed\u793a\u7684\u5f53\u524d\u5e73\u53f0\u3002</p> <p>\u6b64\u9009\u9879\u53ea\u80fd\u5728\u5168\u5c40\u90e8\u5206\uff08<code>[mypy]</code>\uff09\u4e2d\u8bbe\u7f6e\u3002</p> <code>always_true</code> <p>\u7c7b\u578b\uff1a \u4ee5\u9017\u53f7\u5206\u9694\u7684\u5b57\u7b26\u4e32\u5217\u8868</p> <p>\u6307\u5b9a\u4e00\u4e2a\u53d8\u91cf\u5217\u8868\uff0c\u8fd9\u4e9b\u53d8\u91cf\u5c06\u88ab mypy \u89c6\u4e3a\u59cb\u7ec8\u4e3a\u771f\uff08compile-time constants that are always true\uff09\u7684\u5e38\u91cf\u3002</p> <code>always_false</code> <p>\u7c7b\u578b\uff1a \u4ee5\u9017\u53f7\u5206\u9694\u7684\u5b57\u7b26\u4e32\u5217\u8868</p> <p>\u6307\u5b9a\u4e00\u4e2a\u53d8\u91cf\u5217\u8868\uff0c\u8fd9\u4e9b\u53d8\u91cf\u5c06\u88ab mypy \u89c6\u4e3a\u59cb\u7ec8\u4e3a\u5047\uff08compile-time constants that are always false\uff09\u7684\u5e38\u91cf\u3002</p> <code>python_version</code> <p>type: string</p> <p>Specifies the Python version used to parse and check the target program.  The string should be in the format <code>MAJOR.MINOR</code> -- for example <code>2.7</code>.  The default is the version of the Python interpreter used to run mypy.</p> <p>This option may only be set in the global section (<code>[mypy]</code>).</p> <code>platform</code> <p>type: string</p> <p>Specifies the OS platform for the target program, for example <code>darwin</code> or <code>win32</code> (meaning OS X or Windows, respectively). The default is the current platform as revealed by Python's sys.platform variable.</p> <p>This option may only be set in the global section (<code>[mypy]</code>).</p> <code>always_true</code> <p>type: comma-separated list of strings</p> <p>Specifies a list of variables that mypy will treat as compile-time constants that are always true.</p> <code>always_false</code> <p>type: comma-separated list of strings</p> <p>Specifies a list of variables that mypy will treat as compile-time constants that are always false.</p>"},{"location":"mypy_conf/config_file/#\u7981\u6b62\u52a8\u6001\u7c7b\u578b","title":"\u7981\u6b62\u52a8\u6001\u7c7b\u578b","text":"<p>Disallow dynamic typing</p> \u4e2d\u6587\u82f1\u6587 <p>\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1\u547d\u4ee4\u884c\u6587\u6863\u7684 Disallow dynamic typing \u90e8\u5206\u3002</p> <code>disallow_any_unimported</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a False</p> <p>\u7981\u6b62\u4f7f\u7528\u6765\u81ea\u672a\u8ddf\u8e2a\u5bfc\u5165\u7684\u7c7b\u578b\uff08\u6765\u81ea\u672a\u8ddf\u8e2a\u5bfc\u5165\u7684\u4efb\u4f55\u5185\u5bb9\u4f1a\u81ea\u52a8\u88ab\u8d4b\u4e88 <code>Any</code> \u7c7b\u578b\uff09\u3002</p> <code>disallow_any_expr</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a False</p> <p>\u7981\u6b62\u6a21\u5757\u4e2d\u6240\u6709\u5177\u6709 <code>Any</code> \u7c7b\u578b\u7684\u8868\u8fbe\u5f0f\u3002</p> <code>disallow_any_decorated</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a False</p> <p>\u7981\u6b62\u88c5\u9970\u5668\u8f6c\u6362\u540e\u51fd\u6570\u7b7e\u540d\u4e2d\u7684 <code>Any</code> \u7c7b\u578b\u3002</p> <code>disallow_any_explicit</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a False</p> <p>\u7981\u6b62\u5728\u7c7b\u578b\u4f4d\u7f6e\uff08\u5982\u7c7b\u578b\u6ce8\u89e3\u548c\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\uff09\u4e2d\u663e\u5f0f\u4f7f\u7528 <code>Any</code>\u3002</p> <code>disallow_any_generics</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a False</p> <p>\u7981\u6b62\u4f7f\u7528\u672a\u6307\u5b9a\u663e\u5f0f\u7c7b\u578b\u53c2\u6570\u7684\u6cdb\u578b\u7c7b\u578b\u3002</p> <code>disallow_subclassing_any</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a False</p> <p>\u7981\u6b62\u5bf9 <code>Any</code> \u7c7b\u578b\u7684\u503c\u8fdb\u884c\u5b50\u7c7b\u5316\u3002</p> <p>For more information, see the Disallow dynamic typing section of the command line docs.</p> <code>disallow_any_unimported</code> <p>type: boolean</p> <p>default: False</p> <p>Disallows usage of types that come from unfollowed imports (anything imported from an unfollowed import is automatically given a type of <code>Any</code>).</p> <code>disallow_any_expr</code> <p>type: boolean</p> <p>default: False</p> <p>Disallows all expressions in the module that have type <code>Any</code>.</p> <code>disallow_any_decorated</code> <p>type: boolean</p> <p>default: False</p> <p>Disallows functions that have <code>Any</code> in their signature after decorator transformation.</p> <code>disallow_any_explicit</code> <p>type: boolean</p> <p>default: False</p> <p>Disallows explicit <code>Any</code> in type positions such as type annotations and generic type parameters.</p> <code>disallow_any_generics</code> <p>type: boolean</p> <p>default: False</p> <p>Disallows usage of generic types that do not specify explicit type parameters.</p> <code>disallow_subclassing_any</code> <p>type: boolean</p> <p>default: False</p> <p>Disallows subclassing a value of type <code>Any</code>.</p>"},{"location":"mypy_conf/config_file/#\u672a\u7c7b\u578b\u5316\u7684\u5b9a\u4e49\u4e0e\u8c03\u7528","title":"\u672a\u7c7b\u578b\u5316\u7684\u5b9a\u4e49\u4e0e\u8c03\u7528","text":"<p>Untyped definitions and calls</p> \u4e2d\u6587\u82f1\u6587 <p>\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1\u547d\u4ee4\u884c\u6587\u6863\u7684 Untyped definitions and calls \u90e8\u5206\u3002</p> <code>disallow_untyped_calls</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a False</p> <p>\u7981\u6b62\u4ece\u5177\u6709\u7c7b\u578b\u6ce8\u89e3\u7684\u51fd\u6570\u4e2d\u8c03\u7528\u6ca1\u6709\u7c7b\u578b\u6ce8\u89e3\u7684\u51fd\u6570\u3002\u8bf7\u6ce8\u610f\uff0c\u5f53\u5728\u6bcf\u4e2a\u6a21\u5757\u9009\u9879\u4e2d\u4f7f\u7528\u65f6\uff0c\u5b83\u4f1a\u5728\u6307\u5b9a\u7684\u6a21\u5757\u5185\u90e8\u542f\u7528/\u7981\u7528\u6b64\u68c0\u67e5\uff0c\u800c\u4e0d\u662f\u5bf9\u6765\u81ea\u8fd9\u4e9b\u6a21\u5757\u7684\u51fd\u6570\u8fdb\u884c\u68c0\u67e5\u3002\u4f8b\u5982\uff0c\u50cf\u8fd9\u6837\u7684\u914d\u7f6e\uff1a</p> <pre><code>[mypy]\ndisallow_untyped_calls = True\n\n[mypy-some.library.*]\ndisallow_untyped_calls = False\n</code></pre> <p>\u5c06\u5728 <code>some.library</code> \u5185\u90e8\u7981\u7528\u6b64\u68c0\u67e5\uff0c\u800c\u4e0d\u662f\u5bf9\u5bfc\u5165 <code>some.library</code> \u7684\u4ee3\u7801\u8fdb\u884c\u68c0\u67e5\u3002\u5982\u679c\u4f60\u60f3\u9009\u62e9\u6027\u5730\u5bf9\u6240\u6709\u5bfc\u5165 <code>some.library</code> \u7684\u4ee3\u7801\u7981\u7528\u6b64\u68c0\u67e5\uff0c\u4f60\u5e94\u8be5\u4f7f\u7528 untyped_calls_exclude\uff0c\u4f8b\u5982\uff1a</p> <pre><code>[mypy]\ndisallow_untyped_calls = True\nuntyped_calls_exclude = some.library\n</code></pre> <code>untyped_calls_exclude</code> <p>\u7c7b\u578b\uff1a \u4ee5\u9017\u53f7\u5206\u9694\u7684\u5b57\u7b26\u4e32\u5217\u8868</p> <p>\u9009\u62e9\u6027\u5730\u6392\u9664\u7279\u5b9a\u5305\u3001\u6a21\u5757\u548c\u7c7b\u4e2d\u5b9a\u4e49\u7684\u51fd\u6570\u548c\u65b9\u6cd5\uff0c\u4ee5\u514d\u53d7 disallow_untyped_calls \u7684\u5f71\u54cd\u3002\u8fd9\u4e5f\u9002\u7528\u4e8e\u5305\u7684\u6240\u6709\u5b50\u6a21\u5757\uff08\u5373\u7ed9\u5b9a\u524d\u7f00\u4e2d\u7684\u6240\u6709\u5185\u5bb9\uff09\u3002\u8bf7\u6ce8\u610f\uff0c\u6b64\u9009\u9879\u4e0d\u652f\u6301\u9010\u6587\u4ef6\u914d\u7f6e\uff0c\u6392\u9664\u5217\u8868\u662f\u9488\u5bf9\u4f60\u6240\u6709\u4ee3\u7801\u5168\u5c40\u5b9a\u4e49\u7684\u3002</p> <code>disallow_untyped_defs</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a False</p> <p>\u7981\u6b62\u5b9a\u4e49\u6ca1\u6709\u7c7b\u578b\u6ce8\u89e3\u6216\u7c7b\u578b\u6ce8\u89e3\u4e0d\u5b8c\u6574\u7684\u51fd\u6570\uff08\u8fd9\u662f disallow_incomplete_defs \u7684\u8d85\u96c6\uff09\u3002</p> <p>\u4f8b\u5982\uff0c\u5b83\u4f1a\u62a5\u544a <code>def f(a, b)</code> \u548c <code>def f(a: int, b)</code> \u7684\u9519\u8bef\u3002</p> <code>disallow_incomplete_defs</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a False</p> <p>\u7981\u6b62\u5b9a\u4e49\u5177\u6709\u4e0d\u5b8c\u6574\u7c7b\u578b\u6ce8\u89e3\u7684\u51fd\u6570\uff0c\u540c\u65f6\u5141\u8bb8\u5b8c\u5168\u6ca1\u6709\u6ce8\u89e3\u7684\u5b9a\u4e49\u3002</p> <p>\u4f8b\u5982\uff0c\u5b83\u4f1a\u62a5\u544a <code>def f(a: int, b)</code> \u7684\u9519\u8bef\uff0c\u4f46\u4e0d\u4f1a\u5bf9 <code>def f(a, b)</code> \u62a5\u9519\u3002</p> <code>check_untyped_defs</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a False</p> <p>\u5bf9\u6ca1\u6709\u7c7b\u578b\u6ce8\u89e3\u7684\u51fd\u6570\u5185\u90e8\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u3002</p> <code>disallow_untyped_decorators</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a False</p> <p>\u6bcf\u5f53\u4e00\u4e2a\u5e26\u6709\u7c7b\u578b\u6ce8\u89e3\u7684\u51fd\u6570\u88ab\u4e00\u4e2a\u6ca1\u6709\u6ce8\u89e3\u7684\u88c5\u9970\u5668\u88c5\u9970\u65f6\uff0c\u62a5\u544a\u4e00\u4e2a\u9519\u8bef\u3002</p> <p>For more information, see the Untyped definitions and calls section of the command line docs.</p> <code>disallow_untyped_calls</code> <p>type: boolean</p> <p>default: False</p> <p>Disallows calling functions without type annotations from functions with type annotations. Note that when used in per-module options, it enables/disables this check inside the module(s) specified, not for functions that come from that module(s), for example config like this:</p> <pre><code>[mypy]\ndisallow_untyped_calls = True\n\n[mypy-some.library.*]\ndisallow_untyped_calls = False\n</code></pre> <p>will disable this check inside <code>some.library</code>, not for your code that imports <code>some.library</code>. If you want to selectively disable this check for all your code that imports <code>some.library</code> you should instead use untyped_calls_exclude, for example:</p> <pre><code>    [mypy]\n    disallow_untyped_calls = True\n    untyped_calls_exclude = some.library\n</code></pre> <code>untyped_calls_exclude</code> <p>type: comma-separated list of strings</p> <p>Selectively excludes functions and methods defined in specific packages, modules, and classes from action of disallow_untyped_calls. This also applies to all submodules of packages (i.e. everything inside a given prefix). Note, this option does not support per-file configuration, the exclusions list is defined globally for all your code.</p> <code>disallow_untyped_defs</code> <p>type: boolean</p> <p>default: False</p> <p>Disallows defining functions without type annotations or with incomplete type annotations (a superset of disallow_incomplete_defs).</p> <p>For example, it would report an error for <code>def f(a, b)</code> and <code>def f(a: int, b)</code>.</p> <code>disallow_incomplete_defs</code> <p>type: boolean</p> <p>default: False</p> <p>Disallows defining functions with incomplete type annotations, while still allowing entirely unannotated definitions.</p> <p>For example, it would report an error for <code>def f(a: int, b)</code> but not <code>def f(a, b)</code>.</p> <code>check_untyped_defs</code> <p>type: boolean</p> <p>default: False</p> <p>Type-checks the interior of functions without type annotations.</p> <code>disallow_untyped_decorators</code> <p>type: boolean</p> <p>default: False</p> <p>Reports an error whenever a function with type annotations is decorated with a decorator without annotations.</p>"},{"location":"mypy_conf/config_file/#none-\u548c-optional-\u7684\u5904\u7406","title":"None \u548c Optional \u7684\u5904\u7406","text":"<p>None and Optional handling</p> \u4e2d\u6587\u82f1\u6587 <p>\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1\u547d\u4ee4\u884c\u6587\u6863\u7684 None \u548c Optional \u7684\u5904\u7406 \u90e8\u5206\u3002</p> <code>implicit_optional</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a False</p> <p>\u4f7f mypy \u5c06\u9ed8\u8ba4\u503c\u4e3a <code>None</code> \u7684\u53c2\u6570\u89c6\u4e3a\u5177\u6709\u9690\u5f0f\u7684 Optional \u7c7b\u578b\u3002</p> <p>\u6ce8\u610f\uff1a \u5728 mypy \u7248\u672c 0.980 \u53ca\u66f4\u65e9\u7248\u672c\u4e2d\uff0c\u8fd9\u4e2a\u9009\u9879\u9ed8\u8ba4\u4e3a True\u3002</p> <code>strict_optional</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a True</p> <p>\u5b9e\u8d28\u4e0a\u7981\u7528\u5bf9 data:<code>~typing.Optional</code> \u7c7b\u578b\u548c <code>None</code> \u503c\u7684\u68c0\u67e5\u3002\u542f\u7528\u6b64\u9009\u9879\u540e\uff0cmypy \u901a\u5e38\u4e0d\u4f1a\u68c0\u67e5 <code>None</code> \u503c\u7684\u4f7f\u7528\u2014\u2014\u5b83\u88ab\u89c6\u4e3a\u4e0e\u6240\u6709\u7c7b\u578b\u517c\u5bb9\u3002</p> <p>\u8b66\u544a</p> <p><code>strict_optional = false</code> \u662f\u5371\u9669\u7684\u3002\u907f\u514d\u4f7f\u7528\u5b83\uff0c\u5e76\u4e14\u5728\u4e0d\u4e86\u89e3\u5176\u4f5c\u7528\u7684\u60c5\u51b5\u4e0b\u7edd\u5bf9\u4e0d\u8981\u4f7f\u7528\u3002</p> <p>For more information, see the None and Optional handling section of the command line docs.</p> <code>implicit_optional</code> <p>type: boolean</p> <p>default: False</p> <p>Causes mypy to treat arguments with a <code>None</code> default value as having an implicit Optional type.</p> <p>Note: This was True by default in mypy versions 0.980 and earlier.</p> <code>strict_optional</code> <p>type: boolean</p> <p>default: True</p> <p>Effectively disables checking of data:<code>~typing.Optional</code> types and <code>None</code> values. With this option, mypy doesn't generally check the use of <code>None</code> values -- it is treated as compatible with every type.</p> <p>Warning</p> <p><code>strict_optional = false</code> is evil. Avoid using it and definitely do not use it without understanding what it does.</p>"},{"location":"mypy_conf/config_file/#\u914d\u7f6e\u8b66\u544awarnings","title":"\u914d\u7f6e\u8b66\u544a(warnings)","text":"<p>Configuring warnings</p> \u4e2d\u6587\u82f1\u6587 <p>\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1\u547d\u4ee4\u884c\u6587\u6863\u7684 \u914d\u7f6e\u8b66\u544a \u90e8\u5206\u3002</p> <code>warn_redundant_casts</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a False</p> <p>\u5f53\u5c06\u4e00\u4e2a\u8868\u8fbe\u5f0f\u5f3a\u5236\u8f6c\u6362\u4e3a\u5176\u63a8\u65ad\u51fa\u7684\u7c7b\u578b\u65f6\u53d1\u51fa\u8b66\u544a\u3002</p> <p>\u8be5\u9009\u9879\u53ea\u80fd\u5728\u5168\u5c40\u90e8\u5206\uff08<code>[mypy]</code>\uff09\u8bbe\u7f6e\u3002</p> <code>warn_unused_ignores</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a False</p> <p>\u5f53\u5b58\u5728\u4e0d\u9700\u8981\u7684 <code># type: ignore</code> \u6ce8\u91ca\u65f6\u53d1\u51fa\u8b66\u544a\u3002</p> <code>warn_no_return</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a True</p> <p>\u663e\u793a\u67d0\u4e9b\u6267\u884c\u8def\u5f84\u4e0a\u7f3a\u5931\u8fd4\u56de\u8bed\u53e5\u7684\u9519\u8bef\u3002</p> <code>warn_return_any</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a False</p> <p>\u5f53\u4ece\u58f0\u660e\u4e86\u975e <code>Any</code> \u8fd4\u56de\u7c7b\u578b\u7684\u51fd\u6570\u4e2d\u8fd4\u56de <code>Any</code> \u7c7b\u578b\u7684\u503c\u65f6\u663e\u793a\u8b66\u544a\u3002</p> <code>warn_unreachable</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a False</p> <p>\u5f53\u9047\u5230\u7ecf\u7c7b\u578b\u5206\u6790\u63a8\u65ad\u4e3a\u4e0d\u53ef\u8fbe\u6216\u5197\u4f59\u7684\u4ee3\u7801\u65f6\u663e\u793a\u8b66\u544a\u3002</p> <p>For more information, see the Configuring warnings section of the command line docs.</p> <code>warn_redundant_casts</code> <p>type: boolean</p> <p>default: False</p> <p>Warns about casting an expression to its inferred type.</p> <p>This option may only be set in the global section (<code>[mypy]</code>).</p> <code>warn_unused_ignores</code> <p>type: boolean</p> <p>default: False</p> <p>Warns about unneeded <code># type: ignore</code> comments.`</p> <p><code>warn_no_return</code></p> <pre><code>**type:** boolean\n\n**default:** True\n\nShows errors for missing return statements on some execution paths.\n</code></pre> <code>warn_return_any</code> <p>type: boolean</p> <p>default: False</p> <p>Shows a warning when returning a value with type <code>Any</code> from a function declared with a non- <code>Any</code> return type.</p> <code>warn_unreachable</code> <p>type: boolean</p> <p>default: False</p> <p>Shows a warning when encountering any code inferred to be unreachable or redundant after performing type analysis.</p>"},{"location":"mypy_conf/config_file/#\u6291\u5236\u9519\u8bef","title":"\u6291\u5236\u9519\u8bef","text":"<p>Suppressing errors</p> \u4e2d\u6587\u82f1\u6587 <p>\u6ce8\u610f\uff1a\u8fd9\u4e9b\u914d\u7f6e\u9009\u9879\u4ec5\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u53ef\u7528\u3002\u547d\u4ee4\u884c\u9009\u9879\u4e2d\u6ca1\u6709\u7c7b\u4f3c\u7684\u9009\u9879\u3002</p> <code>ignore_errors</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a False</p> <p>\u5ffd\u7565\u6240\u6709\u975e\u81f4\u547d\u9519\u8bef\u3002</p> <p>Note: these configuration options are available in the config file only. There is no analog available via the command line options.</p> <code>ignore_errors</code> <p>type: boolean</p> <p>default: False</p> <p>Ignores all non-fatal errors.</p>"},{"location":"mypy_conf/config_file/#\u5176\u4ed6\u4e25\u683c\u6027\u6807\u5fd7","title":"\u5176\u4ed6\u4e25\u683c\u6027\u6807\u5fd7","text":"<p>Miscellaneous strictness flags</p> \u4e2d\u6587\u82f1\u6587 <p>\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1\u547d\u4ee4\u884c\u6587\u6863\u4e2d\u7684 \u5176\u4ed6\u4e25\u683c\u6027\u6807\u5fd7 \u90e8\u5206\u3002</p> <code>allow_untyped_globals</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a False</p> <p>\u4f7f mypy \u5ffd\u7565\u7531\u4e8e\u65e0\u6cd5\u5b8c\u5168\u63a8\u65ad\u5168\u5c40\u548c\u7c7b\u53d8\u91cf\u7c7b\u578b\u800c\u5f15\u53d1\u7684\u9519\u8bef\u3002</p> <code>allow_redefinition</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a False</p> <p>\u5141\u8bb8\u5728\u76f8\u540c\u7684\u4ee3\u7801\u5757\u548c\u5d4c\u5957\u7ea7\u522b\u4e2d\u4f7f\u7528\u4efb\u610f\u7c7b\u578b\u91cd\u65b0\u5b9a\u4e49\u53d8\u91cf\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u6709\u7528\u7684\u793a\u4f8b\uff1a</p> <pre><code>def process(items: list[str]) -&gt; None:\n    # 'items' \u7684\u7c7b\u578b\u662f list[str]\n    items = [item.split() for item in items]\n    # \u73b0\u5728 'items' \u7684\u7c7b\u578b\u662f list[list[str]]\n</code></pre> <p>\u53d8\u91cf\u5fc5\u987b\u5728\u91cd\u65b0\u5b9a\u4e49\u4e4b\u524d\u88ab\u4f7f\u7528\uff1a</p> <pre><code>def process(items: list[str]) -&gt; None:\n    items = \"mypy\"  # \u56e0\u4e3a\u53d8\u91cf\u5c1a\u672a\u88ab\u4f7f\u7528\uff0c\u8fd9\u91cc\u91cd\u65b0\u5b9a\u4e49\u4e3a str \u662f\u65e0\u6548\u7684\n    print(items)\n    items = \"100\"  # \u6709\u6548\uff0c\u73b0\u5728 items \u7684\u7c7b\u578b\u662f str\n    items = int(items)  # \u6709\u6548\uff0c\u73b0\u5728 items \u7684\u7c7b\u578b\u662f int\n</code></pre> <code>local_partial_types</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a False</p> <p>\u4e0d\u5141\u8bb8\u4ece\u4e0d\u540c\u4f5c\u7528\u57df\u4e2d\u7684\u4e24\u4e2a\u8d4b\u503c\u63a8\u65ad\u53d8\u91cf\u7684\u7c7b\u578b\u4e3a <code>None</code>\u3002\u5f53\u4f7f\u7528 mypy daemon \u65f6\uff0c\u8fd9\u603b\u662f\u4f1a\u88ab\u9690\u5f0f\u542f\u7528\u3002</p> <code>disable_error_code</code> <p>\u7c7b\u578b\uff1a \u4ee5\u9017\u53f7\u5206\u9694\u7684\u5b57\u7b26\u4e32\u5217\u8868</p> <p>\u5141\u8bb8\u5168\u5c40\u7981\u7528\u4e00\u4e2a\u6216\u591a\u4e2a\u9519\u8bef\u4ee3\u7801\u3002</p> <code>enable_error_code</code> <p>\u7c7b\u578b\uff1a \u4ee5\u9017\u53f7\u5206\u9694\u7684\u5b57\u7b26\u4e32\u5217\u8868</p> <p>\u5141\u8bb8\u5168\u5c40\u542f\u7528\u4e00\u4e2a\u6216\u591a\u4e2a\u9519\u8bef\u4ee3\u7801\u3002</p> <p>\u6ce8\u610f\uff1a\u6b64\u9009\u9879\u4f1a\u8986\u76d6 <code>disable_error_code</code> \u9009\u9879\u4e2d\u7981\u7528\u7684\u9519\u8bef\u4ee3\u7801\u3002</p> <code>implicit_reexport</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a True</p> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6a21\u5757\u4e2d\u7684\u5bfc\u5165\u503c\u4f1a\u88ab\u89c6\u4e3a\u5bfc\u51fa\uff0c\u5e76\u5141\u8bb8\u5176\u4ed6\u6a21\u5757\u5bfc\u5165\u5b83\u4eec\u3002\u5f53\u6b64\u9009\u9879\u4e3a False \u65f6\uff0cmypy \u53ea\u4f1a\u5728\u4f7f\u7528 <code>from-as</code> \u5bfc\u5165\u6216\u5728 <code>__all__</code> \u4e2d\u5305\u542b\u9879\u65f6\u624d\u91cd\u65b0\u5bfc\u51fa\u3002\u8bf7\u6ce8\u610f\uff0cmypy \u5c06\u5b58\u6839\u6587\u4ef6\u89c6\u4e3a\u603b\u662f\u7981\u7528\u6b64\u529f\u80fd\u3002\u4f8b\u5982\uff1a</p> <pre><code># \u8fd9\u4e0d\u4f1a\u91cd\u65b0\u5bfc\u51fa\u8be5\u503c\nfrom foo import bar\n# \u8fd9\u5c06\u91cd\u65b0\u5bfc\u51fa\u4e3a bar\uff0c\u5e76\u5141\u8bb8\u5176\u4ed6\u6a21\u5757\u5bfc\u5165\u5b83\nfrom foo import bar as bar\n# \u8fd9\u4e5f\u4f1a\u91cd\u65b0\u5bfc\u51fa bar\nfrom foo import bar\n__all__ = ['bar']\n</code></pre> <code>strict_concatenate</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a False</p> <p>\u4f7f\u901a\u8fc7 <code>Concatenate</code> \u9884\u5904\u7406\u7684\u53c2\u6570\u771f\u6b63\u6210\u4e3a\u4f4d\u7f6e\u53c2\u6570\u3002</p> <code>strict_equality</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a False</p> <p>\u7981\u6b62\u5bf9\u4e0d\u91cd\u53e0\u7c7b\u578b\u8fdb\u884c\u7b49\u5f0f\u68c0\u67e5\u3001\u8eab\u4efd\u68c0\u67e5\u548c\u5bb9\u5668\u68c0\u67e5\u3002</p> <code>strict</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a False</p> <p>\u542f\u7528\u6240\u6709\u53ef\u9009\u7684\u9519\u8bef\u68c0\u67e5\u6807\u5fd7\u3002\u60a8\u53ef\u4ee5\u5728\u5b8c\u6574\u7684 mypy --help \u8f93\u51fa\u4e2d\u67e5\u770b\u4e25\u683c\u6a21\u5f0f\u542f\u7528\u7684\u6807\u5fd7\u5217\u8868\u3002</p> <p>\u6ce8\u610f\uff1a<code>strict</code> \u542f\u7528\u7684\u6807\u5fd7\u5217\u8868\u53ef\u80fd\u4f1a\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u800c\u53d8\u5316\u3002</p> <p>For more information, see the Miscellaneous strictness flags section of the command line docs.</p> <code>allow_untyped_globals</code> <p>type: boolean</p> <p>default: False</p> <p>Causes mypy to suppress errors caused by not being able to fully infer the types of global and class variables.</p> <code>allow_redefinition</code> <p>type: boolean</p> <p>default: False</p> <p>Allows variables to be redefined with an arbitrary type, as long as the redefinition is in the same block and nesting level as the original definition. Example where this can be useful:</p> <pre><code>def process(items: list[str]) -&gt; None:\n    # 'items' has type list[str]\n    items = [item.split() for item in items]\n    # 'items' now has type list[list[str]]\n</code></pre> <p>The variable must be used before it can be redefined:</p> <pre><code>def process(items: list[str]) -&gt; None:\n    items = \"mypy\"  # invalid redefinition to str because the variable hasn't been used yet\n    print(items)\n    items = \"100\"  # valid, items now has type str\n    items = int(items)  # valid, items now has type int\n</code></pre> <code>local_partial_types</code> <p>type: boolean</p> <p>default: False</p> <p>Disallows inferring variable type for <code>None</code> from two assignments in different scopes. This is always implicitly enabled when using the mypy daemon.</p> <code>disable_error_code</code> <p>type: comma-separated list of strings</p> <p>Allows disabling one or multiple error codes globally.</p> <code>enable_error_code</code> <p>type: comma-separated list of strings</p> <p>Allows enabling one or multiple error codes globally.</p> <p>Note: This option will override disabled error codes from the disable_error_code option.</p> <code>implicit_reexport</code> <p>type: boolean</p> <p>default: True</p> <p>By default, imported values to a module are treated as exported and mypy allows other modules to import them. When false, mypy will not re-export unless the item is imported using from-as or is included in <code>__all__</code>. Note that mypy treats stub files as if this is always disabled. For example:</p> <pre><code># This won't re-export the value\nfrom foo import bar\n# This will re-export it as bar and allow other modules to import it\nfrom foo import bar as bar\n# This will also re-export bar\nfrom foo import bar\n__all__ = ['bar']\n</code></pre> <code>strict_concatenate</code> <p>type: boolean</p> <p>default: False</p> <p>Make arguments prepended via <code>Concatenate</code> be truly positional-only.</p> <code>strict_equality</code> <p>type: boolean</p> <p>default: False</p> <p>Prohibit equality checks, identity checks, and container checks between non-overlapping types.</p> <code>strict</code> <p>type: boolean</p> <p>default: False</p> <p>Enable all optional error checking flags.  You can see the list of flags enabled by strict mode in the full mypy --help output.</p> <p>Note: the exact list of flags enabled by strict may change over time.</p>"},{"location":"mypy_conf/config_file/#\u914d\u7f6e\u9519\u8bef\u6d88\u606f","title":"\u914d\u7f6e\u9519\u8bef\u6d88\u606f","text":"<p>Configuring error messages</p> \u4e2d\u6587\u82f1\u6587 <p>\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1\u547d\u4ee4\u884c\u6587\u6863\u4e2d\u7684 \u914d\u7f6e\u9519\u8bef\u6d88\u606f \u90e8\u5206\u3002</p> <p>\u8fd9\u4e9b\u9009\u9879\u53ea\u80fd\u5728\u5168\u5c40\u90e8\u5206\uff08<code>[mypy]</code>\uff09\u4e2d\u8bbe\u7f6e\u3002</p> <code>show_error_context</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a False</p> <p>\u5728\u6bcf\u4e2a\u9519\u8bef\u524d\u6dfb\u52a0\u76f8\u5173\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\u3002</p> <code>show_column_numbers</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a False</p> <p>\u5728\u9519\u8bef\u6d88\u606f\u4e2d\u663e\u793a\u5217\u53f7\u3002</p> <code>show_error_code_links</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a False</p> <p>\u663e\u793a\u6307\u5411\u76f8\u5e94\u9519\u8bef\u4ee3\u7801\u7684\u6587\u6863\u94fe\u63a5\u3002</p> <code>hide_error_codes</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a False</p> <p>\u5728\u9519\u8bef\u6d88\u606f\u4e2d\u9690\u85cf\u9519\u8bef\u4ee3\u7801\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 \u9519\u8bef\u4ee3\u7801\u3002</p> <code>pretty</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a False</p> <p>\u5728\u9519\u8bef\u6d88\u606f\u4e2d\u4f7f\u7528\u66f4\u7f8e\u89c2\u7684\u8f93\u51fa\uff1a\u4f7f\u7528\u8f6f\u6362\u884c\uff0c\u663e\u793a\u6e90\u4ee3\u7801\u7247\u6bb5\uff0c\u5e76\u663e\u793a\u9519\u8bef\u4f4d\u7f6e\u6807\u8bb0\u3002</p> <code>color_output</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a True</p> <p>\u663e\u793a\u542f\u7528\u989c\u8272\u7684\u9519\u8bef\u6d88\u606f\u3002</p> <code>error_summary</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a True</p> <p>\u5728\u9519\u8bef\u6d88\u606f\u540e\u663e\u793a\u7b80\u77ed\u7684\u603b\u7ed3\u884c\u3002</p> <code>show_absolute_path</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a False</p> <p>\u663e\u793a\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84\u3002</p> <code>force_uppercase_builtins</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a False</p> <p>\u5728\u9519\u8bef\u6d88\u606f\u4e2d\u59cb\u7ec8\u4f7f\u7528 <code>List</code> \u800c\u4e0d\u662f <code>list</code>\uff0c\u5373\u4f7f\u5728 Python 3.9 \u53ca\u4ee5\u4e0a\u7248\u672c\u4e2d\u4e5f\u662f\u5982\u6b64\u3002</p> <code>force_union_syntax</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a False</p> <p>\u5728\u9519\u8bef\u6d88\u606f\u4e2d\u59cb\u7ec8\u4f7f\u7528 <code>Union[]</code> \u548c <code>Optional[]</code> \u6765\u8868\u793a\u8054\u5408\u7c7b\u578b\uff08\u800c\u4e0d\u662f <code>|</code> \u8fd0\u7b97\u7b26\uff09\uff0c\u5373\u4f7f\u5728 Python 3.10 \u53ca\u4ee5\u4e0a\u7248\u672c\u4e2d\u4e5f\u662f\u5982\u6b64\u3002</p> <p>For more information, see the Configuring error messages section of the command line docs.</p> <p>These options may only be set in the global section (<code>[mypy]</code>).</p> <code>show_error_context</code> <p>type: boolean</p> <p>default: False</p> <p>Prefixes each error with the relevant context.</p> <code>show_column_numbers</code> <p>type: boolean</p> <p>default: False</p> <p>Shows column numbers in error messages.</p> <code>show_error_code_links</code> <p>type: boolean</p> <p>default: False</p> <p>Shows documentation link to corresponding error code.</p> <code>hide_error_codes</code> <p>type: boolean</p> <p>default: False</p> <p>Hides error codes in error messages. See Error codes for more information.</p> <code>pretty</code> <p>type: boolean</p> <p>default: False</p> <p>Use visually nicer output in error messages: use soft word wrap, show source code snippets, and show error location markers.</p> <code>color_output</code> <p>type: boolean</p> <p>default: True</p> <p>Shows error messages with color enabled.</p> <code>error_summary</code> <p>type: boolean</p> <p>default: True</p> <p>Shows a short summary line after error messages.</p> <code>show_absolute_path</code> <p>type: boolean</p> <p>default: False</p> <p>Show absolute paths to files.</p> <code>force_uppercase_builtins</code> <p>type: boolean</p> <p>default: False</p> <p>Always use <code>List</code> instead of <code>list</code> in error messages, even on Python 3.9+.</p> <code>force_union_syntax</code> <p>type: boolean</p> <p>default: False</p> <p>Always use <code>Union[]</code> and <code>Optional[]</code> for union types in error messages (instead of the <code>|</code> operator), even on Python 3.10+.</p>"},{"location":"mypy_conf/config_file/#\u589e\u91cf\u6a21\u5f0f","title":"\u589e\u91cf\u6a21\u5f0f","text":"<p>Incremental mode</p> \u4e2d\u6587\u82f1\u6587 <p>\u8fd9\u4e9b\u9009\u9879\u53ea\u80fd\u5728\u5168\u5c40\u90e8\u5206\uff08<code>[mypy]</code>\uff09\u4e2d\u8bbe\u7f6e\u3002</p> <code>incremental</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a True</p> <p>\u542f\u7528 \u589e\u91cf\u6a21\u5f0f\u3002</p> <code>cache_dir</code> <p>\u7c7b\u578b\uff1a \u5b57\u7b26\u4e32</p> <p>\u9ed8\u8ba4\u503c\uff1a <code>.mypy_cache</code></p> <p>\u6307\u5b9a mypy \u5b58\u50a8\u589e\u91cf\u7f13\u5b58\u4fe1\u606f\u7684\u4f4d\u7f6e\u3002\u7528\u6237\u4e3b\u76ee\u5f55\u548c\u73af\u5883\u53d8\u91cf\u4f1a\u88ab\u5c55\u5f00\u3002\u6b64\u8bbe\u7f6e\u4f1a\u88ab <code>MYPY_CACHE_DIR</code> \u73af\u5883\u53d8\u91cf\u8986\u76d6\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u7f13\u5b58\u4ec5\u5728\u542f\u7528\u589e\u91cf\u6a21\u5f0f\u65f6\u8bfb\u53d6\uff0c\u4f46\u603b\u662f\u4f1a\u5199\u5165\uff0c\u9664\u975e\u503c\u8bbe\u7f6e\u4e3a <code>/dev/null</code>\uff08UNIX\uff09\u6216 <code>nul</code>\uff08Windows\uff09\u3002</p> <code>sqlite_cache</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a False</p> <p>\u4f7f\u7528 SQLite \u6570\u636e\u5e93\u6765\u5b58\u50a8\u7f13\u5b58\u3002</p> <code>cache_fine_grained</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a False</p> <p>\u5728\u7f13\u5b58\u4e2d\u5305\u542b\u7cbe\u7ec6\u5316\u7684\u4f9d\u8d56\u4fe1\u606f\uff0c\u4ee5\u4f9b mypy \u5b88\u62a4\u8fdb\u7a0b\u4f7f\u7528\u3002</p> <code>skip_version_check</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a False</p> <p>\u4f7f mypy \u4f7f\u7528\u589e\u91cf\u7f13\u5b58\u6570\u636e\uff0c\u5373\u4f7f\u8fd9\u4e9b\u6570\u636e\u662f\u7531\u4e0d\u540c\u7248\u672c\u7684 mypy \u751f\u6210\u7684\u3002\uff08\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cmypy \u4f1a\u6267\u884c\u7248\u672c\u68c0\u67e5\uff0c\u5e76\u5728\u7f13\u5b58\u7531\u65e7\u7248\u672c\u7684 mypy \u5199\u5165\u65f6\u91cd\u65b0\u751f\u6210\u7f13\u5b58\u3002\uff09</p> <code>skip_cache_mtime_checks</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a False</p> <p>\u8df3\u8fc7\u57fa\u4e8e mtime \u7684\u7f13\u5b58\u5185\u90e8\u4e00\u81f4\u6027\u68c0\u67e5\u3002</p> <p>These options may only be set in the global section (<code>[mypy]</code>).</p> <code>incremental</code> <p>type: boolean</p> <p>default: True</p> <p>Enables incremental mode.</p> <code>cache_dir</code> <p>type: string</p> <p>default: <code>.mypy_cache</code></p> <p>Specifies the location where mypy stores incremental cache info. User home directory and environment variables will be expanded. This setting will be overridden by the <code>MYPY_CACHE_DIR</code> environment variable.</p> <p>Note that the cache is only read when incremental mode is enabled but is always written to, unless the value is set to <code>/dev/null</code> (UNIX) or <code>nul</code> (Windows).</p> <code>sqlite_cache</code> <p>type: boolean</p> <p>default: False</p> <p>Use an SQLite database to store the cache.</p> <code>cache_fine_grained</code> <p>type: boolean</p> <p>default: False</p> <p>Include fine-grained dependency information in the cache for the mypy daemon.</p> <code>skip_version_check</code> <p>type: boolean</p> <p>default: False</p> <p>Makes mypy use incremental cache data even if it was generated by a different version of mypy. (By default, mypy will perform a version check and regenerate the cache if it was written by older versions of mypy.)</p> <code>skip_cache_mtime_checks</code> <p>type: boolean</p> <p>default: False</p> <p>Skip cache internal consistency checks based on mtime.</p>"},{"location":"mypy_conf/config_file/#\u9ad8\u7ea7\u9009\u9879","title":"\u9ad8\u7ea7\u9009\u9879","text":"<p>Advanced options</p> \u4e2d\u6587\u82f1\u6587 <p>\u8fd9\u4e9b\u9009\u9879\u53ea\u80fd\u5728\u5168\u5c40\u90e8\u5206\uff08<code>[mypy]</code>\uff09\u4e2d\u8bbe\u7f6e\u3002</p> <code>plugins</code> <p>\u7c7b\u578b\uff1a \u4ee5\u9017\u53f7\u5206\u9694\u7684\u5b57\u7b26\u4e32\u5217\u8868</p> <p>\u4e00\u4e2a\u4ee5\u9017\u53f7\u5206\u9694\u7684 mypy \u63d2\u4ef6\u5217\u8868\u3002\u8bf7\u53c2\u9605 \u4f7f\u7528\u63d2\u4ef6\u6269\u5c55 mypy\u3002</p> <code>pdb</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a False</p> <p>\u5728\u53d1\u751f\u81f4\u547d\u9519\u8bef\u65f6\u8c03\u7528 pdb\u3002</p> <code>show_traceback</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a False</p> <p>\u5728\u81f4\u547d\u9519\u8bef\u53d1\u751f\u65f6\u663e\u793a\u56de\u6eaf\u4fe1\u606f\u3002</p> <code>raise_exceptions</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a False</p> <p>\u5728\u53d1\u751f\u81f4\u547d\u9519\u8bef\u65f6\u5f15\u53d1\u5f02\u5e38\u3002</p> <code>custom_typing_module</code> <p>\u7c7b\u578b\uff1a \u5b57\u7b26\u4e32</p> <p>\u6307\u5b9a\u4e00\u4e2a\u81ea\u5b9a\u4e49\u6a21\u5757\uff0c\u7528\u4f5c mod:<code>typing</code> \u6a21\u5757\u7684\u66ff\u4ee3\u54c1\u3002</p> <code>custom_typeshed_dir</code> <p>\u7c7b\u578b\uff1a \u5b57\u7b26\u4e32</p> <p>\u6307\u5b9a mypy \u67e5\u627e\u6807\u51c6\u5e93 typeshed \u5b58\u6839\u7684\u76ee\u5f55\uff0c\u800c\u4e0d\u662f mypy \u9644\u5e26\u7684 typeshed\u3002\u8fd9\u4e3b\u8981\u7528\u4e8e\u5728\u63d0\u4ea4\u66f4\u6539\u5230\u4e0a\u6e38\u4e4b\u524d\u6d4b\u8bd5 typeshed \u66f4\u6539\uff0c\u4f46\u4e5f\u5141\u8bb8\u4f7f\u7528 forked \u7248\u672c\u7684 typeshed\u3002</p> <p>\u7528\u6237\u4e3b\u76ee\u5f55\u548c\u73af\u5883\u53d8\u91cf\u4f1a\u88ab\u5c55\u5f00\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e0d\u4f1a\u5f71\u54cd\u7b2c\u4e09\u65b9\u5e93\u7684\u5b58\u6839\u3002\u8981\u6d4b\u8bd5\u7b2c\u4e09\u65b9\u5b58\u6839\uff0c\u4f8b\u5982\u53ef\u4ee5\u5c1d\u8bd5 <code>MYPYPATH=stubs/six mypy ...</code>\u3002</p> <code>warn_incomplete_stub</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a False</p> <p>\u5bf9 typeshed \u4e2d\u7f3a\u5c11\u7c7b\u578b\u6ce8\u89e3\u53d1\u51fa\u8b66\u544a\u3002\u8fd9\u4ec5\u5728\u4e0e disallow_untyped_defs \u6216 disallow_incomplete_defs \u7ed3\u5408\u4f7f\u7528\u65f6\u624d\u76f8\u5173\u3002</p> <p>These options may only be set in the global section (<code>[mypy]</code>).</p> <code>plugins</code> <p>type: comma-separated list of strings</p> <p>A comma-separated list of mypy plugins. See Extending mypy using plugins.</p> <code>pdb</code> <p>type: boolean</p> <p>default: False</p> <p>Invokes pdb on fatal error.</p> <code>show_traceback</code> <p>type: boolean</p> <p>default: False</p> <p>Shows traceback on fatal error.</p> <code>raise_exceptions</code> <p>type: boolean</p> <p>default: False</p> <p>Raise exception on fatal error.</p> <code>custom_typing_module</code> <p>type: string</p> <p>Specifies a custom module to use as a substitute for the mod:<code>typing</code> module.</p> <code>custom_typeshed_dir</code> <p>type: string</p> <p>This specifies the directory where mypy looks for standard library typeshed stubs, instead of the typeshed that ships with mypy.  This is primarily intended to make it easier to test typeshed changes before submitting them upstream, but also allows you to use a forked version of typeshed.</p> <p>User home directory and environment variables will be expanded.</p> <p>Note that this doesn't affect third-party library stubs. To test third-party stubs, for example try <code>MYPYPATH=stubs/six mypy ...</code>.</p> <code>warn_incomplete_stub</code> <p>type: boolean</p> <p>default: False</p> <p>Warns about missing type annotations in typeshed.  This is only relevant in combination with disallow_untyped_defs or disallow_incomplete_defs.</p>"},{"location":"mypy_conf/config_file/#\u62a5\u544a\u751f\u6210","title":"\u62a5\u544a\u751f\u6210","text":"<p>Report generation</p> \u4e2d\u6587\u82f1\u6587 <p>\u5982\u679c\u8bbe\u7f6e\u4e86\u8fd9\u4e9b\u9009\u9879\uff0cmypy \u5c06\u751f\u6210\u6307\u5b9a\u683c\u5f0f\u7684\u62a5\u544a\u5230\u6307\u5b9a\u76ee\u5f55\u3002</p> <p>Warning</p> <p>\u751f\u6210\u62a5\u544a\u4f1a\u7981\u7528\u589e\u91cf\u6a21\u5f0f\uff0c\u5e76\u53ef\u80fd\u663e\u8457\u51cf\u6162\u5de5\u4f5c\u6d41\u7a0b\u3002\u5efa\u8bae\u4ec5\u5728\u7279\u5b9a\u8fd0\u884c\uff08\u4f8b\u5982 CI \u4e2d\uff09\u542f\u7528\u62a5\u544a\u529f\u80fd\u3002</p> <code>any_exprs_report</code> <p>\u7c7b\u578b\uff1a \u5b57\u7b26\u4e32</p> <p>\u4f7f mypy \u751f\u6210\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\u62a5\u544a\uff0c\u8bb0\u5f55\u4ee3\u7801\u5e93\u4e2d\u5b58\u5728\u591a\u5c11\u4e2a\u7c7b\u578b\u4e3a <code>Any</code> \u7684\u8868\u8fbe\u5f0f\u3002</p> <code>cobertura_xml_report</code> <p>\u7c7b\u578b\uff1a \u5b57\u7b26\u4e32</p> <p>\u4f7f mypy \u751f\u6210\u4e00\u4e2a Cobertura XML \u7c7b\u578b\u68c0\u67e5\u8986\u76d6\u7387\u62a5\u544a\u3002</p> <p>\u8981\u751f\u6210\u6b64\u62a5\u544a\uff0c\u5fc5\u987b\u624b\u52a8\u5b89\u88c5 lxml \u5e93\u6216\u901a\u8fc7 setuptools \u989d\u5916\u9009\u9879 <code>mypy[reports]</code> \u6307\u5b9a mypy \u5b89\u88c5\u3002</p> <code>html_report / xslt_html_report</code> <p>\u7c7b\u578b\uff1a \u5b57\u7b26\u4e32</p> <p>\u4f7f mypy \u751f\u6210\u4e00\u4e2a HTML \u7c7b\u578b\u68c0\u67e5\u8986\u76d6\u7387\u62a5\u544a\u3002</p> <p>\u8981\u751f\u6210\u6b64\u62a5\u544a\uff0c\u5fc5\u987b\u624b\u52a8\u5b89\u88c5 lxml \u5e93\u6216\u901a\u8fc7 setuptools \u989d\u5916\u9009\u9879 <code>mypy[reports]</code> \u6307\u5b9a mypy \u5b89\u88c5\u3002</p> <code>linecount_report</code> <p>\u7c7b\u578b\uff1a \u5b57\u7b26\u4e32</p> <p>\u4f7f mypy \u751f\u6210\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\u62a5\u544a\uff0c\u8bb0\u5f55\u4ee3\u7801\u5e93\u4e2d\u5df2\u7c7b\u578b\u5316\u548c\u672a\u7c7b\u578b\u5316\u7684\u51fd\u6570\u53ca\u5176\u884c\u6570\u3002</p> <code>linecoverage_report</code> <p>\u7c7b\u578b\uff1a \u5b57\u7b26\u4e32</p> <p>\u4f7f mypy \u751f\u6210\u4e00\u4e2a JSON \u6587\u4ef6\uff0c\u5c06\u6bcf\u4e2a\u6e90\u6587\u4ef6\u7684\u7edd\u5bf9\u6587\u4ef6\u540d\u6620\u5c04\u5230\u5c5e\u4e8e\u8be5\u6587\u4ef6\u4e2d\u7c7b\u578b\u5316\u51fd\u6570\u7684\u884c\u53f7\u5217\u8868\u3002</p> <code>lineprecision_report</code> <p>\u7c7b\u578b\uff1a \u5b57\u7b26\u4e32</p> <p>\u4f7f mypy \u751f\u6210\u4e00\u4e2a\u5e73\u9762\u6587\u672c\u6587\u4ef6\u62a5\u544a\uff0c\u5305\u542b\u6bcf\u4e2a\u6a21\u5757\u7684\u7edf\u8ba1\u4fe1\u606f\uff0c\u5982\u6709\u591a\u5c11\u884c\u88ab\u7c7b\u578b\u68c0\u67e5\u7b49\u3002</p> <code>txt_report / xslt_txt_report</code> <p>\u7c7b\u578b\uff1a \u5b57\u7b26\u4e32</p> <p>\u4f7f mypy \u751f\u6210\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\u7c7b\u578b\u68c0\u67e5\u8986\u76d6\u7387\u62a5\u544a\u3002</p> <p>\u8981\u751f\u6210\u6b64\u62a5\u544a\uff0c\u5fc5\u987b\u624b\u52a8\u5b89\u88c5 lxml \u5e93\u6216\u901a\u8fc7 setuptools \u989d\u5916\u9009\u9879 <code>mypy[reports]</code> \u6307\u5b9a mypy \u5b89\u88c5\u3002</p> <code>xml_report</code> <p>\u7c7b\u578b\uff1a \u5b57\u7b26\u4e32</p> <p>\u4f7f mypy \u751f\u6210\u4e00\u4e2a XML \u7c7b\u578b\u68c0\u67e5\u8986\u76d6\u7387\u62a5\u544a\u3002</p> <p>\u8981\u751f\u6210\u6b64\u62a5\u544a\uff0c\u5fc5\u987b\u624b\u52a8\u5b89\u88c5 lxml \u5e93\u6216\u901a\u8fc7 setuptools \u989d\u5916\u9009\u9879 <code>mypy[reports]</code> \u6307\u5b9a mypy \u5b89\u88c5\u3002</p> <p>If these options are set, mypy will generate a report in the specified format into the specified directory.</p> <p>Warning</p> <p>Generating reports disables incremental mode and can significantly slow down your workflow. It is recommended to enable reporting only for specific runs (e.g. in CI).</p> <code>any_exprs_report</code> <p>type: string</p> <p>Causes mypy to generate a text file report documenting how many expressions of type <code>Any</code> are present within your codebase.</p> <code>cobertura_xml_report</code> <p>type: string</p> <p>Causes mypy to generate a Cobertura XML type checking coverage report.</p> <p>To generate this report, you must either manually install the lxml library or specify mypy installation with the setuptools extra <code>mypy[reports]</code>.</p> <code>html_report / xslt_html_report</code> <p>type: string</p> <p>Causes mypy to generate an HTML type checking coverage report.</p> <p>To generate this report, you must either manually install the lxml library or specify mypy installation with the setuptools extra <code>mypy[reports]</code>.</p> <code>linecount_report</code> <p>type: string</p> <p>Causes mypy to generate a text file report documenting the functions and lines that are typed and untyped within your codebase.</p> <code>linecoverage_report</code> <p>type: string</p> <p>Causes mypy to generate a JSON file that maps each source file's absolute filename to a list of line numbers that belong to typed functions in that file.</p> <code>lineprecision_report</code> <p>type: string</p> <p>Causes mypy to generate a flat text file report with per-module statistics of how many lines are typechecked etc.</p> <code>txt_report / xslt_txt_report</code> <p>type: string</p> <p>Causes mypy to generate a text file type checking coverage report.</p> <p>To generate this report, you must either manually install the lxml library or specify mypy installation with the setuptools extra <code>mypy[reports]</code>.</p> <code>xml_report</code> <p>type: string</p> <p>Causes mypy to generate an XML type checking coverage report.</p> <p>To generate this report, you must either manually install the lxml library or specify mypy installation with the setuptools extra <code>mypy[reports]</code>.</p>"},{"location":"mypy_conf/config_file/#\u5176\u4ed6","title":"\u5176\u4ed6","text":"<p>Miscellaneous</p> \u4e2d\u6587\u82f1\u6587 <p>\u8fd9\u4e9b\u9009\u9879\u53ea\u80fd\u5728\u5168\u5c40\u90e8\u5206\uff08<code>[mypy]</code>\uff09\u4e2d\u8bbe\u7f6e\u3002</p> <code>junit_xml</code> <p>\u7c7b\u578b\uff1a \u5b57\u7b26\u4e32</p> <p>\u4f7f mypy \u751f\u6210\u4e00\u4e2a JUnit XML \u6d4b\u8bd5\u7ed3\u679c\u6587\u6863\uff0c\u5305\u542b\u7c7b\u578b\u68c0\u67e5\u7684\u7ed3\u679c\u3002\u8fd9\u6709\u52a9\u4e8e\u5c06 mypy \u4e0e\u6301\u7eed\u96c6\u6210\uff08CI\uff09\u5de5\u5177\u96c6\u6210\u3002</p> <code>scripts_are_modules</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a False</p> <p>\u4f7f\u811a\u672c <code>x</code> \u53d8\u6210\u6a21\u5757 <code>x</code> \u800c\u4e0d\u662f <code>__main__</code>\u3002\u5728\u4e00\u6b21\u8fd0\u884c\u4e2d\u68c0\u67e5\u591a\u4e2a\u811a\u672c\u65f6\uff0c\u8fd9\u4e2a\u9009\u9879\u5f88\u6709\u7528\u3002</p> <code>warn_unused_configs</code> <p>\u7c7b\u578b\uff1a \u5e03\u5c14\u503c</p> <p>\u9ed8\u8ba4\u503c\uff1a False</p> <p>\u53d1\u51fa\u8b66\u544a\uff0c\u6307\u51fa\u914d\u7f6e\u6587\u4ef6\u4e2d\u672a\u5339\u914d\u5230\u4efb\u4f55\u88ab mypy \u5904\u7406\u7684\u6587\u4ef6\u7684\u6bcf\u4e2a\u6a21\u5757\u90e8\u5206\u3002\uff08\u8fd9\u8981\u6c42\u901a\u8fc7\u8bbe\u7f6e incremental = False \u5173\u95ed\u589e\u91cf\u6a21\u5f0f\u3002\uff09</p> <code>verbosity</code> <p>\u7c7b\u578b\uff1a \u6574\u6570</p> <p>\u9ed8\u8ba4\u503c\uff1a 0</p> <p>\u63a7\u5236\u751f\u6210\u7684\u8c03\u8bd5\u8f93\u51fa\u91cf\u3002\u6570\u503c\u8d8a\u9ad8\uff0c\u8f93\u51fa\u8d8a\u8be6\u7ec6\u3002</p> <p>These options may only be set in the global section (<code>[mypy]</code>).</p> <code>junit_xml</code> <p>type: string</p> <p>Causes mypy to generate a JUnit XML test result document with type checking results. This can make it easier to integrate mypy with continuous integration (CI) tools.</p> <code>scripts_are_modules</code> <p>type: boolean</p> <p>default: False</p> <p>Makes script <code>x</code> become module <code>x</code> instead of <code>__main__</code>.  This is useful when checking multiple scripts in a single run.</p> <code>warn_unused_configs</code> <p>type: boolean</p> <p>default: False</p> <p>Warns about per-module sections in the config file that do not match any files processed when invoking mypy. (This requires turning off incremental mode using incremental = False.)</p> <code>verbosity</code> <p>type: integer</p> <p>default: 0</p> <p>Controls how much debug output will be generated.  Higher numbers are more verbose.</p>"},{"location":"mypy_conf/config_file/#\u4f7f\u7528-pyprojecttoml-\u6587\u4ef6","title":"\u4f7f\u7528 pyproject.toml \u6587\u4ef6","text":"<p>Using a pyproject.toml file</p> \u4e2d\u6587\u82f1\u6587 <p>\u9664\u4e86\u4f7f\u7528 <code>mypy.ini</code> \u6587\u4ef6\u4e4b\u5916\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528 <code>pyproject.toml</code> \u6587\u4ef6\uff08\u5982 PEP 518 \u4e2d\u6307\u5b9a\u7684\uff09\u3002\u5173\u4e8e\u4f7f\u7528 <code>pyproject.toml</code> \u6587\u4ef6\u7684\u4e00\u4e9b\u6ce8\u610f\u4e8b\u9879\uff1a</p> <ul> <li> <p><code>[mypy]</code> \u90e8\u5206\u7684\u540d\u79f0\u5e94\u52a0\u4e0a <code>tool.</code> \u524d\u7f00\uff1a</p> <ul> <li>\u5373\uff0c<code>[mypy]</code> \u5e94\u53d8\u6210 <code>[tool.mypy]</code></li> </ul> </li> <li> <p>\u6a21\u5757\u7279\u5b9a\u7684\u90e8\u5206\u5e94\u79fb\u5230 <code>[[tool.mypy.overrides]]</code> \u90e8\u5206\uff1a</p> <ul> <li>\u4f8b\u5982\uff0c<code>[mypy-packagename]</code> \u5e94\u53d8\u6210\uff1a</li> </ul> </li> </ul> <pre><code>[[tool.mypy.overrides]]\nmodule = 'packagename'\n...\n</code></pre> <ul> <li> <p>\u591a\u6a21\u5757\u7279\u5b9a\u7684\u90e8\u5206\u53ef\u4ee5\u79fb\u5230\u4e00\u4e2a <code>[[tool.mypy.overrides]]</code> \u90e8\u5206\uff0c\u5e76\u5c06\u6a21\u5757\u5c5e\u6027\u8bbe\u7f6e\u4e3a\u6a21\u5757\u6570\u7ec4\uff1a</p> <ul> <li>\u4f8b\u5982\uff0c<code>[mypy-packagename,packagename2]</code> \u5e94\u53d8\u6210\uff1a</li> </ul> </li> </ul> <pre><code>[[tool.mypy.overrides]]\nmodule = [\n    'packagename',\n    'packagename2'\n]\n...\n</code></pre> <ul> <li> <p>\u5728 <code>pyproject.toml</code> \u6587\u4ef6\u4e2d\u7684\u503c\u5e94\u7279\u522b\u6ce8\u610f\uff0c\u4e0e <code>ini</code> \u6587\u4ef6\u76f8\u6bd4\uff1a</p> <ul> <li> <p>\u5b57\u7b26\u4e32\u5fc5\u987b\u7528\u53cc\u5f15\u53f7\u62ec\u8d77\u6765\uff0c\u5982\u679c\u5b57\u7b26\u4e32\u5305\u542b\u7279\u6b8a\u5b57\u7b26\u4e5f\u53ef\u4ee5\u7528\u5355\u5f15\u53f7</p> </li> <li> <p>\u5e03\u5c14\u503c\u5e94\u5168\u90e8\u5c0f\u5199</p> </li> </ul> </li> </ul> <p>\u6709\u5173 <code>toml</code> \u6587\u4ef6\u5141\u8bb8\u7684\u5185\u5bb9\u7684\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 TOML \u6587\u6863\u3002\u6709\u5173 <code>pyproject.toml</code> \u6587\u4ef6\u7684\u5e03\u5c40\u548c\u7ed3\u6784\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 PEP 518\u3002</p> <p>Instead of using a <code>mypy.ini</code> file, a <code>pyproject.toml</code> file (as specified by PEP 518) may be used instead. A few notes on doing so:</p> <ul> <li> <p>The <code>[mypy]</code> section should have <code>tool.</code> prepended to its name:</p> <ul> <li>I.e., <code>[mypy]</code> would become <code>[tool.mypy]</code></li> </ul> </li> <li> <p>The module specific sections should be moved into <code>[[tool.mypy.overrides]]</code> sections:</p> <ul> <li>For example, <code>[mypy-packagename]</code> would become:</li> </ul> </li> </ul> <pre><code>[[tool.mypy.overrides]]\nmodule = 'packagename'\n...\n</code></pre> <ul> <li> <p>Multi-module specific sections can be moved into a single <code>[[tool.mypy.overrides]]</code> section with a module property set to an array of modules:</p> <ul> <li>For example, <code>[mypy-packagename,packagename2]</code> would become:</li> </ul> </li> </ul> <pre><code>[[tool.mypy.overrides]]\nmodule = [\n    'packagename',\n    'packagename2'\n]\n...\n</code></pre> <ul> <li> <p>The following care should be given to values in the <code>pyproject.toml</code> files as compared to <code>ini</code> files:</p> <ul> <li> <p>Strings must be wrapped in double quotes, or single quotes if the string contains special characters</p> </li> <li> <p>Boolean values should be all lower case</p> </li> </ul> </li> </ul> <p>Please see the TOML Documentation` for more details and information on what is allowed in a <code>toml</code> file. See PEP 518 for more information on the layout and structure of the <code>pyproject.toml</code> file.</p>"},{"location":"mypy_conf/config_file/#\u793a\u4f8b-pyprojecttoml","title":"\u793a\u4f8b <code>pyproject.toml</code>","text":"<p>Example <code>pyproject.toml</code></p> \u4e2d\u6587\u82f1\u6587 <p>\u4ee5\u4e0b\u662f\u4e00\u4e2a <code>pyproject.toml</code> \u6587\u4ef6\u7684\u793a\u4f8b\u3002\u8981\u4f7f\u7528\u6b64\u914d\u7f6e\u6587\u4ef6\uff0c\u8bf7\u5c06\u5176\u653e\u7f6e\u5728\u60a8\u7684\u4ed3\u5e93\u6839\u76ee\u5f55\u4e0b\uff08\u6216\u5c06\u5176\u8ffd\u52a0\u5230\u73b0\u6709 <code>pyproject.toml</code> \u6587\u4ef6\u7684\u672b\u5c3e\uff09\uff0c\u7136\u540e\u8fd0\u884c mypy\u3002</p> <pre><code># mypy \u5168\u5c40\u9009\u9879\uff1a\n\n[tool.mypy]\npython_version = \"2.7\"\nwarn_return_any = true\nwarn_unused_configs = true\nexclude = [\n    '^file1\\.py$',  # TOML \u5b57\u7b26\u4e32\u6587\u5b57\uff08\u5355\u5f15\u53f7\uff0c\u4e0d\u9700\u8981\u8f6c\u4e49\uff09\n    \"^file2\\\\.py$\",  # TOML \u57fa\u672c\u5b57\u7b26\u4e32\uff08\u53cc\u5f15\u53f7\uff0c\u53cd\u659c\u6760\u548c\u5176\u4ed6\u5b57\u7b26\u9700\u8981\u8f6c\u4e49\uff09\n]\n\n# mypy \u6a21\u5757\u7279\u5b9a\u9009\u9879\uff1a\n\n[[tool.mypy.overrides]]\nmodule = \"mycode.foo.*\"\ndisallow_untyped_defs = true\n\n[[tool.mypy.overrides]]\nmodule = \"mycode.bar\"\nwarn_return_any = false\n\n[[tool.mypy.overrides]]\nmodule = [\n    \"somelibrary\",\n    \"some_other_library\"\n]\nignore_missing_imports = true\n</code></pre> <p>Here is an example of a <code>pyproject.toml</code> file. To use this config file, place it at the root of your repo (or append it to the end of an existing <code>pyproject.toml</code> file) and run mypy.</p> <pre><code>    # mypy global options:\n\n    [tool.mypy]\n    python_version = \"2.7\"\n    warn_return_any = true\n    warn_unused_configs = true\n    exclude = [\n        '^file1\\.py$',  # TOML literal string (single-quotes, no escaping necessary)\n        \"^file2\\\\.py$\",  # TOML basic string (double-quotes, backslash and other characters need escaping)\n    ]\n\n    # mypy per-module options:\n\n    [[tool.mypy.overrides]]\n    module = \"mycode.foo.*\"\n    disallow_untyped_defs = true\n\n    [[tool.mypy.overrides]]\n    module = \"mycode.bar\"\n    warn_return_any = false\n\n    [[tool.mypy.overrides]]\n    module = [\n        \"somelibrary\",\n        \"some_other_library\"\n    ]\n    ignore_missing_imports = true\n</code></pre>"},{"location":"mypy_conf/extending_mypy/","title":"\u6269\u5c55\u548c\u96c6\u6210 mypy","text":"<p>Extending and integrating mypy</p>"},{"location":"mypy_conf/extending_mypy/#\u5c06-mypy-\u96c6\u6210\u5230\u5176\u4ed6-python-\u5e94\u7528\u4e2d","title":"\u5c06 mypy \u96c6\u6210\u5230\u5176\u4ed6 Python \u5e94\u7528\u4e2d","text":"<p>Integrating mypy into another Python application</p> \u4e2d\u6587\u82f1\u6587 <p>\u53ef\u4ee5\u901a\u8fc7\u5bfc\u5165 <code>mypy.api</code> \u5e76\u8c03\u7528 <code>run</code> \u51fd\u6570\u6765\u5c06 mypy \u96c6\u6210\u5230\u5176\u4ed6 Python 3 \u5e94\u7528\u7a0b\u5e8f\u4e2d\u3002\u8c03\u7528 <code>run</code> \u51fd\u6570\u65f6\uff0c\u53c2\u6570\u7c7b\u578b\u4e3a <code>list[str]</code>\uff0c\u5305\u542b\u901a\u5e38\u4f5c\u4e3a mypy \u547d\u4ee4\u884c\u53c2\u6570\u7684\u5185\u5bb9\u3002</p> <p><code>run</code> \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a <code>tuple[str, str, int]</code>\uff0c\u5373 <code>(&lt;normal_report&gt;, &lt;error_report&gt;, &lt;exit_status&gt;)</code>\uff0c\u5176\u4e2d <code>&lt;normal_report&gt;</code> \u662f mypy \u901a\u5e38\u5199\u5165 sys.stdout \u7684\u5185\u5bb9\uff0c<code>&lt;error_report&gt;</code> \u662f mypy \u901a\u5e38\u5199\u5165 sys.stderr \u7684\u5185\u5bb9\uff0c<code>exit_status</code> \u662f mypy \u901a\u5e38\u8fd4\u56de\u7ed9\u64cd\u4f5c\u7cfb\u7edf\u7684\u9000\u51fa\u72b6\u6001\u3002</p> <p>\u4f7f\u7528\u8be5 API \u7684\u4e00\u4e2a\u7b80\u5355\u793a\u4f8b\u5982\u4e0b\uff1a</p> <pre><code>import sys\nfrom mypy import api\n\nresult = api.run(sys.argv[1:])\n\nif result[0]:\n    print('\\n\u7c7b\u578b\u68c0\u67e5\u62a5\u544a:\\n')\n    print(result[0])  # stdout\n\nif result[1]:\n    print('\\n\u9519\u8bef\u62a5\u544a:\\n')\n    print(result[1])  # stderr\n\nprint('\\n\u9000\u51fa\u72b6\u6001:', result[2])\n</code></pre> <p>It is possible to integrate mypy into another Python 3 application by importing <code>mypy.api</code> and calling the <code>run</code> function with a parameter of type <code>list[str]</code>, containing what normally would have been the command line arguments to mypy.</p> <p>Function <code>run</code> returns a <code>tuple[str, str, int]</code>, namely <code>(&lt;normal_report&gt;, &lt;error_report&gt;, &lt;exit_status&gt;)</code>, in which <code>&lt;normal_report&gt;</code> is what mypy normally writes to sys.stdout, <code>&lt;error_report&gt;</code> is what mypy normally writes to sys.stderr and <code>exit_status</code> is the exit status mypy normally returns to the operating system.</p> <p>A trivial example of using the api is the following</p> <pre><code>import sys\nfrom mypy import api\n\nresult = api.run(sys.argv[1:])\n\nif result[0]:\n    print('\\nType checking report:\\n')\n    print(result[0])  # stdout\n\nif result[1]:\n    print('\\nError report:\\n')\n    print(result[1])  # stderr\n\nprint('\\nExit status:', result[2])\n</code></pre>"},{"location":"mypy_conf/extending_mypy/#\u4f7f\u7528\u63d2\u4ef6\u6269\u5c55-mypy","title":"\u4f7f\u7528\u63d2\u4ef6\u6269\u5c55 mypy","text":"<p>Extending mypy using plugins</p> \u4e2d\u6587\u82f1\u6587 <p>Python \u662f\u4e00\u79cd\u9ad8\u5ea6\u52a8\u6001\u7684\u8bed\u8a00\uff0c\u5177\u6709\u5e7f\u6cdb\u7684\u5143\u7f16\u7a0b\u80fd\u529b\u3002\u8bb8\u591a\u6d41\u884c\u7684\u5e93\u5229\u7528\u8fd9\u4e9b\u80fd\u529b\u521b\u5efa\u7684 API \u53ef\u80fd\u5bf9\u4eba\u7c7b\u66f4\u7075\u6d3b\u548c\u81ea\u7136\uff0c\u4f46\u4f7f\u7528\u9759\u6001\u7c7b\u578b\u8868\u8fbe\u8fd9\u4e9b API \u5374\u5f88\u56f0\u96be\u3002\u6269\u5c55 PEP 484 \u7c7b\u578b\u7cfb\u7edf\u4ee5\u9002\u5e94\u6240\u6709\u73b0\u6709\u7684\u52a8\u6001\u6a21\u5f0f\u662f\u4e0d\u5207\u5b9e\u9645\u7684\uff0c\u4e14\u5f80\u5f80\u662f\u4e0d\u53ef\u80fd\u7684\u3002</p> <p>Mypy \u652f\u6301\u4e00\u4e2a\u63d2\u4ef6\u7cfb\u7edf\uff0c\u5141\u8bb8\u4f60\u81ea\u5b9a\u4e49 mypy \u68c0\u67e5\u4ee3\u7801\u7684\u65b9\u5f0f\u3002\u5982\u679c\u4f60\u60f3\u6269\u5c55 mypy \u4ee5\u4fbf\u5b83\u53ef\u4ee5\u68c0\u67e5\u4f7f\u7528\u4e86\u96be\u4ee5\u4ec5\u7528 PEP 484 \u7c7b\u578b\u8868\u8fbe\u7684\u5e93\u7684\u4ee3\u7801\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5f88\u6709\u7528\u3002</p> <p>\u63d2\u4ef6\u7cfb\u7edf\u7684\u91cd\u70b9\u662f\u6539\u5584 mypy \u5bf9\u7b2c\u4e09\u65b9\u6846\u67b6 \u8bed\u4e49 \u7684\u7406\u89e3\u3002\u76ee\u524d\u5c1a\u65e0\u5b9a\u4e49\u65b0\u7684\u7b2c\u4e00\u7c7b\u7c7b\u578b\u7684\u65b9\u6cd5\u3002</p> <p>Note</p> <p>\u63d2\u4ef6\u7cfb\u7edf\u4ecd\u5904\u4e8e\u5b9e\u9a8c\u9636\u6bb5\uff0c\u53ef\u80fd\u4f1a\u53d1\u751f\u53d8\u5316\u3002\u5982\u679c\u4f60\u60f3\u7f16\u5199 mypy \u63d2\u4ef6\uff0c\u6211\u4eec\u5efa\u8bae\u4f60\u5148\u901a\u8fc7 gitter \u8054\u7cfb mypy \u6838\u5fc3\u5f00\u53d1\u4eba\u5458\u3002\u7279\u522b\u662f\uff0c\u5bf9\u4e8e\u5411\u540e\u517c\u5bb9\u6027\u6ca1\u6709\u4fdd\u8bc1\u3002</p> <p>\u53ef\u80fd\u4f1a\u5728\u6ca1\u6709\u5f03\u7528\u671f\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u4e0d\u517c\u5bb9\u7684\u66f4\u6539\uff0c\u4f46\u6211\u4eec\u4f1a\u5728 \u63d2\u4ef6 API \u66f4\u6539\u516c\u544a\u95ee\u9898 \u4e2d\u5ba3\u5e03\u8fd9\u4e9b\u66f4\u6539\u3002</p> <p>Python is a highly dynamic language and has extensive metaprogramming capabilities. Many popular libraries use these to create APIs that may be more flexible and/or natural for humans, but are hard to express using static types. Extending the PEP 484 type system to accommodate all existing dynamic patterns is impractical and often just impossible.</p> <p>Mypy supports a plugin system that lets you customize the way mypy type checks code. This can be useful if you want to extend mypy so it can type check code that uses a library that is difficult to express using just PEP 484 types.</p> <p>The plugin system is focused on improving mypy's understanding of semantics of third party frameworks. There is currently no way to define new first class kinds of types.</p> <p>Note</p> <p>The plugin system is experimental and prone to change. If you want to write a mypy plugin, we recommend you start by contacting the mypy core developers on gitter. In particular, there are no guarantees about backwards compatibility.</p> <p>Backwards incompatible changes may be made without a deprecation period, but we will announce them in the plugin API changes announcement issue.</p>"},{"location":"mypy_conf/extending_mypy/#\u914d\u7f6e-mypy-\u4f7f\u7528\u63d2\u4ef6","title":"\u914d\u7f6e mypy \u4f7f\u7528\u63d2\u4ef6","text":"<p>Configuring mypy to use plugins</p> \u4e2d\u6587\u82f1\u6587 <p>\u63d2\u4ef6\u662f Python \u6587\u4ef6\uff0c\u53ef\u4ee5\u901a\u8fc7 mypy \u7684 \u914d\u7f6e\u6587\u4ef6 \u4f7f\u7528 plugins \u9009\u9879\u6765\u6307\u5b9a\u3002\u63d2\u4ef6\u7684\u8def\u5f84\u53ef\u4ee5\u662f\u76f8\u5bf9\u8def\u5f84\u6216\u7edd\u5bf9\u8def\u5f84\uff0c\u6216\u8005\u662f\u6a21\u5757\u540d\u79f0\uff08\u5982\u679c\u63d2\u4ef6\u662f\u5728\u4e0e mypy \u8fd0\u884c\u76f8\u540c\u7684\u865a\u62df\u73af\u5883\u4e2d\u901a\u8fc7 <code>pip install</code> \u5b89\u88c5\u7684\uff09\u3002\u8fd9\u4e24\u79cd\u683c\u5f0f\u53ef\u4ee5\u6df7\u5408\u4f7f\u7528\uff0c\u4f8b\u5982\uff1a</p> <pre><code>[mypy]\nplugins = /one/plugin.py, other.plugin\n</code></pre> <p>Mypy \u4f1a\u5c1d\u8bd5\u5bfc\u5165\u63d2\u4ef6\uff0c\u5e76\u67e5\u627e\u4e00\u4e2a\u540d\u4e3a <code>plugin</code> \u7684\u5165\u53e3\u70b9\u51fd\u6570\u3002\u5982\u679c\u63d2\u4ef6\u7684\u5165\u53e3\u70b9\u51fd\u6570\u540d\u79f0\u4e0d\u540c\uff0c\u53ef\u4ee5\u5728\u5192\u53f7\u540e\u6307\u5b9a\uff1a</p> <pre><code>[mypy]\nplugins = custom_plugin:custom_entry_point\n</code></pre> <p>\u5728\u4ee5\u4e0b\u90e8\u5206\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u63d2\u4ef6\u7cfb\u7edf\u7684\u57fa\u7840\u77e5\u8bc6\u548c\u4e00\u4e9b\u793a\u4f8b\u3002\u6709\u5173\u66f4\u591a\u6280\u672f\u7ec6\u8282\uff0c\u8bf7\u9605\u8bfb mypy \u6e90\u4ee3\u7801\u4e2d\u7684 mypy/plugin.py \u6587\u4ef6\u4e2d\u7684\u6587\u6863\u5b57\u7b26\u4e32\u3002\u4f60\u8fd8\u53ef\u4ee5\u5728 mypy/plugins \u4e2d\u627e\u5230\u6346\u7ed1\u63d2\u4ef6\u7684\u826f\u597d\u793a\u4f8b\u3002</p> <p>Plugins are Python files that can be specified in a mypy config file using the plugins option and one of the two formats: relative or absolute path to the plugin file, or a module name (if the plugin is installed using <code>pip install</code> in the same virtual environment where mypy is running). The two formats can be mixed, for example:</p> <pre><code>    [mypy]\n    plugins = /one/plugin.py, other.plugin\n</code></pre> <p>Mypy will try to import the plugins and will look for an entry point function named <code>plugin</code>. If the plugin entry point function has a different name, it can be specified after colon:</p> <pre><code>    [mypy]\n    plugins = custom_plugin:custom_entry_point\n</code></pre> <p>In the following sections we describe the basics of the plugin system with some examples. For more technical details, please read the docstrings in mypy/plugin.py in mypy source code. Also you can find good examples in the bundled plugins located in mypy/plugins.</p>"},{"location":"mypy_conf/extending_mypy/#\u9ad8\u7ea7\u6982\u89c8","title":"\u9ad8\u7ea7\u6982\u89c8","text":"<p>High-level overview</p> \u4e2d\u6587\u82f1\u6587 <p>\u6bcf\u4e2a\u5165\u53e3\u70b9\u51fd\u6570\u5e94\u63a5\u53d7\u4e00\u4e2a\u5b57\u7b26\u4e32\u53c2\u6570\uff0c\u8be5\u53c2\u6570\u662f\u5b8c\u6574\u7684 mypy \u7248\u672c\uff0c\u5e76\u8fd4\u56de <code>mypy.plugin.Plugin</code> \u7684\u5b50\u7c7b\uff1a</p> <pre><code>from mypy.plugin import Plugin\n\nclass CustomPlugin(Plugin):\n    def get_type_analyze_hook(self, fullname: str):\n        # \u53c2\u89c1\u4e0b\u9762\u7684\u89e3\u91ca\n        ...\n\ndef plugin(version: str):\n    # \u5982\u679c\u63d2\u4ef6\u9002\u7528\u4e8e\u6240\u6709 mypy \u7248\u672c\uff0c\u5219\u5ffd\u7565\u7248\u672c\u53c2\u6570\n    return CustomPlugin\n</code></pre> <p>\u5728\u5206\u6790\u4ee3\u7801\u7684\u4e0d\u540c\u9636\u6bb5\uff08\u9996\u5148\u662f\u8bed\u4e49\u5206\u6790\uff0c\u7136\u540e\u662f\u7c7b\u578b\u68c0\u67e5\uff09\u4e2d\uff0cmypy \u4f1a\u8c03\u7528\u63d2\u4ef6\u7684\u65b9\u6cd5\uff0c\u4f8b\u5982 <code>get_type_analyze_hook()</code>\u3002\u4f8b\u5982\uff0c\u8fd9\u4e2a\u7279\u5b9a\u7684\u65b9\u6cd5\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u56de\u8c03\uff0cmypy \u5c06\u4f7f\u7528\u8fd9\u4e2a\u56de\u8c03\u6765\u5206\u6790\u5177\u6709\u7ed9\u5b9a\u5168\u540d\u7684\u672a\u7ed1\u5b9a\u7c7b\u578b\u3002\u6709\u5173\u63d2\u4ef6\u94a9\u5b50\u65b9\u6cd5\u7684\u5b8c\u6574\u5217\u8868\uff0c\u8bf7\u53c2\u89c1 \u4e0b\u65b9\u3002</p> <p>Mypy \u4ece\u914d\u7f6e\u6587\u4ef6\u4e2d\u83b7\u53d6\u63d2\u4ef6\u5217\u8868\uff0c\u5e76\u52a0\u4e0a\u59cb\u7ec8\u542f\u7528\u7684\u9ed8\u8ba4\uff08\u5185\u7f6e\uff09\u63d2\u4ef6\u3002Mypy \u4f1a\u5bf9\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u63d2\u4ef6\u8c03\u7528\u4e00\u6b21\u65b9\u6cd5\uff0c\u76f4\u5230\u5176\u4e2d\u4e00\u4e2a\u65b9\u6cd5\u8fd4\u56de\u975e <code>None</code> \u7684\u503c\u3002\u7136\u540e\uff0c\u8fd9\u4e2a\u56de\u8c03\u5c06\u7528\u4e8e\u5b9a\u5236\u5f53\u524d\u62bd\u8c61\u8bed\u6cd5\u6811\u8282\u70b9\u7684\u5206\u6790/\u68c0\u67e5\u65b9\u9762\u3002</p> <p><code>get_xxx</code> \u65b9\u6cd5\u8fd4\u56de\u7684\u56de\u8c03\u5c06\u83b7\u5f97\u8be6\u7ec6\u7684\u5f53\u524d\u4e0a\u4e0b\u6587\u548c\u4e00\u4e2a API\uff0c\u7528\u4e8e\u521b\u5efa\u65b0\u8282\u70b9\u3001\u65b0\u7c7b\u578b\u3001\u53d1\u51fa\u9519\u8bef\u6d88\u606f\u7b49\uff0c\u5e76\u5c06\u7ed3\u679c\u7528\u4e8e\u8fdb\u4e00\u6b65\u5904\u7406\u3002</p> <p>\u63d2\u4ef6\u5f00\u53d1\u8005\u5e94\u786e\u4fdd\u4ed6\u4eec\u7684\u63d2\u4ef6\u5728\u589e\u91cf\u6a21\u5f0f\u548c\u5b88\u62a4\u8fdb\u7a0b\u6a21\u5f0f\u4e0b\u90fd\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002\u7279\u522b\u662f\uff0c\u63d2\u4ef6\u4e0d\u5e94\u56e0\u7f13\u5b58\u63d2\u4ef6\u94a9\u5b50\u7ed3\u679c\u800c\u6301\u6709\u5168\u5c40\u72b6\u6001\u3002</p> <p>Every entry point function should accept a single string argument that is a full mypy version and return a subclass of <code>mypy.plugin.Plugin</code>:</p> <pre><code>from mypy.plugin import Plugin\n\nclass CustomPlugin(Plugin):\n    def get_type_analyze_hook(self, fullname: str):\n        # see explanation below\n        ...\n\ndef plugin(version: str):\n    # ignore version argument if the plugin works with all mypy versions.\n    return CustomPlugin\n</code></pre> <p>During different phases of analyzing the code (first in semantic analysis, and then in type checking) mypy calls plugin methods such as <code>get_type_analyze_hook()</code> on user plugins. This particular method, for example, can return a callback that mypy will use to analyze unbound types with the given full name. See the full plugin hook method list below.</p> <p>Mypy maintains a list of plugins it gets from the config file plus the default (built-in) plugin that is always enabled. Mypy calls a method once for each plugin in the list until one of the methods returns a non-<code>None</code> value. This callback will be then used to customize the corresponding aspect of analyzing/checking the current abstract syntax tree node.</p> <p>The callback returned by the <code>get_xxx</code> method will be given a detailed current context and an API to create new nodes, new types, emit error messages, etc., and the result will be used for further processing.</p> <p>Plugin developers should ensure that their plugins work well in incremental and daemon modes. In particular, plugins should not hold global state due to caching of plugin hook results.</p>"},{"location":"mypy_conf/extending_mypy/#\u5f53\u524d\u63d2\u4ef6\u94a9\u5b50\u5217\u8868","title":"\u5f53\u524d\u63d2\u4ef6\u94a9\u5b50\u5217\u8868","text":"<p>Current list of plugin hooks</p> \u4e2d\u6587\u82f1\u6587 <p>get_type_analyze_hook() \u81ea\u5b9a\u4e49\u7c7b\u578b\u5206\u6790\u5668\u7684\u884c\u4e3a\u3002\u4f8b\u5982\uff0cPEP 484 \u4e0d\u652f\u6301\u5b9a\u4e49\u53ef\u53d8\u53c2\u6570\u6cdb\u578b\u7c7b\u578b\uff1a</p> <pre><code>from lib import Vector\n\na: Vector[int, int]\nb: Vector[int, int, int]\n</code></pre> <p>\u5728\u5206\u6790\u8fd9\u6bb5\u4ee3\u7801\u65f6\uff0cmypy \u4f1a\u8c03\u7528 <code>get_type_analyze_hook(\"lib.Vector\")</code>\uff0c\u63d2\u4ef6\u53ef\u4ee5\u4e3a\u6bcf\u4e2a\u53d8\u91cf\u8fd4\u56de\u4e00\u4e2a\u6709\u6548\u7684\u7c7b\u578b\u3002</p> <p>get_function_hook() \u7528\u4e8e\u8c03\u6574\u51fd\u6570\u8c03\u7528\u7684\u8fd4\u56de\u7c7b\u578b\u3002\u8fd9\u4e2a\u94a9\u5b50\u4e5f\u4f1a\u5728\u7c7b\u5b9e\u4f8b\u5316\u65f6\u88ab\u8c03\u7528\u3002\u5982\u679c\u8fd4\u56de\u7c7b\u578b\u8fc7\u4e8e\u590d\u6742\uff0c\u65e0\u6cd5\u901a\u8fc7\u5e38\u89c4\u7684 Python \u7c7b\u578b\u8868\u8fbe\uff0c\u8fd9\u4e2a\u94a9\u5b50\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u3002</p> <p>get_function_signature_hook() \u7528\u4e8e\u8c03\u6574\u51fd\u6570\u7684\u7b7e\u540d\u3002</p> <p>get_method_hook() \u4e0e <code>get_function_hook()</code> \u76f8\u540c\uff0c\u4f46\u7528\u4e8e\u65b9\u6cd5\uff0c\u800c\u4e0d\u662f\u6a21\u5757\u7ea7\u51fd\u6570\u3002</p> <p>get_method_signature_hook() \u7528\u4e8e\u8c03\u6574\u65b9\u6cd5\u7684\u7b7e\u540d\u3002\u8fd9\u5305\u62ec\u7279\u6b8a\u7684 Python \u65b9\u6cd5\uff0c\u9664\u4e86 init() \u548c new()\u3002\u4f8b\u5982\uff0c\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\uff1a</p> <pre><code>from ctypes import Array, c_int\n\nx: Array[c_int]\nx[0] = 42\n</code></pre> <p>mypy \u4f1a\u8c03\u7528 <code>get_method_signature_hook(\"ctypes.Array.__setitem__\")</code>\uff0c\u4ee5\u4fbf\u63d2\u4ef6\u53ef\u4ee5\u6a21\u4eff ctypes \u7684\u81ea\u52a8\u8f6c\u6362\u884c\u4e3a\u3002</p> <p>get_attribute_hook() \u7528\u4e8e\u8986\u76d6\u5b9e\u4f8b\u6210\u5458\u5b57\u6bb5\u67e5\u627e\u548c\u5c5e\u6027\u8bbf\u95ee\uff08\u4e0d\u662f\u8d4b\u503c\uff0c\u4e5f\u4e0d\u662f\u65b9\u6cd5\u8c03\u7528\uff09\u3002\u8fd9\u4e2a\u94a9\u5b50\u4ec5\u5728\u7c7b\u4e2d\u5df2\u7ecf\u5b58\u5728\u5b57\u6bb5\u65f6\u88ab\u8c03\u7528\u3002\u4f8b\u5916\uff1a \u5982\u679c getattr \u6216 getattribute \u662f\u7c7b\u4e2d\u7684\u65b9\u6cd5\uff0c\u94a9\u5b50\u5c06\u4f1a\u88ab\u8c03\u7528\uff0c\u4ee5\u5904\u7406\u6240\u6709\u4e0d\u5f15\u7528\u65b9\u6cd5\u7684\u5b57\u6bb5\u3002</p> <p>get_class_attribute_hook() \u7c7b\u4f3c\u4e8e\u4e0a\u9762\u7684\u94a9\u5b50\uff0c\u4f46\u7528\u4e8e\u7c7b\u4e0a\u7684\u5c5e\u6027\uff0c\u800c\u4e0d\u662f\u5b9e\u4f8b\u4e0a\u7684\u5c5e\u6027\u3002\u4e0e\u4e0a\u9762\u4e0d\u540c\uff0c\u8fd9\u4e2a\u94a9\u5b50\u6ca1\u6709\u5bf9 getattr \u6216 getattribute \u7684\u7279\u6b8a\u5904\u7406\u3002</p> <p>get_class_decorator_hook() \u7528\u4e8e\u66f4\u65b0\u7ed9\u5b9a\u7c7b\u88c5\u9970\u5668\u7684\u7c7b\u5b9a\u4e49\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u5411\u7c7b\u4e2d\u6dfb\u52a0\u4e00\u4e9b\u5c5e\u6027\uff0c\u4ee5\u5339\u914d\u8fd0\u884c\u65f6\u884c\u4e3a\uff1a</p> <pre><code>from dataclasses import dataclass\n\n@dataclass  # \u5185\u7f6e\u63d2\u4ef6\u5728\u8fd9\u91cc\u6dfb\u52a0\u4e86 `__init__` \u65b9\u6cd5\nclass User:\n    name: str\n\nuser = User(name='example')  # mypy \u53ef\u4ee5\u901a\u8fc7\u63d2\u4ef6\u7406\u89e3\u8fd9\u4e00\u70b9\n</code></pre> <p>get_metaclass_hook() \u7c7b\u4f3c\u4e8e\u4e0a\u8ff0\u94a9\u5b50\uff0c\u4f46\u7528\u4e8e metaclass\u3002</p> <p>get_base_class_hook() \u7c7b\u4f3c\u4e8e\u4e0a\u8ff0\u94a9\u5b50\uff0c\u4f46\u7528\u4e8e\u57fa\u7c7b\u3002</p> <p>get_dynamic_class_hook() \u7528\u4e8e\u5141\u8bb8 mypy \u4e2d\u7684\u52a8\u6001\u7c7b\u5b9a\u4e49\u3002\u8fd9\u4e2a\u63d2\u4ef6\u94a9\u5b50\u4f1a\u5728\u6bcf\u4e2a\u7b80\u5355\u540d\u79f0\u7684\u8d4b\u503c\uff0c\u5176\u4e2d\u53f3\u4fa7\u662f\u4e00\u4e2a\u51fd\u6570\u8c03\u7528\u65f6\u88ab\u8c03\u7528\uff1a</p> <pre><code>from lib import dynamic_class\n\nX = dynamic_class('X', [])\n</code></pre> <p>\u5bf9\u4e8e\u8fd9\u6837\u7684\u5b9a\u4e49\uff0cmypy \u5c06\u8c03\u7528 <code>get_dynamic_class_hook(\"lib.dynamic_class\")</code>\u3002\u63d2\u4ef6\u5e94\u521b\u5efa\u76f8\u5e94\u7684 <code>mypy.nodes.TypeInfo</code> \u5bf9\u8c61\uff0c\u5e76\u5c06\u5176\u653e\u5165\u76f8\u5173\u7684\u7b26\u53f7\u8868\u4e2d\u3002\uff08\u8fd9\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u8868\u793a mypy \u4e2d\u7684\u7c7b\uff0c\u5e76\u6301\u6709\u5982\u9650\u5b9a\u540d\u79f0\u3001\u65b9\u6cd5\u89e3\u6790\u987a\u5e8f\u7b49\u57fa\u672c\u4fe1\u606f\u3002\uff09</p> <p>get_customize_class_mro_hook() \u53ef\u4ee5\u7528\u6765\u5728\u7c7b\u4f53\u5206\u6790\u4e4b\u524d\u4fee\u6539\u7c7b\u7684 MRO\uff08\u4f8b\u5982\uff0c\u63d2\u5165\u4e00\u4e9b\u6761\u76ee\uff09\u3002</p> <p>get_additional_deps() \u7528\u4e8e\u4e3a\u6a21\u5757\u6dfb\u52a0\u65b0\u4f9d\u8d56\u9879\u3002\u5b83\u5728\u8bed\u4e49\u5206\u6790\u4e4b\u524d\u88ab\u8c03\u7528\u3002\u4f8b\u5982\uff0c\u5982\u679c\u5e93\u6709\u57fa\u4e8e\u914d\u7f6e\u52a8\u6001\u52a0\u8f7d\u7684\u4f9d\u8d56\u9879\uff0c\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u94a9\u5b50\u3002</p> <p>report_config_data() \u7528\u4e8e\u63d2\u4ef6\u5177\u6709\u67d0\u79cd\u6bcf\u6a21\u5757\u914d\u7f6e\u7684\u60c5\u51b5\uff0c\u8fd9\u4e9b\u914d\u7f6e\u53ef\u80fd\u5f71\u54cd\u7c7b\u578b\u68c0\u67e5\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5f53\u6a21\u5757\u7684\u914d\u7f6e\u66f4\u6539\u65f6\uff0c\u6211\u4eec\u5e0c\u671b\u4f7f mypy \u7684\u7f13\u5b58\u5931\u6548\uff0c\u4ee5\u4fbf\u91cd\u65b0\u68c0\u67e5\u6a21\u5757\u3002\u8fd9\u4e2a\u94a9\u5b50\u5e94\u8be5\u7528\u4e8e\u62a5\u544a\u4efb\u4f55\u76f8\u5173\u7684\u914d\u7f6e\u6570\u636e\uff0c\u4ee5\u4fbf mypy \u77e5\u9053\u5728\u914d\u7f6e\u66f4\u6539\u65f6\u91cd\u65b0\u68c0\u67e5\u6a21\u5757\u3002\u94a9\u5b50\u5e94\u8fd4\u56de\u53ef\u4ee5\u7f16\u7801\u4e3a JSON \u7684\u6570\u636e\u3002</p> <p>get_type_analyze_hook() customizes behaviour of the type analyzer. For example, PEP 484 doesn't support defining variadic generic types:</p> <pre><code>from lib import Vector\n\na: Vector[int, int]\nb: Vector[int, int, int]\n</code></pre> <p>When analyzing this code, mypy will call <code>get_type_analyze_hook(\"lib.Vector\")</code>, so the plugin can return some valid type for each variable.</p> <p>get_function_hook() is used to adjust the return type of a function call. This hook will be also called for instantiation of classes. This is a good choice if the return type is too complex to be expressed by regular python typing.</p> <p>get_function_signature_hook() is used to adjust the signature of a function.</p> <p>get_method_hook() is the same as <code>get_function_hook()</code> but for methods instead of module level functions.</p> <p>get_method_signature_hook() is used to adjust the signature of a method. This includes special Python methods except __init__() and __new__(). For example in this code:</p> <pre><code>from ctypes import Array, c_int\n\nx: Array[c_int]\nx[0] = 42\n</code></pre> <p>mypy will call <code>get_method_signature_hook(\"ctypes.Array.__setitem__\")</code> so that the plugin can mimic the ctypes auto-convert behavior.</p> <p>get_attribute_hook() overrides instance member field lookups and property access (not assignments, and not method calls). This hook is only called for fields which already exist on the class. Exception: if __getattr__ or __getattribute__ is a method on the class, the hook is called for all fields which do not refer to methods.</p> <p>get_class_attribute_hook() is similar to above, but for attributes on classes rather than instances. Unlike above, this does not have special casing for __getattr__ or __getattribute__.</p> <p>get_class_decorator_hook() can be used to update class definition for given class decorators. For example, you can add some attributes to the class to match runtime behaviour:</p> <pre><code>from dataclasses import dataclass\n\n@dataclass  # built-in plugin adds `__init__` method here\nclass User:\n    name: str\n\nuser = User(name='example')  # mypy can understand this using a plugin\n</code></pre> <p>get_metaclass_hook() is similar to above, but for metaclasses.</p> <p>get_base_class_hook() is similar to above, but for base classes.</p> <p>get_dynamic_class_hook() can be used to allow dynamic class definitions in mypy. This plugin hook is called for every assignment to a simple name where right hand side is a function call:</p> <pre><code>from lib import dynamic_class\n\nX = dynamic_class('X', [])\n</code></pre> <p>For such definition, mypy will call <code>get_dynamic_class_hook(\"lib.dynamic_class\")</code>. The plugin should create the corresponding <code>mypy.nodes.TypeInfo</code> object, and place it into a relevant symbol table. (Instances of this class represent classes in mypy and hold essential information such as qualified name, method resolution order, etc.)</p> <p>get_customize_class_mro_hook() can be used to modify class MRO (for example insert some entries there) before the class body is analyzed.</p> <p>get_additional_deps() can be used to add new dependencies for a module. It is called before semantic analysis. For example, this can be used if a library has dependencies that are dynamically loaded based on configuration information.</p> <p>report_config_data() can be used if the plugin has some sort of per-module configuration that can affect typechecking. In that case, when the configuration for a module changes, we want to invalidate mypy's cache for that module so that it can be rechecked. This hook should be used to report to mypy any relevant configuration data, so that mypy knows to recheck the module if the configuration changes. The hooks should return data encodable as JSON.</p>"},{"location":"mypy_conf/extending_mypy/#\u5b9e\u7528\u5de5\u5177","title":"\u5b9e\u7528\u5de5\u5177","text":"<p>Useful tools</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u63d0\u4f9b\u4e86 <code>mypy.plugins.proper_plugin</code> \u63d2\u4ef6\uff0c\u8fd9\u5bf9\u4e8e\u63d2\u4ef6\u4f5c\u8005\u6765\u8bf4\u975e\u5e38\u6709\u7528\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u5e2e\u52a9\u53d1\u73b0\u9057\u6f0f\u7684 <code>get_proper_type()</code> \u8c03\u7528\uff0c\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u5e38\u89c1\u7684\u9519\u8bef\u3002</p> <p>\u5efa\u8bae\u5c06\u5176\u4f5c\u4e3a\u63d2\u4ef6 CI \u6d41\u7a0b\u7684\u4e00\u90e8\u5206\u542f\u7528\u3002</p> <p>Mypy ships <code>mypy.plugins.proper_plugin</code> plugin which can be useful for plugin authors, since it finds missing <code>get_proper_type()</code> calls, which is a pretty common mistake.</p> <p>It is recommended to enable it is a part of your plugin's CI.</p>"},{"location":"mypy_conf/inline_config/","title":"\u5185\u8054\u914d\u7f6e","text":"<p>Inline configuration</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u652f\u6301\u5728\u6587\u4ef6\u5185\u90e8\u4f7f\u7528 <code># mypy:</code> \u6ce8\u91ca\u6765\u8bbe\u7f6e\u6bcf\u4e2a\u6587\u4ef6\u7684\u914d\u7f6e\u9009\u9879\u3002\u4f8b\u5982\uff1a</p> <pre><code># mypy: disallow-any-generics\n</code></pre> <p>\u5185\u8054\u914d\u7f6e\u6ce8\u91ca\u4f18\u5148\u4e8e\u6240\u6709\u5176\u4ed6\u914d\u7f6e\u673a\u5236\u3002</p> <p>Mypy supports setting per-file configuration options inside files themselves using <code># mypy:</code> comments. For example:</p> <pre><code># mypy: disallow-any-generics\n</code></pre> <p>Inline configuration comments take precedence over all other configuration mechanisms.</p>"},{"location":"mypy_conf/inline_config/#\u914d\u7f6e\u6ce8\u91ca\u683c\u5f0f","title":"\u914d\u7f6e\u6ce8\u91ca\u683c\u5f0f","text":"<p>Configuration comment format</p> \u4e2d\u6587\u82f1\u6587 <p>\u6807\u5fd7\u5bf9\u5e94\u4e8e \u914d\u7f6e\u6587\u4ef6\u6807\u5fd7\uff0c\u4f46\u5141\u8bb8\u4f7f\u7528\u8fde\u5b57\u7b26\u4ee3\u66ff\u4e0b\u5212\u7ebf\u3002</p> <p>\u503c\u901a\u8fc7 <code>=</code> \u6307\u5b9a\uff0c\u4f46 <code>= True</code> \u53ef\u4ee5\u7701\u7565\uff1a</p> <pre><code># mypy: disallow-any-generics\n# mypy: always-true=FOO\n</code></pre> <p>\u591a\u4e2a\u6807\u5fd7\u53ef\u4ee5\u7528\u9017\u53f7\u5206\u9694\uff0c\u4e5f\u53ef\u4ee5\u653e\u5728\u4e0d\u540c\u7684\u884c\u4e0a\u3002\u8981\u5c06\u9017\u53f7\u5305\u542b\u5728\u9009\u9879\u503c\u7684\u4e00\u90e8\u5206\u4e2d\uff0c\u53ef\u4ee5\u5c06\u503c\u653e\u5728\u5f15\u53f7\u5185\uff1a</p> <pre><code># mypy: disallow-untyped-defs, always-false=\"FOO,BAR\"\n</code></pre> <p>\u5982\u540c\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u4e00\u6837\uff0c\u63a5\u53d7\u5e03\u5c14\u503c\u7684\u9009\u9879\u53ef\u4ee5\u901a\u8fc7\u5728\u540d\u79f0\u524d\u6dfb\u52a0 <code>no-</code> \u6765\u53d6\u53cd\uff0c\u6216\uff08\u5728\u9002\u7528\u65f6\uff09\u5c06\u5176\u524d\u7f00\u4ece <code>disallow</code> \u66f4\u6539\u4e3a <code>allow</code>\uff08\u53cd\u4e4b\u4ea6\u7136\uff09\uff1a</p> <pre><code># mypy: allow-untyped-defs, no-strict-optional\n</code></pre> <p>Flags correspond to config file flags but allow hyphens to be substituted for underscores.</p> <p>Values are specified using <code>=</code>, but <code>= True</code> may be omitted:</p> <pre><code># mypy: disallow-any-generics\n# mypy: always-true=FOO\n</code></pre> <p>Multiple flags can be separated by commas or placed on separate lines. To include a comma as part of an option's value, place the value inside quotes:</p> <pre><code># mypy: disallow-untyped-defs, always-false=\"FOO,BAR\"\n</code></pre> <p>Like in the configuration file, options that take a boolean value may be inverted by adding <code>no-</code> to their name or by (when applicable) swapping their prefix from <code>disallow</code> to <code>allow</code> (and vice versa):</p> <pre><code># mypy: allow-untyped-defs, no-strict-optional\n</code></pre>"},{"location":"mypy_conf/installed_packages/","title":"\u4f7f\u7528\u5df2\u5b89\u88c5\u7684\u5305","text":"<p>Using installed packages</p> \u4e2d\u6587\u82f1\u6587 <p>\u4f7f\u7528 pip \u5b89\u88c5\u7684\u5305\u53ef\u4ee5\u58f0\u660e\u5b83\u4eec\u652f\u6301\u7c7b\u578b\u68c0\u67e5\u3002\u4f8b\u5982\uff0caiohttp \u5305\u5185\u7f6e\u652f\u6301\u7c7b\u578b\u68c0\u67e5\u3002</p> <p>\u5305\u8fd8\u53ef\u4ee5\u4e3a\u67d0\u4e2a\u5e93\u63d0\u4f9b\u5b58\u6839\u3002\u4f8b\u5982\uff0c<code>types-requests</code> \u662f\u4e00\u4e2a\u4ec5\u5305\u542b\u5b58\u6839\u7684\u5305\uff0c\u4e3a requests \u5305\u63d0\u4f9b\u5b58\u6839\u3002\u5b58\u6839\u5305\u901a\u5e38\u6765\u81ea typeshed\uff0c\u8fd9\u662f\u4e00\u4e2a\u5171\u4eab\u7684 Python \u5e93\u5b58\u6839\u4ed3\u5e93\uff0c\u5b58\u6839\u5305\u7684\u540d\u79f0\u901a\u5e38\u4e3a <code>types-&lt;library&gt;</code> \u7684\u5f62\u5f0f\u3002\u8bf7\u6ce8\u610f\uff0c\u8bb8\u591a\u5b58\u6839\u5305\u5e76\u4e0d\u662f\u7531\u539f\u5305\u7684\u7ef4\u62a4\u8005\u7ef4\u62a4\u7684\u3002</p> <p>\u4ee5\u4e0b\u90e8\u5206\u89e3\u91ca\u4e86 mypy \u5982\u4f55\u4f7f\u7528\u8fd9\u4e9b\u5305\uff0c\u4ee5\u53ca\u5982\u4f55\u521b\u5efa\u8fd9\u4e9b\u5305\u3002</p> <p>Note</p> <p>PEP 561 \u89c4\u5b9a\u4e86\u4e00\u4e2a\u5305\u5982\u4f55\u58f0\u660e\u5b83\u652f\u6301\u7c7b\u578b\u68c0\u67e5\u3002</p> <p>Note</p> <p>\u5b58\u6839\u5305\u7684\u65b0\u7248\u672c\u901a\u5e38\u4f7f\u7528\u65e7\u7248\u672c\u751a\u81f3\u76f8\u5f53\u8fd1\u671f\u7248\u672c\u7684 mypy \u4e0d\u652f\u6301\u7684\u7c7b\u578b\u7cfb\u7edf\u7279\u6027\u3002\u5982\u679c\u4f60\u5c06 mypy \u56fa\u5b9a\u5230\u65e7\u7248\u672c\uff08\u4f8b\u5982\uff0c\u901a\u8fc7 <code>requirements.txt</code>\uff09\uff0c\u5efa\u8bae\u4f60\u4e5f\u56fa\u5b9a\u6240\u6709\u5b58\u6839\u5305\u4f9d\u8d56\u7684\u7248\u672c\u3002</p> <p>Note</p> <p>\u4ece mypy 0.900 \u5f00\u59cb\uff0c\u5927\u591a\u6570\u7b2c\u4e09\u65b9\u5305\u7684\u5b58\u6839\u5fc5\u987b\u663e\u5f0f\u5b89\u88c5\u3002\u8fd9\u4f7f\u5f97 mypy \u4e0e\u5b58\u6839\u7248\u672c\u89e3\u8026\uff0c\u5141\u8bb8\u5728\u4e0d\u66f4\u65b0 mypy \u7684\u60c5\u51b5\u4e0b\u66f4\u65b0\u5b58\u6839\u3002\u8fd9\u4e5f\u5141\u8bb8\u5b89\u88c5\u6700\u521d\u672a\u5305\u542b\u5728 mypy \u4e2d\u7684\u5b58\u6839\u3002\u65e9\u671f\u7684 mypy \u7248\u672c\u5305\u542b\u4e86\u4e00\u7ec4\u56fa\u5b9a\u7684\u7b2c\u4e09\u65b9\u5305\u5b58\u6839\u3002</p> <p>Packages installed with pip can declare that they support type checking. For example, the aiohttp package has built-in support for type checking.</p> <p>Packages can also provide stubs for a library. For example, <code>types-requests</code> is a stub-only package that provides stubs for the requests package. Stub packages are usually published from typeshed, a shared repository for Python library stubs, and have a name of form <code>types-&lt;library&gt;</code>. Note that many stub packages are not maintained by the original maintainers of the package.</p> <p>The sections below explain how mypy can use these packages, and how you can create such packages.</p> <p>Note</p> <p>PEP 561 specifies how a package can declare that it supports type checking.</p> <p>Note</p> <p>New versions of stub packages often use type system features not supported by older, and even fairly recent mypy versions. If you pin to an older version of mypy (using <code>requirements.txt</code>, for example), it is recommended that you also pin the versions of all your stub package dependencies.</p> <p>Note</p> <p>Starting in mypy 0.900, most third-party package stubs must be installed explicitly. This decouples mypy and stub versioning, allowing stubs to updated without updating mypy. This also allows stubs not originally included with mypy to be installed. Earlier mypy versions included a fixed set of stubs for third-party packages.</p>"},{"location":"mypy_conf/installed_packages/#\u4f7f\u7528-mypy-\u68c0\u67e5\u5df2\u5b89\u88c5\u7684\u5305pep-561","title":"\u4f7f\u7528 mypy \u68c0\u67e5\u5df2\u5b89\u88c5\u7684\u5305\uff08PEP 561\uff09","text":"<p>Using installed packages with mypy (PEP 561)</p> \u4e2d\u6587\u82f1\u6587 <p>\u901a\u5e38\uff0cmypy \u4f1a\u81ea\u52a8\u627e\u5230\u5e76\u4f7f\u7528\u5df2\u5b89\u88c5\u7684\u652f\u6301\u7c7b\u578b\u68c0\u67e5\u6216\u63d0\u4f9b\u5b58\u6839\u7684\u5305\u3002\u8fd9\u8981\u6c42\u4f60\u5728\u8fd0\u884c mypy \u7684 Python \u73af\u5883\u4e2d\u5b89\u88c5\u8fd9\u4e9b\u5305\u3002\u7531\u4e8e\u8bb8\u591a\u5305\u5c1a\u4e0d\u652f\u6301\u7c7b\u578b\u68c0\u67e5\uff0c\u4f60\u53ef\u80fd\u8fd8\u9700\u8981\u5b89\u88c5\u4e00\u4e2a\u5355\u72ec\u7684\u5b58\u6839\u5305\uff0c\u901a\u5e38\u547d\u540d\u4e3a <code>types-&lt;library&gt;</code>\u3002\uff08\u6709\u5173\u5982\u4f55\u5904\u7406\u4e0d\u652f\u6301\u7c7b\u578b\u68c0\u67e5\u4e14\u7f3a\u5c11\u5b58\u6839\u7684\u5e93\uff0c\u8bf7\u53c2\u89c1 \u7f3a\u5931\u7684\u5bfc\u5165\uff09</p> <p>\u5982\u679c\u4f60\u5728\u53e6\u4e00\u4e2a Python \u5b89\u88c5\u6216\u73af\u5883\u4e2d\u5b89\u88c5\u4e86\u5e26\u7c7b\u578b\u4fe1\u606f\u7684\u5305\uff0cmypy \u4e0d\u4f1a\u81ea\u52a8\u627e\u5230\u5b83\u4eec\u3002\u4e00\u79cd\u9009\u62e9\u662f\u5728\u5b89\u88c5 mypy \u7684\u73af\u5883\u4e2d\u518d\u5b89\u88c5\u4e00\u4efd\u8fd9\u4e9b\u5305\u3002\u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 --python-executable \u6807\u5fd7\u6765\u6307\u5411\u53e6\u4e00\u4e2a\u73af\u5883\u4e2d\u7684 Python \u53ef\u6267\u884c\u6587\u4ef6\uff0c\u8fd9\u6837 mypy \u5c31\u4f1a\u627e\u5230\u4e3a\u8be5 Python \u53ef\u6267\u884c\u6587\u4ef6\u5b89\u88c5\u7684\u5305\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0cmypy \u4e0d\u652f\u6301\u4e00\u4e9b\u66f4\u9ad8\u7ea7\u7684\u5bfc\u5165\u7279\u6027\uff0c\u5982 zip \u5bfc\u5165\u548c\u81ea\u5b9a\u4e49\u5bfc\u5165\u94a9\u5b50\u3002</p> <p>\u5982\u679c\u4f60\u4e0d\u60f3\u4f7f\u7528\u63d0\u4f9b\u7c7b\u578b\u4fe1\u606f\u7684\u5df2\u5b89\u88c5\u5305\uff0c\u53ef\u4ee5\u4f7f\u7528 --no-site-packages \u6807\u5fd7\u6765\u7981\u7528\u5bf9\u5df2\u5b89\u88c5\u5305\u7684\u641c\u7d22\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u5b58\u6839-only \u5305\u4e0d\u80fd\u4e0e <code>MYPYPATH</code> \u4e00\u8d77\u4f7f\u7528\u3002\u5982\u679c\u4f60\u5e0c\u671b mypy \u627e\u5230\u8be5\u5305\uff0c\u5b83\u5fc5\u987b\u5df2\u5b89\u88c5\u3002\u5bf9\u4e8e\u5305 <code>foo</code>\uff0c\u5b58\u6839-only \u5305\u7684\u540d\u79f0\uff08<code>foo-stubs</code>\uff09\u4e0d\u662f\u5408\u6cd5\u7684\u5305\u540d\uff0c\u56e0\u6b64 mypy \u5c06\u4e0d\u4f1a\u627e\u5230\u5b83\uff0c\u9664\u975e\u5b83\u5df2\u5b89\u88c5\uff08\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 PEP 561: \u5b58\u6839-only \u5305\uff09\u3002</p> <p>Typically mypy will automatically find and use installed packages that support type checking or provide stubs. This requires that you install the packages in the Python environment that you use to run mypy.  As many packages don't support type checking yet, you may also have to install a separate stub package, usually named <code>types-&lt;library&gt;</code>. (See Missing imports for how to deal with libraries that don't support type checking and are also missing stubs.)</p> <p>If you have installed typed packages in another Python installation or environment, mypy won't automatically find them. One option is to install another copy of those packages in the environment in which you installed mypy. Alternatively, you can use the --python-executable flag to point to the Python executable for another environment, and mypy will find packages installed for that Python executable.</p> <p>Note that mypy does not support some more advanced import features, such as zip imports and custom import hooks.</p> <p>If you don't want to use installed packages that provide type information at all, use the --no-site-packages flag to disable searching for installed packages.</p> <p>Note that stub-only packages cannot be used with <code>MYPYPATH</code>. If you want mypy to find the package, it must be installed. For a package <code>foo</code>, the name of the stub-only package (<code>foo-stubs</code>) is not a legal package name, so mypy will not find it, unless it is installed (see PEP 561: Stub-only Packages for more information).</p>"},{"location":"mypy_conf/installed_packages/#\u521b\u5efa\u517c\u5bb9-pep-561-\u7684\u5305","title":"\u521b\u5efa\u517c\u5bb9 PEP 561 \u7684\u5305","text":"<p>Creating PEP 561 compatible packages</p> \u4e2d\u6587\u82f1\u6587 <p>Note</p> <p>\u9664\u975e\u4f60\u7ef4\u62a4\u4e00\u4e2a PyPI \u4e0a\u7684\u5305\uff0c\u6216\u8005\u60f3\u8981\u4e3a\u73b0\u6709\u7684 PyPI \u5305\u53d1\u5e03\u7c7b\u578b\u4fe1\u606f\uff0c\u5426\u5219\u4f60\u901a\u5e38\u53ef\u4ee5\u5ffd\u7565\u8fd9\u4e00\u90e8\u5206\u3002</p> <p>PEP 561 \u63cf\u8ff0\u4e86\u4e09\u79cd\u4e3b\u8981\u7684\u5206\u53d1\u7c7b\u578b\u4fe1\u606f\u7684\u65b9\u6cd5\uff1a</p> <ol> <li> <p>\u5305\u5185\u542b\u6709 Python \u5b9e\u73b0\u4e2d\u7684\u5185\u8054\u7c7b\u578b\u6ce8\u89e3\u3002</p> </li> <li> <p>\u5305\u968f Python \u5b9e\u73b0\u4e00\u8d77\u63d0\u4f9b \u5b58\u6839\u6587\u4ef6 \u4ee5\u5305\u542b\u7c7b\u578b\u4fe1\u606f\u3002</p> </li> <li> <p>\u5305\u5355\u72ec\u63d0\u4f9b\u53e6\u4e00\u5305\u7684\u7c7b\u578b\u4fe1\u606f\u4f5c\u4e3a\u5b58\u6839\u6587\u4ef6\uff08\u4e5f\u79f0\u4e3a\u201c\u5b58\u6839-only \u5305\u201d\uff09\u3002</p> </li> </ol> <p>\u5982\u679c\u4f60\u60f3\u4e3a\u73b0\u6709\u5e93\u521b\u5efa\u4e00\u4e2a\u5b58\u6839-only \u5305\uff0c\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u5411 typeshed \u4ed3\u5e93\u8d21\u732e\u5b58\u6839\uff0c\u5b58\u6839\u5305\u5c06\u81ea\u52a8\u4e0a\u4f20\u5230 PyPI\u3002</p> <p>\u5982\u679c\u4f60\u60f3\u5c06\u5e93\u5305\u81ea\u5df1\u53d1\u5e03\u5230\u5305\u4ed3\u5e93\uff08\u4f8b\u5982 PyPI\uff09\uff0c\u65e0\u8bba\u662f\u7528\u4e8e\u5185\u90e8\u8fd8\u662f\u5916\u90e8\u7684\u7c7b\u578b\u68c0\u67e5\uff0c\u63d0\u4f9b\u7c7b\u578b\u4fe1\u606f\u7684\u5305\uff08\u901a\u8fc7\u7c7b\u578b\u6ce8\u91ca\u6216\u4ee3\u7801\u4e2d\u7684\u6ce8\u89e3\uff09\u5e94\u5728\u5176\u5305\u76ee\u5f55\u4e2d\u653e\u7f6e\u4e00\u4e2a <code>py.typed</code> \u6587\u4ef6\u3002\u4f8b\u5982\uff0c\u8fd9\u91cc\u662f\u4e00\u4e2a\u5178\u578b\u7684\u76ee\u5f55\u7ed3\u6784\uff1a</p> <pre><code>setup.py\npackage_a/\n    __init__.py\n    lib.py\n    py.typed\n</code></pre> <p><code>setup.py</code> \u6587\u4ef6\u53ef\u4ee5\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>from setuptools import setup\n\nsetup(\n    name=\"SuperPackageA\",\n    author=\"Me\",\n    version=\"0.1\",\n    package_data={\"package_a\": [\"py.typed\"]},\n    packages=[\"package_a\"]\n)\n</code></pre> <p>\u4e00\u4e9b\u5305\u540c\u65f6\u5305\u542b\u5b58\u6839\u6587\u4ef6\u548c\u8fd0\u884c\u65f6\u6587\u4ef6\u3002\u8fd9\u4e9b\u5305\u4e5f\u9700\u8981\u4e00\u4e2a <code>py.typed</code> \u6587\u4ef6\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u793a\u4f8b\uff1a</p> <pre><code>setup.py\npackage_b/\n    __init__.py\n    lib.py\n    lib.pyi\n    py.typed\n</code></pre> <p><code>setup.py</code> \u6587\u4ef6\u53ef\u80fd\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>from setuptools import setup\n\nsetup(\n    name=\"SuperPackageB\",\n    author=\"Me\",\n    version=\"0.1\",\n    package_data={\"package_b\": [\"py.typed\", \"lib.pyi\"]},\n    packages=[\"package_b\"]\n)\n</code></pre> <p>\u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c<code>lib.py</code> \u548c <code>lib.pyi</code> \u5b58\u6839\u6587\u4ef6\u90fd\u5b58\u5728\u3002\u5728\u8fd0\u884c\u65f6\uff0cPython \u89e3\u91ca\u5668\u5c06\u4f7f\u7528 <code>lib.py</code>\uff0c\u4f46 mypy \u5c06\u4f7f\u7528 <code>lib.pyi</code>\u3002</p> <p>\u5982\u679c\u5305\u662f\u5b58\u6839-only\uff08\u5728\u8fd0\u884c\u65f6\u4e0d\u88ab\u5bfc\u5165\uff09\uff0c\u8be5\u5305\u5e94\u4ee5\u8fd0\u884c\u65f6\u5305\u540d\u4e3a\u524d\u7f00\uff0c\u5e76\u4ee5 <code>-stubs</code> \u4e3a\u540e\u7f00\u3002\u5b58\u6839-only \u5305\u4e0d\u9700\u8981 <code>py.typed</code> \u6587\u4ef6\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u6709 <code>package_c</code> \u7684\u5b58\u6839\uff0c\u53ef\u80fd\u4f1a\u8fd9\u6837\u505a\uff1a</p> <pre><code>setup.py\npackage_c-stubs/\n    __init__.pyi\n    lib.pyi\n</code></pre> <p><code>setup.py</code> \u6587\u4ef6\u53ef\u80fd\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>from setuptools import setup\n\nsetup(\n    name=\"SuperPackageC\",\n    author=\"Me\",\n    version=\"0.1\",\n    package_data={\"package_c-stubs\": [\"__init__.pyi\", \"lib.pyi\"]},\n    packages=[\"package_c-stubs\"]\n)\n</code></pre> <p>\u4e0a\u8ff0\u8bf4\u660e\u8db3\u4ee5\u786e\u4fdd\u6784\u5efa\u7684 wheel \u5305\u542b\u9002\u5f53\u7684\u6587\u4ef6\u3002\u7136\u800c\uff0c\u4e3a\u4e86\u786e\u4fdd\u5728 <code>sdist</code>\uff08<code>.tar.gz</code> \u5b58\u6863\uff09\u4e2d\u5305\u542b\u8fd9\u4e9b\u6587\u4ef6\uff0c\u4f60\u53ef\u80fd\u8fd8\u9700\u8981\u4fee\u6539 <code>MANIFEST.in</code> \u4e2d\u7684\u5305\u542b\u89c4\u5219\uff1a</p> <pre><code>global-include *.pyi\nglobal-include *.typed\n</code></pre> <p>Note</p> <p>You can generally ignore this section unless you maintain a package on PyPI, or want to publish type information for an existing PyPI package.</p> <p>PEP 561 describes three main ways to distribute type information:</p> <ol> <li> <p>A package has inline type annotations in the Python implementation.</p> </li> <li> <p>A package ships stub files with type information alongside the Python implementation.</p> </li> <li> <p>A package ships type information for another package separately as stub files (also known as a \"stub-only package\").</p> </li> </ol> <p>If you want to create a stub-only package for an existing library, the simplest way is to contribute stubs to the typeshed repository, and a stub package will automatically be uploaded to PyPI.</p> <p>If you would like to publish a library package to a package repository yourself (e.g. on PyPI) for either internal or external use in type checking, packages that supply type information via type comments or annotations in the code should put a <code>py.typed</code> file in their package directory. For example, here is a typical directory structure:</p> <pre><code>setup.py\npackage_a/\n    __init__.py\n    lib.py\n    py.typed\n</code></pre> <p>The <code>setup.py</code> file could look like this:</p> <pre><code>    from setuptools import setup\n\n    setup(\n        name=\"SuperPackageA\",\n        author=\"Me\",\n        version=\"0.1\",\n        package_data={\"package_a\": [\"py.typed\"]},\n        packages=[\"package_a\"]\n    )\n</code></pre> <p>Some packages have a mix of stub files and runtime files. These packages also require a <code>py.typed</code> file. An example can be seen below:</p> <pre><code>setup.py\npackage_b/\n    __init__.py\n    lib.py\n    lib.pyi\n    py.typed\n</code></pre> <p>The <code>setup.py</code> file might look like this:</p> <pre><code>from setuptools import setup\n\nsetup(\n    name=\"SuperPackageB\",\n    author=\"Me\",\n    version=\"0.1\",\n    package_data={\"package_b\": [\"py.typed\", \"lib.pyi\"]},\n    packages=[\"package_b\"]\n)\n</code></pre> <p>In this example, both <code>lib.py</code> and the <code>lib.pyi</code> stub file exist. At runtime, the Python interpreter will use <code>lib.py</code>, but mypy will use <code>lib.pyi</code> instead.</p> <p>If the package is stub-only (not imported at runtime), the package should have a prefix of the runtime package name and a suffix of <code>-stubs</code>. A <code>py.typed</code> file is not needed for stub-only packages. For example, if we had stubs for <code>package_c</code>, we might do the following:</p> <pre><code>setup.py\npackage_c-stubs/\n    __init__.pyi\n    lib.pyi\n</code></pre> <p>The <code>setup.py</code> might look like this:</p> <pre><code>from setuptools import setup\n\nsetup(\n    name=\"SuperPackageC\",\n    author=\"Me\",\n    version=\"0.1\",\n    package_data={\"package_c-stubs\": [\"__init__.pyi\", \"lib.pyi\"]},\n    packages=[\"package_c-stubs\"]\n)\n</code></pre> <p>The instructions above are enough to ensure that the built wheels contain the appropriate files. However, to ensure inclusion inside the <code>sdist</code> (<code>.tar.gz</code> archive), you may also need to modify the inclusion rules in your <code>MANIFEST.in</code>:</p> <pre><code>global-include *.pyi\nglobal-include *.typed\n</code></pre>"},{"location":"mypy_conf/mypy_daemon/","title":"Mypy \u5b88\u62a4\u8fdb\u7a0b (mypy server)","text":"<p>Mypy daemon (mypy server)</p> \u4e2d\u6587\u82f1\u6587 <p>\u9664\u4e86\u5c06 mypy \u4f5c\u4e3a\u547d\u4ee4\u884c\u5de5\u5177\u8fd0\u884c\u5916\uff0c\u4f60\u8fd8\u53ef\u4ee5\u5c06\u5176\u4f5c\u4e3a\u4e00\u4e2a\u957f\u671f\u8fd0\u884c\u7684\u5b88\u62a4\u8fdb\u7a0b\uff08\u670d\u52a1\u5668\uff09\u6765\u8fd0\u884c\uff0c\u5e76\u4f7f\u7528\u547d\u4ee4\u884c\u5ba2\u6237\u7aef\u5c06\u7c7b\u578b\u68c0\u67e5\u8bf7\u6c42\u53d1\u9001\u5230\u670d\u52a1\u5668\u3002\u8fd9\u6837\uff0cmypy \u53ef\u4ee5\u66f4\u5feb\u5730\u6267\u884c\u7c7b\u578b\u68c0\u67e5\uff0c\u56e0\u4e3a\u4ece\u4ee5\u524d\u8fd0\u884c\u4e2d\u7f13\u5b58\u7684\u7a0b\u5e8f\u72b6\u6001\u4fdd\u5b58\u5728\u5185\u5b58\u4e2d\uff0c\u65e0\u9700\u5728\u6bcf\u6b21\u8fd0\u884c\u65f6\u4ece\u6587\u4ef6\u7cfb\u7edf\u8bfb\u53d6\u3002\u670d\u52a1\u5668\u8fd8\u4f7f\u7528\u66f4\u7ec6\u7c92\u5ea6\u7684\u4f9d\u8d56\u8ffd\u8e2a\u6765\u51cf\u5c11\u9700\u8981\u5b8c\u6210\u7684\u5de5\u4f5c\u91cf\u3002</p> <p>\u5982\u679c\u4f60\u6709\u4e00\u4e2a\u5927\u578b\u4ee3\u7801\u5e93\u9700\u8981\u68c0\u67e5\uff0c\u4f7f\u7528 mypy \u5b88\u62a4\u8fdb\u7a0b\u8fd0\u884c mypy \u53ef\u4ee5\u6bd4\u5e38\u89c4\u7684\u547d\u4ee4\u884c <code>mypy</code> \u5de5\u5177\u5feb 10 \u500d\u6216\u66f4\u591a\uff0c\u7279\u522b\u662f\u5f53\u4f60\u7684\u5de5\u4f5c\u6d41\u7a0b\u6d89\u53ca\u5728\u5c0f\u7f16\u8f91\u540e\u91cd\u590d\u8fd0\u884c mypy \u65f6\u2014\u2014\u8fd9\u901a\u5e38\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\uff0c\u56e0\u4e3a\u8fd9\u6837\u4f60\u4f1a\u66f4\u65e9\u53d1\u73b0\u9519\u8bef\u3002</p> <p>\u6ce8\u610f</p> <p>mypy \u5b88\u62a4\u8fdb\u7a0b\u7684\u547d\u4ee4\u884c\u63a5\u53e3\u53ef\u80fd\u4f1a\u5728\u672a\u6765\u7684 mypy \u7248\u672c\u4e2d\u53d1\u751f\u53d8\u5316\u3002</p> <p>\u6ce8\u610f</p> <p>\u6bcf\u4e2a mypy \u5b88\u62a4\u8fdb\u7a0b\u5b9e\u4f8b\u652f\u6301\u4e00\u4e2a\u7528\u6237\u548c\u4e00\u7ec4\u6e90\u6587\u4ef6\uff0c\u5e76\u4e14\u4e00\u6b21\u53ea\u80fd\u5904\u7406\u4e00\u4e2a\u7c7b\u578b\u68c0\u67e5\u8bf7\u6c42\u3002\u4f60\u53ef\u4ee5\u8fd0\u884c\u591a\u4e2a mypy \u5b88\u62a4\u8fdb\u7a0b\u5b9e\u4f8b\u6765\u68c0\u67e5\u591a\u4e2a\u4ee3\u7801\u5e93\u3002</p> <p>Instead of running mypy as a command-line tool, you can also run it as a long-running daemon (server) process and use a command-line client to send type-checking requests to the server.  This way mypy can perform type checking much faster, since program state cached from previous runs is kept in memory and doesn't have to be read from the file system on each run. The server also uses finer-grained dependency tracking to reduce the amount of work that needs to be done.</p> <p>If you have a large codebase to check, running mypy using the mypy daemon can be 10 or more times faster than the regular command-line <code>mypy</code> tool, especially if your workflow involves running mypy repeatedly after small edits -- which is often a good idea, as this way you'll find errors sooner.</p> <p>Note</p> <p>The command-line interface of mypy daemon may change in future mypy releases.</p> <p>Note</p> <p>Each mypy daemon process supports one user and one set of source files, and it can only process one type checking request at a time. You can run multiple mypy daemon processes to type check multiple repositories.</p>"},{"location":"mypy_conf/mypy_daemon/#\u57fa\u672c\u7528\u6cd5","title":"\u57fa\u672c\u7528\u6cd5","text":"<p>Basic usage</p> \u4e2d\u6587\u82f1\u6587 <p>\u5ba2\u6237\u7aef\u5de5\u5177 <code>dmypy</code> \u7528\u4e8e\u63a7\u5236 mypy \u5b88\u62a4\u8fdb\u7a0b\u3002\u4f7f\u7528 <code>dmypy run -- &lt;flags&gt; &lt;files&gt;</code> \u6765\u68c0\u67e5\u4e00\u7ec4\u6587\u4ef6\uff08\u6216\u76ee\u5f55\uff09\u7684\u7c7b\u578b\u3002\u5982\u679c\u5b88\u62a4\u8fdb\u7a0b\u672a\u8fd0\u884c\uff0c\u8fd9\u6761\u547d\u4ee4\u5c06\u542f\u52a8\u5b88\u62a4\u8fdb\u7a0b\u3002\u4f60\u53ef\u4ee5\u5728 <code>--</code> \u540e\u9762\u4f7f\u7528\u51e0\u4e4e\u4efb\u610f\u7684 mypy \u6807\u5fd7\u3002\u5b88\u62a4\u8fdb\u7a0b\u5c06\u59cb\u7ec8\u5728\u5f53\u524d\u4e3b\u673a\u4e0a\u8fd0\u884c\u3002\u4f8b\u5982\uff1a</p> <pre><code>dmypy run -- prog.py pkg/*.py\n</code></pre> <p><code>dmypy run</code> \u4f1a\u5728\u914d\u7f6e\u6216 mypy \u7248\u672c\u66f4\u6539\u65f6\u81ea\u52a8\u91cd\u542f\u5b88\u62a4\u8fdb\u7a0b\u3002</p> <p>\u521d\u6b21\u8fd0\u884c\u4f1a\u5904\u7406\u6240\u6709\u4ee3\u7801\uff0c\u53ef\u80fd\u9700\u8981\u4e00\u4e9b\u65f6\u95f4\u624d\u80fd\u5b8c\u6210\uff0c\u4f46\u540e\u7eed\u8fd0\u884c\u5c06\u4f1a\u5f88\u5feb\uff0c\u7279\u522b\u662f\u5982\u679c\u4f60\u53ea\u4fee\u6539\u4e86\u51e0\u4e2a\u6587\u4ef6\u7684\u8bdd\u3002\uff08\u4f60\u53ef\u4ee5\u4f7f\u7528 \u8fdc\u7a0b\u7f13\u5b58 \u6765\u52a0\u901f\u521d\u6b21\u8fd0\u884c\u3002\u5982\u679c\u4f60\u6709\u4e00\u4e2a\u5927\u578b\u4ee3\u7801\u5e93\uff0c\u8fd9\u79cd\u52a0\u901f\u53ef\u80fd\u4f1a\u975e\u5e38\u663e\u8457\u3002\uff09</p> <p>\u6ce8\u610f</p> <p>Mypy 0.780 \u7248\u672c\u589e\u52a0\u4e86\u5bf9 <code>dmypy</code> \u4e2d\u8ddf\u8e2a\u5bfc\u5165\u7684\u652f\u6301\uff08\u9ed8\u8ba4\u542f\u7528\uff09\u3002\u8fd9\u4e2a\u529f\u80fd\u4ecd\u5904\u4e8e\u5b9e\u9a8c\u9636\u6bb5\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 <code>--follow-imports=skip</code> \u6216 <code>--follow-imports=error</code> \u6765\u56de\u9000\u5230\u7a33\u5b9a\u529f\u80fd\u3002\u6709\u5173\u8fd9\u4e9b\u529f\u80fd\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 :ref:<code>follow-imports</code>\u3002</p> <p>\u6ce8\u610f</p> <p>mypy \u5b88\u62a4\u8fdb\u7a0b\u9700\u8981 <code>--local-partial-types</code> \u9009\u9879\uff0c\u5e76\u4f1a\u81ea\u52a8\u542f\u7528\u8be5\u9009\u9879\u3002</p> <p>The client utility <code>dmypy</code> is used to control the mypy daemon. Use <code>dmypy run -- &lt;flags&gt; &lt;files&gt;</code> to type check a set of files (or directories). This will launch the daemon if it is not running. You can use almost arbitrary mypy flags after <code>--</code>.  The daemon will always run on the current host. Example</p> <pre><code>dmypy run -- prog.py pkg/*.py\n</code></pre> <p><code>dmypy run</code> will automatically restart the daemon if the configuration or mypy version changes.</p> <p>The initial run will process all the code and may take a while to finish, but subsequent runs will be quick, especially if you've only changed a few files. (You can use remote caching to speed up the initial run. The speedup can be significant if you have a large codebase.)</p> <p>Note</p> <p>Mypy 0.780 added support for following imports in dmypy (enabled by default). This functionality is still experimental. You can use <code>--follow-imports=skip</code> or <code>--follow-imports=error</code> to fall back to the stable functionality.  See :ref:<code>follow-imports</code> for details on how these work.</p> <p>Note</p> <p>The mypy daemon requires <code>--local-partial-types</code> and automatically enables it.</p>"},{"location":"mypy_conf/mypy_daemon/#\u5b88\u62a4\u8fdb\u7a0b\u5ba2\u6237\u7aef\u547d\u4ee4","title":"\u5b88\u62a4\u8fdb\u7a0b\u5ba2\u6237\u7aef\u547d\u4ee4","text":"<p>Daemon client commands</p> \u4e2d\u6587\u82f1\u6587 <p>\u867d\u7136 <code>dmypy run</code> \u5bf9\u5927\u591a\u6570\u7528\u9014\u6765\u8bf4\u5df2\u7ecf\u8db3\u591f\uff0c\u4f46\u6709\u4e9b\u5de5\u4f5c\u6d41\uff08\u4f8b\u5982\u4f7f\u7528 \u8fdc\u7a0b\u7f13\u5b58 \u7684\u5de5\u4f5c\u6d41\uff09\u53ef\u80fd\u9700\u8981\u5bf9\u5b88\u62a4\u8fdb\u7a0b\u7684\u751f\u547d\u5468\u671f\u6709\u66f4\u7cbe\u786e\u7684\u63a7\u5236\uff1a</p> <ul> <li> <p><code>dmypy stop</code> \u7ec8\u6b62\u5b88\u62a4\u8fdb\u7a0b\u3002</p> </li> <li> <p><code>dmypy start -- &lt;flags&gt;</code> \u542f\u52a8\u5b88\u62a4\u8fdb\u7a0b\u4f46\u4e0d\u68c0\u67e5\u4efb\u4f55\u6587\u4ef6\u3002\u4f60\u53ef\u4ee5\u5728 <code>--</code> \u540e\u9762\u4f7f\u7528\u51e0\u4e4e\u4efb\u610f\u7684 mypy \u6807\u5fd7\u3002</p> </li> <li> <p><code>dmypy restart -- &lt;flags&gt;</code> \u91cd\u542f\u5b88\u62a4\u8fdb\u7a0b\u3002\u6807\u5fd7\u4e0e <code>dmypy start</code> \u76f8\u540c\u3002\u8fd9\u7b49\u540c\u4e8e\u5148\u6267\u884c\u505c\u6b62\u547d\u4ee4\uff0c\u7136\u540e\u518d\u542f\u52a8\u547d\u4ee4\u3002</p> </li> <li> <p>\u4f7f\u7528 <code>dmypy run --timeout SECONDS -- &lt;flags&gt;</code>\uff08\u6216 <code>start</code> \u6216 <code>restart</code>\uff09\u6765\u5728\u4e0d\u6d3b\u52a8\u540e\u81ea\u52a8\u5173\u95ed\u5b88\u62a4\u8fdb\u7a0b\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5b88\u62a4\u8fdb\u7a0b\u4f1a\u4e00\u76f4\u8fd0\u884c\uff0c\u76f4\u5230\u88ab\u660e\u786e\u505c\u6b62\u3002</p> </li> <li> <p><code>dmypy check &lt;files&gt;</code> \u4f7f\u7528\u5df2\u7ecf\u8fd0\u884c\u7684\u5b88\u62a4\u8fdb\u7a0b\u68c0\u67e5\u4e00\u7ec4\u6587\u4ef6\u3002</p> </li> <li> <p><code>dmypy recheck</code> \u68c0\u67e5\u4e0e\u6700\u8fd1\u7684 <code>check</code> \u6216 <code>recheck</code> \u547d\u4ee4\u76f8\u540c\u7684\u6587\u4ef6\u96c6\u3002\uff08\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 --update \u548c --remove \u9009\u9879\u6765\u4fee\u6539\u6587\u4ef6\u96c6\uff0c\u5e76\u5b9a\u4e49\u5e94\u5904\u7406\u54ea\u4e9b\u6587\u4ef6\u3002\uff09</p> </li> <li> <p><code>dmypy status</code> \u68c0\u67e5\u5b88\u62a4\u8fdb\u7a0b\u662f\u5426\u6b63\u5728\u8fd0\u884c\u3002\u5982\u679c\u6709\u8fd0\u884c\u4e2d\u7684\u5b88\u62a4\u8fdb\u7a0b\uff0c\u5b83\u4f1a\u6253\u5370\u8bca\u65ad\u4fe1\u606f\u5e76\u4ee5 <code>0</code> \u9000\u51fa\u3002</p> </li> </ul> <p>\u4f7f\u7528 <code>dmypy --help</code> \u83b7\u53d6\u6709\u5173\u989d\u5916\u547d\u4ee4\u548c\u547d\u4ee4\u884c\u9009\u9879\u7684\u5e2e\u52a9\uff0c\u4f7f\u7528 <code>dmypy &lt;command&gt; --help</code> \u83b7\u53d6\u6709\u5173\u7279\u5b9a\u547d\u4ee4\u9009\u9879\u7684\u5e2e\u52a9\u3002</p> <p>While <code>dmypy run</code> is sufficient for most uses, some workflows (ones using remote caching, perhaps), require more precise control over the lifetime of the daemon process:</p> <ul> <li> <p><code>dmypy stop</code> stops the daemon.</p> </li> <li> <p><code>dmypy start -- &lt;flags&gt;</code> starts the daemon but does not check any files. You can use almost arbitrary mypy flags after <code>--</code>.</p> </li> <li> <p><code>dmypy restart -- &lt;flags&gt;</code> restarts the daemon. The flags are the same as with <code>dmypy start</code>. This is equivalent to a stop command followed by a start.</p> </li> <li> <p>Use <code>dmypy run --timeout SECONDS -- &lt;flags&gt;</code> (or <code>start</code> or <code>restart</code>) to automatically shut down the daemon after inactivity. By default, the daemon runs until it's explicitly stopped.</p> </li> <li> <p><code>dmypy check &lt;files&gt;</code> checks a set of files using an already running daemon.</p> </li> <li> <p><code>dmypy recheck</code> checks the same set of files as the most recent <code>check</code> or <code>recheck</code> command. (You can also use the --update and --remove options to alter the set of files, and to define which files should be processed.)</p> </li> <li> <p><code>dmypy status</code> checks whether a daemon is running. It prints a diagnostic and exits with <code>0</code> if there is a running daemon.</p> </li> </ul> <p>Use <code>dmypy --help</code> for help on additional commands and command-line options not discussed here, and <code>dmypy &lt;command&gt; --help</code> for help on command-specific options.</p>"},{"location":"mypy_conf/mypy_daemon/#\u989d\u5916\u7684\u5b88\u62a4\u8fdb\u7a0b\u6807\u5fd7","title":"\u989d\u5916\u7684\u5b88\u62a4\u8fdb\u7a0b\u6807\u5fd7","text":"<p>Additional daemon flags</p> \u4e2d\u6587\u82f1\u6587 <code>--status-file FILE</code> <p>\u4f7f\u7528 <code>FILE</code> \u4f5c\u4e3a\u72b6\u6001\u6587\u4ef6\u6765\u5b58\u50a8\u5b88\u62a4\u8fdb\u7a0b\u7684\u8fd0\u884c\u72b6\u6001\u3002\u8fd9\u901a\u5e38\u662f\u4e00\u4e2a JSON \u6587\u4ef6\uff0c\u5305\u542b\u5173\u4e8e\u5b88\u62a4\u8fdb\u7a0b\u548c\u8fde\u63a5\u7684\u4fe1\u606f\u3002\u9ed8\u8ba4\u8def\u5f84\u662f\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u4e0b\u7684 <code>.dmypy.json</code>\u3002</p> <code>--log-file FILE</code> <p>\u5c06\u5b88\u62a4\u8fdb\u7a0b\u7684\u6807\u51c6\u8f93\u51fa/\u6807\u51c6\u9519\u8bef\u8f93\u51fa\u5b9a\u5411\u5230 <code>FILE</code>\u3002\u8fd9\u5bf9\u8c03\u8bd5\u5b88\u62a4\u8fdb\u7a0b\u5d29\u6e83\u975e\u5e38\u6709\u7528\uff0c\u56e0\u4e3a\u670d\u52a1\u5668\u7684\u56de\u6eaf\u4fe1\u606f\u4e0d\u603b\u662f\u7531\u5ba2\u6237\u7aef\u6253\u5370\u3002\u6b64\u9009\u9879\u9002\u7528\u4e8e <code>start</code>\u3001<code>restart</code> \u548c <code>run</code> \u547d\u4ee4\u3002</p> <code>--timeout TIMEOUT</code> <p>\u5728 <code>TIMEOUT</code> \u79d2\u7684\u975e\u6d3b\u52a8\u540e\u81ea\u52a8\u5173\u95ed\u670d\u52a1\u5668\u3002\u6b64\u9009\u9879\u9002\u7528\u4e8e <code>start</code>\u3001<code>restart</code> \u548c <code>run</code> \u547d\u4ee4\u3002</p> <code>--update FILE</code> <p>\u91cd\u65b0\u68c0\u67e5 <code>FILE</code>\uff0c\u6216\u5c06\u5176\u6dfb\u52a0\u5230\u6b63\u5728\u68c0\u67e5\u7684\u6587\u4ef6\u96c6\uff08\u5e76\u8fdb\u884c\u68c0\u67e5\uff09\u3002\u6b64\u9009\u9879\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\uff0c\u4ec5\u9002\u7528\u4e8e <code>recheck</code> \u547d\u4ee4\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cmypy \u67e5\u627e\u5e76\u68c0\u67e5\u81ea\u4e0a\u6b21\u8fd0\u884c\u4ee5\u6765\u66f4\u6539\u7684\u6240\u6709\u6587\u4ef6\u53ca\u5176\u4f9d\u8d56\u7684\u6587\u4ef6\u3002\u7136\u800c\uff0c\u5982\u679c\u4f7f\u7528\u6b64\u9009\u9879\uff08\u548c/\u6216 --remove\uff09\uff0cmypy \u4ec5\u5047\u8bbe\u663e\u5f0f\u6307\u5b9a\u7684\u6587\u4ef6\u5df2\u66f4\u6539\u3002\u8fd9\u5bf9\u52a0\u901f\u68c0\u67e5\u5927\u91cf\u6587\u4ef6\u5f88\u6709\u7528\uff0c\u524d\u63d0\u662f\u4f7f\u7528\u5916\u90e8\u7684\u5feb\u901f\u6587\u4ef6\u7cfb\u7edf\u76d1\u89c6\u5668\uff0c\u5982 watchman \u6216 watchdog\uff0c\u6765\u786e\u5b9a\u54ea\u4e9b\u6587\u4ef6\u88ab\u7f16\u8f91\u6216\u5220\u9664\u3002\u6ce8\u610f\uff1a\u6b64\u9009\u9879\u5e76\u975e\u5fc5\u9700\uff0c\u4ec5\u7528\u4e8e\u6027\u80fd\u8c03\u4f18\u3002</p> <code>--remove FILE</code> <p>\u4ece\u6b63\u5728\u68c0\u67e5\u7684\u6587\u4ef6\u96c6\u4e2d\u79fb\u9664 <code>FILE</code>\u3002\u6b64\u9009\u9879\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\uff0c\u4ec5\u9002\u7528\u4e8e <code>recheck</code> \u547d\u4ee4\u3002\u6709\u5173\u4f55\u65f6\u6709\u7528\u7684\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1\u4e0a\u9762\u7684 --update\u3002\u6ce8\u610f\uff1a\u6b64\u9009\u9879\u5e76\u975e\u5fc5\u9700\uff0c\u4ec5\u7528\u4e8e\u6027\u80fd\u8c03\u4f18\u3002</p> <code>--fswatcher-dump-file FILE</code> <p>\u6536\u96c6\u5f53\u524d\u5185\u90e8\u6587\u4ef6\u72b6\u6001\u7684\u4fe1\u606f\u3002\u4ec5\u9002\u7528\u4e8e <code>status</code> \u547d\u4ee4\u3002\u8fd9\u5c06\u4ee5 JSON \u683c\u5f0f\u5c06\u4fe1\u606f\u8f6c\u50a8\u5230 <code>FILE</code> \u4e2d\uff0c\u683c\u5f0f\u4e3a <code>{path: [modification_time, size, content_hash]}</code>\u3002\u8fd9\u5bf9\u8c03\u8bd5\u5185\u7f6e\u7684\u6587\u4ef6\u7cfb\u7edf\u76d1\u89c6\u5668\u975e\u5e38\u6709\u7528\u3002\u6ce8\u610f\uff1a\u8fd9\u662f\u4e00\u4e2a\u5185\u90e8\u6807\u5fd7\uff0c\u683c\u5f0f\u53ef\u80fd\u4f1a\u6709\u6240\u53d8\u5316\u3002</p> <code>--perf-stats-file FILE</code> <p>\u5c06\u6027\u80fd\u5206\u6790\u4fe1\u606f\u5199\u5165 <code>FILE</code>\u3002\u4ec5\u9002\u7528\u4e8e <code>check</code>\u3001<code>recheck</code> \u548c <code>run</code> \u547d\u4ee4\u3002</p> <code>--export-types</code> <p>\u5c06\u6240\u6709\u8868\u8fbe\u5f0f\u7c7b\u578b\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\u4ee5\u4f9b\u5c06\u6765\u4f7f\u7528\u3002\u8fd9\u5bf9\u52a0\u901f\u672a\u6765\u5bf9 <code>dmypy inspect</code> \u7684\u8c03\u7528\u975e\u5e38\u6709\u7528\uff08\u4f46\u4f1a\u4f7f\u7528\u66f4\u591a\u5185\u5b58\uff09\u3002\u4ec5\u9002\u7528\u4e8e <code>check</code>\u3001<code>recheck</code> \u548c <code>run</code> \u547d\u4ee4\u3002</p> <code>--status-file FILE</code> <p>Use <code>FILE</code> as the status file for storing daemon runtime state. This is normally a JSON file that contains information about daemon process and connection. The default path is <code>.dmypy.json</code> in the current working directory.</p> <code>--log-file FILE</code> <p>Direct daemon stdout/stderr to <code>FILE</code>. This is useful for debugging daemon crashes, since the server traceback is not always printed by the client. This is available for the <code>start</code>, <code>restart</code>, and <code>run</code> commands.</p> <code>--timeout TIMEOUT</code> <p>Automatically shut down server after <code>TIMEOUT</code> seconds of inactivity. This is available for the <code>start</code>, <code>restart</code>, and <code>run</code> commands.</p> <code>--update FILE</code> <p>Re-check <code>FILE</code>, or add it to the set of files being checked (and check it). This option may be repeated, and it's only available for the <code>recheck</code> command.  By default, mypy finds and checks all files changed since the previous run and files that depend on them.  However, if you use this option (and/or --remove), mypy assumes that only the explicitly specified files have changed. This is only useful to speed up mypy if you type check a very large number of files, and use an external, fast file system watcher, such as watchman or watchdog, to determine which files got edited or deleted. Note: This option is never required and is only available for performance tuning.</p> <code>--remove FILE</code> <p>Remove <code>FILE</code> from the set of files being checked. This option may be repeated. This is only available for the <code>recheck</code> command. See --update above for when this may be useful. Note: This option is never required and is only available for performance tuning.</p> <code>--fswatcher-dump-file FILE</code> <p>Collect information about the current internal file state. This is only available for the <code>status</code> command. This will dump JSON to <code>FILE</code> in the format <code>{path: [modification_time, size, content_hash]}</code>. This is useful for debugging the built-in file system watcher. Note: This is an internal flag and the format may change.</p> <code>--perf-stats-file FILE</code> <p>Write performance profiling information to <code>FILE</code>. This is only available for the <code>check</code>, <code>recheck</code>, and <code>run</code> commands.</p> <code>--export-types</code> <p>Store all expression types in memory for future use. This is useful to speed up future calls to <code>dmypy inspect</code> (but uses more memory). Only valid for <code>check</code>, <code>recheck</code>, and <code>run</code> command.</p>"},{"location":"mypy_conf/mypy_daemon/#\u6ce8\u89e3\u7684\u9759\u6001\u63a8\u65ad","title":"\u6ce8\u89e3\u7684\u9759\u6001\u63a8\u65ad","text":"<p>Static inference of annotations</p> \u4e2d\u6587\u82f1\u6587 <p>mypy \u5b88\u62a4\u8fdb\u7a0b\u652f\u6301\uff08\u4f5c\u4e3a\u5b9e\u9a8c\u6027\u529f\u80fd\uff09\u9759\u6001\u63a8\u65ad\u51fd\u6570\u548c\u65b9\u6cd5\u7684\u8349\u7a3f\u7c7b\u578b\u6ce8\u89e3\u3002\u4f7f\u7528 <code>dmypy suggest FUNCTION</code> \u6765\u751f\u6210\u8349\u7a3f\u7b7e\u540d\uff0c\u683c\u5f0f\u4e3a <code>(param_type_1, param_type_2, ...) -&gt; ret_type</code>\uff08\u7c7b\u578b\u5305\u542b\u6240\u6709\u53c2\u6570\uff0c\u5305\u62ec\u4ec5\u5173\u952e\u5b57\u53c2\u6570\u3001<code>*args</code> \u548c <code>**kwargs</code>\uff09\u3002</p> <p>\u8fd9\u662f\u4e00\u4e2a\u4f4e\u7ea7\u529f\u80fd\uff0c\u65e8\u5728\u7531\u7f16\u8f91\u5668\u96c6\u6210\u3001IDE \u548c\u5176\u4ed6\u5de5\u5177\uff08\u4f8b\u5982 PyCharm \u7684 mypy \u63d2\u4ef6\uff09\u4f7f\u7528\uff0c\u7528\u4e8e\u81ea\u52a8\u5411\u6e90\u6587\u4ef6\u6dfb\u52a0\u6ce8\u89e3\u6216\u63d0\u8bae\u51fd\u6570\u7b7e\u540d\u3002</p> <p>\u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c\u51fd\u6570 <code>format_id()</code> \u6ca1\u6709\u6ce8\u89e3\uff1a</p> <pre><code>def format_id(user):\n    return f\"User: {user}\"\n\nroot = format_id(0)\n</code></pre> <p><code>dmypy suggest</code> \u4f7f\u7528\u8c03\u7528\u70b9\u3001\u8fd4\u56de\u8bed\u53e5\u548c\u5176\u4ed6\u542f\u53d1\u5f0f\u65b9\u6cd5\uff08\u4f8b\u5982\u67e5\u627e\u57fa\u7c7b\u4e2d\u7684\u7b7e\u540d\uff09\u6765\u63a8\u65ad <code>format_id()</code> \u63a5\u53d7\u4e00\u4e2a <code>int</code> \u53c2\u6570\u5e76\u8fd4\u56de\u4e00\u4e2a <code>str</code>\u3002\u4f7f\u7528 <code>dmypy suggest module.format_id</code> \u6253\u5370\u51fd\u6570\u7684\u5efa\u8bae\u7b7e\u540d\u3002</p> <p>\u66f4\u4e00\u822c\u5730\uff0c\u76ee\u6807\u51fd\u6570\u53ef\u4ee5\u901a\u8fc7\u4e24\u79cd\u65b9\u5f0f\u6307\u5b9a\uff1a</p> <ul> <li> <p>\u901a\u8fc7\u5176\u5b8c\u5168\u9650\u5b9a\u540d\uff0c\u5373 <code>[package.]module.[class.]function</code>\u3002</p> </li> <li> <p>\u901a\u8fc7\u5176\u5728\u6e90\u6587\u4ef6\u4e2d\u7684\u4f4d\u7f6e\uff0c\u5373 <code>/path/to/file.py:line</code>\u3002\u8def\u5f84\u53ef\u4ee5\u662f\u7edd\u5bf9\u7684\u6216\u76f8\u5bf9\u7684\uff0c\u800c <code>line</code> \u53ef\u4ee5\u662f\u51fd\u6570\u4f53\u5185\u7684\u4efb\u4f55\u884c\u53f7\u3002</p> </li> </ul> <p>\u6b64\u547d\u4ee4\u8fd8\u53ef\u7528\u4e8e\u4e3a\u73b0\u6709\u7684\u3001\u4e0d\u7cbe\u786e\u7684\u6ce8\u89e3\u63d0\u4f9b\u66f4\u7cbe\u786e\u7684\u66ff\u4ee3\u65b9\u6848\uff0c\u8fd9\u4e9b\u6ce8\u89e3\u4e2d\u5305\u542b\u4e00\u4e9b <code>Any</code> \u7c7b\u578b\u3002</p> <p>\u4ee5\u4e0b\u6807\u5fd7\u81ea\u5b9a\u4e49 <code>dmypy suggest</code> \u547d\u4ee4\u7684\u5404\u79cd\u65b9\u9762\uff1a</p> <code>--json</code> <p>\u5c06\u7b7e\u540d\u8f93\u51fa\u4e3a JSON\uff0c\u4ee5\u4fbf PyAnnotate \u53ef\u4ee5\u8bfb\u53d6\u5e76\u5c06\u7b7e\u540d\u6dfb\u52a0\u5230\u6e90\u6587\u4ef6\u4e2d\u3002JSON \u683c\u5f0f\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>[{\"func_name\": \"example.format_id\",\n    \"line\": 1,\n    \"path\": \"/absolute/path/to/example.py\",\n    \"samples\": 0,\n    \"signature\": {\"arg_types\": [\"int\"], \"return_type\": \"str\"}}]\n</code></pre> <code>--no-errors</code> <p>\u4ec5\u751f\u6210\u4e0d\u4f1a\u5bfc\u81f4\u68c0\u67e5\u4ee3\u7801\u51fa\u9519\u7684\u5efa\u8bae\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cmypy \u4f1a\u5c1d\u8bd5\u627e\u5230\u6700\u7cbe\u786e\u7684\u7c7b\u578b\uff0c\u5373\u4f7f\u8fd9\u4f1a\u5bfc\u81f4\u4e00\u4e9b\u7c7b\u578b\u9519\u8bef\u3002</p> <code>--no-any</code> <p>\u4ec5\u751f\u6210\u4e0d\u5305\u542b <code>Any</code> \u7c7b\u578b\u7684\u5efa\u8bae\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cmypy \u4f1a\u5efa\u8bae\u627e\u5230\u7684\u6700\u7cbe\u786e\u7b7e\u540d\uff0c\u5373\u4f7f\u5b83\u5305\u542b <code>Any</code> \u7c7b\u578b\u3002</p> <code>--flex-any FRACTION</code> <p>\u4ec5\u5141\u8bb8\u5efa\u8bae\u7b7e\u540d\u4e2d\u7684\u67d0\u4e9b\u6bd4\u4f8b\u7c7b\u578b\u4e3a <code>Any</code> \u7c7b\u578b\u3002\u8be5\u6bd4\u4f8b\u8303\u56f4\u4ece <code>0</code>\uff08\u76f8\u5f53\u4e8e <code>--no-any</code>\uff09\u5230 <code>1</code>\u3002</p> <code>--callsites</code> <p>\u4ec5\u67e5\u627e\u7ed9\u5b9a\u51fd\u6570\u7684\u8c03\u7528\u70b9\uff0c\u800c\u4e0d\u662f\u5efa\u8bae\u7c7b\u578b\u3002\u8fd9\u5c06\u751f\u6210\u4e00\u4e2a\u5217\u8868\uff0c\u5305\u542b\u6bcf\u4e2a\u8c03\u7528\u7684\u884c\u53f7\u548c\u5b9e\u9645\u53c2\u6570\u7684\u7c7b\u578b\uff1a<code>/path/to/file.py:line: (arg_type_1, arg_type_2, ...)</code>\u3002</p> <code>--use-fixme NAME</code> <p>\u5bf9\u4e8e\u65e0\u6cd5\u63a8\u65ad\u7684\u7c7b\u578b\uff0c\u4f7f\u7528\u4e00\u4e2a\u865a\u62df\u540d\u79f0\u800c\u4e0d\u662f\u666e\u901a\u7684 <code>Any</code>\u3002\u8fd9\u53ef\u80fd\u6709\u52a9\u4e8e\u5411\u7528\u6237\u5f3a\u8c03\u67d0\u4e2a\u7c7b\u578b\u65e0\u6cd5\u63a8\u65ad\uff0c\u5e76\u9700\u8981\u624b\u52a8\u8f93\u5165\u3002</p> <code>--max-guesses NUMBER</code> <p>\u8bbe\u7f6e\u5c1d\u8bd5\u7684\u51fd\u6570\u7c7b\u578b\u7684\u6700\u5927\u6570\u91cf\uff08\u9ed8\u8ba4\u503c\uff1a<code>64</code>\uff09\u3002</p> <p>The mypy daemon supports (as an experimental feature) statically inferring draft function and method type annotations. Use <code>dmypy suggest FUNCTION</code> to generate a draft signature in the format <code>(param_type_1, param_type_2, ...) -&gt; ret_type</code> (types are included for all arguments, including keyword-only arguments, <code>*args</code> and <code>**kwargs</code>).</p> <p>This is a low-level feature intended to be used by editor integrations, IDEs, and other tools (for example, the mypy plugin for PyCharm), to automatically add annotations to source files, or to propose function signatures.</p> <p>In this example, the function <code>format_id()</code> has no annotation:</p> <pre><code>def format_id(user):\n    return f\"User: {user}\"\n\nroot = format_id(0)\n</code></pre> <p><code>dmypy suggest</code> uses call sites, return statements, and other heuristics (such as looking for signatures in base classes) to infer that <code>format_id()</code> accepts an <code>int</code> argument and returns a <code>str</code>. Use <code>dmypy suggest module.format_id</code> to print the suggested signature for the function.</p> <p>More generally, the target function may be specified in two ways:</p> <ul> <li> <p>By its fully qualified name, i.e. <code>[package.]module.[class.]function</code>.</p> </li> <li> <p>By its location in a source file, i.e. <code>/path/to/file.py:line</code>. The path can be absolute or relative, and <code>line</code> can refer to any line number within the function body.</p> </li> </ul> <p>This command can also be used to find a more precise alternative for an existing, imprecise annotation with some <code>Any</code> types.</p> <p>The following flags customize various aspects of the <code>dmypy suggest</code> command.</p> <code>--json</code> <p>Output the signature as JSON, so that PyAnnotate can read it and add the signature to the source file. Here is what the JSON looks like:</p> <pre><code>[{\"func_name\": \"example.format_id\",\n    \"line\": 1,\n    \"path\": \"/absolute/path/to/example.py\",\n    \"samples\": 0,\n    \"signature\": {\"arg_types\": [\"int\"], \"return_type\": \"str\"}}]\n</code></pre> <code>--no-errors</code> <p>Only produce suggestions that cause no errors in the checked code. By default, mypy will try to find the most precise type, even if it causes some type errors.</p> <code>--no-any</code> <p>Only produce suggestions that don't contain <code>Any</code> types. By default mypy proposes the most precise signature found, even if it contains <code>Any</code> types.</p> <code>--flex-any FRACTION</code> <p>Only allow some fraction of types in the suggested signature to be <code>Any</code> types. The fraction ranges from <code>0</code> (same as <code>--no-any</code>) to <code>1</code>.</p> <code>--callsites</code> <p>Only find call sites for a given function instead of suggesting a type. This will produce a list with line numbers and types of actual arguments for each call: <code>/path/to/file.py:line: (arg_type_1, arg_type_2, ...)</code>.</p> <code>--use-fixme NAME</code> <p>Use a dummy name instead of plain <code>Any</code> for types that cannot be inferred. This may be useful to emphasize to a user that a given type couldn't be inferred and needs to be entered manually.</p> <code>--max-guesses NUMBER</code> <p>Set the maximum number of types to try for a function (default: <code>64</code>).</p>"},{"location":"mypy_conf/mypy_daemon/#\u9759\u6001\u68c0\u67e5\u8868\u8fbe\u5f0f","title":"\u9759\u6001\u68c0\u67e5\u8868\u8fbe\u5f0f","text":"<p>Statically inspect expressions</p> \u4e2d\u6587\u82f1\u6587 <p>\u5b88\u62a4\u8fdb\u7a0b\u652f\u6301\u901a\u8fc7 <code>dmypy inspect LOCATION</code> \u547d\u4ee4\u83b7\u53d6\u8868\u8fbe\u5f0f\u7684\u58f0\u660e\u6216\u63a8\u65ad\u7c7b\u578b\uff08\u6216\u5176\u4ed6\u6709\u5173\u8868\u8fbe\u5f0f\u7684\u4fe1\u606f\uff0c\u4f8b\u5982\u5df2\u77e5\u5c5e\u6027\u6216\u5b9a\u4e49\u4f4d\u7f6e\uff09\u3002\u8868\u8fbe\u5f0f\u7684\u4f4d\u7f6e\u5e94\u4ee5 <code>path/to/file.py:line:column[:end_line:end_column]</code> \u683c\u5f0f\u6307\u5b9a\u3002\u884c\u548c\u5217\u90fd\u662f\u4ece 1 \u5f00\u59cb\u7684\u3002\u5f00\u59cb\u548c\u7ed3\u675f\u4f4d\u7f6e\u90fd\u662f\u5305\u542b\u5728\u5185\u7684\u3002\u8fd9\u4e9b\u89c4\u5219\u4e0e mypy \u5728\u9519\u8bef\u6d88\u606f\u4e2d\u6253\u5370\u9519\u8bef\u4f4d\u7f6e\u7684\u65b9\u5f0f\u76f8\u5339\u914d\u3002</p> <p>\u5982\u679c\u63d0\u4f9b\u4e86\u4e00\u4e2a\u8de8\u5ea6\uff08\u5373\u56db\u4e2a\u6570\u5b57\uff09\uff0c\u5219\u4ec5\u68c0\u67e5\u5b8c\u5168\u5339\u914d\u7684\u8868\u8fbe\u5f0f\u3002\u5982\u679c\u53ea\u63d0\u4f9b\u4e86\u4f4d\u7f6e\uff08\u5373\u4e24\u4e2a\u6570\u5b57\uff0c\u884c\u548c\u5217\uff09\uff0cmypy \u5c06\u68c0\u67e5\u5305\u62ec\u8be5\u4f4d\u7f6e\u7684\u6240\u6709 \u8868\u8fbe\u5f0f\uff0c\u4ece\u6700\u5185\u5c42\u7684\u5f00\u59cb\u3002</p> <p>\u8003\u8651\u4ee5\u4e0b Python \u4ee3\u7801\u7247\u6bb5\uff1a</p> <pre><code>def foo(x: int, longer_name: str) -&gt; None:\n    x\n    longer_name\n</code></pre> <p>\u8981\u67e5\u627e <code>x</code> \u7684\u7c7b\u578b\uff0c\u9700\u8981\u8c03\u7528 <code>dmypy inspect src.py:2:5:2:5</code> \u6216 <code>dmypy inspect src.py:2:5</code>\u3002\u800c\u8981\u67e5\u627e <code>longer_name</code> \u7684\u7c7b\u578b\uff0c\u5219\u9700\u8981\u8c03\u7528 <code>dmypy inspect src.py:3:5:3:15</code> \u6216 <code>dmypy inspect src.py:3:10</code>\u3002\u8bf7\u6ce8\u610f\uff0c\u6b64\u547d\u4ee4\u4ec5\u5728\u5b88\u62a4\u8fdb\u7a0b\u6210\u529f\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\uff08\u6ca1\u6709\u89e3\u6790\u9519\u8bef\uff09\u540e\u6709\u6548\uff0c\u4ee5\u4fbf\u7c7b\u578b\u88ab\u586b\u5145\uff0c\u4f8b\u5982\u4f7f\u7528 <code>dmypy check</code>\u3002\u5982\u679c\u591a\u4e2a\u8868\u8fbe\u5f0f\u5339\u914d\u63d0\u4f9b\u7684\u4f4d\u7f6e\uff0c\u5b83\u4eec\u7684\u7c7b\u578b\u4f1a\u4ee5\u6362\u884c\u7b26\u5206\u9694\u8fd4\u56de\u3002</p> <p>\u91cd\u8981\u8bf4\u660e\uff1a\u5efa\u8bae\u4f7f\u7528 --export-types \u68c0\u67e5\u6587\u4ef6\uff0c\u5426\u5219\u5927\u591a\u6570\u68c0\u67e5\u5c06\u65e0\u6cd5\u5de5\u4f5c\uff0c\u9664\u975e\u4f7f\u7528 --force-reload\u3002</p> <code>--show INSPECTION</code> <p>\u6307\u5b9a\u8981\u5bf9\u627e\u5230\u7684\u8868\u8fbe\u5f0f\u8fd0\u884c\u7684\u68c0\u67e5\u7c7b\u578b\u3002\u76ee\u524d\u652f\u6301\u7684\u68c0\u67e5\u5305\u62ec\uff1a</p> <ul> <li><code>type</code>\uff08\u9ed8\u8ba4\uff09\uff1a\u663e\u793a\u7ed9\u5b9a\u8868\u8fbe\u5f0f\u7684\u6700\u4f73\u5df2\u77e5\u7c7b\u578b\u3002</li> <li><code>attrs</code>\uff1a\u663e\u793a\u8868\u8fbe\u5f0f\u7684\u6709\u6548\u5c5e\u6027\uff08\u4f8b\u5982\uff0c\u7528\u4e8e\u81ea\u52a8\u8865\u5168\uff09\u3002\u683c\u5f0f\u4e3a <code>{\"Base1\": [\"name_1\", \"name_2\", ...]; \"Base2\": ...}</code>\u3002\u540d\u79f0\u6309\u65b9\u6cd5\u89e3\u6790\u987a\u5e8f\u6392\u5e8f\u3002\u5982\u679c\u8868\u8fbe\u5f0f\u5f15\u7528\u7684\u662f\u6a21\u5757\uff0c\u5219\u6a21\u5757\u5c5e\u6027\u5c06\u4f4d\u4e8e\u7c7b\u4f3c <code>\"&lt;full.module.name&gt;\"</code> \u7684\u952e\u4e0b\u3002</li> <li><code>definition</code>\uff08\u5b9e\u9a8c\u6027\uff09\uff1a\u663e\u793a\u540d\u79f0\u8868\u8fbe\u5f0f\u6216\u6210\u5458\u8868\u8fbe\u5f0f\u7684\u5b9a\u4e49\u4f4d\u7f6e\u3002\u683c\u5f0f\u4e3a <code>path/to/file.py:line:column:Symbol</code>\u3002 \u5982\u679c\u627e\u5230\u591a\u4e2a\u5b9a\u4e49\uff08\u4f8b\u5982\uff0c\u5bf9\u4e8e Union \u5c5e\u6027\uff09\uff0c\u5b83\u4eec\u7528\u9017\u53f7\u5206\u9694\u3002</li> </ul> <code>--verbose</code> <p>\u589e\u52a0\u7c7b\u578b\u5b57\u7b26\u4e32\u8868\u793a\u7684\u8be6\u7ec6\u7a0b\u5ea6\uff08\u53ef\u4ee5\u91cd\u590d\uff09\u3002\u4f8b\u5982\uff0c\u8fd9\u5c06\u6253\u5370\u5b9e\u4f8b\u7c7b\u578b\u7684\u5b8c\u5168\u9650\u5b9a\u540d\u79f0\uff08\u5982 <code>\"builtins.str\"</code>\uff09\uff0c\u800c\u4e0d\u662f\u7b80\u77ed\u540d\u79f0\uff08\u5982 <code>\"str\"</code>\uff09\u3002</p> <code>--limit NUM</code> <p>\u5982\u679c\u4f4d\u7f6e\u4ee5 <code>line:column</code> \u7ed9\u51fa\uff0c\u5219\u6b64\u9009\u9879\u5c06\u5bfc\u81f4\u5b88\u62a4\u8fdb\u7a0b\u4ec5\u8fd4\u56de\u6700\u591a <code>NUM</code> \u4e2a\u6700\u5185\u5c42\u8868\u8fbe\u5f0f\u7684\u68c0\u67e5\u7ed3\u679c\u3002\u503c\u4e3a 0 \u8868\u793a\u65e0\u9650\u5236\uff08\u8fd9\u662f\u9ed8\u8ba4\u503c\uff09\u3002\u4f8b\u5982\uff0c\u5982\u679c\u8c03\u7528 <code>dmypy inspect src.py:4:10 --limit=1</code>\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>def foo(x: int) -&gt; str: ..\ndef bar(x: str) -&gt; None: ...\nbaz: int\nbar(foo(baz))\n</code></pre> <p>\u8fd9\u5c06\u8f93\u51fa\u4e00\u4e2a\u7c7b\u578b <code>\"int\"</code>\uff08\u9488\u5bf9 <code>baz</code> \u540d\u79f0\u8868\u8fbe\u5f0f\uff09\u3002\u800c\u6ca1\u6709\u9650\u5236\u9009\u9879\u7684\u60c5\u51b5\u4e0b\uff0c\u5b83\u5c06\u8f93\u51fa\u6240\u6709\u4e09\u4e2a\u7c7b\u578b\uff1a<code>\"int\"</code>, <code>\"str\"</code>, \u548c <code>\"None\"</code>\u3002</p> <code>--include-span</code> <p>\u542f\u7528\u6b64\u9009\u9879\u540e\uff0c\u5b88\u62a4\u8fdb\u7a0b\u5c06\u4e3a\u6bcf\u4e2a\u68c0\u67e5\u7ed3\u679c\u9644\u52a0\u5bf9\u5e94\u8868\u8fbe\u5f0f\u7684\u5b8c\u6574\u8de8\u5ea6\uff0c\u683c\u5f0f\u4e3a <code>1:2:1:4 -&gt; \"int\"</code>\u3002\u8fd9\u5728\u591a\u4e2a\u8868\u8fbe\u5f0f\u5339\u914d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u60c5\u51b5\u4e0b\u53ef\u80fd\u5f88\u6709\u7528\u3002</p> <code>--include-kind</code> <p>\u542f\u7528\u6b64\u9009\u9879\u540e\uff0c\u5b88\u62a4\u8fdb\u7a0b\u5c06\u4e3a\u6bcf\u4e2a\u68c0\u67e5\u7ed3\u679c\u9644\u52a0\u5bf9\u5e94\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\uff0c\u683c\u5f0f\u4e3a <code>NameExpr -&gt; \"int\"</code>\u3002\u5982\u679c\u540c\u65f6\u542f\u7528\u6b64\u9009\u9879\u548c --include-span\uff0c\u7c7b\u578b\u4f1a\u9996\u5148\u51fa\u73b0\uff0c\u4f8b\u5982 <code>NameExpr:1:2:1:4 -&gt; \"int\"</code>\u3002</p> <code>--include-object-attrs</code> <p>\u5728 <code>attrs</code> \u68c0\u67e5\u4e2d\uff0c\u5305\u62ec <code>object</code> \u7684\u5c5e\u6027\uff08\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u6392\u9664\uff09\u3002</p> <code>--union-attrs</code> <p>\u5305\u62ec\u5bf9\u67d0\u4e9b\u53ef\u80fd\u7684\u8868\u8fbe\u5f0f\u7c7b\u578b\u6709\u6548\u7684\u5c5e\u6027\uff08\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8fd4\u56de\u4ea4\u96c6\uff09\u3002\u8fd9\u5bf9\u5177\u6709\u503c\u7684\u7c7b\u578b\u53d8\u91cf\u7684\u8054\u5408\u7c7b\u578b\u5f88\u6709\u7528\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e\u4ee5\u4e0b\u4ee3\u7801\uff1a</p> <pre><code>from typing import Union\n\nclass A:\n    x: int\n    z: int\nclass B:\n    y: int\n    z: int\nvar: Union[A, B]\nvar\n</code></pre> <p>\u4f7f\u7528\u547d\u4ee4 <code>dmypy inspect --show attrs src.py:10:1</code> \u5c06\u8fd4\u56de <code>{\"A\": [\"z\"], \"B\": [\"z\"]}</code>\uff0c\u800c\u4f7f\u7528 <code>--union-attrs</code> \u5c06\u8fd4\u56de <code>{\"A\": [\"x\", \"z\"], \"B\": [\"y\", \"z\"]}</code>\u3002</p> <code>--force-reload</code> <p>\u5728\u68c0\u67e5\u4e4b\u524d\u5f3a\u5236\u91cd\u65b0\u89e3\u6790\u548c\u91cd\u65b0\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4ec5\u5728\u9700\u8981\u65f6\u6267\u884c\u6b64\u64cd\u4f5c\uff08\u4f8b\u5982\uff0c\u6587\u4ef6\u672a\u4ece\u7f13\u5b58\u4e2d\u52a0\u8f7d\u6216\u5b88\u62a4\u8fdb\u7a0b\u6700\u521d\u8fd0\u884c\u65f6\u6ca1\u6709 <code>--export-types</code> mypy \u9009\u9879\uff09\uff0c\u56e0\u4e3a\u91cd\u65b0\u52a0\u8f7d\u53ef\u80fd\u4f1a\u5f88\u6162\uff08\u5bf9\u4e8e\u975e\u5e38\u5927\u7684\u6587\u4ef6\uff0c\u53ef\u80fd\u9700\u8981\u51e0\u79d2\u949f\uff09\u3002</p> <p>The daemon allows to get declared or inferred type of an expression (or other information about an expression, such as known attributes or definition location) using <code>dmypy inspect LOCATION</code> command. The location of the expression should be specified in the format <code>path/to/file.py:line:column[:end_line:end_column]</code>. Both line and column are 1-based. Both start and end position are inclusive. These rules match how mypy prints the error location in error messages.</p> <p>If a span is given (i.e. all 4 numbers), then only an exactly matching expression is inspected. If only a position is given (i.e. 2 numbers, line and column), mypy will inspect all expressions, that include this position, starting from the innermost one.</p> <p>Consider this Python code snippet:</p> <pre><code>def foo(x: int, longer_name: str) -&gt; None:\n    x\n    longer_name\n</code></pre> <p>Here to find the type of <code>x</code> one needs to call <code>dmypy inspect src.py:2:5:2:5</code> or <code>dmypy inspect src.py:2:5</code>. While for <code>longer_name</code> one needs to call <code>dmypy inspect src.py:3:5:3:15</code> or, for example, <code>dmypy inspect src.py:3:10</code>. Please note that this command is only valid after daemon had a successful type check (without parse errors), so that types are populated, e.g. using <code>dmypy check</code>. In case where multiple expressions match the provided location, their types are returned separated by a newline.</p> <p>Important note: it is recommended to check files with --export-types since otherwise most inspections will not work without --force-reload.</p> <code>--show INSPECTION</code> <p>What kind of inspection to run for expression(s) found. Currently the supported inspections are:</p> <ul> <li><code>type</code> (default): Show the best known type of a given expression.</li> <li><code>attrs</code>: Show which attributes are valid for an expression (e.g. for auto-completion). Format is <code>{\"Base1\": [\"name_1\", \"name_2\", ...]; \"Base2\": ...}</code>. Names are sorted by method resolution order. If expression refers to a module, then module attributes will be under key like <code>\"&lt;full.module.name&gt;\"</code>.</li> <li><code>definition</code> (experimental): Show the definition location for a name expression or member expression. Format is <code>path/to/file.py:line:column:Symbol</code>. If multiple definitions are found (e.g. for a Union attribute), they are separated by comma.</li> </ul> <code>--verbose</code> <p>Increase verbosity of types string representation (can be repeated). For example, this will print fully qualified names of instance types (like <code>\"builtins.str\"</code>), instead of just a short name (like <code>\"str\"</code>).</p> <code>--limit NUM</code> <p>If the location is given as <code>line:column</code>, this will cause daemon to return only at most <code>NUM</code> inspections of innermost expressions. Value of 0 means no limit (this is the default). For example, if one calls <code>dmypy inspect src.py:4:10 --limit=1</code> with this code</p> <pre><code>def foo(x: int) -&gt; str: ..\ndef bar(x: str) -&gt; None: ...\nbaz: int\nbar(foo(baz))\n</code></pre> <p>This will output just one type <code>\"int\"</code> (for <code>baz</code> name expression). While without the limit option, it would output all three types: <code>\"int\"</code>, <code>\"str\"</code>, and <code>\"None\"</code>.</p> <code>--include-span</code> <p>With this option on, the daemon will prepend each inspection result with the full span of corresponding expression, formatted as <code>1:2:1:4 -&gt; \"int\"</code>. This may be useful in case multiple expressions match a location.</p> <code>--include-kind</code> <p>With this option on, the daemon will prepend each inspection result with the kind of corresponding expression, formatted as <code>NameExpr -&gt; \"int\"</code>. If both this option and --include-span are on, the kind will appear first, for example <code>NameExpr:1:2:1:4 -&gt; \"int\"</code>.</p> <code>--include-object-attrs</code> <p>This will make the daemon include attributes of <code>object</code> (excluded by default) in case of an <code>atts</code> inspection.</p> <code>--union-attrs</code> <p>Include attributes valid for some of possible expression types (by default an intersection is returned). This is useful for union types of type variables with values. For example, with this code:</p> <pre><code>from typing import Union\n\nclass A:\n    x: int\n    z: int\nclass B:\n    y: int\n    z: int\nvar: Union[A, B]\nvar\n</code></pre> <p>The command <code>dmypy inspect --show attrs src.py:10:1</code> will return <code>{\"A\": [\"z\"], \"B\": [\"z\"]}</code>, while with <code>--union-attrs</code> it will return <code>{\"A\": [\"x\", \"z\"], \"B\": [\"y\", \"z\"]}</code>.</p> <code>--force-reload</code> <p>Force re-parsing and re-type-checking file before inspection. By default this is done only when needed (for example file was not loaded from cache or daemon was initially run without <code>--export-types</code> mypy option), since reloading may be slow (up to few seconds for very large files).</p> <p>.. TODO: Add similar section about find usages when added, and then move this to a separate file.</p>"},{"location":"mypy_conf/running_mypy/","title":"\u8fd0\u884cmypy\u548c\u7ba1\u7406\u5bfc\u5165","text":"<p>Running mypy and managing imports</p> \u4e2d\u6587\u82f1\u6587 <p>[\u5165\u95e8]\u9875\u9762\u5e94\u8be5\u5df2\u7ecf\u5411\u4f60\u4ecb\u7ecd\u4e86\u5982\u4f55\u8fd0\u884c mypy \u7684\u57fa\u672c\u65b9\u6cd5\u2014\u2014\u901a\u8fc7\u547d\u4ee4\u884c\u4f20\u9012\u4f60\u60f3\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u7684\u6587\u4ef6\u548c\u76ee\u5f55\u3002</p> <pre><code>$ mypy foo.py bar.py some_directory\n</code></pre> <p>\u672c\u9875\u9762\u5c06\u66f4\u8be6\u7ec6\u5730\u8ba8\u8bba\u5982\u4f55\u5177\u4f53\u6307\u5b9a\u4f60\u5e0c\u671b mypy \u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u7684\u6587\u4ef6\uff0cmypy \u5982\u4f55\u53d1\u73b0\u5bfc\u5165\u7684\u6a21\u5757\uff0c\u4ee5\u53ca\u5904\u7406\u4f60\u53ef\u80fd\u9047\u5230\u7684\u4efb\u4f55\u95ee\u9898\u7684\u5efa\u8bae\u3002</p> <p>\u5982\u679c\u4f60\u6709\u5174\u8da3\u4e86\u89e3\u5982\u4f55\u914d\u7f6e mypy \u5b9e\u9645\u4e0a\u662f\u5982\u4f55\u5bf9\u4f60\u7684\u4ee3\u7801\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u7684\uff0c\u8bf7\u53c2\u9605\u6211\u4eec\u7684 [\u547d\u4ee4\u884c] \u6307\u5357\u3002</p> <p>The [getting-started] page should have already introduced you to the basics of how to run mypy -- pass in the files and directories you want to type check via the command line</p> <pre><code>$ mypy foo.py bar.py some_directory\n</code></pre> <p>This page discusses in more detail how exactly to specify what files you want mypy to type check, how mypy discovers imported modules, and recommendations on how to handle any issues you may encounter along the way.</p> <p>If you are interested in learning about how to configure the actual way mypy type checks your code, see our [command-line] guide.</p>"},{"location":"mypy_conf/running_mypy/#\u6307\u5b9a\u8981\u68c0\u67e5\u7684\u4ee3\u7801","title":"\u6307\u5b9a\u8981\u68c0\u67e5\u7684\u4ee3\u7801","text":"<p>Specifying code to be checked</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u5141\u8bb8\u4f60\u901a\u8fc7\u51e0\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u6307\u5b9a\u8981\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u7684\u6587\u4ef6\u3002</p> <ol> <li> <p>\u9996\u5148\uff0c\u4f60\u53ef\u4ee5\u4f20\u9012 Python \u6587\u4ef6\u548c\u76ee\u5f55\u7684\u8def\u5f84\uff0c\u4ee5\u4fbf\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u3002\u4f8b\u5982\uff1a</p> <pre><code>$ mypy file_1.py foo/file_2.py file_3.pyi some/directory\n</code></pre> <p>\u4e0a\u8ff0\u547d\u4ee4\u544a\u8bc9 mypy \u5bf9\u6240\u6709\u63d0\u4f9b\u7684\u6587\u4ef6\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u3002\u6b64\u5916\uff0cmypy \u4f1a\u9012\u5f52\u5730\u5bf9\u4efb\u4f55\u63d0\u4f9b\u7684\u76ee\u5f55\u4e2d\u7684\u5168\u90e8\u5185\u5bb9\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u3002</p> <p>\u6709\u5173\u5177\u4f53\u6267\u884c\u65b9\u5f0f\u7684\u66f4\u591a\u7ec6\u8282\uff0c\u8bf7\u53c2\u89c1 [\u5c06\u6587\u4ef6\u8def\u5f84\u6620\u5c04\u5230\u6a21\u5757 ]\u3002 <li> <p>\u5176\u6b21\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 [-m] \u6807\u5fd7\uff08\u957f\u683c\u5f0f\u4e3a [--module]\uff09\u6765\u6307\u5b9a\u8981\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u7684\u6a21\u5757\u540d\u79f0\u3002\u6a21\u5757\u7684\u540d\u79f0\u4e0e\u5728 Python \u7a0b\u5e8f\u4e2d\u5bfc\u5165\u8be5\u6a21\u5757\u65f6\u4f7f\u7528\u7684\u540d\u79f0\u76f8\u540c\u3002\u4f8b\u5982\uff0c\u8fd0\u884c\uff1a</p> <pre><code>$ mypy -m html.parser\n</code></pre> <p>...\u5c06\u5bf9\u6a21\u5757 <code>html.parser</code> \u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\uff08\u8fd9\u6070\u597d\u662f\u4e00\u4e2a\u5e93\u5b58\u6839\uff09\u3002</p> <p>Mypy \u5c06\u4f7f\u7528\u7c7b\u4f3c\u4e8e Python \u7528\u6765\u67e5\u627e\u6a21\u5757\u548c\u5bfc\u5165\u7684\u4f4d\u7f6e\u7684\u7b97\u6cd5\u3002\u6709\u5173\u66f4\u591a\u7ec6\u8282\uff0c\u8bf7\u53c2\u89c1 [\u67e5\u627e\u5bfc\u5165\u7684\u6a21\u5757]\u3002</p> </li> <li> <p>\u7b2c\u4e09\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 [-p] \u6807\u5fd7\uff08\u957f\u683c\u5f0f\u4e3a [--package]\uff09\u6765\u6307\u5b9a\u8981\uff08\u9012\u5f52\uff09\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u7684\u5305\u3002\u8fd9\u4e2a\u6807\u5fd7\u4e0e [-m] \u6807\u5fd7\u51e0\u4e4e\u76f8\u540c\uff0c\u53ea\u662f\u5982\u679c\u4f60\u63d0\u4f9b\u4e00\u4e2a\u5305\u540d\uff0cmypy \u5c06\u9012\u5f52\u5730\u5bf9\u8be5\u5305\u7684\u6240\u6709\u5b50\u6a21\u5757\u548c\u5b50\u5305\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u3002\u4f8b\u5982\uff0c\u8fd0\u884c\uff1a</p> <pre><code>$ mypy -p html\n</code></pre> <p>...\u5c06\u5bf9\u6574\u4e2a <code>html</code> \u5305\uff08\u5e93\u5b58\u6839\uff09\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u5982\u679c\u4f7f\u7528 [-m] \u6807\u5fd7\uff0cmypy \u53ea\u4f1a\u5bf9 <code>html</code> \u7684 <code>__init__.py</code> \u6587\u4ef6\u53ca\u5176\u5bfc\u5165\u7684\u5185\u5bb9\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u547d\u4ee4\u884c\u4e0a\u6307\u5b9a\u591a\u4e2a\u5305\u548c\u6a21\u5757\u3002\u4f8b\u5982\uff1a</p> <pre><code>$ mypy --package p.a --package p.b --module c\n</code></pre> </li> <li> <p>\u7b2c\u56db\uff0c\u4f60\u8fd8\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 [-c] \u6807\u5fd7\uff08\u957f\u683c\u5f0f\u4e3a [--command]\uff09\u76f4\u63a5\u5bf9\u5c0f\u7684\u5b57\u7b26\u4e32\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u3002\u4f8b\u5982\uff1a</p> <pre><code>$ mypy -c 'x = [1, 2]; print(x())'\n</code></pre> <p>...\u5c06\u628a\u4e0a\u8ff0\u5b57\u7b26\u4e32\u4f5c\u4e3a\u8ff7\u4f60\u7a0b\u5e8f\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\uff08\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f1a\u62a5\u544a <code>list[int]</code> \u4e0d\u80fd\u88ab\u8c03\u7528\uff09\u3002</p> </li> <p>\u4f60\u8fd8\u53ef\u4ee5\u5728 <code>mypy.ini</code> \u6587\u4ef6\u4e2d\u7684 files \u9009\u9879\u91cc\u6307\u5b9a\u8981\u68c0\u67e5\u7684\u6587\u4ef6\uff0c\u8fd9\u6837\u4f60\u53ef\u4ee5\u7b80\u5355\u5730\u8fd0\u884c <code>mypy</code> \u800c\u65e0\u9700\u4efb\u4f55\u53c2\u6570\u3002</p> <p>Mypy lets you specify what files it should type check in several different ways.</p> <ol> <li> <p>First, you can pass in paths to Python files and directories you want to type check. For example</p> <pre><code>$ mypy file_1.py foo/file_2.py file_3.pyi some/directory\n</code></pre> <p>The above command tells mypy it should type check all of the provided files together. In addition, mypy will recursively type check the entire contents of any provided directories.</p> <p>For more details about how exactly this is done, see [Mapping file paths to modules ]. <li> <p>Second, you can use the [-m] flag (long form: [--module]) to specify a module name to be type checked. The name of a module is identical to the name you would use to import that module within a Python program. For example, running</p> <pre><code>$ mypy -m html.parser\n</code></pre> <p>...will type check the module <code>html.parser</code> (this happens to be a library stub).</p> <p>Mypy will use an algorithm very similar to the one Python uses to find where modules and imports are located on the file system. For more details, see [finding-imports].</p> </li> <li> <p>Third, you can use the [-p] (long form: [--package]) flag to specify a package to be (recursively) type checked. This flag is almost identical to the [-m] flag except that if you give it a package name, mypy will recursively type check all submodules and subpackages of that package. For example, running</p> <pre><code>$ mypy -p html\n</code></pre> <p>...will type check the entire <code>html</code> package (of library stubs). In contrast, if we had used the [-m] flag, mypy would have type checked just <code>html</code>'s <code>__init__.py</code> file and anything imported from there.</p> <p>Note that we can specify multiple packages and modules on the command line. For example</p> <pre><code>$ mypy --package p.a --package p.b --module c\n</code></pre> </li> <li> <p>Fourth, you can also instruct mypy to directly type check small strings as programs by using the [-c] (long form: [--command]) flag. For example</p> <pre><code>$ mypy -c 'x = [1, 2]; print(x())'\n</code></pre> <p>...will type check the above string as a mini-program (and in this case, will report that <code>list[int]</code> is not callable).</p> </li> <p>You can also use the files option in your <code>mypy.ini</code> file to specify which files to check, in which case you can simply run <code>mypy</code> with no arguments.</p>"},{"location":"mypy_conf/running_mypy/#\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6587\u4ef6\u5217\u8868","title":"\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6587\u4ef6\u5217\u8868","text":"<p>Reading a list of files from a file</p> \u4e2d\u6587\u82f1\u6587 <p>\u6700\u540e\uff0c\u4efb\u4f55\u4ee5 <code>@</code> \u5f00\u5934\u7684\u547d\u4ee4\u884c\u53c2\u6570\u4f1a\u4ece\u7d27\u968f\u5176\u540e\u7684\u6587\u4ef6\u4e2d\u8bfb\u53d6\u989d\u5916\u7684\u547d\u4ee4\u884c\u53c2\u6570\u3002\u8fd9\u5728\u4f60\u6709\u4e00\u4e2a\u5305\u542b\u8981\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u7684\u6587\u4ef6\u5217\u8868\u7684\u6587\u4ef6\u65f6\u7279\u522b\u6709\u7528\uff1a\u4f60\u53ef\u4ee5\u907f\u514d\u4f7f\u7528\u7c7b\u4f3c\u4e8e\u4ee5\u4e0b\u7684 shell \u8bed\u6cd5\uff1a</p> <pre><code>$ mypy $(cat file_of_files.txt)\n</code></pre> <p>\u800c\u6539\u4e3a\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\uff1a</p> <pre><code>$ mypy @file_of_files.txt\n</code></pre> <p>\u8be5\u6587\u4ef6\u6280\u672f\u4e0a\u4e5f\u53ef\u4ee5\u5305\u542b\u4efb\u4f55\u547d\u4ee4\u884c\u6807\u5fd7\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u6587\u4ef6\u8def\u5f84\u3002\u7136\u800c\uff0c\u5982\u679c\u4f60\u60f3\u914d\u7f6e\u5f88\u591a\u4e0d\u540c\u7684\u6807\u5fd7\uff0c\u63a8\u8350\u7684\u505a\u6cd5\u662f\u4f7f\u7528 \u914d\u7f6e\u6587\u4ef6\u3002</p> <p>Finally, any command-line argument starting with <code>@</code> reads additional command-line arguments from the file following the <code>@</code> character. This is primarily useful if you have a file containing a list of files that you want to be type-checked: instead of using shell syntax like</p> <pre><code>$ mypy $(cat file_of_files.txt)\n</code></pre> <p>you can use this instead</p> <pre><code>$ mypy @file_of_files.txt\n</code></pre> <p>This file can technically also contain any command line flag, not just file paths. However, if you want to configure many different flags, the recommended approach is to use a configuration file instead.</p>"},{"location":"mypy_conf/running_mypy/#\u6620\u5c04\u6587\u4ef6\u8def\u5f84\u5230\u6a21\u5757","title":"\u6620\u5c04\u6587\u4ef6\u8def\u5f84\u5230\u6a21\u5757","text":"<p>Mapping file paths to modules</p> \u4e2d\u6587\u82f1\u6587 <p>\u4f60\u53ef\u4ee5\u901a\u8fc7\u63d0\u4f9b\u8def\u5f84\u5217\u8868\u6765\u544a\u8bc9 mypy \u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u3002\u8fd9\u662f\u4e3b\u8981\u7684\u65b9\u5f0f\u4e4b\u4e00\u3002\u4f8b\u5982\uff1a</p> <pre><code>$ mypy file_1.py foo/file_2.py file_3.pyi some/directory\n</code></pre> <p>\u672c\u8282\u63cf\u8ff0\u4e86 mypy \u5982\u4f55\u5c06\u63d0\u4f9b\u7684\u8def\u5f84\u6620\u5c04\u5230\u8981\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u7684\u6a21\u5757\u3002</p> <ul> <li> <p>mypy \u4f1a\u68c0\u67e5\u6240\u6709\u5bf9\u5e94\u4e8e\u6587\u4ef6\u7684\u63d0\u4f9b\u8def\u5f84\u3002</p> </li> <li> <p>mypy \u4f1a\u9012\u5f52\u5730\u53d1\u73b0\u5e76\u68c0\u67e5\u6240\u6709\u4ee5 <code>.py</code> \u6216 <code>.pyi</code> \u7ed3\u5c3e\u7684\u6587\u4ef6\uff0c\u4f4d\u4e8e\u63d0\u4f9b\u7684\u76ee\u5f55\u8def\u5f84\u4e2d\uff0c\u540c\u65f6\u8003\u8651\u5230 --exclude \u9009\u9879\u3002</p> </li> <li> <p>\u5bf9\u4e8e\u6bcf\u4e2a\u9700\u8981\u68c0\u67e5\u7684\u6587\u4ef6\uff0cmypy \u4f1a\u5c1d\u8bd5\u5c06\u8be5\u6587\u4ef6\uff08\u4f8b\u5982 <code>project/foo/bar/baz.py</code>\uff09\u4e0e\u4e00\u4e2a\u5b8c\u5168\u9650\u5b9a\u7684\u6a21\u5757\u540d\u79f0\uff08\u4f8b\u5982 <code>foo.bar.baz</code>\uff09\u76f8\u5173\u8054\u3002\u5305\u6240\u5728\u7684\u76ee\u5f55\uff08<code>project</code>\uff09\u4f1a\u88ab\u6dfb\u52a0\u5230 mypy \u7684\u6a21\u5757\u641c\u7d22\u8def\u5f84\u4e2d\u3002</p> </li> </ul> <p>mypy \u5982\u4f55\u786e\u5b9a\u5b8c\u5168\u9650\u5b9a\u7684\u6a21\u5757\u540d\u79f0\u53d6\u51b3\u4e8e\u9009\u9879 --no-namespace-packages \u548c --explicit-package-bases \u662f\u5426\u88ab\u8bbe\u7f6e\u3002</p> <ol> <li> <p>\u5982\u679c\u8bbe\u7f6e\u4e86 --no-namespace-packages\uff0cmypy \u5c06\u4ec5\u4f9d\u8d56\u4e8e <code>__init__.py[i]</code> \u6587\u4ef6\u7684\u5b58\u5728\u6765\u786e\u5b9a\u5b8c\u5168\u9650\u5b9a\u7684\u6a21\u5757\u540d\u79f0\u3002\u5373\uff0cmypy \u4f1a\u5411\u4e0a\u904d\u5386\u76ee\u5f55\u6811\uff0c\u53ea\u8981\u7ee7\u7eed\u627e\u5230 <code>__init__.py</code>\uff08\u6216 <code>__init__.pyi</code>\uff09\u6587\u4ef6\uff0c\u5c31\u7ee7\u7eed\u5411\u4e0a\u67e5\u627e\u3002</p> <p>\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u7684\u76ee\u5f55\u6811\u5305\u62ec <code>pkg/subpkg/mod.py</code>\uff0cmypy \u5c06\u8981\u6c42 <code>pkg/__init__.py</code> \u548c <code>pkg/subpkg/__init__.py</code> \u5b58\u5728\uff0c\u4ee5\u4fbf\u6b63\u786e\u5730\u5c06 <code>mod.py</code> \u5173\u8054\u4e3a <code>pkg.subpkg.mod</code>\u3002</p> </li> <li> <p>\u9ed8\u8ba4\u60c5\u51b5\u3002\u5982\u679c --namespace-packages \u9009\u9879\u5f00\u542f\uff0c\u4f46 --explicit-package-bases \u9009\u9879\u5173\u95ed\uff0cmypy \u4f1a\u5141\u8bb8\u6ca1\u6709 <code>__init__.py[i]</code> \u7684\u76ee\u5f55\u88ab\u89c6\u4e3a\u5305\u3002\u5177\u4f53\u6765\u8bf4\uff0cmypy \u4f1a\u67e5\u770b\u6587\u4ef6\u7684\u6240\u6709\u7236\u76ee\u5f55\uff0c\u5e76\u4f7f\u7528\u76ee\u5f55\u6811\u4e2d\u6700\u9ad8\u7684 <code>__init__.py[i]</code> \u7684\u4f4d\u7f6e\u6765\u786e\u5b9a\u9876\u7ea7\u5305\u3002</p> <p>\u4f8b\u5982\uff0c\u5047\u8bbe\u4f60\u7684\u76ee\u5f55\u6811\u4ec5\u5305\u542b <code>pkg/__init__.py</code> \u548c <code>pkg/a/b/c/d/mod.py</code>\u3002\u5728\u786e\u5b9a <code>mod.py</code> \u7684\u5b8c\u5168\u9650\u5b9a\u6a21\u5757\u540d\u79f0\u65f6\uff0cmypy \u4f1a\u67e5\u770b <code>pkg/__init__.py</code> \u5e76\u5f97\u51fa\u5173\u8054\u7684\u6a21\u5757\u540d\u79f0\u662f <code>pkg.a.b.c.d.mod</code>\u3002</p> </li> <li> <p>\u4f60\u4f1a\u6ce8\u610f\u5230\uff0c\u4e0a\u8ff0\u60c5\u51b5\u4ecd\u7136\u4f9d\u8d56\u4e8e <code>__init__.py</code>\u3002\u5982\u679c\u4f60\u4e0d\u80fd\u5728\u9876\u7ea7\u5305\u4e2d\u653e\u7f6e <code>__init__.py</code>\uff0c\u4f46\u4ecd\u5e0c\u671b\u4f20\u9012\u8def\u5f84\uff08\u800c\u4e0d\u662f\u4f7f\u7528 <code>-p</code> \u6216 <code>-m</code> \u6807\u5fd7\u7684\u5305\u6216\u6a21\u5757\uff09\uff0c--explicit-package-bases \u63d0\u4f9b\u4e86\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848\u3002</p> <p>\u4f7f\u7528 --explicit-package-bases \u65f6\uff0cmypy \u4f1a\u627e\u5230 <code>MYPYPATH</code> \u73af\u5883\u53d8\u91cf\u3001mypy_path \u914d\u7f6e\u6216\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u4e2d\u7684\u6700\u8fd1\u7684\u7236\u76ee\u5f55\u3002\u7136\u540e\uff0cmypy \u5c06\u4f7f\u7528\u76f8\u5bf9\u8def\u5f84\u6765\u786e\u5b9a\u5b8c\u5168\u9650\u5b9a\u7684\u6a21\u5757\u540d\u79f0\u3002</p> <p>\u4f8b\u5982\uff0c\u5047\u8bbe\u4f60\u7684\u76ee\u5f55\u6811\u4ec5\u5305\u542b <code>src/namespace_pkg/mod.py</code>\u3002\u5982\u679c\u4f60\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff0cmypy \u5c06\u6b63\u786e\u5730\u5c06 <code>mod.py</code> \u5173\u8054\u4e3a <code>namespace_pkg.mod</code>\uff1a</p> <pre><code>$ MYPYPATH=src mypy --namespace-packages --explicit-package-bases .\n</code></pre> </li> </ol> <p>\u5982\u679c\u4f60\u4f20\u9012\u7684\u6587\u4ef6\u4e0d\u4ee5 <code>.py[i]</code> \u7ed3\u5c3e\uff0c\u5047\u5b9a\u7684\u6a21\u5757\u540d\u79f0\u662f <code>__main__</code>\uff08\u4e0e Python \u89e3\u91ca\u5668\u7684\u884c\u4e3a\u4e00\u81f4\uff09\uff0c\u9664\u975e\u4f20\u9012\u4e86 --scripts-are-modules \u9009\u9879\u3002</p> <p>\u4f20\u9012 -v \u9009\u9879\u5c06\u663e\u793a mypy \u5c06\u8981\u68c0\u67e5\u7684\u6587\u4ef6\u53ca\u5176\u5173\u8054\u7684\u6a21\u5757\u540d\u79f0\u3002</p> <p>One of the main ways you can tell mypy what to type check is by providing mypy a list of paths. For example</p> <pre><code>$ mypy file_1.py foo/file_2.py file_3.pyi some/directory\n</code></pre> <p>This section describes how exactly mypy maps the provided paths to modules to type check.</p> <ul> <li> <p>Mypy will check all paths provided that correspond to files.</p> </li> <li> <p>Mypy will recursively discover and check all files ending in <code>.py</code> or <code>.pyi</code> in directory paths provided, after accounting for --exclude.</p> </li> <li> <p>For each file to be checked, mypy will attempt to associate the file (e.g. <code>project/foo/bar/baz.py</code>) with a fully qualified module name (e.g. <code>foo.bar.baz</code>). The directory the package is in (<code>project</code>) is then added to mypy's module search paths.</p> </li> </ul> <p>How mypy determines fully qualified module names depends on if the options --no-namespace-packages and --explicit-package-bases are set.</p> <ol> <li> <p>If --no-namespace-packages is set, mypy will rely solely upon the presence of <code>__init__.py[i]</code> files to determine the fully qualified module name. That is, mypy will crawl up the directory tree for as long as it continues to find <code>__init__.py</code> (or <code>__init__.pyi</code>) files.</p> <p>For example, if your directory tree consists of <code>pkg/subpkg/mod.py</code>, mypy would require <code>pkg/__init__.py</code> and <code>pkg/subpkg/__init__.py</code> to exist in order correctly associate <code>mod.py</code> with <code>pkg.subpkg.mod</code></p> </li> <li> <p>The default case. If --namespace-packages is on, but --explicit-package-bases is off, mypy will allow for the possibility that     directories without <code>__init__.py[i]</code> are packages. Specifically, mypy will     look at all parent directories of the file and use the location of the     highest <code>__init__.py[i]</code> in the directory tree to determine the top-level     package.</p> <p>For example, say your directory tree consists solely of <code>pkg/__init__.py</code> and <code>pkg/a/b/c/d/mod.py</code>. When determining <code>mod.py</code>'s fully qualified module name, mypy will look at <code>pkg/__init__.py</code> and conclude that the associated module name is <code>pkg.a.b.c.d.mod</code>.</p> </li> <li> <p>You'll notice that the above case still relies on <code>__init__.py</code>. If you can't put an <code>__init__.py</code> in your top-level package, but still wish to pass paths (as opposed to packages or modules using the <code>-p</code> or <code>-m</code> flags), --explicit-package-bases provides a solution.</p> <p>With --explicit-package-bases, mypy will locate the nearest parent directory that is a member of the <code>MYPYPATH</code> environment variable, the mypy_path config or is the current working directory. Mypy will then use the relative path to determine the fully qualified module name.</p> <p>For example, say your directory tree consists solely of <code>src/namespace_pkg/mod.py</code>. If you run the following command, mypy will correctly associate <code>mod.py</code> with <code>namespace_pkg.mod</code></p> <pre><code>$ MYPYPATH=src mypy --namespace-packages --explicit-package-bases .\n</code></pre> </li> </ol> <p>If you pass a file not ending in <code>.py[i]</code>, the module name assumed is <code>__main__</code> (matching the behavior of the Python interpreter), unless --scripts-are-modules is passed.</p> <p>Passing -v will show you the files and associated module names that mypy will check.</p>"},{"location":"mypy_conf/running_mypy/#mypy-\u5982\u4f55\u5904\u7406\u5bfc\u5165","title":"mypy \u5982\u4f55\u5904\u7406\u5bfc\u5165","text":"<p>How mypy handles imports</p> \u4e2d\u6587\u82f1\u6587 <p>\u5f53 mypy \u9047\u5230 <code>import</code> \u8bed\u53e5\u65f6\uff0c\u5b83\u4f1a\u9996\u5148 \u5c1d\u8bd5\u5b9a\u4f4d \u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684\u6a21\u5757\u6216\u8be5\u6a21\u5757\u7684\u7c7b\u578b\u5b58\u6839\u3002\u7136\u540e\uff0cmypy \u5c06\u5bf9\u5bfc\u5165\u7684\u6a21\u5757\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u6709\u4e09\u79cd\u4e0d\u540c\u7684\u7ed3\u679c\uff1a</p> <ol> <li> <p>mypy \u65e0\u6cd5\u8ddf\u968f\u5bfc\u5165\uff1a\u6a21\u5757\u8981\u4e48\u4e0d\u5b58\u5728\uff0c\u8981\u4e48\u662f\u4e00\u4e2a\u4e0d\u4f7f\u7528\u7c7b\u578b\u63d0\u793a\u7684\u7b2c\u4e09\u65b9\u5e93\u3002</p> </li> <li> <p>mypy \u80fd\u591f\u8ddf\u968f\u5e76\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\uff0c\u4f46\u4f60\u4e0d\u5e0c\u671b mypy \u5bf9\u8be5\u6a21\u5757\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u3002</p> </li> <li> <p>mypy \u80fd\u591f\u6210\u529f\u5730\u8ddf\u968f\u5e76\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\uff0c\u5e76\u4e14\u4f60\u5e0c\u671b mypy \u5bf9\u8be5\u6a21\u5757\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u3002</p> </li> </ol> <p>\u7b2c\u4e09\u79cd\u7ed3\u679c\u662f\u7406\u60f3\u60c5\u51b5\u4e0b mypy \u4f1a\u6267\u884c\u7684\u64cd\u4f5c\u3002\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u5c06\u8ba8\u8bba\u5982\u4f55\u5904\u7406\u5176\u4ed6\u4e24\u79cd\u60c5\u51b5\u3002</p> <p>When mypy encounters an <code>import</code> statement, it will first attempt to locate that module or type stubs for that module in the file system. Mypy will then type check the imported module. There are three different outcomes of this process:</p> <ol> <li> <p>Mypy is unable to follow the import: the module either does not exist, or is a third party library that does not use type hints.</p> </li> <li> <p>Mypy is able to follow and type check the import, but you did not want mypy to type check that module at all.</p> </li> <li> <p>Mypy is able to successfully both follow and type check the module, and you want mypy to type check that module.</p> </li> </ol> <p>The third outcome is what mypy will do in the ideal case. The following sections will discuss what to do in the other two cases.</p>"},{"location":"mypy_conf/running_mypy/#\u7f3a\u5931\u7684\u5bfc\u5165","title":"\u7f3a\u5931\u7684\u5bfc\u5165","text":"<p>Missing imports</p> \u4e2d\u6587\u82f1\u6587 <p>\u5f53\u4f60\u5bfc\u5165\u4e00\u4e2a\u6a21\u5757\u65f6\uff0cmypy \u53ef\u80fd\u4f1a\u62a5\u544a\u5b83\u65e0\u6cd5\u8ddf\u968f\u8be5\u5bfc\u5165\u3002\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5982\u4e0b\u6240\u793a\u7684\u9519\u8bef\uff1a</p> <pre><code>main.py:1: error: Skipping analyzing 'django': module is installed, but missing library stubs or py.typed marker\nmain.py:2: error: Library stubs not installed for \"requests\"\nmain.py:3: error: Cannot find implementation or library stub for module named \"this_module_does_not_exist\"\n</code></pre> <p>\u5982\u679c\u4f60\u5728\u5bfc\u5165\u65f6\u9047\u5230\u8fd9\u4e9b\u9519\u8bef\uff0cmypy \u5c06\u5047\u5b9a\u8be5\u6a21\u5757\u7684\u7c7b\u578b\u4e3a <code>Any</code>\uff0c\u5373\u52a8\u6001\u7c7b\u578b\u3002\u8fd9\u610f\u5473\u7740\u8bbf\u95ee\u8be5\u6a21\u5757\u7684\u4efb\u4f55\u5c5e\u6027\u90fd\u4f1a\u81ea\u52a8\u6210\u529f\uff1a</p> <pre><code># \u9519\u8bef: \u627e\u4e0d\u5230\u540d\u4e3a 'does_not_exist' \u7684\u5b9e\u73b0\u6216\u5e93\u5b58\u6839\nimport does_not_exist\n\n# \u4f46\u8fd9\u6bb5\u4ee3\u7801\u4f1a\u901a\u8fc7\u7c7b\u578b\u68c0\u67e5\uff0cx \u7684\u7c7b\u578b\u4e3a 'Any'\nx = does_not_exist.foobar()\n</code></pre> <p>\u8fd9\u53ef\u80fd\u5bfc\u81f4 mypy \u65e0\u6cd5\u8b66\u544a\u4f60\u4ee3\u7801\u4e2d\u7684\u9519\u8bef\u3002\u7531\u4e8e\u5bf9 <code>Any</code> \u7684\u64cd\u4f5c\u7ed3\u679c\u4ecd\u7136\u662f <code>Any</code>\uff0c\u8fd9\u4e9b\u52a8\u6001\u7c7b\u578b\u53ef\u4ee5\u5728\u4ee3\u7801\u4e2d\u4f20\u64ad\uff0c\u4f7f\u7c7b\u578b\u68c0\u67e5\u6548\u679c\u964d\u4f4e\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 \u52a8\u6001\u7c7b\u578b\u3002</p> <p>\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u63cf\u8ff0\u4e86\u8fd9\u4e9b\u9519\u8bef\u7684\u542b\u4e49\u4ee5\u53ca\u63a8\u8350\u7684\u89e3\u51b3\u6b65\u9aa4\uff1b\u8bf7\u6eda\u52a8\u5230\u4e0e\u60a8\u7684\u9519\u8bef\u76f8\u5339\u914d\u7684\u90e8\u5206\u3002</p> <p>When you import a module, mypy may report that it is unable to follow the import. This can cause errors that look like the following:</p> <pre><code>main.py:1: error: Skipping analyzing 'django': module is installed, but missing library stubs or py.typed marker\nmain.py:2: error: Library stubs not installed for \"requests\"\nmain.py:3: error: Cannot find implementation or library stub for module named \"this_module_does_not_exist\"\n</code></pre> <p>If you get any of these errors on an import, mypy will assume the type of that module is <code>Any</code>, the dynamic type. This means attempting to access any attribute of the module will automatically succeed:</p> <pre><code># Error: Cannot find implementation or library stub for module named 'does_not_exist'\nimport does_not_exist\n\n# But this type checks, and x will have type 'Any'\nx = does_not_exist.foobar()\n</code></pre> <p>This can result in mypy failing to warn you about errors in your code. Since operations on <code>Any</code> result in <code>Any</code>, these dynamic types can propagate through your code, making type checking less effective. See dynamic-typing for more information.</p> <p>The next sections describe what each of these errors means and recommended next steps; scroll to the section that matches your error.</p>"},{"location":"mypy_conf/running_mypy/#\u7f3a\u5931\u7684\u5e93\u5b58\u6839\u6216-pytyped-\u6807\u8bb0","title":"\u7f3a\u5931\u7684\u5e93\u5b58\u6839\u6216 py.typed \u6807\u8bb0","text":"<p>Missing library stubs or py.typed marker</p> \u4e2d\u6587\u82f1\u6587 <p>\u5982\u679c\u4f60\u9047\u5230\u9519\u8bef\u4fe1\u606f <code>Skipping analyzing X: module is installed, but missing library stubs or py.typed marker</code>\uff0c\u8fd9\u610f\u5473\u7740 mypy \u80fd\u591f\u627e\u5230\u4f60\u5bfc\u5165\u7684\u6a21\u5757\uff0c\u4f46\u6ca1\u6709\u627e\u5230\u76f8\u5e94\u7684\u7c7b\u578b\u63d0\u793a\u3002</p> <p>\u9664\u975e\u7b2c\u4e09\u65b9\u5e93\u5df2\u58f0\u660e\u4e3aPEP 561 \u5408\u89c4\u7684\u5b58\u6839\u5305\uff08\u4f8b\u5982\uff0c\u5305\u542b <code>py.typed</code> \u6587\u4ef6\uff09\uff0c\u6216\u8005\u5df2\u5728 typeshed \u6ce8\u518c\uff0cmypy \u4e0d\u4f1a\u5c1d\u8bd5\u63a8\u65ad\u4f60\u5b89\u88c5\u7684\u4efb\u4f55\u7b2c\u4e09\u65b9\u5e93\u7684\u7c7b\u578b\u63d0\u793a\u3002typeshed \u662f\u4e00\u4e2a\u6807\u51c6\u5e93\u53ca\u4e00\u4e9b\u7b2c\u4e09\u65b9\u5e93\u7684\u7c7b\u578b\u5b58\u50a8\u5e93\u3002</p> <p>\u5982\u679c\u4f60\u9047\u5230\u8fd9\u4e2a\u9519\u8bef\uff0c\u8bf7\u5c1d\u8bd5\u83b7\u53d6\u4f60\u6b63\u5728\u4f7f\u7528\u7684\u5e93\u7684\u7c7b\u578b\u63d0\u793a\uff1a</p> <ol> <li> <p>\u5347\u7ea7\u5e93\u7684\u7248\u672c\uff0c\u4ee5\u67e5\u770b\u8f83\u65b0\u7248\u672c\u662f\u5426\u5f00\u59cb\u5305\u542b\u7c7b\u578b\u63d0\u793a\u3002</p> </li> <li> <p>\u641c\u7d22\u662f\u5426\u6709\u4e0e\u7b2c\u4e09\u65b9\u5e93\u5bf9\u5e94\u7684 PEP 561 \u5408\u89c4\u5b58\u6839\u5305\u3002\u5b58\u6839\u5305\u5141\u8bb8\u4f60\u72ec\u7acb\u4e8e\u5e93\u672c\u8eab\u5b89\u88c5\u7c7b\u578b\u63d0\u793a\u3002</p> <p>\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u9700\u8981 <code>django</code> \u5e93\u7684\u7c7b\u578b\u63d0\u793a\uff0c\u53ef\u4ee5\u5b89\u88c5 django-stubs \u5305\u3002</p> </li> <li> <p>\u7f16\u5199\u81ea\u5df1\u7684\u5b58\u6839\u6587\u4ef6\uff0c\u5305\u542b\u5e93\u7684\u7c7b\u578b\u63d0\u793a\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4\u884c\u4f20\u9012\u3001\u4f7f\u7528 files \u6216 mypy_path \u914d\u7f6e\u6587\u4ef6\u9009\u9879\uff0c\u6216\u5c06\u4f4d\u7f6e\u6dfb\u52a0\u5230 <code>MYPYPATH</code> \u73af\u5883\u53d8\u91cf\u6765\u6307\u5411\u4f60\u7684\u7c7b\u578b\u63d0\u793a\u3002</p> <p>\u8fd9\u4e9b\u5b58\u6839\u6587\u4ef6\u4e0d\u9700\u8981\u5b8c\u6574\uff01\u4e00\u4e2a\u597d\u7684\u7b56\u7565\u662f\u4f7f\u7528 stubgen \u751f\u6210\u5b58\u6839\u7684\u521d\u6b65\u8349\u7a3f\u3002\u7136\u540e\u4f60\u53ef\u4ee5\u4ec5\u5bf9\u9700\u8981\u7684\u5e93\u90e8\u5206\u8fdb\u884c\u8fed\u4ee3\u3002</p> <p>\u5982\u679c\u4f60\u60f3\u5206\u4eab\u4f60\u7684\u5de5\u4f5c\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u5c06\u5b58\u6839\u8d21\u732e\u56de\u5e93\u2014\u2014\u8bf7\u53c2\u9605\u6211\u4eec\u5173\u4e8e\u521b\u5efa PEP 561 \u5408\u89c4\u5305 \u7684\u6587\u6863\u3002</p> </li> </ol> <p>\u5982\u679c\u4f60\u65e0\u6cd5\u627e\u5230\u73b0\u6709\u7684\u7c7b\u578b\u63d0\u793a\u6216\u6ca1\u6709\u65f6\u95f4\u7f16\u5199\u81ea\u5df1\u7684\u63d0\u793a\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9 \u6291\u5236 \u9519\u8bef\u3002</p> <p>\u8fd9\u5c06\u4f7f mypy \u505c\u6b62\u62a5\u544a\u5305\u542b\u5bfc\u5165\u7684\u884c\u4e0a\u7684\u9519\u8bef\uff1a\u5bfc\u5165\u7684\u6a21\u5757\u5c06\u7ee7\u7eed\u4e3a <code>Any</code> \u7c7b\u578b\uff0cmypy \u53ef\u80fd\u65e0\u6cd5\u6355\u6349\u5176\u4f7f\u7528\u4e2d\u7684\u9519\u8bef\u3002</p> <ol> <li> <p>\u8981\u6291\u5236\u5355\u4e2a \u7f3a\u5931\u5bfc\u5165\u9519\u8bef\uff0c\u8bf7\u5728\u5305\u542b\u5bfc\u5165\u7684\u884c\u672b\u5c3e\u6dfb\u52a0 <code># type: ignore</code>\u3002</p> </li> <li> <p>\u8981\u6291\u5236\u5355\u4e2a\u5e93\u7684\u6240\u6709 \u7f3a\u5931\u5bfc\u5165\u9519\u8bef\uff0c\u8bf7\u5728 mypy \u914d\u7f6e\u6587\u4ef6 \u4e2d\u6dfb\u52a0\u6bcf\u4e2a\u6a21\u5757\u7684\u90e8\u5206\uff0c\u5c06 ignore_missing_imports \u8bbe\u7f6e\u4e3a True\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u4f60\u7684\u4ee3\u7801\u5e93\u5927\u91cf\u4f7f\u7528\u4e86\u4e00\u4e2a\uff08\u672a\u7c7b\u578b\u5316\u7684\uff09\u5e93\u540d\u4e3a <code>foobar</code>\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u90e8\u5206\u6765\u6d88\u9664\u4e0e\u8be5\u5e93\u76f8\u5173\u7684\u6240\u6709\u5bfc\u5165\u9519\u8bef\uff1a</p> <pre><code>[mypy-foobar.*]\nignore_missing_imports = True\n</code></pre> <p>\u6ce8\u610f\uff1a\u8fd9\u4e2a\u9009\u9879\u7b49\u540c\u4e8e\u5728\u4f60\u7684\u4ee3\u7801\u5e93\u4e2d\u7684\u6bcf\u4e2a <code>foobar</code> \u5bfc\u5165\u4e0a\u6dfb\u52a0 <code># type: ignore</code>\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1\u5173\u4e8e\u914d\u7f6e \u5bfc\u5165\u53d1\u73b0 \u7684\u6587\u6863\u3002<code>.*</code> \u540e\u7f00\u5c06\u5ffd\u7565 <code>foobar</code> \u6a21\u5757\u548c\u5b50\u5305\u7684\u5bfc\u5165\uff0c\u9664\u4e86 <code>foobar</code> \u9876\u7ea7\u5305\u547d\u540d\u7a7a\u95f4\u3002</p> </li> <li> <p>\u8981\u6291\u5236\u4ee3\u7801\u5e93\u4e2d\u6240\u6709\u672a\u7c7b\u578b\u5316\u5e93\u7684\u6240\u6709 \u7f3a\u5931\u5bfc\u5165\u9519\u8bef\uff0c\u8bf7\u4f7f\u7528 disable-error-code=import-untyped\u3002\u6709\u5173\u6b64\u9519\u8bef\u4ee3\u7801\u7684\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 code-import-untyped\u3002</p> <p>\u4f60\u4e5f\u53ef\u4ee5\u8bbe\u7f6e disable_error_code\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>[mypy]\ndisable_error_code = import-untyped\n</code></pre> <p>\u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528 --ignore-missing-imports \u547d\u4ee4\u884c\u6807\u5fd7\uff0c\u6216\u5c06 ignore_missing_imports \u914d\u7f6e\u6587\u4ef6\u9009\u9879\u8bbe\u7f6e\u4e3a True \u5728 mypy \u914d\u7f6e\u6587\u4ef6\u7684 global \u90e8\u5206\u3002\u6211\u4eec\u5efa\u8bae\u5c3d\u53ef\u80fd\u907f\u514d\u4f7f\u7528 <code>--ignore-missing-imports</code>\uff1a\u5b83\u7b49\u540c\u4e8e\u5728\u4ee3\u7801\u5e93\u4e2d\u6240\u6709\u672a\u89e3\u6790\u7684\u5bfc\u5165\u4e0a\u6dfb\u52a0 <code># type: ignore</code>\u3002</p> </li> </ol> <p>If you are getting a <code>Skipping analyzing X: module is installed, but missing library stubs or py.typed marker</code>, error, this means mypy was able to find the module you were importing, but no corresponding type hints.</p> <p>Mypy will not try inferring the types of any 3<sup>rd</sup> party libraries you have installed unless they either have declared themselves to be PEP 561 compliant stub package (e.g. with a <code>py.typed</code> file) or have registered themselves on typeshed, the repository of types for the standard library and some 3<sup>rd</sup> party libraries.</p> <p>If you are getting this error, try to obtain type hints for the library you're using:</p> <ol> <li> <p>Upgrading the version of the library you're using, in case a newer version has started to include type hints.</p> </li> <li> <p>Searching to see if there is a PEP 561 compliant stub package corresponding to your third party library. Stub packages let you install type hints independently from the library itself.</p> <p>For example, if you want type hints for the <code>django</code> library, you can install the django-stubs package.</p> </li> <li> <p>Writing your own stub files containing type hints for the library. You can point mypy at your type hints either by passing them in via the command line, by using the  files or mypy_path config file options, or by adding the location to the <code>MYPYPATH</code> environment variable.</p> <p>These stub files do not need to be complete! A good strategy is to use [stubgen ], a program that comes bundled with mypy, to generate a first rough draft of the stubs. You can then iterate on just the parts of the library you need. <p>If you want to share your work, you can try contributing your stubs back to the library -- see our documentation on creating PEP 561 compliant packages.</p> <p>If you are unable to find any existing type hints nor have time to write your own, you can instead suppress the errors.</p> <p>All this will do is make mypy stop reporting an error on the line containing the import: the imported module will continue to be of type <code>Any</code>, and mypy may not catch errors in its use.</p> <ol> <li> <p>To suppress a single missing import error, add a <code># type: ignore</code> at the end of the line containing the import.</p> </li> <li> <p>To suppress all missing import errors from a single library, add a per-module section to your mypy config file setting ignore_missing_imports to True for that library. For example, suppose your codebase makes heavy use of an (untyped) library named <code>foobar</code>. You can silence all import errors associated with that library and that library alone by adding the following section to your config file</p> <pre><code>    [mypy-foobar.*]\n    ignore_missing_imports = True\n</code></pre> <p>Note: this option is equivalent to adding a <code># type: ignore</code> to every import of <code>foobar</code> in your codebase. For more information, see the documentation about configuring import discovery in config files. The <code>.*</code> after <code>foobar</code> will ignore imports of <code>foobar</code> modules and subpackages in addition to the <code>foobar</code> top-level package namespace.</p> </li> <li> <p>To suppress all missing import errors for all untyped libraries in your codebase, use disable-error-code=import-untyped. See code-import-untyped for more details on this error code.</p> <p>You can also set disable_error_code, like so</p> <pre><code>[mypy]\ndisable_error_code = import-untyped\n</code></pre> <p>You can also set the --ignore-missing-imports command line flag or set the ignore_missing_imports config file option to True in the global section of your mypy config file. We recommend avoiding <code>--ignore-missing-imports</code> if possible: it's equivalent to adding a <code># type: ignore</code> to all unresolved imports in your codebase.</p> </li> </ol>"},{"location":"mypy_conf/running_mypy/#\u5e93\u5b58\u6839\u672a\u5b89\u88c5","title":"\u5e93\u5b58\u6839\u672a\u5b89\u88c5","text":"<p>Library stubs not installed</p> \u4e2d\u6587\u82f1\u6587 <p>\u5982\u679c mypy \u65e0\u6cd5\u627e\u5230\u67d0\u4e2a\u7b2c\u4e09\u65b9\u5e93\u7684\u5b58\u6839\u6587\u4ef6\uff0c\u5e76\u4e14\u5b83\u77e5\u9053\u8be5\u5e93\u6709\u5b58\u6839\u6587\u4ef6\uff0c\u4f60\u4f1a\u770b\u5230\u7c7b\u4f3c\u4ee5\u4e0b\u7684\u6d88\u606f\uff1a</p> <pre><code>main.py:1: error: Library stubs not installed for \"yaml\"\nmain.py:1: note: Hint: \"python3 -m pip install types-PyYAML\"\nmain.py:1: note: (or run \"mypy --install-types\" to install all missing stub packages)\n</code></pre> <p>\u4f60\u53ef\u4ee5\u901a\u8fc7\u8fd0\u884c\u5efa\u8bae\u7684 pip \u547d\u4ee4\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u5982\u679c\u4f60\u5728 CI \u73af\u5883\u4e2d\u8fd0\u884c mypy\uff0c\u4f60\u53ef\u4ee5\u50cf\u5904\u7406\u5176\u4ed6\u6d4b\u8bd5\u4f9d\u8d56\u4e00\u6837\u786e\u4fdd\u6240\u9700\u7684\u5b58\u6839\u5305\u7684\u5b58\u5728\uff0c\u4f8b\u5982\uff0c\u901a\u8fc7\u5c06\u5b83\u4eec\u6dfb\u52a0\u5230\u9002\u5f53\u7684 <code>requirements.txt</code> \u6587\u4ef6\u4e2d\u3002</p> <p>\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u5411\u4f60\u7684 mypy \u547d\u4ee4\u6dfb\u52a0 --install-types \u9009\u9879\uff0c\u4ee5\u5b89\u88c5\u6240\u6709\u5df2\u77e5\u7684\u7f3a\u5931\u5b58\u6839\uff1a</p> <pre><code>mypy --install-types\n</code></pre> <p>\u8fd9\u6bd4\u663e\u5f0f\u5b89\u88c5\u5b58\u6839\u8981\u6162\uff0c\u56e0\u4e3a\u5b83\u5b9e\u9645\u4e0a\u4f1a\u8fd0\u884c\u4e24\u6b21 mypy\u2014\u2014\u7b2c\u4e00\u6b21\u662f\u67e5\u627e\u7f3a\u5931\u7684\u5b58\u6839\uff0c\u7b2c\u4e8c\u6b21\u662f\u5728 mypy \u5b89\u88c5\u5b58\u6839\u540e\u6b63\u786e\u5730\u7c7b\u578b\u68c0\u67e5\u4f60\u7684\u4ee3\u7801\u3002\u8fd9\u4e5f\u53ef\u80fd\u4f7f\u63a7\u5236\u5b58\u6839\u7248\u672c\u53d8\u5f97\u66f4\u52a0\u56f0\u96be\uff0c\u4ece\u800c\u5bfc\u81f4\u7c7b\u578b\u68c0\u67e5\u7684\u53ef\u91cd\u73b0\u6027\u964d\u4f4e\u3002</p> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c--install-types \u4f1a\u663e\u793a\u4e00\u4e2a\u786e\u8ba4\u63d0\u793a\u3002\u4f7f\u7528 --non-interactive \u53ef\u4ee5\u5728\u4e0d\u9700\u8981\u786e\u8ba4\u7684\u60c5\u51b5\u4e0b\u5b89\u88c5\u6240\u6709\u5efa\u8bae\u7684\u5b58\u6839\u5305 \u5e76\u4e14 \u7c7b\u578b\u68c0\u67e5\u4f60\u7684\u4ee3\u7801\uff1a</p> <p>\u5982\u679c\u4f60\u5df2\u7ecf\u5728 mypy \u8fd0\u884c\u6240\u5728\u73af\u5883\u4e4b\u5916\u7684\u73af\u5883\u4e2d\u5b89\u88c5\u4e86\u76f8\u5173\u7684\u7b2c\u4e09\u65b9\u5e93\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 --python-executable \u6807\u5fd7\u6765\u6307\u5b9a\u8be5\u73af\u5883\u7684 Python \u53ef\u6267\u884c\u6587\u4ef6\uff0cmypy \u5c06\u627e\u5230\u4e3a\u8be5 Python \u53ef\u6267\u884c\u6587\u4ef6\u5b89\u88c5\u7684\u5305\u3002</p> <p>\u5982\u679c\u4f60\u5df2\u7ecf\u5b89\u88c5\u4e86\u76f8\u5173\u7684\u5b58\u6839\u5305\uff0c\u4f46\u4ecd\u7136\u9047\u5230\u6b64\u9519\u8bef\uff0c\u8bf7\u53c2\u9605 \u4e0b\u9762\u7684\u90e8\u5206\u3002</p> <p>If mypy can't find stubs for a third-party library, and it knows that stubs exist for the library, you will get a message like this:</p> <pre><code>main.py:1: error: Library stubs not installed for \"yaml\"\nmain.py:1: note: Hint: \"python3 -m pip install types-PyYAML\"\nmain.py:1: note: (or run \"mypy --install-types\" to install all missing stub packages)\n</code></pre> <p>You can resolve the issue by running the suggested pip commands. If you're running mypy in CI, you can ensure the presence of any stub packages you need the same as you would any other test dependency, e.g. by adding them to the appropriate <code>requirements.txt</code> file.</p> <p>Alternatively, add the --install-types to your mypy command to install all known missing stubs:</p> <pre><code>mypy --install-types\n</code></pre> <p>This is slower than explicitly installing stubs, since it effectively runs mypy twice -- the first time to find the missing stubs, and the second time to type check your code properly after mypy has installed the stubs. It also can make controlling stub versions harder, resulting in less reproducible type checking.</p> <p>By default, --install-types shows a confirmation prompt. Use --non-interactive to install all suggested stub packages without asking for confirmation and type check your code:</p> <p>If you've already installed the relevant third-party libraries in an environment other than the one mypy is running in, you can use --python-executable flag to point to the Python executable for that environment, and mypy will find packages installed for that Python executable.</p> <p>If you've installed the relevant stub packages and are still getting this error, see the section below.</p>"},{"location":"mypy_conf/running_mypy/#\u65e0\u6cd5\u627e\u5230\u5b9e\u73b0\u6216\u5e93\u5b58\u6839","title":"\u65e0\u6cd5\u627e\u5230\u5b9e\u73b0\u6216\u5e93\u5b58\u6839","text":"<p>Cannot find implementation or library stub</p> \u4e2d\u6587\u82f1\u6587 <p>\u5982\u679c\u4f60\u9047\u5230 <code>Cannot find implementation or library stub for module</code> \u9519\u8bef\uff0c\u8fd9\u610f\u5473\u7740 mypy \u65e0\u6cd5\u627e\u5230\u4f60\u8bd5\u56fe\u5bfc\u5165\u7684\u6a21\u5757\uff0c\u65e0\u8bba\u8be5\u6a21\u5757\u662f\u5426\u5305\u542b\u7c7b\u578b\u63d0\u793a\u3002\u5982\u679c\u4f60\u9047\u5230\u8fd9\u4e2a\u9519\u8bef\uff0c\u8bf7\u5c1d\u8bd5\u4ee5\u4e0b\u65b9\u6cd5\uff1a</p> <ol> <li> <p>\u786e\u4fdd\u4f60\u7684\u5bfc\u5165\u8bed\u53e5\u6ca1\u6709\u62fc\u5199\u9519\u8bef\u3002</p> </li> <li> <p>\u5982\u679c\u6a21\u5757\u662f\u7b2c\u4e09\u65b9\u5e93\uff0c\u786e\u4fdd mypy \u80fd\u591f\u627e\u5230\u5305\u542b\u5df2\u5b89\u88c5\u5e93\u7684\u89e3\u91ca\u5668\u3002</p> <p>\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u5728 virtualenv \u4e2d\u8fd0\u884c\u4ee3\u7801\uff0c\u8bf7\u786e\u4fdd\u5728 virtualenv \u4e2d\u5b89\u88c5\u548c\u4f7f\u7528 mypy\u3002\u6216\u8005\uff0c\u5982\u679c\u4f60\u5e0c\u671b\u4f7f\u7528\u5168\u5c40\u5b89\u88c5\u7684 mypy\uff0c\u8bf7\u8bbe\u7f6e --python-executable \u547d\u4ee4\u884c\u6807\u5fd7\uff0c\u6307\u5411\u5305\u542b\u5df2\u5b89\u88c5\u7b2c\u4e09\u65b9\u5305\u7684 Python \u89e3\u91ca\u5668\u3002</p> <p>\u4f60\u53ef\u4ee5\u901a\u8fc7\u50cf <code>python -m mypy ...</code> \u8fd9\u6837\u8fd0\u884c mypy \u6765\u786e\u8ba4\u4f60\u662f\u5426\u5728\u9884\u671f\u7684\u73af\u5883\u4e2d\u8fd0\u884c\u5b83\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u50cf <code>python -m pip ...</code> \u8fd9\u6837\u8fd0\u884c pip \u6765\u786e\u8ba4\u4f60\u662f\u5426\u5728\u9884\u671f\u7684\u73af\u5883\u4e2d\u5b89\u88c5\u5305\u3002</p> </li> <li> <p>\u9605\u8bfb\u4e0b\u9762\u7684 finding-imports \u90e8\u5206\uff0c\u4ee5\u786e\u4fdd\u4f60\u7406\u89e3 mypy \u662f\u5982\u4f55\u641c\u7d22\u548c\u627e\u5230\u6a21\u5757\u7684\uff0c\u5e76\u6839\u636e\u9700\u8981\u8c03\u6574\u4f60\u8c03\u7528 mypy \u7684\u65b9\u5f0f\u3002</p> </li> <li> <p>\u901a\u8fc7\u547d\u4ee4\u884c\u76f4\u63a5\u6307\u5b9a\u5305\u542b\u4f60\u60f3\u8981\u7c7b\u578b\u68c0\u67e5\u7684\u6a21\u5757\u7684\u76ee\u5f55\uff0c\u4f7f\u7528 mypy_path \u6216 files \u914d\u7f6e\u6587\u4ef6\u9009\u9879\uff0c\u6216\u901a\u8fc7\u8bbe\u7f6e <code>MYPYPATH</code> \u73af\u5883\u53d8\u91cf\u3002</p> <p>\u6ce8\u610f\uff1a\u5982\u679c\u4f60\u8bd5\u56fe\u5bfc\u5165\u7684\u6a21\u5757\u5b9e\u9645\u4e0a\u662f\u67d0\u4e2a\u5305\u7684 \u5b50\u6a21\u5757\uff0c\u4f60\u5e94\u8be5\u6307\u5b9a\u5305\u542b \u6574\u4e2a \u5305\u7684\u76ee\u5f55\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u4f60\u8981\u6dfb\u52a0\u6a21\u5757 <code>foo.bar.baz</code>\uff0c\u5b83\u4f4d\u4e8e <code>~/foo-project/src/foo/bar/baz.py</code>\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u5fc5\u987b\u8fd0\u884c <code>mypy ~/foo-project/src</code>\uff08\u6216\u5c06 <code>MYPYPATH</code> \u8bbe\u7f6e\u4e3a <code>~/foo-project/src</code>\uff09\u3002</p> </li> </ol> <p>If you are getting a <code>Cannot find implementation or library stub for module</code> error, this means mypy was not able to find the module you are trying to import, whether it comes bundled with type hints or not. If you are getting this error, try:</p> <ol> <li> <p>Making sure your import does not contain a typo.</p> </li> <li> <p>If the module is a third party library, making sure that mypy is able to find the interpreter containing the installed library.</p> <p>For example, if you are running your code in a virtualenv, make sure to install and use mypy within the virtualenv. Alternatively, if you want to use a globally installed mypy, set the --python-executable command line flag to point the Python interpreter containing your installed third party packages.</p> <p>You can confirm that you are running mypy from the environment you expect by running it like <code>python -m mypy ...</code>. You can confirm that you are installing into the environment you expect by running pip like <code>python -m pip ...</code>.</p> </li> <li> <p>Reading the finding-imports section below to make sure you     understand how exactly mypy searches for and finds modules and modify     how you're invoking mypy accordingly.</p> </li> <li> <p>Directly specifying the directory containing the module you want to type check from the command line, by using the mypy_path or files config file options, or by using the <code>MYPYPATH</code> environment variable.</p> <p>Note: if the module you are trying to import is actually a submodule of some package, you should specify the directory containing the entire package. For example, suppose you are trying to add the module <code>foo.bar.baz</code> which is located at <code>~/foo-project/src/foo/bar/baz.py</code>. In this case, you must run <code>mypy ~/foo-project/src</code> (or set the <code>MYPYPATH</code> to <code>~/foo-project/src</code>).</p> </li> </ol>"},{"location":"mypy_conf/running_mypy/#\u5982\u4f55\u627e\u5230\u5bfc\u5165","title":"\u5982\u4f55\u627e\u5230\u5bfc\u5165","text":"<p>How imports are found</p> \u4e2d\u6587\u82f1\u6587 <p>\u5f53 mypy \u9047\u5230 <code>import</code> \u8bed\u53e5\u6216\u901a\u8fc7 --module \u6216 --package \u6807\u5fd7\u4ece\u547d\u4ee4\u884c\u63a5\u6536\u6a21\u5757\u540d\u79f0\u65f6\uff0cmypy \u5c1d\u8bd5\u5728\u6587\u4ef6\u7cfb\u7edf\u4e0a\u627e\u5230\u8be5\u6a21\u5757\uff0c\u8fd9\u4e0e Python \u67e5\u627e\u6a21\u5757\u7684\u65b9\u5f0f\u7c7b\u4f3c\u3002\u7136\u800c\uff0c\u5b58\u5728\u4e00\u4e9b\u5dee\u5f02\u3002</p> <p>\u9996\u5148\uff0cmypy \u6709\u81ea\u5df1\u7684\u641c\u7d22\u8def\u5f84\u3002\u8fd9\u4e9b\u8def\u5f84\u7531\u4ee5\u4e0b\u9879\u76ee\u8ba1\u7b97\u5f97\u51fa\uff1a</p> <ul> <li><code>MYPYPATH</code> \u73af\u5883\u53d8\u91cf\uff08\u5728 UNIX \u7cfb\u7edf\u4e0a\u7528\u5192\u53f7\u5206\u9694\u7684\u76ee\u5f55\u5217\u8868\uff0c\u5728 Windows \u4e0a\u7528\u5206\u53f7\u5206\u9694\uff09\u3002</li> <li>mypy_path \u914d\u7f6e\u6587\u4ef6\u9009\u9879\u3002</li> <li>\u547d\u4ee4\u884c\u4e0a\u63d0\u4f9b\u7684\u6e90\u6587\u4ef6\u6240\u5728\u7684\u76ee\u5f55\uff08\u53c2\u89c1 \u5c06\u6587\u4ef6\u8def\u5f84\u6620\u5c04\u5230\u6a21\u5757\uff09\u3002</li> <li>\u88ab\u6807\u8bb0\u4e3a\u7c7b\u578b\u68c0\u67e5\u5b89\u5168\u7684\u5df2\u5b89\u88c5\u5305\uff08\u53c2\u89c1 PEP 561 \u652f\u6301\uff09\u3002</li> <li>typeshed \u4ed3\u5e93\u4e2d\u7684\u76f8\u5173\u76ee\u5f55\u3002</li> </ul> <p>Note</p> <p>\u4f60\u4e0d\u80fd\u901a\u8fc7 <code>MYPYPATH</code> \u6307\u5411\u4e00\u4e2a\u4ec5\u5305\u542b\u5b58\u6839\u7684\u5305 (561)\uff0c\u5b83\u5fc5\u987b\u5df2\u5b89\u88c5\uff08\u53c2\u89c1 PEP 561 \u652f\u6301\uff09\u3002</p> <p>\u5176\u6b21\uff0cmypy \u9664\u4e86\u5e38\u89c4\u7684 Python \u6587\u4ef6\u548c\u5305\uff0c\u8fd8\u4f1a\u641c\u7d22\u5b58\u6839\u6587\u4ef6\u3002\u641c\u7d22\u6a21\u5757 <code>foo</code> \u7684\u89c4\u5219\u5982\u4e0b\uff1a</p> <ul> <li>\u641c\u7d22\u4f1a\u5728\u641c\u7d22\u8def\u5f84\u4e2d\u7684\u6bcf\u4e2a\u76ee\u5f55\u4e2d\u8fdb\u884c\uff0c\u76f4\u5230\u627e\u5230\u5339\u914d\u9879\u3002</li> <li>\u5982\u679c\u627e\u5230\u540d\u4e3a <code>foo</code> \u7684\u5305\uff08\u5373\u5305\u542b <code>__init__.py</code> \u6216 <code>__init__.pyi</code> \u6587\u4ef6\u7684\u76ee\u5f55 <code>foo</code>\uff09\uff0c\u8fd9\u5c31\u662f\u5339\u914d\u9879\u3002</li> <li>\u5982\u679c\u627e\u5230\u540d\u4e3a <code>foo.pyi</code> \u7684\u5b58\u6839\u6587\u4ef6\uff0c\u8fd9\u4e5f\u662f\u5339\u914d\u9879\u3002</li> <li>\u5982\u679c\u627e\u5230\u540d\u4e3a <code>foo.py</code> \u7684 Python \u6a21\u5757\uff0c\u8fd9\u4e5f\u662f\u5339\u914d\u9879\u3002</li> </ul> <p>\u8fd9\u4e9b\u5339\u914d\u9879\u4f1a\u6309\u987a\u5e8f\u5c1d\u8bd5\uff0c\u56e0\u6b64\u5982\u679c\u5728\u641c\u7d22\u8def\u5f84\u4e2d\u7684\u540c\u4e00\u76ee\u5f55\u4e2d\u627e\u5230\u591a\u4e2a\u5339\u914d\u9879\uff08\u4f8b\u5982\u4e00\u4e2a\u5305\u548c\u4e00\u4e2a Python \u6587\u4ef6\uff0c\u6216\u4e00\u4e2a\u5b58\u6839\u6587\u4ef6\u548c\u4e00\u4e2a Python \u6587\u4ef6\uff09\uff0c\u5219\u4e0a\u8ff0\u5217\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5339\u914d\u9879\u4f18\u5148\u3002</p> <p>\u7279\u522b\u5730\uff0c\u5982\u679c\u540c\u4e00\u76ee\u5f55\u4e2d\u65e2\u6709 Python \u6587\u4ef6\u53c8\u6709\u5b58\u6839\u6587\u4ef6\uff0c\u5219\u53ea\u4f7f\u7528\u5b58\u6839\u6587\u4ef6\u3002\uff08\u4e0d\u8fc7\uff0c\u5982\u679c\u8fd9\u4e9b\u6587\u4ef6\u5728\u4e0d\u540c\u7684\u76ee\u5f55\u4e2d\uff0c\u5219\u4f7f\u7528\u5728\u8f83\u65e9\u76ee\u5f55\u4e2d\u627e\u5230\u7684\u6587\u4ef6\u3002\uff09</p> <p>\u8bbe\u7f6e mypy_path/<code>MYPYPATH</code> \u5728\u4f60\u5e0c\u671b\u5c1d\u8bd5\u8fd0\u884c mypy \u5bf9\u591a\u4e2a\u4e0d\u540c\u7684\u6587\u4ef6\u96c6\u8fdb\u884c\u68c0\u67e5\uff0c\u800c\u8fd9\u4e9b\u6587\u4ef6\u96c6\u6070\u597d\u5171\u4eab\u4e00\u4e9b\u516c\u5171\u4f9d\u8d56\u9879\u7684\u60c5\u51b5\u4e0b\u7279\u522b\u6709\u7528\u3002</p> <p>\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u6709\u591a\u4e2a\u9879\u76ee\u6070\u597d\u4f7f\u7528\u76f8\u540c\u7684\u4e00\u7ec4\u6b63\u5728\u5f00\u53d1\u4e2d\u7684\u5b58\u6839\uff0c\u65b9\u4fbf\u7684\u505a\u6cd5\u53ef\u80fd\u662f\u8ba9\u4f60\u7684 <code>MYPYPATH</code> \u6307\u5411\u5305\u542b\u8fd9\u4e9b\u5b58\u6839\u7684\u5355\u4e00\u76ee\u5f55\u3002</p> <p>When mypy encounters an <code>import</code> statement or receives module names from the command line via the --module or --package flags, mypy tries to find the module on the file system similar to the way Python finds it. However, there are some differences.</p> <p>First, mypy has its own search path. This is computed from the following items:</p> <ul> <li>The <code>MYPYPATH</code> environment variable (a list of directories, colon-separated on UNIX systems, semicolon-separated on Windows).</li> <li>The mypy_path config file option.</li> <li>The directories containing the sources given on the command line (see Mapping file paths to modules).</li> <li>The installed packages marked as safe for type checking (see PEP 561 support)</li> <li>The relevant directories of the typeshed repo.</li> </ul> <p>Note</p> <p>You cannot point to a stub-only package (561) via the <code>MYPYPATH</code>, it must be installed (see PEP 561 support)</p> <p>Second, mypy searches for stub files in addition to regular Python files and packages. The rules for searching for a module <code>foo</code> are as follows:</p> <ul> <li>The search looks in each of the directories in the search path (see above) until a match is found.</li> <li>If a package named <code>foo</code> is found (i.e. a directory <code>foo</code> containing an <code>__init__.py</code> or <code>__init__.pyi</code> file) that's a match.</li> <li>If a stub file named <code>foo.pyi</code> is found, that's a match.</li> <li>If a Python module named <code>foo.py</code> is found, that's a match.</li> </ul> <p>These matches are tried in order, so that if multiple matches are found in the same directory on the search path (e.g. a package and a Python file, or a stub file and a Python file) the first one in the above list wins.</p> <p>In particular, if a Python file and a stub file are both present in the same directory on the search path, only the stub file is used. (However, if the files are in different directories, the one found in the earlier directory is used.)</p> <p>Setting mypy_path/<code>MYPYPATH</code> is mostly useful in the case where you want to try running mypy against multiple distinct sets of files that happen to share some common dependencies.</p> <p>For example, if you have multiple projects that happen to be using the same set of work-in-progress stubs, it could be convenient to just have your <code>MYPYPATH</code> point to a single directory containing the stubs.</p>"},{"location":"mypy_conf/running_mypy/#\u8ddf\u968f\u5bfc\u5165","title":"\u8ddf\u968f\u5bfc\u5165","text":"<p>Following imports</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u8bbe\u8ba1\u4e3a\u575a\u5b9a\u5730\u8ddf\u968f\u6240\u6709\u5bfc\u5165\uff0c\u5373\u4f7f\u5bfc\u5165\u7684\u6a21\u5757\u4e0d\u662f\u4f60\u660e\u786e\u5e0c\u671b mypy \u68c0\u67e5\u7684\u6587\u4ef6\u3002</p> <p>\u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u6709\u4e24\u4e2a\u6a21\u5757 <code>mycode.foo</code> \u548c <code>mycode.bar</code>\uff1a\u524d\u8005\u6709\u7c7b\u578b\u63d0\u793a\uff0c\u800c\u540e\u8005\u6ca1\u6709\u3002\u6211\u4eec\u8fd0\u884c mypy -m mycode.foo\uff0cmypy \u53d1\u73b0 <code>mycode.foo</code> \u5bfc\u5165\u4e86 <code>mycode.bar</code>\u3002</p> <p>\u6211\u4eec\u5e0c\u671b mypy \u5982\u4f55\u68c0\u67e5 <code>mycode.bar</code> \u5462\uff1fmypy \u5728\u8fd9\u91cc\u7684\u884c\u4e3a\u662f\u53ef\u914d\u7f6e\u7684\u2014\u2014\u5c3d\u7ba1\u6211\u4eec \u5f3a\u70c8\u63a8\u8350 \u4f7f\u7528\u9ed8\u8ba4\u8bbe\u7f6e\u2014\u2014\u901a\u8fc7 --follow-imports \u6807\u5fd7\u3002\u8fd9\u4e2a\u6807\u5fd7\u63a5\u53d7\u4ee5\u4e0b\u56db\u79cd\u5b57\u7b26\u4e32\u503c\u4e4b\u4e00\uff1a</p> <ul> <li> <p><code>normal</code>\uff08\u9ed8\u8ba4\u63a8\u8350\uff09\u4f1a\u6b63\u5e38\u8ddf\u968f\u6240\u6709\u5bfc\u5165\u5e76\u7c7b\u578b\u68c0\u67e5\u6240\u6709\u9876\u7ea7\u4ee3\u7801\uff08\u4ee5\u53ca\u6240\u6709\u51fd\u6570\u548c\u65b9\u6cd5\u4e2d\u5177\u6709\u81f3\u5c11\u4e00\u4e2a\u7c7b\u578b\u6ce8\u89e3\u7684\u4ee3\u7801\u4f53\uff09\u3002</p> </li> <li> <p><code>silent</code> \u7684\u884c\u4e3a\u4e0e <code>normal</code> \u76f8\u540c\uff0c\u4f46\u4f1a\u989d\u5916 \u6291\u5236 \u4efb\u4f55\u9519\u8bef\u6d88\u606f\u3002</p> </li> <li> <p><code>skip</code> \u5c06 \u4e0d \u8ddf\u968f\u5bfc\u5165\uff0c\u800c\u662f\u9759\u9ed8\u5730\u7528\u7c7b\u578b <code>Any</code> \u66ff\u6362\u6a21\u5757\uff08\u4ee5\u53ca \u4ece\u4e2d\u5bfc\u5165\u7684\u4efb\u4f55\u4e1c\u897f\uff09\u3002</p> </li> <li> <p><code>error</code> \u7684\u884c\u4e3a\u4e0e <code>skip</code> \u76f8\u540c\uff0c\u4f46\u4e0d\u5b8c\u5168\u662f\u9759\u9ed8\u7684\u2014\u2014\u5b83\u4f1a\u5c06\u5bfc\u5165\u6807\u8bb0\u4e3a\u9519\u8bef\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>main.py:1: note: Import of \"mycode.bar\" ignored\nmain.py:1: note: (Using --follow-imports=error, module not passed on command line)\n</code></pre> </li> </ul> <p>\u5982\u679c\u4f60\u6b63\u5728\u5f00\u59cb\u4e00\u4e2a\u65b0\u7684\u4ee3\u7801\u5e93\u5e76\u8ba1\u5212\u4ece\u4e00\u5f00\u59cb\u5c31\u4f7f\u7528\u7c7b\u578b\u63d0\u793a\uff0c\u6211\u4eec\u5efa\u8bae\u4f60\u4f7f\u7528 --follow-imports\uff08\u9ed8\u8ba4\uff09\u6216 --follow-imports=error\u3002\u8fd9\u4e24\u79cd\u9009\u9879\u90fd\u53ef\u4ee5\u5e2e\u52a9\u786e\u4fdd\u4f60\u4e0d\u4f1a\u610f\u5916\u5730\u8df3\u8fc7\u4ee3\u7801\u5e93\u7684\u4efb\u4f55\u90e8\u5206\u3002</p> <p>\u5982\u679c\u4f60\u8ba1\u5212\u5c06\u7c7b\u578b\u63d0\u793a\u6dfb\u52a0\u5230\u4e00\u4e2a\u5927\u578b\u7684\u73b0\u6709\u4ee3\u7801\u5e93\uff0c\u6211\u4eec\u5efa\u8bae\u4f60\u9996\u5148\u5c1d\u8bd5\u4f7f\u6574\u4e2a\u4ee3\u7801\u5e93\uff08\u5305\u62ec\u4e0d\u4f7f\u7528\u7c7b\u578b\u63d0\u793a\u7684\u6587\u4ef6\uff09\u5728 follow-imports=normal \u4e0b\u901a\u8fc7\u68c0\u67e5\u3002\u8fd9\u901a\u5e38\u4e0d\u96be\u505a\u5230\uff1amypy \u8bbe\u8ba1\u4e3a\u5728\u67e5\u770b\u672a\u6ce8\u89e3\u4ee3\u7801\u65f6\u62a5\u544a\u5c3d\u53ef\u80fd\u5c11\u7684\u9519\u8bef\u6d88\u606f\u3002</p> <p>\u53ea\u6709\u5728\u8fd9\u6837\u505a\u4e0d\u53ef\u884c\u65f6\uff0c\u6211\u4eec\u5efa\u8bae\u4f60\u4ec5\u4f20\u9012\u4f60\u5e0c\u671b\u7c7b\u578b\u68c0\u67e5\u7684\u6587\u4ef6\uff0c\u5e76\u4f7f\u7528 follow-imports=silent\u3002\u5373\u4f7f mypy \u65e0\u6cd5\u5b8c\u7f8e\u5730\u68c0\u67e5\u4e00\u4e2a\u6587\u4ef6\uff0c\u5b83\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7\u89e3\u6790\u6587\u4ef6\u83b7\u5f97\u4e00\u4e9b\u6709\u7528\u7684\u4fe1\u606f\uff08\u4f8b\u5982\uff0c\u4e86\u89e3\u4e00\u4e2a\u7ed9\u5b9a\u5bf9\u8c61\u5177\u6709\u54ea\u4e9b\u65b9\u6cd5\uff09\u3002\u6709\u5173\u66f4\u591a\u5efa\u8bae\uff0c\u8bf7\u53c2\u89c1 \u73b0\u6709\u4ee3\u7801\u3002</p> <p>\u9664\u975e\u4f60\u77e5\u9053\u81ea\u5df1\u5728\u505a\u4ec0\u4e48\uff0c\u5426\u5219\u6211\u4eec\u4e0d\u63a8\u8350\u4f7f\u7528 <code>skip</code>\uff1a\u867d\u7136\u8fd9\u4e2a\u9009\u9879\u53ef\u80fd\u975e\u5e38\u5f3a\u5927\uff0c\u4f46\u4e5f\u53ef\u80fd\u5bfc\u81f4\u8bb8\u591a\u96be\u4ee5\u8c03\u8bd5\u7684\u9519\u8bef\u3002</p> <p>\u8c03\u6574\u5bfc\u5165\u8ddf\u968f\u884c\u4e3a\u901a\u5e38\u5728\u9650\u5236\u4e8e\u7279\u5b9a\u6a21\u5757\u65f6\u6700\u6709\u7528\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u6bcf\u4e2a\u6a21\u5757\u7684 follow_imports \u914d\u7f6e\u9009\u9879\u6765\u5b9e\u73b0\u3002</p> <p>Mypy is designed to doggedly follow all imports, even if the imported module is not a file you explicitly wanted mypy to check.</p> <p>For example, suppose we have two modules <code>mycode.foo</code> and <code>mycode.bar</code>: the former has type hints and the latter does not. We run mypy -m mycode.foo and mypy discovers that <code>mycode.foo</code> imports <code>mycode.bar</code>.</p> <p>How do we want mypy to type check <code>mycode.bar</code>? Mypy's behaviour here is configurable -- although we strongly recommend using the default -- by using the --follow-imports flag. This flag accepts one of four string values:</p> <ul> <li> <p><code>normal</code> (the default, recommended) follows all imports normally and type checks all top level code (as well as the bodies of all functions and methods with at least one type annotation in the signature).</p> </li> <li> <p><code>silent</code> behaves in the same way as <code>normal</code> but will additionally suppress any error messages.</p> </li> <li> <p><code>skip</code> will not follow imports and instead will silently replace the module (and anything imported from it) with an object of type <code>Any</code>.</p> </li> <li> <p><code>error</code> behaves in the same way as <code>skip</code> but is not quite as silent -- it will flag the import as an error, like this</p> <pre><code>main.py:1: note: Import of \"mycode.bar\" ignored\nmain.py:1: note: (Using --follow-imports=error, module not passed on command line)\n</code></pre> </li> </ul> <p>If you are starting a new codebase and plan on using type hints from the start, we recommend you use either --follow-imports (the default) or --follow-imports=error. Either option will help make sure you are not skipping checking any part of your codebase by accident.</p> <p>If you are planning on adding type hints to a large, existing code base, we recommend you start by trying to make your entire codebase (including files that do not use type hints) pass under follow-imports=normal. This is usually not too difficult to do: mypy is designed to report as few error messages as possible when it is looking at unannotated code.</p> <p>Only if doing this is intractable, we recommend passing mypy just the files you want to type check and use follow-imports=silent. Even if mypy is unable to perfectly type check a file, it can still glean some useful information by parsing it (for example, understanding what methods a given object has). See existing-code for more recommendations.</p> <p>We do not recommend using <code>skip</code> unless you know what you are doing: while this option can be quite powerful, it can also cause many hard-to-debug errors.</p> <p>Adjusting import following behaviour is often most useful when restricted to specific modules. This can be accomplished by setting a per-module follow_imports config option.</p>"},{"location":"mypy_conf/stubgen/","title":"\u81ea\u52a8\u751f\u6210\u5b58\u6839 (stubgen)","text":"<p>Automatic stub generation (stubgen)</p> \u4e2d\u6587\u82f1\u6587 <p>\u5b58\u6839\u6587\u4ef6\uff08\u53c2\u89c1 PEP 484\uff09\u4ec5\u5305\u542b\u6a21\u5757\u516c\u5171\u63a5\u53e3\u7684\u7c7b\u578b\u63d0\u793a\uff0c\u5e76\u4e14\u51fd\u6570\u4f53\u4e3a\u7a7a\u3002Mypy \u53ef\u4ee5\u4f7f\u7528\u5b58\u6839\u6587\u4ef6\u4ee3\u66ff\u771f\u5b9e\u5b9e\u73b0\u6765\u63d0\u4f9b\u6a21\u5757\u7684\u7c7b\u578b\u4fe1\u606f\u3002\u8fd9\u4e9b\u6587\u4ef6\u5bf9\u4e8e\u90a3\u4e9b\u5c1a\u672a\u6dfb\u52a0\u7c7b\u578b\u63d0\u793a\u7684\u7b2c\u4e09\u65b9\u6a21\u5757\uff08\u4e14\u5728 typeshed \u4e2d\u6ca1\u6709\u53ef\u7528\u7684\u5b58\u6839\uff09\u4ee5\u53ca C \u6269\u5c55\u6a21\u5757\uff08mypy \u4e0d\u80fd\u76f4\u63a5\u5904\u7406\uff09\u975e\u5e38\u6709\u7528\u3002</p> <p>Mypy \u5305\u542b\u4e86 <code>stubgen</code> \u5de5\u5177\uff0c\u53ef\u4ee5\u81ea\u52a8\u751f\u6210 Python \u6a21\u5757\u548c C \u6269\u5c55\u6a21\u5757\u7684\u5b58\u6839\u6587\u4ef6\uff08<code>.pyi</code> \u6587\u4ef6\uff09\u3002\u4f8b\u5982\uff0c\u8003\u8651\u4ee5\u4e0b\u6e90\u6587\u4ef6\uff1a</p> <pre><code>from other_module import dynamic\n\nBORDER_WIDTH = 15\n\nclass Window:\n    parent = dynamic()\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\ndef create_empty() -&gt; Window:\n    return Window(0, 0)\n</code></pre> <p><code>stubgen</code> \u53ef\u4ee5\u57fa\u4e8e\u4e0a\u8ff0\u6587\u4ef6\u751f\u6210\u4ee5\u4e0b\u5b58\u6839\u6587\u4ef6\uff1a</p> <pre><code>from typing import Any\n\nBORDER_WIDTH: int = ...\n\nclass Window:\n    parent: Any = ...\n    width: Any = ...\n    height: Any = ...\n    def __init__(self, width, height) -&gt; None: ...\n\ndef create_empty() -&gt; Window: ...\n</code></pre> <p><code>stubgen</code> \u751f\u6210\u7684\u662f \u8349\u7a3f \u5b58\u6839\u3002\u81ea\u52a8\u751f\u6210\u7684\u5b58\u6839\u6587\u4ef6\u901a\u5e38\u9700\u8981\u4e00\u4e9b\u624b\u52a8\u66f4\u65b0\uff0c\u5927\u591a\u6570\u7c7b\u578b\u4f1a\u9ed8\u8ba4\u8bbe\u7f6e\u4e3a <code>Any</code>\u3002\u5982\u679c\u4f60\u4e3a\u6700\u5e38\u7528\u7684\u529f\u80fd\u6dfb\u52a0\u66f4\u7cbe\u786e\u7684\u7c7b\u578b\u6ce8\u91ca\uff0c\u5b58\u6839\u4f1a\u66f4\u6709\u7528\u3002</p> <p>\u672c\u8282\u7684\u5176\u4f59\u90e8\u5206\u4ecb\u7ecd\u4e86 <code>stubgen</code> \u7684\u547d\u4ee4\u884c\u63a5\u53e3\u3002\u8fd0\u884c stubgen --help \u53ef\u4ee5\u5feb\u901f\u67e5\u770b\u9009\u9879\u6982\u8ff0\u3002</p> <p>Note</p> <p>\u547d\u4ee4\u884c\u6807\u5fd7\u53ef\u80fd\u4f1a\u5728\u7248\u672c\u4e4b\u95f4\u53d1\u751f\u53d8\u5316\u3002</p> <p>A stub file (see PEP 484) contains only type hints for the public interface of a module, with empty function bodies. Mypy can use a stub file instead of the real implementation to provide type information for the module. They are useful for third-party modules whose authors have not yet added type hints (and when no stubs are available in typeshed) and C extension modules (which mypy can't directly process).</p> <p>Mypy includes the <code>stubgen</code> tool that can automatically generate stub files (<code>.pyi</code> files) for Python modules and C extension modules. For example, consider this source file:</p> <pre><code>from other_module import dynamic\n\nBORDER_WIDTH = 15\n\nclass Window:\n    parent = dynamic()\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\ndef create_empty() -&gt; Window:\n    return Window(0, 0)\n</code></pre> <p>Stubgen can generate this stub file based on the above file:</p> <pre><code>from typing import Any\n\nBORDER_WIDTH: int = ...\n\nclass Window:\n    parent: Any = ...\n    width: Any = ...\n    height: Any = ...\n    def __init__(self, width, height) -&gt; None: ...\n\ndef create_empty() -&gt; Window: ...\n</code></pre> <p>Stubgen generates draft stubs. The auto-generated stub files often require some manual updates, and most types will default to <code>Any</code>. The stubs will be much more useful if you add more precise type annotations, at least for the most commonly used functionality.</p> <p>The rest of this section documents the command line interface of stubgen. Run stubgen --help for a quick summary of options.</p> <p>Note</p> <p>The command-line flags may change between releases.</p>"},{"location":"mypy_conf/stubgen/#\u6307\u5b9a\u8981\u751f\u6210\u5b58\u6839\u7684\u5185\u5bb9","title":"\u6307\u5b9a\u8981\u751f\u6210\u5b58\u6839\u7684\u5185\u5bb9","text":"<p>Specifying what to stub</p> \u4e2d\u6587\u82f1\u6587 <p>\u4f60\u53ef\u4ee5\u5c06 <code>stubgen</code> \u6307\u5b9a\u8981\u751f\u6210\u5b58\u6839\u7684\u6e90\u6587\u4ef6\u8def\u5f84\uff1a</p> <pre><code>$ stubgen foo.py bar.py\n</code></pre> <p>\u8fd9\u4f1a\u751f\u6210\u5b58\u6839\u6587\u4ef6 <code>out/foo.pyi</code> \u548c <code>out/bar.pyi</code>\u3002\u9ed8\u8ba4\u7684\u8f93\u51fa\u76ee\u5f55\u662f <code>out</code>\uff0c\u53ef\u4ee5\u901a\u8fc7 -o DIR \u9009\u9879\u8986\u76d6\u3002</p> <p>\u4f60\u4e5f\u53ef\u4ee5\u4f20\u9012\u76ee\u5f55\uff0c<code>stubgen</code> \u4f1a\u9012\u5f52\u5730\u641c\u7d22\u76ee\u5f55\u4e2d\u7684\u6240\u6709 <code>.py</code> \u6587\u4ef6\uff0c\u5e76\u4e3a\u5b83\u4eec\u751f\u6210\u5b58\u6839\uff1a</p> <pre><code>$ stubgen my_pkg_dir\n</code></pre> <p>\u53e6\u5916\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 -m \u6216 -p \u9009\u9879\u6307\u5b9a\u6a21\u5757\u6216\u5305\u540d\uff1a</p> <pre><code>$ stubgen -m foo -m bar -p my_pkg_dir\n</code></pre> <p>\u9009\u9879\u7684\u8be6\u7ec6\u8bf4\u660e\uff1a</p> <code>-m MODULE, --module MODULE</code> <p>\u4e3a\u6307\u5b9a\u7684\u6a21\u5757\u751f\u6210\u5b58\u6839\u6587\u4ef6\u3002\u6b64\u6807\u5fd7\u53ef\u4ee5\u91cd\u590d\u591a\u6b21\u4f7f\u7528\u3002</p> <p><code>stubgen</code> \u4e0d\u4f1a \u9012\u5f52\u5730\u4e3a\u6240\u63d0\u4f9b\u6a21\u5757\u7684\u4efb\u4f55\u5b50\u6a21\u5757\u751f\u6210\u5b58\u6839\u3002</p> <code>-p PACKAGE, --package PACKAGE</code> <p>\u4e3a\u6307\u5b9a\u7684\u5305\u751f\u6210\u5b58\u6839\u3002\u6b64\u6807\u5fd7\u53ef\u4ee5\u91cd\u590d\u591a\u6b21\u4f7f\u7528\u3002</p> <p><code>stubgen</code> \u4f1a \u9012\u5f52\u5730\u4e3a\u6240\u63d0\u4f9b\u5305\u7684\u6240\u6709\u5b50\u6a21\u5757\u751f\u6210\u5b58\u6839\u3002\u9664\u4e86\u8fd9\u4e2a\u884c\u4e3a\uff0c<code>-p</code> \u9009\u9879\u4e0e --module \u9009\u9879\u662f\u76f8\u540c\u7684\u3002</p> <p>Note</p> <p>\u4f60\u4e0d\u80fd\u5728\u540c\u4e00 <code>stubgen</code> \u8c03\u7528\u4e2d\u6df7\u5408\u4f7f\u7528\u8def\u5f84\u548c -m/-p \u9009\u9879\u3002</p> <p><code>stubgen</code> \u4f7f\u7528\u542f\u53d1\u5f0f\u65b9\u6cd5\u6765\u907f\u514d\u4e3a\u5305\u542b\u6d4b\u8bd5\u6216\u4f9b\u5e94\u5546\u63d0\u4f9b\u7684\u7b2c\u4e09\u65b9\u5305\u7684\u5b50\u6a21\u5757\u751f\u6210\u5b58\u6839\u3002</p> <p>You can give stubgen paths of the source files for which you want to generate stubs</p> <pre><code>$ stubgen foo.py bar.py\n</code></pre> <p>This generates stubs <code>out/foo.pyi</code> and <code>out/bar.pyi</code>. The default output directory <code>out</code> can be overridden with -o DIR.</p> <p>You can also pass directories, and stubgen will recursively search them for any <code>.py</code> files and generate stubs for all of them</p> <pre><code>$ stubgen my_pkg_dir\n</code></pre> <p>Alternatively, you can give module or package names using the -m or -p options</p> <pre><code>$ stubgen -m foo -m bar -p my_pkg_dir\n</code></pre> <p>Details of the options:</p> <code>-m MODULE, --module MODULE</code> <p>Generate a stub file for the given module. This flag may be repeated multiple times.</p> <p>Stubgen will not recursively generate stubs for any submodules of the provided module.</p> <code>-p PACKAGE, --package PACKAGE</code> <p>Generate stubs for the given package. This flag maybe repeated multiple times.</p> <p>Stubgen will recursively generate stubs for all submodules of the provided package. This flag is identical to --module apart from this behavior.</p> <p>Note</p> <p>You can't mix paths and -m/-p options in the same stubgen invocation.</p> <p>Stubgen applies heuristics to avoid generating stubs for submodules that include tests or vendored third-party packages.</p>"},{"location":"mypy_conf/stubgen/#\u6307\u5b9a\u5982\u4f55\u751f\u6210\u5b58\u6839","title":"\u6307\u5b9a\u5982\u4f55\u751f\u6210\u5b58\u6839","text":"<p>Specifying how to generate stubs</p> \u4e2d\u6587\u82f1\u6587 <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c<code>stubgen</code> \u4f1a\u5c1d\u8bd5\u5bfc\u5165\u76ee\u6807\u6a21\u5757\u548c\u5305\u3002\u8fd9\u4f7f\u5f97 <code>stubgen</code> \u80fd\u591f\u4f7f\u7528\u8fd0\u884c\u65f6\u53cd\u5c04\u6765\u4e3a C \u6269\u5c55\u6a21\u5757\u751f\u6210\u5b58\u6839\uff0c\u5e76\u63d0\u9ad8\u751f\u6210\u7684\u5b58\u6839\u7684\u8d28\u91cf\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c<code>stubgen</code> \u8fd8\u4f1a\u4f7f\u7528 mypy \u5bf9\u4efb\u4f55 Python \u6a21\u5757\u8fdb\u884c\u8f7b\u91cf\u7ea7\u8bed\u4e49\u5206\u6790\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u6807\u5fd7\u6765\u66f4\u6539\u9ed8\u8ba4\u884c\u4e3a\uff1a</p> <code>--no-import</code> <p>\u4e0d\u5c1d\u8bd5\u5bfc\u5165\u6a21\u5757\u3002\u53ea\u4f7f\u7528 mypy \u7684\u6b63\u5e38\u641c\u7d22\u673a\u5236\u6765\u67e5\u627e\u6e90\u6587\u4ef6\u3002\u8fd9\u4e0d\u652f\u6301 C \u6269\u5c55\u6a21\u5757\u3002\u6b64\u6807\u5fd7\u8fd8\u7981\u7528\u8fd0\u884c\u65f6\u53cd\u5c04\u529f\u80fd\uff0cmypy \u4f7f\u7528\u5b83\u6765\u67e5\u627e <code>__all__</code> \u7684\u503c\u3002\u56e0\u6b64\uff0c\u5b58\u6839\u4e2d\u5bfc\u51fa\u7684\u540d\u79f0\u96c6\u53ef\u80fd\u4f1a\u4e0d\u5b8c\u6574\u3002\u8fd9\u4e2a\u6807\u5fd7\u901a\u5e38\u53ea\u6709\u5728\u5bfc\u5165\u6a21\u5757\u4f1a\u5f15\u8d77\u4e0d\u5e0c\u671b\u7684\u526f\u4f5c\u7528\uff08\u4f8b\u5982\uff0c\u8fd0\u884c\u6d4b\u8bd5\uff09\u65f6\u624d\u6709\u7528\u3002\u5373\u4f7f\u6ca1\u6709\u8fd9\u4e2a\u9009\u9879\uff0c<code>stubgen</code> \u4e5f\u4f1a\u5c3d\u91cf\u8df3\u8fc7\u6d4b\u8bd5\u6a21\u5757\uff0c\u4f46\u8fd9\u5e76\u4e0d\u603b\u662f\u6709\u6548\u3002</p> <code>--no-analysis</code> <p>\u4e0d\u5bf9\u6e90\u6587\u4ef6\u6267\u884c\u8bed\u4e49\u5206\u6790\u3002\u8fd9\u53ef\u80fd\u4f1a\u751f\u6210\u66f4\u5dee\u7684\u5b58\u6839\u2014\u2014\u7279\u522b\u662f\uff0c\u4e00\u4e9b\u6a21\u5757\u3001\u7c7b\u548c\u51fd\u6570\u7684\u522b\u540d\u53ef\u80fd\u4f1a\u88ab\u8868\u793a\u4e3a <code>Any</code> \u7c7b\u578b\u7684\u53d8\u91cf\u3002\u8fd9\u4e2a\u9009\u9879\u901a\u5e38\u53ea\u6709\u5728\u8bed\u4e49\u5206\u6790\u5bfc\u81f4\u4e86\u4e25\u91cd\u7684 mypy \u9519\u8bef\u65f6\u624d\u6709\u7528\u3002\u4e0d\u9002\u7528\u4e8e C \u6269\u5c55\u6a21\u5757\u3002\u4e0e --inspect-mode \u4e0d\u517c\u5bb9\u3002</p> <code>--inspect-mode</code> <p>\u5bfc\u5165\u5e76\u68c0\u67e5\u6a21\u5757\uff0c\u800c\u4e0d\u662f\u89e3\u6790\u6e90\u4ee3\u7801\u3002\u8fd9\u662f C \u6a21\u5757\u548c\u4ec5 pyc \u5305\u7684\u9ed8\u8ba4\u884c\u4e3a\u3002\u8fd9\u4e2a\u6807\u5fd7\u5728\u7eaf Python \u6a21\u5757\u4e2d\u5f88\u6709\u7528\uff0c\u7279\u522b\u662f\u5f53\u8fd9\u4e9b\u6a21\u5757\u4f7f\u7528\u52a8\u6001\u751f\u6210\u7684\u6210\u5458\u65f6\uff0c\u8fd9\u4e9b\u6210\u5458\u5728\u9ed8\u8ba4\u7684\u4ee3\u7801\u89e3\u6790\u884c\u4e3a\u4e2d\u53ef\u80fd\u4f1a\u88ab\u5ffd\u7565\u3002\u9690\u5f0f\u5730\u4f7f\u7528 --no-analysis \u56e0\u4e3a\u5206\u6790\u9700\u8981\u6e90\u4ee3\u7801\u3002</p> <code>--doc-dir PATH</code> <p>\u901a\u8fc7\u89e3\u6790 <code>PATH</code> \u4e2d\u7684 <code>.rst</code> \u6587\u6863\u6765\u63a8\u65ad\u66f4\u597d\u7684\u7b7e\u540d\u3002\u8fd9\u53ef\u80fd\u4f1a\u751f\u6210\u66f4\u597d\u7684\u5b58\u6839\uff0c\u4f46\u76ee\u524d\u4ec5\u9002\u7528\u4e8e C \u6269\u5c55\u6a21\u5757\u3002</p> <p>By default stubgen will try to import the target modules and packages. This allows stubgen to use runtime introspection to generate stubs for C extension modules and to improve the quality of the generated stubs. By default, stubgen will also use mypy to perform light-weight semantic analysis of any Python modules. Use the following flags to alter the default behavior:</p> <code>--no-import</code> <p>Don't try to import modules. Instead only use mypy's normal search mechanism to find sources. This does not support C extension modules. This flag also disables runtime introspection functionality, which mypy uses to find the value of <code>__all__</code>. As result the set of exported imported names in stubs may be incomplete. This flag is generally only useful when importing a module causes unwanted side effects, such as the running of tests. Stubgen tries to skip test modules even without this option, but this does not always work.</p> <code>--no-analysis</code> <p>Don't perform semantic analysis of source files. This may generate worse stubs -- in particular, some module, class, and function aliases may be represented as variables with the <code>Any</code> type. This is generally only useful if semantic analysis causes a critical mypy error.  Does not apply to C extension modules.  Incompatible with --inspect-mode.</p> <code>--inspect-mode</code> <p>Import and inspect modules instead of parsing source code. This is the default behavior for C modules and pyc-only packages.  The flag is useful to force inspection for pure Python modules that make use of dynamically generated members that would otherwise be omitted when using the default behavior of code parsing.  Implies --no-analysis as analysis requires source code.</p> <code>--doc-dir PATH</code> <p>Try to infer better signatures by parsing .rst documentation in <code>PATH</code>. This may result in better stubs, but currently it only works for C extension modules.</p>"},{"location":"mypy_conf/stubgen/#\u989d\u5916\u6807\u5fd7","title":"\u989d\u5916\u6807\u5fd7","text":"<p>Additional flags</p> \u4e2d\u6587\u82f1\u6587 <code>-h, --help</code> <p>\u663e\u793a\u5e2e\u52a9\u4fe1\u606f\u5e76\u9000\u51fa\u3002</p> <code>--ignore-errors</code> <p>\u5982\u679c\u5728\u751f\u6210\u5b58\u6839\u65f6\u53d1\u751f\u5f02\u5e38\uff0c\u7ee7\u7eed\u5904\u7406\u5269\u4f59\u7684\u6a21\u5757\uff0c\u800c\u4e0d\u662f\u7acb\u5373\u56e0\u9519\u8bef\u800c\u5931\u8d25\u3002</p> <code>--include-private</code> <p>\u5728\u5b58\u6839\u4e2d\u5305\u542b\u88ab\u8ba4\u4e3a\u662f\u79c1\u6709\u7684\u5b9a\u4e49\uff08\u4f8b\u5982\u5e26\u6709\u5355\u4e2a\u524d\u5bfc\u4e0b\u5212\u7ebf\u4e14\u6ca1\u6709\u540e\u7f00\u4e0b\u5212\u7ebf\u7684\u540d\u79f0\uff0c\u5982 <code>_foo</code>\uff09\u3002</p> <code>--export-less</code> <p>\u4e0d\u5bfc\u51fa\u4ece\u540c\u4e00\u5305\u7684\u5176\u4ed6\u6a21\u5757\u4e2d\u5bfc\u5165\u7684\u6240\u6709\u540d\u79f0\u3002\u4ec5\u5bfc\u51fa\u672a\u5728\u5305\u542b\u5bfc\u5165\u7684\u6a21\u5757\u4e2d\u5f15\u7528\u7684\u5bfc\u5165\u540d\u79f0\u3002</p> <code>--include-docstrings</code> <p>\u5728\u5b58\u6839\u4e2d\u5305\u542b\u6587\u6863\u5b57\u7b26\u4e32\u3002\u8fd9\u5c06\u4e3a Python \u51fd\u6570\u548c\u7c7b\u7684\u5b58\u6839\u4ee5\u53ca C \u6269\u5c55\u51fd\u6570\u7684\u5b58\u6839\u6dfb\u52a0\u6587\u6863\u5b57\u7b26\u4e32\u3002</p> <code>--search-path PATH</code> <p>\u6307\u5b9a\u6a21\u5757\u641c\u7d22\u76ee\u5f55\uff0c\u4ee5\u5192\u53f7\u5206\u9694\uff08\u4ec5\u5728\u4f7f\u7528 --no-import \u65f6\u6709\u6548\uff09\u3002</p> <code>-o PATH, --output PATH</code> <p>\u66f4\u6539\u8f93\u51fa\u76ee\u5f55\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5b58\u6839\u5199\u5165 <code>./out</code> \u76ee\u5f55\u3002\u5982\u679c\u8be5\u76ee\u5f55\u4e0d\u5b58\u5728\uff0c\u5c06\u521b\u5efa\u8be5\u76ee\u5f55\u3002\u8f93\u51fa\u76ee\u5f55\u4e2d\u7684\u73b0\u6709\u5b58\u6839\u5c06\u88ab\u8986\u76d6\uff0c\u4e14\u4e0d\u4f1a\u53d1\u51fa\u8b66\u544a\u3002</p> <code>-v, --verbose</code> <p>\u751f\u6210\u66f4\u8be6\u7ec6\u7684\u8f93\u51fa\u3002</p> <code>-q, --quiet</code> <p>\u751f\u6210\u66f4\u7b80\u6d01\u7684\u8f93\u51fa\u3002</p> <code>-h, --help</code> <p>Show help message and exit.</p> <code>--ignore-errors</code> <p>If an exception was raised during stub generation, continue to process any remaining modules instead of immediately failing with an error.</p> <code>--include-private</code> <p>Include definitions that are considered private in stubs (with names such as <code>_foo</code> with single leading underscore and no trailing underscores).</p> <code>--export-less</code> <p>Don't export all names imported from other modules within the same package. Instead, only export imported names that are not referenced in the module that contains the import.</p> <code>--include-docstrings</code> <p>Include docstrings in stubs. This will add docstrings to Python function and classes stubs and to C extension function stubs.</p> <code>--search-path PATH</code> <p>Specify module search directories, separated by colons (only used if --no-import is given).</p> <code>-o PATH, --output PATH</code> <p>Change the output directory. By default the stubs are written in the <code>./out</code> directory. The output directory will be created if it doesn't exist. Existing stubs in the output directory will be overwritten without warning.</p> <code>-v, --verbose</code> <p>Produce more verbose output.</p> <code>-q, --quiet</code> <p>Produce less verbose output.</p>"},{"location":"mypy_conf/stubtest/","title":"\u81ea\u52a8\u5b58\u6839\u6d4b\u8bd5 (stubtest)","text":"<p>Automatic stub testing (stubtest)</p> \u4e2d\u6587\u82f1\u6587 <p>\u5b58\u6839\u6587\u4ef6\u662f\u5305\u542b\u7c7b\u578b\u6ce8\u91ca\u7684\u6587\u4ef6\u3002\u6709\u5173\u66f4\u591a\u52a8\u673a\u548c\u7ec6\u8282\uff0c\u8bf7\u53c2\u89c1 PEP 484\u3002</p> <p>\u5b58\u6839\u6587\u4ef6\u7684\u4e00\u4e2a\u5e38\u89c1\u95ee\u9898\u662f\uff0c\u5b83\u4eec\u5f80\u5f80\u4e0e\u5b9e\u9645\u5b9e\u73b0\u6709\u6240\u504f\u79bb\u3002Mypy \u5305\u542b\u4e86 <code>stubtest</code> \u5de5\u5177\uff0c\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u81ea\u52a8\u68c0\u67e5\u5b58\u6839\u4e0e\u5b9e\u73b0\u4e4b\u95f4\u7684\u5dee\u5f02\u3002</p> <p>Stub files are files containing type annotations. See PEP 484 for more motivation and details.</p> <p>A common problem with stub files is that they tend to diverge from the actual implementation. Mypy includes the <code>stubtest</code> tool that can automatically check for discrepancies between the stubs and the implementation at runtime.</p>"},{"location":"mypy_conf/stubtest/#stubtest-\u80fd\u505a\u4ec0\u4e48\u548c\u4e0d\u80fd\u505a\u4ec0\u4e48","title":"stubtest \u80fd\u505a\u4ec0\u4e48\u548c\u4e0d\u80fd\u505a\u4ec0\u4e48","text":"<p>What stubtest does and does not do</p> \u4e2d\u6587\u82f1\u6587 <p><code>stubtest</code> \u5c06\u5bfc\u5165\u4f60\u7684\u4ee3\u7801\u5e76\u5728\u8fd0\u884c\u65f6\u901a\u8fc7\u4f7f\u7528 inspect \u6a21\u5757\u7684\u529f\u80fd\u6765\u8fdb\u884c\u5bf9\u8c61\u68c0\u67e5\u3002\u7136\u540e\uff0c<code>stubtest</code> \u5c06\u5206\u6790\u5b58\u6839\u6587\u4ef6\uff0c\u5e76\u5c06\u4e24\u8005\u8fdb\u884c\u6bd4\u8f83\uff0c\u6307\u51fa\u5b58\u6839\u4e0e\u5b9e\u9645\u5b9e\u73b0\u4e4b\u95f4\u7684\u5dee\u5f02\u3002</p> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u79cd\u6bd4\u8f83\u6709\u5176\u5c40\u9650\u6027\u3002<code>stubtest</code> \u4e0d\u4f1a\u5c1d\u8bd5\u9759\u6001\u5206\u6790\u4f60\u7684\u5b9e\u9645\u4ee3\u7801\uff0c\u800c\u4ec5\u4f9d\u8d56\u52a8\u6001\u8fd0\u884c\u65f6\u68c0\u67e5\uff08\u7279\u522b\u662f\u8fd9\u79cd\u65b9\u6cd5\u610f\u5473\u7740 <code>stubtest</code> \u5bf9\u6269\u5c55\u6a21\u5757\u7684\u5de5\u4f5c\u6548\u679c\u826f\u597d\uff09\u3002\u7136\u800c\uff0c\u8fd9\u4e5f\u610f\u5473\u7740 <code>stubtest</code> \u7684\u53ef\u89c1\u6027\u6709\u9650\uff1b\u4f8b\u5982\uff0c\u5b83\u65e0\u6cd5\u5224\u65ad\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u5728\u5b58\u6839\u4e2d\u662f\u5426\u88ab\u51c6\u786e\u5730\u6807\u6ce8\u3002</p> <p>\u4e3a\u4e86\u660e\u786e\uff0c\u4ee5\u4e0b\u662f\u4e00\u4e9b <code>stubtest</code> \u65e0\u6cd5\u505a\u5230\u7684\u4e8b\u60c5\uff1a</p> <ul> <li>\u5bf9\u4f60\u7684\u4ee3\u7801\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5 \u2014 \u4f7f\u7528 <code>mypy</code> \u66ff\u4ee3</li> <li>\u751f\u6210\u5b58\u6839 \u2014 \u4f7f\u7528 <code>stubgen</code> \u6216 <code>pyright --createstub</code> \u66ff\u4ee3</li> <li>\u57fa\u4e8e\u8fd0\u884c\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u6216\u6d4b\u8bd5\u5957\u4ef6\u751f\u6210\u5b58\u6839 \u2014 \u4f7f\u7528 <code>monkeytype</code> \u66ff\u4ee3</li> <li>\u5c06\u5b58\u6839\u5e94\u7528\u5230\u4ee3\u7801\u4e2d\u751f\u6210\u5185\u8054\u7c7b\u578b \u2014 \u4f7f\u7528 <code>retype</code> \u6216 <code>libcst</code> \u66ff\u4ee3</li> </ul> <p>\u603b\u7684\u6765\u8bf4\uff0c<code>stubtest</code> \u975e\u5e38\u9002\u5408\u786e\u4fdd\u5b58\u6839\u4e0e\u5b9e\u73b0\u4e4b\u95f4\u7684\u57fa\u672c\u4e00\u81f4\u6027\u6216\u68c0\u67e5\u5b58\u6839\u7684\u5b8c\u6574\u6027\u3002\u5b83\u88ab\u7528\u6765\u6d4b\u8bd5 Python \u5b98\u65b9\u7684\u5e93\u5b58\u6839\u96c6\u5408 typeshed\u3002</p> <p>\u8b66\u544a</p> <p><code>stubtest</code> \u4f1a\u5bfc\u5165\u5e76\u6267\u884c\u5b83\u68c0\u67e5\u7684\u5305\u4e2d\u7684 Python \u4ee3\u7801\u3002</p> <p>Stubtest will import your code and introspect your code objects at runtime, for example, by using the capabilities of the inspect module. Stubtest will then analyse the stub files, and compare the two, pointing out things that differ between stubs and the implementation at runtime.</p> <p>It's important to be aware of the limitations of this comparison. Stubtest will not make any attempt to statically analyse your actual code and relies only on dynamic runtime introspection (in particular, this approach means stubtest works well with extension modules). However, this means that stubtest has limited visibility; for instance, it cannot tell if a return type of a function is accurately typed in the stubs.</p> <p>For clarity, here are some additional things stubtest can't do:</p> <ul> <li>Type check your code -- use <code>mypy</code> instead</li> <li>Generate stubs -- use <code>stubgen</code> or <code>pyright --createstub</code> instead</li> <li>Generate stubs based on running your application or test suite -- use <code>monkeytype</code> instead</li> <li>Apply stubs to code to produce inline types -- use <code>retype</code> or <code>libcst</code> instead</li> </ul> <p>In summary, stubtest works very well for ensuring basic consistency between stubs and implementation or to check for stub completeness. It's used to test Python's official collection of library stubs, typeshed.</p> <p>Warning</p> <p>stubtest will import and execute Python code from the packages it checks.</p>"},{"location":"mypy_conf/stubtest/#\u793a\u4f8b","title":"\u793a\u4f8b","text":"<p>Example</p> \u4e2d\u6587\u82f1\u6587 <p>\u4ee5\u4e0b\u662f <code>stubtest</code> \u53ef\u4ee5\u505a\u7684\u4e00\u4e2a\u5feb\u901f\u793a\u4f8b\uff1a</p> <pre><code>$ python3 -m pip install mypy\n\n$ cat library.py\nx = \"hello, stubtest\"\n\ndef foo(x=None):\n    print(x)\n\n$ cat library.pyi\nx: int\n\ndef foo(x: int) -&gt; None: ...\n\n$ python3 -m mypy.stubtest library\nerror: library.foo \u4e0e\u8fd0\u884c\u65f6\u4e0d\u4e00\u81f4\uff0c\u8fd0\u884c\u65f6\u53c2\u6570 \"x\" \u6709\u9ed8\u8ba4\u503c\uff0c\u4f46\u5b58\u6839\u4e2d\u7684\u53c2\u6570\u6ca1\u6709\n\u5b58\u6839: \u7b2c 3 \u884c\ndef (x: builtins.int)\n\u8fd0\u884c\u65f6: \u5728\u6587\u4ef6 ~/library.py:3\ndef (x=None)\n\nerror: library.x \u53d8\u91cf\u4e0e\u8fd0\u884c\u65f6\u7c7b\u578b Literal['hello, stubtest'] \u4e0d\u4e00\u81f4\n\u5b58\u6839: \u7b2c 1 \u884c\nbuiltins.int\n\u8fd0\u884c\u65f6:\n'hello, stubtest'\n</code></pre> <p>Here's a quick example of what stubtest can do:</p> <pre><code>$ python3 -m pip install mypy\n\n$ cat library.py\nx = \"hello, stubtest\"\n\ndef foo(x=None):\n    print(x)\n\n$ cat library.pyi\nx: int\n\ndef foo(x: int) -&gt; None: ...\n\n$ python3 -m mypy.stubtest library\nerror: library.foo is inconsistent, runtime argument \"x\" has a default value but stub argument does not\nStub: at line 3\ndef (x: builtins.int)\nRuntime: in file ~/library.py:3\ndef (x=None)\n\nerror: library.x variable differs from runtime type Literal['hello, stubtest']\nStub: at line 1\nbuiltins.int\nRuntime:\n'hello, stubtest'\n</code></pre>"},{"location":"mypy_conf/stubtest/#\u4f7f\u7528\u65b9\u6cd5","title":"\u4f7f\u7528\u65b9\u6cd5","text":"<p>Usage</p> \u4e2d\u6587\u82f1\u6587 <p>\u8fd0\u884c <code>stubtest</code> \u53ef\u4ee5\u7b80\u5355\u5730\u901a\u8fc7 <code>stubtest module_to_check</code> \u6765\u5b8c\u6210\u3002\u8fd0\u884c <code>stubtest --help</code> \u53ef\u4ee5\u83b7\u53d6\u9009\u9879\u7684\u7b80\u8981\u8bf4\u660e\u3002</p> <p><code>stubtest</code> \u9700\u8981\u80fd\u591f\u5bfc\u5165\u8981\u68c0\u67e5\u7684\u4ee3\u7801\uff0c\u56e0\u6b64\u8bf7\u786e\u4fdd <code>mypy</code> \u5df2\u5b89\u88c5\u5728\u4e0e\u8981\u6d4b\u8bd5\u7684\u5e93\u76f8\u540c\u7684\u73af\u5883\u4e2d\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u8bbe\u7f6e <code>PYTHONPATH</code> \u53ef\u4ee5\u5e2e\u52a9 <code>stubtest</code> \u627e\u5230\u8981\u5bfc\u5165\u7684\u4ee3\u7801\u3002</p> <p>\u7c7b\u4f3c\u5730\uff0c<code>stubtest</code> \u4e5f\u9700\u8981\u80fd\u591f\u627e\u5230\u8981\u68c0\u67e5\u7684\u5b58\u6839\u6587\u4ef6\u3002<code>stubtest</code> \u4f1a\u5c0a\u91cd <code>MYPYPATH</code> \u73af\u5883\u53d8\u91cf\u2014\u2014\u5982\u679c\u9047\u5230\u201c\u672a\u80fd\u627e\u5230\u5b58\u6839\u201d\u4e4b\u7c7b\u7684\u9519\u8bef\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u8fd9\u4e2a\u53d8\u91cf\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c<code>stubtest</code> \u9700\u8981 <code>mypy</code> \u80fd\u591f\u5206\u6790\u5b58\u6839\u3002\u5982\u679c <code>mypy</code> \u65e0\u6cd5\u5206\u6790\u5b58\u6839\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u201c\u7531\u4e8e mypy \u6784\u5efa\u9519\u8bef\u672a\u68c0\u67e5\u5b58\u6839\u201d\u4e4b\u7c7b\u7684\u9519\u8bef\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u9700\u8981\u89e3\u51b3\u8fd9\u4e9b\u9519\u8bef\u624d\u80fd\u8fd0\u884c <code>stubtest</code>\u3002\u5c3d\u7ba1\u8fd9\u91cc\u53ef\u80fd\u5b58\u5728\u9519\u8bef\u7684\u91cd\u53e0\uff0c\u4f46 <code>stubtest</code> \u5e76\u4e0d\u6253\u7b97\u66ff\u4ee3\u76f4\u63a5\u8fd0\u884c <code>mypy</code>\u3002</p> <p>\u5982\u679c\u5e0c\u671b\u5ffd\u7565\u4e00\u4e9b <code>stubtest</code> \u7684\u8b66\u544a\uff0c<code>stubtest</code> \u652f\u6301\u4e00\u4e2a\u76f8\u5f53\u6709\u7528\u7684\u5141\u8bb8\u5217\u8868\u7cfb\u7edf\u3002</p> <p>\u672c\u8282\u5176\u4f59\u90e8\u5206\u63cf\u8ff0\u4e86 <code>stubtest</code> \u7684\u547d\u4ee4\u884c\u63a5\u53e3\u3002</p> <code>--concise</code> <p>\u4f7f <code>stubtest</code> \u7684\u8f93\u51fa\u66f4\u7b80\u6d01\uff0c\u6bcf\u4e2a\u9519\u8bef\u4e00\u884c</p> <code>--ignore-missing-stub</code> <p>\u5ffd\u7565\u5b58\u6839\u7f3a\u5c11\u8fd0\u884c\u65f6\u5b58\u5728\u7684\u5185\u5bb9\u7684\u9519\u8bef</p> <code>--ignore-positional-only</code> <p>\u5ffd\u7565\u53c2\u6570\u662f\u5426\u5e94\u4e3a\u4f4d\u7f6e\u53c2\u6570\u7684\u9519\u8bef</p> <code>--allowlist FILE</code> <p>\u4f7f\u7528\u6587\u4ef6\u4f5c\u4e3a\u5141\u8bb8\u5217\u8868\u3002\u53ef\u4ee5\u591a\u6b21\u4f20\u9012\u4ee5\u7ec4\u5408\u591a\u4e2a\u5141\u8bb8\u5217\u8868\u3002\u5141\u8bb8\u5217\u8868\u53ef\u4ee5\u4f7f\u7528 <code>--generate-allowlist</code> \u521b\u5efa\u3002\u5141\u8bb8\u5217\u8868\u652f\u6301\u6b63\u5219\u8868\u8fbe\u5f0f\u3002</p> <p>\u5141\u8bb8\u5217\u8868\u4e2d\u7684\u6761\u76ee\u8868\u793a <code>stubtest</code> \u4e0d\u4f1a\u5bf9\u5bf9\u5e94\u7684\u5b9a\u4e49\u751f\u6210\u4efb\u4f55\u9519\u8bef\u3002</p> <code>--generate-allowlist</code> <p>\u6253\u5370\u5141\u8bb8\u5217\u8868\uff08\u5230\u6807\u51c6\u8f93\u51fa\uff09\uff0c\u4ee5\u4fbf\u4e0e <code>--allowlist</code> \u4e00\u8d77\u4f7f\u7528</p> <p>\u5f53\u5c06 <code>stubtest</code> \u5f15\u5165\u73b0\u6709\u9879\u76ee\u65f6\uff0c\u8fd9\u662f\u6d88\u9664\u6240\u6709\u73b0\u6709\u9519\u8bef\u7684\u7b80\u5355\u65b9\u6cd5\u3002</p> <code>--ignore-unused-allowlist</code> <p>\u5ffd\u7565\u672a\u4f7f\u7528\u7684\u5141\u8bb8\u5217\u8868\u6761\u76ee</p> <p>\u542f\u7528\u6b64\u9009\u9879\u4e4b\u524d\u7684\u9ed8\u8ba4\u884c\u4e3a\u662f\u5982\u679c\u5141\u8bb8\u5217\u8868\u6761\u76ee\u5bf9 <code>stubtest</code> \u6210\u529f\u901a\u8fc7\u6ca1\u6709\u5fc5\u8981\uff0c<code>stubtest</code> \u4f1a\u53d1\u51fa\u8b66\u544a\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u5141\u8bb8\u5217\u8868\u6761\u76ee\u662f\u5339\u914d\u7a7a\u5b57\u7b26\u4e32\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c<code>stubtest</code> \u5c06\u6c38\u8fdc\u4e0d\u4f1a\u5c06\u5176\u89c6\u4e3a\u672a\u4f7f\u7528\u3002\u4f8b\u5982\uff0c\u8981\u4e3a\u5355\u4e2a\u5141\u8bb8\u5217\u8868\u6761\u76ee\u5982 <code>foo.bar</code> \u83b7\u53d6 <code>--ignore-unused-allowlist</code> \u884c\u4e3a\uff0c\u53ef\u4ee5\u6dfb\u52a0\u5141\u8bb8\u5217\u8868\u6761\u76ee <code>(foo\\.bar)?</code>\u3002\u8fd9\u5728\u9519\u8bef\u4ec5\u5728\u7279\u5b9a\u5e73\u53f0\u4e0a\u51fa\u73b0\u65f6\u53ef\u80fd\u4f1a\u5f88\u6709\u7528\u3002</p> <code>--mypy-config-file FILE</code> <p>\u4f7f\u7528\u6307\u5b9a\u7684 mypy \u914d\u7f6e\u6587\u4ef6\u6765\u786e\u5b9a mypy \u63d2\u4ef6\u548c mypy \u8def\u5f84</p> <code>--custom-typeshed-dir DIR</code> <p>\u4f7f\u7528 DIR \u4e2d\u7684\u81ea\u5b9a\u4e49 typeshed</p> <code>--check-typeshed</code> <p>\u68c0\u67e5 typeshed \u4e2d\u7684\u6240\u6709\u6807\u51c6\u5e93\u6a21\u5757</p> <code>--help</code> <p>\u663e\u793a\u5e2e\u52a9\u4fe1\u606f :-)</p> <p>Running stubtest can be as simple as <code>stubtest module_to_check</code>. Run stubtest --help for a quick summary of options.</p> <p>Stubtest must be able to import the code to be checked, so make sure that mypy is installed in the same environment as the library to be tested. In some cases, setting <code>PYTHONPATH</code> can help stubtest find the code to import.</p> <p>Similarly, stubtest must be able to find the stubs to be checked. Stubtest respects the <code>MYPYPATH</code> environment variable -- consider using this if you receive a complaint along the lines of \"failed to find stubs\".</p> <p>Note that stubtest requires mypy to be able to analyse stubs. If mypy is unable to analyse stubs, you may get an error on the lines of \"not checking stubs due to mypy build errors\". In this case, you will need to mitigate those errors before stubtest will run. Despite potential overlap in errors here, stubtest is not intended as a substitute for running mypy directly.</p> <p>If you wish to ignore some of stubtest's complaints, stubtest supports a pretty handy allowlist system.</p> <p>The rest of this section documents the command line interface of stubtest.</p> <code>--concise</code> <p>Makes stubtest's output more concise, one line per error</p> <code>--ignore-missing-stub</code> <p>Ignore errors for stub missing things that are present at runtime</p> <code>--ignore-positional-only</code> <p>Ignore errors for whether an argument should or shouldn't be positional-only</p> <code>--allowlist FILE</code> <p>Use file as an allowlist. Can be passed multiple times to combine multiple allowlists. Allowlists can be created with --generate-allowlist. Allowlists support regular expressions.</p> <p>The presence of an entry in the allowlist means stubtest will not generate any errors for the corresponding definition.</p> <code>--generate-allowlist</code> <p>Print an allowlist (to stdout) to be used with --allowlist</p> <p>When introducing stubtest to an existing project, this is an easy way to silence all existing errors.</p> <code>--ignore-unused-allowlist</code> <p>Ignore unused allowlist entries</p> <p>Without this option enabled, the default is for stubtest to complain if an allowlist entry is not necessary for stubtest to pass successfully.</p> <p>Note if an allowlist entry is a regex that matches the empty string, stubtest will never consider it unused. For example, to get <code>--ignore-unused-allowlist</code> behaviour for a single allowlist entry like <code>foo.bar</code> you could add an allowlist entry <code>(foo\\.bar)?</code>. This can be useful when an error only occurs on a specific platform.</p> <code>--mypy-config-file FILE</code> <p>Use specified mypy config file to determine mypy plugins and mypy path</p> <code>--custom-typeshed-dir DIR</code> <p>Use the custom typeshed in DIR</p> <code>--check-typeshed</code> <p>Check all stdlib modules in typeshed</p> <code>--help</code> <p>Show a help message :-)</p>"},{"location":"mypy_other/","title":"\u5176\u4ed6\u6742\u9879","text":"<p>https://mypy.readthedocs.io/en/stable/common_issues.html</p>"},{"location":"mypy_other/additional_features/","title":"\u9644\u52a0\u529f\u80fd","text":"<p>Additional features</p> \u4e2d\u6587\u82f1\u6587 <p>\u8fd9\u4e00\u90e8\u5206\u8ba8\u8bba\u4e86\u5728\u4e4b\u524d\u7684\u90e8\u5206\u4e2d\u6ca1\u6709\u81ea\u7136\u878d\u5165\u7684\u5404\u79cd\u7279\u6027\u3002</p> <p>This section discusses various features that did not fit in naturally in one of the previous sections.</p>"},{"location":"mypy_other/additional_features/#\u6570\u636e\u7c7b","title":"\u6570\u636e\u7c7b","text":"<p>Dataclasses</p> \u4e2d\u6587\u82f1\u6587 <p>dataclasses \u6a21\u5757\u5141\u8bb8\u5b9a\u4e49\u548c\u81ea\u5b9a\u4e49\u7b80\u5355\u7684\u65e0\u6837\u677f\u7c7b\u3002\u53ef\u4ee5\u4f7f\u7528 @dataclasses.dataclass \u88c5\u9970\u5668\u6765\u5b9a\u4e49\u8fd9\u4e9b\u7c7b\uff1a</p> <pre><code>from dataclasses import dataclass, field\n\n@dataclass\nclass Application:\n    name: str\n    plugins: list[str] = field(default_factory=list)\n\ntest = Application(\"Testing...\")  # \u6b63\u5e38\nbad = Application(\"Testing...\", \"with plugin\")  # \u9519\u8bef\uff1a\u671f\u671b list[str]\n</code></pre> <p>Mypy \u5c06\u6839\u636e\u5b9a\u4e49 dataclasses \u65f6\u4f7f\u7528\u7684\u6807\u5fd7\u6765\u68c0\u6d4b\u7279\u6b8a\u65b9\u6cd5\uff08\u5982 __lt__\uff09\u3002\u4f8b\u5982\uff1a</p> <pre><code>from dataclasses import dataclass\n\n@dataclass(order=True)\nclass OrderedPoint:\n    x: int\n    y: int\n\n@dataclass(order=False)\nclass UnorderedPoint:\n    x: int\n    y: int\n\nOrderedPoint(1, 2) &lt; OrderedPoint(3, 4)  # \u6b63\u5e38\nUnorderedPoint(1, 2) &lt; UnorderedPoint(3, 4)  # \u9519\u8bef\uff1a\u4e0d\u652f\u6301\u7684\u64cd\u4f5c\u6570\u7c7b\u578b\n</code></pre> <p>\u6570\u636e\u7c7b\u53ef\u4ee5\u662f\u6cdb\u578b\u7684\uff0c\u5e76\u4e14\u53ef\u4ee5\u50cf\u666e\u901a\u7c7b\u4e00\u6837\u4f7f\u7528\uff1a</p> <pre><code>from dataclasses import dataclass\nfrom typing import Generic, TypeVar\n\nT = TypeVar('T')\n\n@dataclass\nclass BoxedData(Generic[T]):\n    data: T\n    label: str\n\ndef unbox(bd: BoxedData[T]) -&gt; T:\n    ...\n\nval = unbox(BoxedData(42, \"&lt;important&gt;\"))  # \u6b63\u5e38\uff0c\u63a8\u65ad\u7c7b\u578b\u4e3a int\n</code></pre> <p>\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 \u5b98\u65b9\u6587\u6863 \u548c PEP 557\u3002</p> <p>The dataclasses module allows defining and customizing simple boilerplate-free classes. They can be defined using the @dataclasses.dataclass decorator:</p> <pre><code>from dataclasses import dataclass, field\n\n@dataclass\nclass Application:\n    name: str\n    plugins: list[str] = field(default_factory=list)\n\ntest = Application(\"Testing...\")  # OK\nbad = Application(\"Testing...\", \"with plugin\")  # Error: list[str] expected\n</code></pre> <p>Mypy will detect special methods (such as __lt__) depending on the flags used to define dataclasses. For example:</p> <pre><code>from dataclasses import dataclass\n\n@dataclass(order=True)\nclass OrderedPoint:\n    x: int\n    y: int\n\n@dataclass(order=False)\nclass UnorderedPoint:\n    x: int\n    y: int\n\nOrderedPoint(1, 2) &lt; OrderedPoint(3, 4)  # OK\nUnorderedPoint(1, 2) &lt; UnorderedPoint(3, 4)  # Error: Unsupported operand types\n</code></pre> <p>Dataclasses can be generic and can be used in any other way a normal class can be used:</p> <pre><code>from dataclasses import dataclass\nfrom typing import Generic, TypeVar\n\nT = TypeVar('T')\n\n@dataclass\nclass BoxedData(Generic[T]):\n    data: T\n    label: str\n\ndef unbox(bd: BoxedData[T]) -&gt; T:\n    ...\n\nval = unbox(BoxedData(42, \"&lt;important&gt;\"))  # OK, inferred type is int\n</code></pre> <p>For more information see official docs and PEP 557.</p>"},{"location":"mypy_other/additional_features/#\u6ce8\u610f\u4e8b\u9879\u5df2\u77e5\u95ee\u9898","title":"\u6ce8\u610f\u4e8b\u9879/\u5df2\u77e5\u95ee\u9898","text":"<p>Caveats/Known Issues</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728 dataclasses \u6a21\u5757\u4e2d\uff0c\u4e00\u4e9b\u51fd\u6570\uff0c\u5982 asdict()\uff0c\u5177\u6709\u4e0d\u7cbe\u786e\uff08\u8fc7\u4e8e\u5bbd\u677e\uff09\u7684\u7c7b\u578b\u3002\u8fd9\u5c06\u5728\u672a\u6765\u7684\u7248\u672c\u4e2d\u4fee\u590d\u3002</p> <p>Mypy \u76ee\u524d\u5c1a\u4e0d\u8bc6\u522b dataclasses.dataclass \u7684\u522b\u540d\uff0c\u5e76\u4e14\u53ef\u80fd\u6c38\u8fdc\u4e0d\u4f1a\u8bc6\u522b\u52a8\u6001\u8ba1\u7b97\u7684\u88c5\u9970\u5668\u3002\u4ee5\u4e0b\u793a\u4f8b \u4e0d \u80fd\u6b63\u5e38\u5de5\u4f5c\uff1a</p> <pre><code>from dataclasses import dataclass\n\ndataclass_alias = dataclass\ndef dataclass_wrapper(cls):\n    return dataclass(cls)\n\n@dataclass_alias\nclass AliasDecorated:\n    \"\"\"\n    Mypy \u4e0d\u8bc6\u522b\u6b64\u7c7b\u4e3a\u6570\u636e\u7c7b\uff0c\u56e0\u4e3a\u5b83\u662f\u7531 `dataclass` \u7684\u522b\u540d\u88c5\u9970\u7684\uff0c\u800c\u4e0d\u662f\u7531 `dataclass` \u672c\u8eab\u88c5\u9970\u7684\u3002\n    \"\"\"\n    attribute: int\n\nAliasDecorated(attribute=1) # \u9519\u8bef\uff1a\u610f\u5916\u7684\u5173\u952e\u5b57\u53c2\u6570\n</code></pre> <p>\u8981\u4f7f Mypy \u8bc6\u522b dataclasses.dataclass \u7684\u5305\u88c5\u5668\u4f5c\u4e3a\u6570\u636e\u7c7b\u88c5\u9970\u5668\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528 dataclass_transform() \u88c5\u9970\u5668\uff1a</p> <pre><code>from dataclasses import dataclass, Field\nfrom typing import TypeVar, dataclass_transform\n\nT = TypeVar('T')\n\n@dataclass_transform(field_specifiers=(Field,))\ndef my_dataclass(cls: type[T]) -&gt; type[T]:\n    ...\n    return dataclass(cls)\n</code></pre> <p>Some functions in the dataclasses module, such as asdict(), have imprecise (too permissive) types. This will be fixed in future releases.</p> <p>Mypy does not yet recognize aliases of dataclasses.dataclass, and will probably never recognize dynamically computed decorators. The following example does not work:</p> <pre><code>from dataclasses import dataclass\n\ndataclass_alias = dataclass\ndef dataclass_wrapper(cls):\nreturn dataclass(cls)\n\n@dataclass_alias\nclass AliasDecorated:\n\"\"\"\nMypy doesn't recognize this as a dataclass because it is decorated by an\nalias of `dataclass` rather than by `dataclass` itself.\n\"\"\"\nattribute: int\n\nAliasDecorated(attribute=1) # error: Unexpected keyword argument\n</code></pre> <p>To have Mypy recognize a wrapper of dataclasses.dataclass as a dataclass decorator, consider using the dataclass_transform() decorator:</p> <pre><code>from dataclasses import dataclass, Field\nfrom typing import TypeVar, dataclass_transform\n\nT = TypeVar('T')\n\n@dataclass_transform(field_specifiers=(Field,))\ndef my_dataclass(cls: type[T]) -&gt; type[T]:\n    ...\n    return dataclass(cls)\n</code></pre>"},{"location":"mypy_other/additional_features/#\u6570\u636e\u7c7b\u8f6c\u6362","title":"\u6570\u636e\u7c7b\u8f6c\u6362","text":"<p>Data Class Transforms</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u652f\u6301 dataclass_transform() \u88c5\u9970\u5668\uff0c\u5982 PEP 681 \u4e2d\u6240\u8ff0\u3002</p> <p>Note</p> <p>\u5b9e\u9645\u4e0a\uff0cMypy \u5c06\u5047\u5b9a\u8fd9\u6837\u7684\u7c7b\u5177\u6709\u5185\u90e8\u5c5e\u6027 <code>__dataclass_fields__</code>\uff08\u5373\u4f7f\u5b83\u4eec\u5728\u8fd0\u884c\u65f6\u53ef\u80fd\u6ca1\u6709\u8be5\u5c5e\u6027\uff09\uff0c\u5e76\u5c06\u5047\u5b9a\u51fd\u6570\u5982 dataclasses.is_dataclass() \u548c dataclasses.fields() \u4f1a\u5c06\u5b83\u4eec\u89c6\u4e3a\u6570\u636e\u7c7b\uff08\u5c3d\u7ba1\u5b83\u4eec\u5728\u8fd0\u884c\u65f6\u53ef\u80fd\u4f1a\u5931\u8d25\uff09\u3002</p> <p>Mypy supports the dataclass_transform() decorator as described in PEP 681.</p> <p>Note</p> <p>Pragmatically, mypy will assume such classes have the internal attribute <code>__dataclass_fields__</code> (even though they might lack it in runtime) and will assume functions such as dataclasses.is_dataclass() and dataclasses.fields() treat them as if they were dataclasses (even though they may fail at runtime).</p>"},{"location":"mypy_other/additional_features/#attrs-\u5305","title":"attrs \u5305","text":"<p>The attrs package</p> \u4e2d\u6587\u82f1\u6587 <p>attrs \u662f\u4e00\u4e2a\u53ef\u4ee5\u8ba9\u4f60\u5b9a\u4e49\u7c7b\u800c\u65e0\u9700\u7f16\u5199\u6837\u677f\u4ee3\u7801\u7684\u5305\u3002Mypy \u53ef\u4ee5\u68c0\u6d4b\u5230\u8be5\u5305\u7684\u4f7f\u7528\uff0c\u5e76\u5c06\u6839\u636e\u5b83\u627e\u5230\u7684\u7c7b\u578b\u6ce8\u89e3\u751f\u6210\u88c5\u9970\u7c7b\u6240\u9700\u7684\u65b9\u6cd5\u5b9a\u4e49\u3002\u7c7b\u578b\u6ce8\u89e3\u53ef\u4ee5\u5982\u4e0b\u6dfb\u52a0\uff1a</p> <pre><code>import attr\n\n@attr.define\nclass A:\n    one: int\n    two: int = 7\n    three: int = attr.field(8)\n</code></pre> <p>\u5982\u679c\u4f60\u4f7f\u7528 <code>auto_attribs=False</code>\uff0c\u5219\u5fc5\u987b\u4f7f\u7528 <code>attr.field</code>\uff1a</p> <pre><code>import attr\n\n@attr.define\nclass A:\n    one: int = attr.field()          # \u53d8\u91cf\u6ce8\u89e3\uff08Python 3.6+\uff09\n    two = attr.field()  # type: int  # \u7c7b\u578b\u6ce8\u91ca\n    three = attr.field(type=int)     # type= \u53c2\u6570\n</code></pre> <p>Typeshed \u6709\u51e0\u4e2a\u201c\u5584\u610f\u8c0e\u8a00\u201d\u6ce8\u89e3\uff0c\u4ee5\u4fbf\u66f4\u5bb9\u6613\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u3002[attrs.field] \u548c attrs.Factory \u5b9e\u9645\u4e0a\u8fd4\u56de\u5bf9\u8c61\uff0c\u4f46\u6ce8\u89e3\u8bf4\u660e\u8fd9\u4e9b\u8fd4\u56de\u671f\u671b\u88ab\u8d4b\u503c\u7684\u7c7b\u578b\u3002\u8fd9\u4f7f\u5f97\u5982\u4e0b\u4ee3\u7801\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\uff1a</p> <pre><code>import attr\n\n@attr.define\nclass A:\n    one: int = attr.field(8)\n    two: dict[str, str] = attr.Factory(dict)\n    bad: str = attr.field(16)   # \u9519\u8bef\uff1a\u65e0\u6cd5\u5c06 int \u8d4b\u503c\u7ed9 str\n</code></pre> <p>attrs is a package that lets you define classes without writing boilerplate code. Mypy can detect uses of the package and will generate the necessary method definitions for decorated classes using the type annotations it finds. Type annotations can be added as follows:</p> <pre><code>import attr\n\n@attrs.define\nclass A:\n    one: int\n    two: int = 7\n    three: int = attrs.field(8)\n</code></pre> <p>If you're using <code>auto_attribs=False</code> you must use <code>attrs.field</code>:</p> <pre><code>import attrs\n\n@attrs.define\nclass A:\n    one: int = attrs.field()          # Variable annotation (Python 3.6+)\n    two = attrs.field()  # type: int  # Type comment\n    three = attrs.field(type=int)     # type= argument\n</code></pre> <p>Typeshed has a couple of \"white lie\" annotations to make type checking easier. [attrs.field] and attrs.Factory actually return objects, but the annotation says these return the types that they expect to be assigned to. That enables this to work:</p> <pre><code>import attrs\n\n@attrs.define\nclass A:\n    one: int = attrs.field(8)\n    two: dict[str, str] = attrs.Factory(dict)\n    bad: str = attrs.field(16)   # Error: can't assign int to str\n</code></pre>"},{"location":"mypy_other/additional_features/#\u6ce8\u610f\u4e8b\u9879\u5df2\u77e5\u95ee\u98982","title":"\u6ce8\u610f\u4e8b\u9879/\u5df2\u77e5\u95ee\u98982","text":"<p>Caveats/Known Issues2</p> \u4e2d\u6587\u82f1\u6587 <ul> <li> <p>\u5bf9 <code>attr</code> \u7c7b\u548c\u5c5e\u6027\u7684\u68c0\u6d4b\u4ec5\u901a\u8fc7\u51fd\u6570\u540d\u8fdb\u884c\u3002\u8fd9\u610f\u5473\u7740\u5982\u679c\u4f60\u6709\u81ea\u5df1\u7684\u8f85\u52a9\u51fd\u6570\uff0c\u4f8b\u5982 <code>return attrs.field()</code>\uff0cmypy \u5c06\u65e0\u6cd5\u8bc6\u522b\u5b83\u4eec\u3002</p> </li> <li> <p>\u6240\u6709 mypy \u5173\u6ce8\u7684\u5e03\u5c14\u53c2\u6570\u5fc5\u987b\u662f\u5b57\u9762\u91cf <code>True</code> \u6216 <code>False</code>\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u5c06\u4e0d\u8d77\u4f5c\u7528\uff1a</p> </li> </ul> <pre><code>import attr\nYES = True\n@attr.define(init=YES)\nclass A:\n    ...\n</code></pre> <ul> <li> <p>\u76ee\u524d\uff0c<code>converter</code> \u53ea\u652f\u6301\u547d\u540d\u51fd\u6570\u3002\u5982\u679c mypy \u53d1\u73b0\u5176\u4ed6\u5185\u5bb9\uff0c\u5b83\u4f1a\u62b1\u6028\u65e0\u6cd5\u7406\u89e3\u8be5\u53c2\u6570\uff0c\u5e76\u4e14 __init__ \u4e2d\u7684\u7c7b\u578b\u6ce8\u89e3\u5c06\u88ab\u66ff\u6362\u4e3a <code>Any</code>\u3002</p> </li> <li> <p>\u9a8c\u8bc1\u5668\u88c5\u9970\u5668 \u548c \u9ed8\u8ba4\u503c\u88c5\u9970\u5668 \u5728\u8bbe\u7f6e/\u9a8c\u8bc1\u5c5e\u6027\u65f6\u4e0d\u4f1a\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u3002</p> </li> <li> <p>mypy \u6dfb\u52a0\u7684\u65b9\u6cd5\u5b9a\u4e49\u76ee\u524d\u4f1a\u8986\u76d6\u4efb\u4f55\u73b0\u6709\u7684\u65b9\u6cd5\u5b9a\u4e49\u3002</p> </li> </ul> <ul> <li> <p>The detection of attr classes and attributes works by function name only. This means that if you have your own helper functions that, for example, <code>return attrs.field()</code> mypy will not see them.</p> </li> <li> <p>All boolean arguments that mypy cares about must be literal <code>True</code> or <code>False</code>. e.g the following will not work:</p> </li> </ul> <pre><code>import attrs\nYES = True\n@attrs.define(init=YES)\nclass A:\n    ...\n</code></pre> <ul> <li> <p>Currently, <code>converter</code> only supports named functions.  If mypy finds something else it will complain about not understanding the argument and the type annotation in __init__ will be replaced by <code>Any</code>.</p> </li> <li> <p>Validator decorators and default decorators are not type-checked against the attribute they are setting/validating.</p> </li> <li> <p>Method definitions added by mypy currently overwrite any existing method definitions.</p> </li> </ul>"},{"location":"mypy_other/additional_features/#\u4f7f\u7528\u8fdc\u7a0b\u7f13\u5b58\u52a0\u901f-mypy-\u8fd0\u884c","title":"\u4f7f\u7528\u8fdc\u7a0b\u7f13\u5b58\u52a0\u901f mypy \u8fd0\u884c","text":"<p>Using a remote cache to speed up mypy runs</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u662f \u9012\u589e\u5f0f \u7684\uff0c\u5b83\u91cd\u7528\u4e4b\u524d\u8fd0\u884c\u7684\u7ed3\u679c\u6765\u52a0\u5feb\u540e\u7eed\u8fd0\u884c\u7684\u901f\u5ea6\u3002\u5982\u679c\u4f60\u6b63\u5728\u5bf9\u4e00\u4e2a\u5927\u578b\u4ee3\u7801\u5e93\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\uff0cmypy \u6709\u65f6\u4ecd\u53ef\u80fd\u6bd4\u9884\u671f\u7684\u6162\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u57fa\u4e8e\u6bd4\u4e0a\u4e00\u6b21 mypy \u8fd0\u884c\u76ee\u6807\u63d0\u4ea4\u66f4\u65b0\u5f97\u591a\u7684\u6700\u65b0\u63d0\u4ea4\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u5206\u652f\uff0cmypy \u53ef\u80fd\u9700\u8981\u5904\u7406\u51e0\u4e4e\u6bcf\u4e2a\u6587\u4ef6\uff0c\u56e0\u4e3a\u5f88\u5927\u4e00\u90e8\u5206\u6e90\u6587\u4ef6\u53ef\u80fd\u5df2\u7ecf\u66f4\u6539\u3002\u8fd9\u79cd\u60c5\u51b5\u4e5f\u53ef\u80fd\u5728\u4f60\u5bf9\u672c\u5730\u5206\u652f\u8fdb\u884c rebase \u540e\u53d1\u751f\u3002</p> <p>Mypy \u652f\u6301\u4f7f\u7528 \u8fdc\u7a0b\u7f13\u5b58 \u6765\u63d0\u9ad8\u6027\u80fd\uff0c\u5c24\u5176\u662f\u5728\u4e0a\u8ff0\u60c5\u51b5\u4e2d\u3002\u5728\u5927\u578b\u4ee3\u7801\u5e93\u4e2d\uff0c\u8fdc\u7a0b\u7f13\u5b58\u6709\u65f6\u53ef\u4ee5\u5c06 mypy \u7684\u8fd0\u884c\u901f\u5ea6\u63d0\u9ad8 10 \u500d\u6216\u66f4\u591a\u3002</p> <p>Mypy \u4e0d\u5305\u62ec\u8bbe\u7f6e\u6240\u9700\u7684\u6240\u6709\u7ec4\u4ef6\u2014\u2014\u901a\u5e38\u4f60\u9700\u8981\u4e0e Continuous Integration (CI) \u6216\u6784\u5efa\u7cfb\u7edf\u8fdb\u884c\u4e00\u4e9b\u7b80\u5355\u7684\u96c6\u6210\uff0c\u4ee5\u914d\u7f6e mypy \u4f7f\u7528\u8fdc\u7a0b\u7f13\u5b58\u3002\u4ee5\u4e0b\u8ba8\u8bba\u5047\u8bbe\u4f60\u5df2\u7ecf\u4e3a\u9700\u8981\u52a0\u901f\u7684 mypy \u6784\u5efa\u8bbe\u7f6e\u4e86 CI \u7cfb\u7edf\uff0c\u5e76\u4e14\u4f60\u6b63\u5728\u4f7f\u7528\u4e2d\u592e Git \u4ed3\u5e93\u3002\u5c06\u8fd9\u4e9b\u8bbe\u7f6e\u63a8\u5e7f\u5230\u4e0d\u540c\u7684\u73af\u5883\u5e94\u8be5\u4e0d\u96be\u3002</p> <p>\u8fd9\u91cc\u662f\u6240\u9700\u7684\u4e3b\u8981\u7ec4\u4ef6\uff1a</p> <ul> <li> <p>\u4e00\u4e2a\u7528\u4e8e\u5b58\u50a8\u6240\u6709\u5df2\u63d0\u4ea4\u7684 mypy \u7f13\u5b58\u6587\u4ef6\u7684\u5171\u4eab\u4ed3\u5e93\u3002</p> </li> <li> <p>\u4e00\u4e2a CI \u6784\u5efa\uff0c\u5b83\u5728\u6bcf\u6b21 CI \u6784\u5efa\u8fd0\u884c\u7684\u63d0\u4ea4\u4e2d\u5c06 mypy \u9012\u589e\u7f13\u5b58\u6587\u4ef6\u4e0a\u4f20\u5230\u5171\u4eab\u4ed3\u5e93\u3002</p> </li> <li> <p>\u4e00\u4e2a\u5305\u88c5\u811a\u672c\uff0c\u5f00\u53d1\u8005\u7528\u5b83\u6765\u8fd0\u884c\u542f\u7528\u4e86\u8fdc\u7a0b\u7f13\u5b58\u7684 mypy\u3002</p> </li> </ul> <p>\u4e0b\u9762\u6211\u4eec\u5c06\u8be6\u7ec6\u8ba8\u8bba\u6bcf\u4e2a\u7ec4\u4ef6\u3002</p> <p>Mypy performs type checking incrementally, reusing results from previous runs to speed up successive runs. If you are type checking a large codebase, mypy can still be sometimes slower than desirable. For example, if you create a new branch based on a much more recent commit than the target of the previous mypy run, mypy may have to process almost every file, as a large fraction of source files may have changed. This can also happen after you've rebased a local branch.</p> <p>Mypy supports using a remote cache to improve performance in cases such as the above.  In a large codebase, remote caching can sometimes speed up mypy runs by a factor of 10, or more.</p> <p>Mypy doesn't include all components needed to set this up -- generally you will have to perform some simple integration with your Continuous Integration (CI) or build system to configure mypy to use a remote cache. This discussion assumes you have a CI system set up for the mypy build you want to speed up, and that you are using a central git repository. Generalizing to different environments should not be difficult.</p> <p>Here are the main components needed:</p> <ul> <li> <p>A shared repository for storing mypy cache files for all landed commits.</p> </li> <li> <p>CI build that uploads mypy incremental cache files to the shared repository for each commit for which the CI build runs.</p> </li> <li> <p>A wrapper script around mypy that developers use to run mypy with remote caching enabled.</p> </li> </ul> <p>Below we discuss each of these components in some detail.</p>"},{"location":"mypy_other/additional_features/#\u7f13\u5b58\u6587\u4ef6\u7684\u5171\u4eab\u4ed3\u5e93","title":"\u7f13\u5b58\u6587\u4ef6\u7684\u5171\u4eab\u4ed3\u5e93","text":"<p>Shared repository for cache files</p> \u4e2d\u6587\u82f1\u6587 <p>\u4f60\u9700\u8981\u4e00\u4e2a\u4ed3\u5e93\uff0c\u5141\u8bb8\u4f60\u4ece CI \u6784\u5efa\u4e0a\u4f20 mypy \u7f13\u5b58\u6587\u4ef6\uff0c\u5e76\u6839\u636e\u63d0\u4ea4 ID \u4f7f\u7f13\u5b58\u6587\u4ef6\u53ef\u4f9b\u4e0b\u8f7d\u3002\u4e00\u4e2a\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u5c06 <code>.mypy_cache</code> \u76ee\u5f55\uff08\u5305\u542b mypy \u7f13\u5b58\u6570\u636e\uff09\u5236\u4f5c\u6210\u4e00\u4e2a\u53ef\u4e0b\u8f7d\u7684 \u6784\u5efa\u5de5\u4ef6\uff0c\u4ece\u4f60\u7684 CI \u6784\u5efa\u4e2d\u751f\u6210\uff08\u8fd9\u53d6\u51b3\u4e8e\u4f60\u7684 CI \u7cfb\u7edf\u7684\u80fd\u529b\uff09\u3002\u53e6\u5916\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5c06\u6570\u636e\u4e0a\u4f20\u5230\u4e00\u4e2a web \u670d\u52a1\u5668\u6216 S3 \u7b49\u5b58\u50a8\u670d\u52a1\u3002</p> <p>You need a repository that allows you to upload mypy cache files from your CI build and make the cache files available for download based on a commit id.  A simple approach would be to produce an archive of the <code>.mypy_cache</code> directory (which contains the mypy cache data) as a downloadable build artifact from your CI build (depending on the capabilities of your CI system).  Alternatively, you could upload the data to a web server or to S3, for example.</p>"},{"location":"mypy_other/additional_features/#\u6301\u7eed\u96c6\u6210\u6784\u5efa","title":"\u6301\u7eed\u96c6\u6210\u6784\u5efa","text":"<p>Continuous Integration build</p> \u4e2d\u6587\u82f1\u6587 <p>CI \u6784\u5efa\u4f1a\u8fd0\u884c\u5e38\u89c4\u7684 mypy \u6784\u5efa\uff0c\u5e76\u521b\u5efa\u4e00\u4e2a\u5305\u542b\u6784\u5efa\u4ea7\u751f\u7684 <code>.mypy_cache</code> \u76ee\u5f55\u7684\u5f52\u6863\u6587\u4ef6\u3002\u6700\u540e\uff0c\u5b83\u4f1a\u5c06\u7f13\u5b58\u4f5c\u4e3a\u6784\u5efa\u5de5\u4ef6\u751f\u6210\uff0c\u6216\u4e0a\u4f20\u5230\u4e00\u4e2a\u4ed3\u5e93\uff0c\u4f7f\u5176\u53ef\u4ee5\u88ab mypy \u5305\u88c5\u811a\u672c\u8bbf\u95ee\u3002</p> <p>\u4f60\u7684 CI \u811a\u672c\u53ef\u80fd\u5982\u4e0b\u5de5\u4f5c\uff1a</p> <ul> <li> <p>\u6b63\u5e38\u8fd0\u884c mypy\u3002\u8fd9\u5c06\u751f\u6210\u4f4d\u4e8e <code>.mypy_cache</code> \u76ee\u5f55\u4e0b\u7684\u7f13\u5b58\u6570\u636e\u3002</p> </li> <li> <p>\u4ece <code>.mypy_cache</code> \u76ee\u5f55\u521b\u5efa\u4e00\u4e2a tarball \u5f52\u6863\u6587\u4ef6\u3002</p> </li> <li> <p>\u786e\u5b9a\u5f53\u524d Git \u4e3b\u5206\u652f\u7684\u63d0\u4ea4 ID\uff08\u4f8b\u5982\uff0c\u4f7f\u7528 <code>git rev-parse HEAD</code>\uff09\u3002</p> </li> <li> <p>\u5c06 tarball \u4e0a\u4f20\u5230\u5171\u4eab\u4ed3\u5e93\uff0c\u540d\u79f0\u7531\u63d0\u4ea4 ID \u6d3e\u751f\u3002</p> </li> </ul> <p>The CI build would run a regular mypy build and create an archive containing the <code>.mypy_cache</code> directory produced by the build. Finally, it will produce the cache as a build artifact or upload it to a repository where it is accessible by the mypy wrapper script.</p> <p>Your CI script might work like this:</p> <ul> <li> <p>Run mypy normally. This will generate cache data under the <code>.mypy_cache</code> directory.</p> </li> <li> <p>Create a tarball from the <code>.mypy_cache</code> directory.</p> </li> <li> <p>Determine the current git master branch commit id (say, using <code>git rev-parse HEAD</code>).</p> </li> <li> <p>Upload the tarball to the shared repository with a name derived from the commit id.</p> </li> </ul>"},{"location":"mypy_other/additional_features/#mypy-\u5305\u88c5\u811a\u672c","title":"Mypy \u5305\u88c5\u811a\u672c","text":"<p>Mypy wrapper script</p> \u4e2d\u6587\u82f1\u6587 <p>\u5305\u88c5\u811a\u672c\u7531\u5f00\u53d1\u4eba\u5458\u5728\u672c\u5730\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u4f7f\u7528\uff0c\u4ee5\u66ff\u4ee3\u76f4\u63a5\u8c03\u7528 mypy\u3002\u8be5\u5305\u88c5\u811a\u672c\u9996\u5148\u4ece\u5171\u4eab\u4ed3\u5e93\u4e2d\u586b\u5145\u672c\u5730\u7684 <code>.mypy_cache</code> \u76ee\u5f55\uff0c\u7136\u540e\u8fd0\u884c\u5e38\u89c4\u7684\u589e\u91cf\u6784\u5efa\u3002</p> <p>\u5305\u88c5\u811a\u672c\u9700\u8981\u4e00\u4e9b\u903b\u8f91\u6765\u786e\u5b9a\u672c\u5730\u5f00\u53d1\u5206\u652f\u6240\u57fa\u4e8e\u7684\u6700\u65b0\u4e2d\u592e\u4ed3\u5e93\u63d0\u4ea4\uff08\u6309\u60ef\u4f8b\u4e3a git \u7684 <code>origin/master</code> \u5206\u652f\uff09\u3002\u5728\u5178\u578b\u7684 git \u8bbe\u7f6e\u4e2d\uff0c\u4f60\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a</p> <pre><code>git merge-base HEAD origin/master\n</code></pre> <p>\u4e0b\u4e00\u6b65\u662f\u6839\u636e\u4e0a\u9762 git \u547d\u4ee4\u751f\u6210\u7684\u5408\u5e76\u57fa\u70b9\u7684\u63d0\u4ea4 ID\uff0c\u4ece\u5171\u4eab\u4ed3\u5e93\u4e0b\u8f7d\u7f13\u5b58\u6570\u636e\uff08<code>.mypy_cache</code> \u76ee\u5f55\u7684\u5185\u5bb9\uff09\u3002\u811a\u672c\u5c06\u89e3\u538b\u7f29\u6570\u636e\uff0c\u4ee5\u4fbf mypy \u4ece\u4e00\u4e2a\u65b0\u7684 <code>.mypy_cache</code> \u5f00\u59cb\u3002\u6700\u540e\uff0c\u811a\u672c\u6b63\u5e38\u8fd0\u884c mypy\u3002\u5c31\u8fd9\u6837\uff01</p> <p>The wrapper script is used by developers to run mypy locally during development instead of invoking mypy directly.  The wrapper first populates the local <code>.mypy_cache</code> directory from the shared repository and then runs a normal incremental build.</p> <p>The wrapper script needs some logic to determine the most recent central repository commit (by convention, the <code>origin/master</code> branch for git) the local development branch is based on. In a typical git setup you can do it like this:</p> <pre><code>git merge-base HEAD origin/master\n</code></pre> <p>The next step is to download the cache data (contents of the <code>.mypy_cache</code> directory) from the shared repository based on the commit id of the merge base produced by the git command above. The script will decompress the data so that mypy will start with a fresh <code>.mypy_cache</code>. Finally, the script runs mypy normally. And that's all!</p>"},{"location":"mypy_other/additional_features/#\u4f7f\u7528-mypy-\u5b88\u62a4\u8fdb\u7a0b\u8fdb\u884c\u7f13\u5b58","title":"\u4f7f\u7528 mypy \u5b88\u62a4\u8fdb\u7a0b\u8fdb\u884c\u7f13\u5b58","text":"<p>Caching with mypy daemon</p> \u4e2d\u6587\u82f1\u6587 <p>\u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528 mypy \u5b88\u62a4\u8fdb\u7a0b \u8fdb\u884c\u8fdc\u7a0b\u7f13\u5b58\u3002\u8fdc\u7a0b\u7f13\u5b58\u5c06\u663e\u8457\u52a0\u5feb\u542f\u52a8\u6216\u91cd\u542f\u5b88\u62a4\u8fdb\u7a0b\u540e\u7684\u7b2c\u4e00\u6b21 <code>dmypy check</code> \u8fd0\u884c\u901f\u5ea6\u3002</p> <p>mypy \u5b88\u62a4\u8fdb\u7a0b\u9700\u8981\u7f13\u5b58\u6587\u4ef6\u4e2d\u989d\u5916\u7684\u7ec6\u7c92\u5ea6\u4f9d\u8d56\u6570\u636e\uff0c\u8fd9\u4e9b\u6570\u636e\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e0d\u5305\u62ec\u5728\u5185\u3002\u8981\u5728 CI \u6784\u5efa\u4e2d\u4f7f\u7528\u7f13\u5b58\u4e0e mypy \u5b88\u62a4\u8fdb\u7a0b\uff0c\u8bf7\u4f7f\u7528 --cache-fine-grained \u9009\u9879\uff1a</p> <pre><code>$ mypy --cache-fine-grained &lt;args...&gt;\n</code></pre> <p>\u6b64\u6807\u5fd7\u4f1a\u5411\u7f13\u5b58\u4e2d\u6dfb\u52a0\u989d\u5916\u7684\u4fe1\u606f\uff0c\u4ee5\u4f9b\u5b88\u62a4\u8fdb\u7a0b\u4f7f\u7528\u3002\u4e3a\u4e86\u5229\u7528\u8fd9\u4e9b\u989d\u5916\u7684\u4fe1\u606f\uff0c\u4f60\u8fd8\u9700\u8981\u5728 <code>dmypy start</code> \u6216 <code>dmypy restart</code> \u65f6\u4f7f\u7528 <code>--use-fine-grained-cache</code> \u9009\u9879\u3002\u4f8b\u5982\uff1a</p> <pre><code>$ dmypy start -- --use-fine-grained-cache &lt;options...&gt;\n</code></pre> <p>\u73b0\u5728\uff0c\u4f60\u7684\u7b2c\u4e00\u6b21 <code>dmypy check</code> \u8fd0\u884c\u5e94\u8be5\u4f1a\u5feb\u5f97\u591a\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u4f7f\u7528\u7f13\u5b58\u4fe1\u606f\u6765\u907f\u514d\u5904\u7406\u6574\u4e2a\u7a0b\u5e8f\u3002</p> <p>You can also use remote caching with the mypy daemon. The remote cache will significantly speed up the first <code>dmypy check</code> run after starting or restarting the daemon.</p> <p>The mypy daemon requires extra fine-grained dependency data in the cache files which aren't included by default. To use caching with the mypy daemon, use the --cache-fine-grained option in your CI build</p> <pre><code>$ mypy --cache-fine-grained &lt;args...&gt;\n</code></pre> <p>This flag adds extra information for the daemon to the cache. In order to use this extra information, you will also need to use the <code>--use-fine-grained-cache</code> option with <code>dmypy start</code> or <code>dmypy restart</code>. Example</p> <pre><code>$ dmypy start -- --use-fine-grained-cache &lt;options...&gt;\n</code></pre> <p>Now your first <code>dmypy check</code> run should be much faster, as it can use cache information to avoid processing the whole program.</p>"},{"location":"mypy_other/additional_features/#\u6539\u8fdb","title":"\u6539\u8fdb","text":"<p>Refinements</p> \u4e2d\u6587\u82f1\u6587 <p>\u6709\u51e0\u4e2a\u53ef\u9009\u7684\u6539\u8fdb\u63aa\u65bd\u53ef\u4ee5\u8fdb\u4e00\u6b65\u63d0\u5347\u6027\u80fd\uff0c\u5c24\u5176\u662f\u5f53\u4f60\u7684\u4ee3\u7801\u5e93\u8fbe\u5230\u51e0\u5341\u4e07\u884c\u6216\u66f4\u591a\u65f6\uff1a</p> <ul> <li> <p>\u5982\u679c\u5305\u88c5\u811a\u672c\u786e\u5b9a\u5408\u5e76\u57fa\u70b9\u4e0e\u4e4b\u524d\u7684\u8fd0\u884c\u6ca1\u6709\u53d8\u5316\uff0c\u90a3\u4e48\u5c31\u4e0d\u9700\u8981\u4e0b\u8f7d\u7f13\u5b58\u6570\u636e\uff0c\u800c\u662f\u6700\u597d\u91cd\u7528\u73b0\u6709\u7684\u672c\u5730\u7f13\u5b58\u6570\u636e\u3002</p> </li> <li> <p>\u5982\u679c\u4f60\u4f7f\u7528 mypy \u5b88\u62a4\u8fdb\u7a0b\uff0c\u53ef\u80fd\u9700\u8981\u5728\u6bcf\u6b21\u5408\u5e76\u57fa\u70b9\u6216\u672c\u5730\u5206\u652f\u66f4\u6539\u540e\u91cd\u65b0\u542f\u52a8\u5b88\u62a4\u8fdb\u7a0b\uff0c\u4ee5\u907f\u514d\u5728\u589e\u91cf\u6784\u5efa\u4e2d\u5904\u7406\u5927\u91cf\u66f4\u6539\uff0c\u56e0\u4e3a\u8fd9\u6bd4\u4e0b\u8f7d\u7f13\u5b58\u6570\u636e\u548c\u91cd\u542f\u5b88\u62a4\u8fdb\u7a0b\u8981\u6162\u5f97\u591a\u3002</p> </li> <li> <p>\u5982\u679c\u5f53\u524d\u672c\u5730\u5206\u652f\u57fa\u4e8e\u975e\u5e38\u65b0\u7684 master \u63d0\u4ea4\uff0c\u8fdc\u7a0b\u7f13\u5b58\u6570\u636e\u53ef\u80fd\u5c1a\u4e0d\u53ef\u7528\uff0c\u56e0\u4e3a\u6784\u5efa\u7f13\u5b58\u6587\u4ef6\u4f1a\u6709\u4e00\u5b9a\u7684\u5ef6\u8fdf\u3002\u53ef\u4ee5\u8003\u8651\u67e5\u627e\u4f8b\u5982\u6700\u8fd1 5 \u4e2a master \u63d0\u4ea4\u7684\u7f13\u5b58\u6570\u636e\uff0c\u5e76\u4f7f\u7528\u5176\u4e2d\u6700\u53ef\u7528\u7684\u6700\u65b0\u6570\u636e\u3002</p> </li> <li> <p>\u5982\u679c\u7531\u4e8e\u67d0\u4e9b\u539f\u56e0\uff08\u4f8b\u5982\uff0c\u4ece\u516c\u5171\u7f51\u7edc\u8bbf\u95ee\uff09\u8fdc\u7a0b\u7f13\u5b58\u65e0\u6cd5\u8bbf\u95ee\uff0c\u811a\u672c\u4ecd\u7136\u53ef\u4ee5\u56de\u9000\u5230\u5e38\u89c4\u7684\u589e\u91cf\u6784\u5efa\u3002</p> </li> <li> <p>\u4f60\u53ef\u4ee5\u4e3a\u4e0d\u540c\u7684\u672c\u5730\u5206\u652f\u8bbe\u7f6e\u591a\u4e2a\u672c\u5730\u7f13\u5b58\u76ee\u5f55\uff0c\u4f7f\u7528 --cache-dir \u9009\u9879\u3002\u5982\u679c\u7528\u6237\u5207\u6362\u5230\u4e00\u4e2a\u5df2\u6709\u7f13\u5b58\u6570\u636e\u7684\u5206\u652f\uff0c\u53ef\u4ee5\u7ee7\u7eed\u4f7f\u7528\u73b0\u6709\u7684\u7f13\u5b58\u6570\u636e\uff0c\u800c\u4e0d\u662f\u91cd\u65b0\u4e0b\u8f7d\u6570\u636e\u3002</p> </li> <li> <p>\u4f60\u53ef\u4ee5\u8bbe\u7f6e\u4f60\u7684 CI \u6784\u5efa\u4f7f\u7528\u8fdc\u7a0b\u7f13\u5b58\u6765\u52a0\u901f CI \u6784\u5efa\u3002\u8fd9\u5728\u6bcf\u6b21 CI \u6784\u5efa\u4ece\u65b0\u72b6\u6001\u5f00\u59cb\u4e14\u65e0\u6cd5\u8bbf\u95ee\u4e4b\u524d\u6784\u5efa\u7684\u7f13\u5b58\u6587\u4ef6\u65f6\u5c24\u5176\u6709\u7528\u3002\u4ecd\u7136\u5efa\u8bae\u8fd0\u884c\u4e00\u6b21\u5b8c\u6574\u7684\u975e\u589e\u91cf mypy \u6784\u5efa\u4ee5\u521b\u5efa\u7f13\u5b58\u6570\u636e\uff0c\u56e0\u4e3a\u91cd\u590d\u589e\u91cf\u66f4\u65b0\u7f13\u5b58\u6570\u636e\u53ef\u80fd\u4f1a\u5bfc\u81f4\u957f\u671f\u5185\u7684\u504f\u5dee\uff08\u53ef\u80fd\u7531\u4e8e mypy \u7f13\u5b58\u95ee\u9898\uff09\u3002</p> </li> </ul> <p>There are several optional refinements that may improve things further at least if your codebase is hundreds of thousands of lines or more:</p> <ul> <li> <p>If the wrapper script determines that the merge base hasn't changed from a previous run, there's no need to download the cache data and it's better to instead reuse the existing local cache data.</p> </li> <li> <p>If you use the mypy daemon, you may want to restart the daemon each time after the merge base or local branch has changed to avoid processing a potentially large number of changes in an incremental build, as this can be much slower than downloading cache data and restarting the daemon.</p> </li> <li> <p>If the current local branch is based on a very recent master commit, the remote cache data may not yet be available for that commit, as there will necessarily be some latency to build the cache files. It may be a good idea to look for cache data for, say, the 5 latest master commits and use the most recent data that is available.</p> </li> <li> <p>If the remote cache is not accessible for some reason (say, from a public network), the script can still fall back to a normal incremental build.</p> </li> <li> <p>You can have multiple local cache directories for different local branches using the --cache-dir option. If the user switches to an existing branch where downloaded cache data is already available, you can continue to use the existing cache data instead of redownloading the data.</p> </li> <li> <p>You can set up your CI build to use a remote cache to speed up the CI build. This would be particularly useful if each CI build starts from a fresh state without access to cache files from previous builds. It's still recommended to run a full, non-incremental mypy build to create the cache data, as repeatedly updating cache data incrementally could result in drift over a long time period (due to a mypy caching issue, perhaps).</p> </li> </ul>"},{"location":"mypy_other/additional_features/#\u6269\u5c55\u7684-callable-\u7c7b\u578b","title":"\u6269\u5c55\u7684 Callable \u7c7b\u578b","text":"<p>Extended Callable types</p> \u4e2d\u6587\u82f1\u6587 <p>Note</p> <p>\u6b64\u529f\u80fd\u5df2\u5f03\u7528\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 \u56de\u8c03\u534f\u8bae \u4f5c\u4e3a\u66ff\u4ee3\u3002</p> <p>\u4f5c\u4e3a\u4e00\u4e2a\u5b9e\u9a8c\u6027\u7684 mypy \u6269\u5c55\uff0c\u4f60\u53ef\u4ee5\u6307\u5b9a\u652f\u6301\u5173\u952e\u5b57\u53c2\u6570\u3001\u53ef\u9009\u53c2\u6570\u7b49\u7684 Callable \u7c7b\u578b\u3002\u5f53\u4f60\u6307\u5b9a Callable \u7684\u53c2\u6570\u65f6\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u4ec5\u63d0\u4f9b\u4e00\u4e2a\u65e0\u540d\u4f4d\u7f6e\u53c2\u6570\u7684\u7c7b\u578b\uff0c\u6216\u63d0\u4f9b\u4e00\u4e2a\u8868\u793a\u66f4\u590d\u6742\u53c2\u6570\u5f62\u5f0f\u7684\u201c\u53c2\u6570\u8bf4\u660e\u7b26\u201d\u3002\u8fd9\u4f7f\u5f97\u4f60\u53ef\u4ee5\u66f4\u63a5\u8fd1 Python \u4e2d <code>def</code> \u8bed\u53e5\u6240\u63d0\u4f9b\u7684\u5168\u90e8\u53ef\u80fd\u6027\u3002</p> <p>\u4f8b\u5982\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u590d\u6742\u7684\u51fd\u6570\u5b9a\u4e49\u53ca\u5176\u5bf9\u5e94\u7684 Callable\uff1a</p> <pre><code>from typing import Callable\nfrom mypy_extensions import (Arg, DefaultArg, NamedArg,\n                            DefaultNamedArg, VarArg, KwArg)\n\ndef func(__a: int,  # \u8fd9\u79cd\u7ea6\u5b9a\u7528\u4e8e\u65e0\u540d\u53c2\u6570\n        b: int,\n        c: int = 0,\n        *args: int,\n        d: int,\n        e: int = 0,\n        **kwargs: int) -&gt; int:\n    ...\n\nF = Callable[[int,  # \u6216 Arg(int)\n            Arg(int, 'b'),\n            DefaultArg(int, 'c'),\n            VarArg(int),\n            NamedArg(int, 'd'),\n            DefaultNamedArg(int, 'e'),\n            KwArg(int)],\n            int]\n\nf: F = func\n</code></pre> <p>\u53c2\u6570\u8bf4\u660e\u7b26\u662f\u7279\u6b8a\u7684\u51fd\u6570\u8c03\u7528\uff0c\u7528\u4e8e\u6307\u5b9a\u53c2\u6570\u7684\u4ee5\u4e0b\u65b9\u9762\uff1a</p> <ul> <li> <p>\u5176\u7c7b\u578b\uff08\u57fa\u672c\u683c\u5f0f\u4ec5\u652f\u6301\u6b64\u9879\uff09</p> </li> <li> <p>\u5176\u540d\u79f0\uff08\u5982\u679c\u6709\uff09</p> </li> <li> <p>\u662f\u5426\u53ef\u4ee5\u7701\u7565</p> </li> <li> <p>\u662f\u5426\u53ef\u4ee5\u6216\u5fc5\u987b\u4f7f\u7528\u5173\u952e\u5b57\u4f20\u9012</p> </li> <li> <p>\u662f\u5426\u4e3a <code>*args</code> \u53c2\u6570\uff08\u8868\u793a\u5269\u4f59\u7684\u4f4d\u7f6e\u53c2\u6570\uff09</p> </li> <li> <p>\u662f\u5426\u4e3a <code>**kwargs</code> \u53c2\u6570\uff08\u8868\u793a\u5269\u4f59\u7684\u5173\u952e\u5b57\u53c2\u6570\uff09</p> </li> </ul> <p>\u4ee5\u4e0b\u662f <code>mypy_extensions</code> \u4e2d\u53ef\u7528\u7684\u51fd\u6570\uff1a</p> <pre><code>def Arg(type=Any, name=None):\n    # \u4e00\u4e2a\u666e\u901a\u7684\u3001\u5f3a\u5236\u7684\u3001\u4f4d\u7f6e\u53c2\u6570\u3002\n    # \u5982\u679c\u6307\u5b9a\u4e86\u540d\u79f0\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u5173\u952e\u5b57\u4f20\u9012\u3002\n\ndef DefaultArg(type=Any, name=None):\n    # \u4e00\u4e2a\u53ef\u9009\u7684\u7684\u4f4d\u7f6e\u53c2\u6570\uff08\u5373\u6709\u9ed8\u8ba4\u503c\uff09\u3002\n    # \u5982\u679c\u6307\u5b9a\u4e86\u540d\u79f0\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u5173\u952e\u5b57\u4f20\u9012\u3002\n\ndef NamedArg(type=Any, name=None):\n    # \u4e00\u4e2a\u5f3a\u5236\u7684\u4ec5\u9650\u5173\u952e\u5b57\u7684\u53c2\u6570\u3002\n\ndef DefaultNamedArg(type=Any, name=None):\n    # \u4e00\u4e2a\u53ef\u9009\u7684\u4ec5\u9650\u5173\u952e\u5b57\u7684\u53c2\u6570\uff08\u5373\u6709\u9ed8\u8ba4\u503c\uff09\u3002\n\ndef VarArg(type=Any):\n    # \u4e00\u4e2a *args \u98ce\u683c\u7684\u53ef\u53d8\u4f4d\u7f6e\u53c2\u6570\u3002\n    # \u4e00\u4e2a VarArg() \u8bf4\u660e\u7b26\u8868\u793a\u6240\u6709\u5269\u4f59\u7684\u4f4d\u7f6e\u53c2\u6570\u3002\n\ndef KwArg(type=Any):\n    # \u4e00\u4e2a **kwargs \u98ce\u683c\u7684\u53ef\u53d8\u5173\u952e\u5b57\u53c2\u6570\u3002\n    # \u4e00\u4e2a KwArg() \u8bf4\u660e\u7b26\u8868\u793a\u6240\u6709\u5269\u4f59\u7684\u5173\u952e\u5b57\u53c2\u6570\u3002\n</code></pre> <p>\u5728\u6240\u6709\u60c5\u51b5\u4e0b\uff0c<code>type</code> \u53c2\u6570\u9ed8\u8ba4\u4e3a <code>Any</code>\uff0c\u5982\u679c\u7701\u7565 <code>name</code> \u53c2\u6570\uff0c\u5219\u8be5\u53c2\u6570\u6ca1\u6709\u540d\u79f0\uff08<code>NamedArg</code> \u548c <code>DefaultNamedArg</code> \u9700\u8981\u540d\u79f0\uff09\u3002\u4e00\u4e2a\u57fa\u672c\u7684 Callable \u5982\u4e0b\uff1a</p> <pre><code>MyFunc = Callable[[int, str, int], float]\n</code></pre> <p>\u7b49\u540c\u4e8e\uff1a</p> <pre><code>MyFunc = Callable[[Arg(int), Arg(str), Arg(int)], float]\n</code></pre> <p>\u4e00\u4e2a\u5177\u6709\u672a\u6307\u5b9a\u53c2\u6570\u7c7b\u578b\u7684 Callable\uff0c\u5982\uff1a</p> <pre><code>MyOtherFunc = Callable[..., int]\n</code></pre> <p>\uff08\u5927\u81f4\uff09\u7b49\u540c\u4e8e\uff1a</p> <pre><code>MyOtherFunc = Callable[[VarArg(), KwArg()], int]\n</code></pre> <p>Note</p> <p>\u4e0a\u8ff0\u6bcf\u4e2a\u51fd\u6570\u76ee\u524d\u5728\u8fd0\u884c\u65f6\u4ec5\u8fd4\u56de\u5176 <code>type</code> \u53c2\u6570\uff0c\u56e0\u6b64\u53c2\u6570\u8bf4\u660e\u7b26\u4e2d\u5305\u542b\u7684\u4fe1\u606f\u5728\u8fd0\u884c\u65f6\u4e0d\u53ef\u7528\u3002\u8fd9\u4e00\u9650\u5236\u662f\u4e3a\u4e86\u4e0e Python 3.5+ \u6807\u51c6\u5e93\u4e2d\u7684\u73b0\u6709 <code>typing.py</code> \u6a21\u5757\u53ca\u901a\u8fc7 PyPI \u5206\u53d1\u7684\u6a21\u5757\u4fdd\u6301\u5411\u540e\u517c\u5bb9\u3002</p> <p>Note</p> <p>This feature is deprecated.  You can use</p> <p>callback protocols as a replacement.</p> <p>As an experimental mypy extension, you can specify Callable types that support keyword arguments, optional arguments, and more.  When you specify the arguments of a Callable, you can choose to supply just the type of a nameless positional argument, or an \"argument specifier\" representing a more complicated form of argument.  This allows one to more closely emulate the full range of possibilities given by the <code>def</code> statement in Python.</p> <p>As an example, here's a complicated function definition and the corresponding Callable:</p> <pre><code>from typing import Callable\nfrom mypy_extensions import (Arg, DefaultArg, NamedArg,\n                            DefaultNamedArg, VarArg, KwArg)\n\ndef func(__a: int,  # This convention is for nameless arguments\n        b: int,\n        c: int = 0,\n        *args: int,\n        d: int,\n        e: int = 0,\n        **kwargs: int) -&gt; int:\n    ...\n\nF = Callable[[int,  # Or Arg(int)\n            Arg(int, 'b'),\n            DefaultArg(int, 'c'),\n            VarArg(int),\n            NamedArg(int, 'd'),\n            DefaultNamedArg(int, 'e'),\n            KwArg(int)],\n            int]\n\nf: F = func\n</code></pre> <p>Argument specifiers are special function calls that can specify the following aspects of an argument:</p> <ul> <li> <p>its type (the only thing that the basic format supports)</p> </li> <li> <p>its name (if it has one)</p> </li> <li> <p>whether it may be omitted</p> </li> <li> <p>whether it may or must be passed using a keyword</p> </li> <li> <p>whether it is a <code>*args</code> argument (representing the remaining positional arguments)</p> </li> <li> <p>whether it is a <code>**kwargs</code> argument (representing the remaining keyword arguments)</p> </li> </ul> <p>The following functions are available in <code>mypy_extensions</code> for this purpose:</p> <pre><code>def Arg(type=Any, name=None):\n    # A normal, mandatory, positional argument.\n    # If the name is specified it may be passed as a keyword.\n\ndef DefaultArg(type=Any, name=None):\n    # An optional positional argument (i.e. with a default value).\n    # If the name is specified it may be passed as a keyword.\n\ndef NamedArg(type=Any, name=None):\n    # A mandatory keyword-only argument.\n\ndef DefaultNamedArg(type=Any, name=None):\n    # An optional keyword-only argument (i.e. with a default value).\n\ndef VarArg(type=Any):\n    # A *args-style variadic positional argument.\n    # A single VarArg() specifier represents all remaining\n    # positional arguments.\n\ndef KwArg(type=Any):\n    # A **kwargs-style variadic keyword argument.\n    # A single KwArg() specifier represents all remaining\n    # keyword arguments.\n</code></pre> <p>In all cases, the <code>type</code> argument defaults to <code>Any</code>, and if the <code>name</code> argument is omitted the argument has no name (the name is required for <code>NamedArg</code> and <code>DefaultNamedArg</code>).  A basic Callable such as</p> <pre><code>MyFunc = Callable[[int, str, int], float]\n</code></pre> <p>is equivalent to the following:</p> <pre><code>MyFunc = Callable[[Arg(int), Arg(str), Arg(int)], float]\n</code></pre> <p>A Callable with unspecified argument types, such as</p> <pre><code>MyOtherFunc = Callable[..., int]\n</code></pre> <p>is (roughly) equivalent to</p> <pre><code>MyOtherFunc = Callable[[VarArg(), KwArg()], int]\n</code></pre> <p>Note</p> <p>Each of the functions above currently just returns its <code>type</code> argument at runtime, so the information contained in the argument specifiers is not available at runtime.  This limitation is necessary for backwards compatibility with the existing <code>typing.py</code> module as present in the Python 3.5+ standard library and distributed via PyPI.</p>"},{"location":"mypy_other/common_issues/","title":"\u5e38\u89c1\u95ee\u9898\u53ca\u89e3\u51b3\u65b9\u6848","text":"<p>Common issues and solutions</p> \u4e2d\u6587\u82f1\u6587 <p>\u672c\u8282\u63d0\u4f9b\u4e86\u5728\u9700\u8981\u66f4\u65b0\u4ee3\u7801\u4ee5\u4f7f\u7528\u9759\u6001\u7c7b\u578b\u65f6\u7684\u793a\u4f8b\uff0c\u4ee5\u53ca\u5f53 mypy \u65e0\u6cd5\u6309\u9884\u671f\u5de5\u4f5c\u65f6\u7684\u89e3\u51b3\u65b9\u6848\u5efa\u8bae\u3002\u9759\u6001\u7c7b\u578b\u4ee3\u7801\u901a\u5e38\u4e0e\u666e\u901a Python \u4ee3\u7801\u51e0\u4e4e\u76f8\u540c\uff08\u9664\u4e86\u7c7b\u578b\u6ce8\u89e3\uff09\uff0c\u4f46\u6709\u65f6\u4f60\u9700\u8981\u7a0d\u5fae\u8c03\u6574\u65b9\u6cd5\u3002</p> <p>This section has examples of cases when you need to update your code to use static typing, and ideas for working around issues if mypy doesn't work as expected. Statically typed code is often identical to normal Python code (except for type annotations), but sometimes you need to do things slightly differently.</p>"},{"location":"mypy_other/common_issues/#\u663e\u7136\u9519\u8bef\u7684\u4ee3\u7801\u672a\u62a5\u544a\u9519\u8bef","title":"\u663e\u7136\u9519\u8bef\u7684\u4ee3\u7801\u672a\u62a5\u544a\u9519\u8bef","text":"<p>No errors reported for obviously wrong code</p> \u4e2d\u6587\u82f1\u6587 <p>\u6709\u51e0\u4e2a\u5e38\u89c1\u7684\u539f\u56e0\u5bfc\u81f4\u660e\u663e\u9519\u8bef\u7684\u4ee3\u7801\u6ca1\u6709\u88ab\u6807\u8bb0\u4e3a\u9519\u8bef\u3002</p> <p>\u51fd\u6570\u6ca1\u6709\u6ce8\u89e3\u3002</p> <p>\u6ca1\u6709\u4efb\u4f55\u6ce8\u89e3\uff08\u65e2\u6ca1\u6709\u53c2\u6570\u6ce8\u89e3\uff0c\u4e5f\u6ca1\u6709\u8fd4\u56de\u7c7b\u578b\u6ce8\u89e3\uff09\u7684\u51fd\u6570\u4e0d\u4f1a\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\uff0c\u5373\u4f7f\u662f\u6700\u660e\u663e\u7684\u7c7b\u578b\u9519\u8bef\uff08\u4f8b\u5982 <code>2 + 'a'</code>\uff09\u4e5f\u4f1a\u88ab\u9ed8\u9ed8\u5ffd\u7565\u3002\u89e3\u51b3\u65b9\u6cd5\u662f\u6dfb\u52a0\u6ce8\u89e3\u3002\u5982\u679c\u65e0\u6cd5\u6dfb\u52a0\u6ce8\u89e3\uff0c\u53ef\u4ee5\u4f7f\u7528 --check-untyped-defs \u8fdb\u884c\u68c0\u67e5\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>def foo(a):\n    return '(' + a.split() + ')'  # \u6ca1\u6709\u9519\u8bef\uff01\n</code></pre> <p>\u5373\u4f7f <code>a.split()</code> \u663e\u7136\u662f\u4e00\u4e2a\u5217\u8868\uff08\u4f5c\u8005\u53ef\u80fd\u60f3\u7528 <code>a.strip()</code>\uff09\uff0c\u4e5f\u4e0d\u4f1a\u62a5\u544a\u9519\u8bef\u3002\u6dfb\u52a0\u6ce8\u89e3\u540e\u9519\u8bef\u5c06\u4f1a\u88ab\u62a5\u544a\uff1a</p> <pre><code>def foo(a: str) -&gt; str:\n    return '(' + a.split() + ')'\n# \u9519\u8bef: \u4e0d\u652f\u6301\u7684\u64cd\u4f5c\u6570\u7c7b\u578b\u7528\u4e8e + (\"str\" \u548c \"list[str]\")\n</code></pre> <p>\u5982\u679c\u4e0d\u77e5\u9053\u8981\u6dfb\u52a0\u4ec0\u4e48\u7c7b\u578b\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>Any</code>\uff0c\u4f46\u8981\u6ce8\u610f\uff1a</p> <p>\u6d89\u53ca\u7684\u67d0\u4e9b\u503c\u5177\u6709\u7c7b\u578b 'Any'\u3002</p> <p>\u6269\u5c55\u4e0a\u8ff0\u793a\u4f8b\uff0c\u5982\u679c\u6211\u4eec\u7701\u7565\u4e86 <code>a</code> \u7684\u6ce8\u89e3\uff0c\u5219\u4e0d\u4f1a\u51fa\u73b0\u9519\u8bef\uff1a</p> <pre><code>def foo(a) -&gt; str:\n    return '(' + a.split() + ')'  # \u6ca1\u6709\u9519\u8bef\uff01\n</code></pre> <p>\u539f\u56e0\u662f\uff0c\u5982\u679c <code>a</code> \u7684\u7c7b\u578b\u672a\u77e5\uff0c\u5219 <code>a.split()</code> \u7684\u7c7b\u578b\u4e5f\u672a\u77e5\uff0c\u56e0\u6b64\u88ab\u63a8\u65ad\u4e3a <code>Any</code>\uff0c\u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u6dfb\u52a0\u5230 <code>Any</code> \u4e0a\u4e0d\u4f1a\u5f15\u53d1\u9519\u8bef\u3002</p> <p>\u5982\u679c\u5728\u8c03\u8bd5\u8fd9\u4e9b\u60c5\u51b5\u65f6\u9047\u5230\u56f0\u96be\uff0c<code>reveal_type()</code> \u53ef\u80fd\u4f1a\u6709\u6240\u5e2e\u52a9\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u6709\u65f6\u5e93\u7684\u5b58\u6839\u7531\u4e8e\u7c7b\u578b\u4fe1\u606f\u4e0d\u51c6\u786e\uff0c\u4e5f\u53ef\u80fd\u662f <code>Any</code> \u503c\u7684\u6765\u6e90\u3002</p> <p>__init__ \u65b9\u6cd5\u6ca1\u6709\u6ce8\u89e3\u7684\u53c2\u6570\u548c\u8fd4\u56de\u7c7b\u578b\u6ce8\u89e3\u3002</p> <p>\u8fd9\u57fa\u672c\u4e0a\u662f\u4ee5\u4e0a\u4e24\u79cd\u60c5\u51b5\u7684\u7ed3\u5408\uff0c\u56e0\u4e3a\u6ca1\u6709\u6ce8\u89e3\u7684 <code>__init__</code> \u53ef\u80fd\u4f1a\u5bfc\u81f4 <code>Any</code> \u7c7b\u578b\u6e17\u900f\u5230\u5b9e\u4f8b\u53d8\u91cf\u4e2d\uff1a</p> <pre><code>class Bad:\n    def __init__(self):\n        self.value = \"asdf\"\n        1 + \"asdf\"  # \u6ca1\u6709\u9519\u8bef\uff01\n\nbad = Bad()\nbad.value + 1           # \u6ca1\u6709\u9519\u8bef\uff01\nreveal_type(bad)        # \u663e\u793a\u7684\u7c7b\u578b\u662f \"__main__.Bad\"\nreveal_type(bad.value)  # \u663e\u793a\u7684\u7c7b\u578b\u662f \"Any\"\n\nclass Good:\n    def __init__(self) -&gt; None:  # \u663e\u5f0f\u8fd4\u56de None\n        self.value = value\n</code></pre> <p>\u4e00\u4e9b\u5bfc\u5165\u53ef\u80fd\u4f1a\u88ab\u9ed8\u9ed8\u5ffd\u7565\u3002</p> <p>\u4e00\u4e2a\u5e38\u89c1\u7684 <code>Any</code> \u503c\u6765\u6e90\u662f --ignore-missing-imports \u6807\u5fd7\u3002</p> <p>\u5f53\u4f7f\u7528 --ignore-missing-imports \u65f6\uff0c\u4efb\u4f55\u65e0\u6cd5\u627e\u5230\u7684\u5bfc\u5165\u6a21\u5757\u4f1a\u88ab\u9ed8\u9ed8\u66ff\u6362\u4e3a <code>Any</code>\u3002</p> <p>\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u53ef\u4ee5\u7b80\u5355\u5730\u7701\u7565 --ignore-missing-imports\u3002\u5982 \u7f3a\u5931\u7684\u5bfc\u5165 \u4e2d\u6240\u63d0\u5230\u7684\uff0c\u5728\u6bcf\u4e2a\u6a21\u5757\u4e0a\u8bbe\u7f6e <code>ignore_missing_imports=True</code> \u4f1a\u51cf\u5c11\u610f\u5916\u60c5\u51b5\u7684\u53d1\u751f\uff0c\u5f3a\u70c8\u5efa\u8bae\u8fd9\u6837\u505a\u3002</p> <p>\u4f7f\u7528 --follow-imports=skip \u6807\u5fd7\u4e5f\u53ef\u80fd\u5bfc\u81f4\u95ee\u9898\u3002\u5f3a\u70c8\u4e0d\u63a8\u8350\u4f7f\u7528\u8fd9\u4e9b\u6807\u5fd7\uff0c\u9664\u975e\u5728\u76f8\u5bf9\u5c0f\u4f17\u7684\u60c5\u51b5\u4e0b\u9700\u8981\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 \u8ddf\u968f\u5bfc\u5165\u3002</p> <p>mypy \u8ba4\u4e3a\u4f60\u7684\u4ee3\u7801\u65e0\u6cd5\u5230\u8fbe\u3002</p> <p>\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 \u65e0\u6cd5\u5230\u8fbe\u7684\u4ee3\u7801\u3002</p> <p>\u4e00\u4e2a\u6ce8\u89e3\u4e3a\u975e\u53ef\u9009\u7c7b\u578b\u7684\u51fd\u6570\u8fd4\u56de 'None' \u800c mypy \u4e0d\u62a5\u9519\u3002</p> <pre><code>def foo() -&gt; str:\n    return None  # \u6ca1\u6709\u9519\u8bef\uff01\n</code></pre> <p>\u4f60\u53ef\u80fd\u5df2\u7981\u7528\u4e25\u683c\u7684\u53ef\u9009\u68c0\u67e5\uff08\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 --no-strict-optional\uff09\u3002</p> <p>There are several common reasons why obviously wrong code is not flagged as an error.</p> <p>The function containing the error is not annotated.</p> <p>Functions that do not have any annotations (neither for any argument nor for the return type) are not type-checked, and even the most blatant type errors (e.g. <code>2 + 'a'</code>) pass silently.  The solution is to add annotations. Where that isn't possible, functions without annotations can be checked using --check-untyped-defs.</p> <p>Example:</p> <pre><code>def foo(a):\n    return '(' + a.split() + ')'  # No error!\n</code></pre> <p>This gives no error even though <code>a.split()</code> is \"obviously\" a list (the author probably meant <code>a.strip()</code>).  The error is reported once you add annotations:</p> <pre><code>def foo(a: str) -&gt; str:\n    return '(' + a.split() + ')'\n# error: Unsupported operand types for + (\"str\" and \"list[str]\")\n</code></pre> <p>If you don't know what types to add, you can use <code>Any</code>, but beware:</p> <p>One of the values involved has type 'Any'.</p> <p>Extending the above example, if we were to leave out the annotation for <code>a</code>, we'd get no error:</p> <pre><code>def foo(a) -&gt; str:\n    return '(' + a.split() + ')'  # No error!\n</code></pre> <p>The reason is that if the type of <code>a</code> is unknown, the type of <code>a.split()</code> is also unknown, so it is inferred as having type <code>Any</code>, and it is no error to add a string to an <code>Any</code>.</p> <p>If you're having trouble debugging such situations, <code>reveal_type()</code> might come in handy.</p> <p>Note that sometimes library stubs with imprecise type information can be a source of <code>Any</code> values.</p> <p>__init__ method has no annotated arguments and no return type annotation.</p> <p>This is basically a combination of the two cases above, in that <code>__init__</code> without annotations can cause <code>Any</code> types leak into instance variables:</p> <pre><code>class Bad:\n    def __init__(self):\n        self.value = \"asdf\"\n        1 + \"asdf\"  # No error!\n\nbad = Bad()\nbad.value + 1           # No error!\nreveal_type(bad)        # Revealed type is \"__main__.Bad\"\nreveal_type(bad.value)  # Revealed type is \"Any\"\n\nclass Good:\n    def __init__(self) -&gt; None:  # Explicitly return None\n        self.value = value\n</code></pre> <p>Some imports may be silently ignored.</p> <p>A common source of unexpected <code>Any</code> values is the --ignore-missing-imports flag.</p> <p>When you use --ignore-missing-imports, any imported module that cannot be found is silently replaced with <code>Any</code>.</p> <p>To help debug this, simply leave out --ignore-missing-imports. As mentioned in Missing imports, setting <code>ignore_missing_imports=True</code> on a per-module basis will make bad surprises less likely and is highly encouraged.</p> <p>Use of the --follow-imports=skip flags can also cause problems. Use of these flags is strongly discouraged and only required in relatively niche situations. See Following imports for more information.</p> <p>mypy considers some of your code unreachable.</p> <p>See unreachable for more information.</p> <p>A function annotated as returning a non-optional type returns 'None' and mypy doesn't complain.</p> <pre><code>def foo() -&gt; str:\n    return None  # No error!\n</code></pre> <p>You may have disabled strict optional checking (see --no-strict-optional for more).</p>"},{"location":"mypy_other/common_issues/#\u865a\u5047\u9519\u8bef\u548c\u5c40\u90e8\u9759\u9ed8\u68c0\u67e5\u5668","title":"\u865a\u5047\u9519\u8bef\u548c\u5c40\u90e8\u9759\u9ed8\u68c0\u67e5\u5668","text":"<p>Spurious errors and locally silencing the checker</p> \u4e2d\u6587\u82f1\u6587 <p>\u4f60\u53ef\u4ee5\u4f7f\u7528 <code># type: ignore</code> \u6ce8\u91ca\u6765\u5728\u7279\u5b9a\u884c\u4e0a\u6291\u5236\u7c7b\u578b\u68c0\u67e5\u5668\u7684\u9519\u8bef\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u7684\u4ee3\u7801\u4f7f\u7528\u4e86 C \u6269\u5c55\u6a21\u5757 <code>frobnicate</code>\uff0c\u4f46\u6ca1\u6709\u53ef\u7528\u7684\u5b58\u6839\u3002Mypy \u4f1a\u5bf9\u6b64\u53d1\u51fa\u8b66\u544a\uff0c\u56e0\u4e3a\u5b83\u6ca1\u6709\u8be5\u6a21\u5757\u7684\u4fe1\u606f\uff1a</p> <pre><code>import frobnicate  # \u9519\u8bef\uff1a\u6ca1\u6709\u6a21\u5757 \"frobnicate\"\nfrobnicate.start()\n</code></pre> <p>\u4f60\u53ef\u4ee5\u6dfb\u52a0 <code># type: ignore</code> \u6ce8\u91ca\u6765\u544a\u8bc9 mypy \u5ffd\u7565\u6b64\u9519\u8bef\uff1a</p> <pre><code>import frobnicate  # type: ignore\nfrobnicate.start()  # \u6ca1\u95ee\u9898\uff01\n</code></pre> <p>\u7b2c\u4e8c\u884c\u73b0\u5728\u662f\u6b63\u5e38\u7684\uff0c\u56e0\u4e3a\u5ffd\u7565\u6ce8\u91ca\u4f7f\u5f97\u540d\u79f0 <code>frobnicate</code> \u5f97\u5230\u4e86\u9690\u5f0f\u7684 <code>Any</code> \u7c7b\u578b\u3002</p> <p>Note</p> <p>\u4f60\u53ef\u4ee5\u4f7f\u7528 <code># type: ignore[&lt;code&gt;]</code> \u7684\u5f62\u5f0f\u53ea\u5ffd\u7565\u7279\u5b9a\u7684\u9519\u8bef\u3002\u8fd9\u6837\u4f60\u4e0d\u592a\u53ef\u80fd\u5ffd\u7565\u90a3\u4e9b\u4e0d\u5b89\u5168\u7684\u610f\u5916\u9519\u8bef\uff0c\u540c\u65f6\u8fd9\u4e5f\u4f1a\u8bb0\u5f55\u6ce8\u91ca\u7684\u76ee\u7684\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 \u9519\u8bef\u4ee3\u7801\u3002</p> <p>Note</p> <p><code># type: ignore</code> \u6ce8\u91ca\u53ea\u4f1a\u5728 mypy \u65e0\u6cd5\u627e\u5230\u7279\u5b9a\u6a21\u5757\u7684\u4fe1\u606f\u65f6\u624d\u4f1a\u5206\u914d\u9690\u5f0f\u7684 <code>Any</code> \u7c7b\u578b\u3002\u56e0\u6b64\uff0c\u5982\u679c\u6211\u4eec\u786e\u5b9e\u6709 <code>frobnicate</code> \u7684\u5b58\u6839\uff0c\u90a3\u4e48 mypy \u4f1a\u5ffd\u7565 <code># type: ignore</code> \u6ce8\u91ca\uff0c\u50cf\u5e73\u5e38\u4e00\u6837\u68c0\u67e5\u5b58\u6839\u3002</p> <p>\u53e6\u4e00\u79cd\u9009\u62e9\u662f\u663e\u5f0f\u5730\u5c06\u503c\u6ce8\u89e3\u4e3a <code>Any</code> \u7c7b\u578b -- mypy \u5141\u8bb8\u4f60\u5bf9 <code>Any</code> \u7c7b\u578b\u7684\u503c\u6267\u884c\u4efb\u610f\u64cd\u4f5c\u3002\u6709\u65f6\uff0c\u5bf9\u4e8e\u67d0\u4e2a\u7279\u5b9a\u503c\u6ca1\u6709\u66f4\u7cbe\u786e\u7684\u7c7b\u578b\uff0c\u5c24\u5176\u662f\u5f53\u4f60\u4f7f\u7528\u52a8\u6001 Python \u7279\u6027\u5982 __getattr__ \u65f6\uff1a</p> <pre><code>class Wrapper:\n    ...\n    def __getattr__(self, a: str) -&gt; Any:\n        return getattr(self._wrapped, a)\n</code></pre> <p>\u6700\u540e\uff0c\u4f60\u53ef\u4ee5\u4e3a\u751f\u6210\u865a\u5047\u9519\u8bef\u7684\u6587\u4ef6\u521b\u5efa\u4e00\u4e2a\u5b58\u6839\u6587\u4ef6\uff08<code>.pyi</code>\uff09\u3002Mypy \u5c06\u53ea\u67e5\u770b\u5b58\u6839\u6587\u4ef6\u5e76\u5ffd\u7565\u5b9e\u73b0\uff0c\u56e0\u4e3a\u5b58\u6839\u6587\u4ef6\u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e <code>.py</code> \u6587\u4ef6\u3002</p> <p>You can use a <code># type: ignore</code> comment to silence the type checker on a particular line. For example, let's say our code is using the C extension module <code>frobnicate</code>, and there's no stub available. Mypy will complain about this, as it has no information about the module:</p> <pre><code>import frobnicate  # Error: No module \"frobnicate\"\nfrobnicate.start()\n</code></pre> <p>You can add a <code># type: ignore</code> comment to tell mypy to ignore this error:</p> <pre><code>import frobnicate  # type: ignore\nfrobnicate.start()  # Okay!\n</code></pre> <p>The second line is now fine, since the ignore comment causes the name <code>frobnicate</code> to get an implicit <code>Any</code> type.</p> <p>Note</p> <p>You can use the form <code># type: ignore[&lt;code&gt;]</code> to only ignore specific errors on the line. This way you are less likely to silence unexpected errors that are not safe to ignore, and this will also document what the purpose of the comment is.  See Error codes for more information.</p> <p>Note</p> <p>The <code># type: ignore</code> comment will only assign the implicit <code>Any</code> type if mypy cannot find information about that particular module. So, if we did have a stub available for <code>frobnicate</code> then mypy would ignore the <code># type: ignore</code> comment and typecheck the stub as usual.</p> <p>Another option is to explicitly annotate values with type <code>Any</code> -- mypy will let you perform arbitrary operations on <code>Any</code> values. Sometimes there is no more precise type you can use for a particular value, especially if you use dynamic Python features such as __getattr__:</p> <pre><code>class Wrapper:\n    ...\n    def __getattr__(self, a: str) -&gt; Any:\n        return getattr(self._wrapped, a)\n</code></pre> <p>Finally, you can create a stub file (<code>.pyi</code>) for a file that generates spurious errors. Mypy will only look at the stub file and ignore the implementation, since stub files take precedence over <code>.py</code> files.</p>"},{"location":"mypy_other/common_issues/#\u5ffd\u7565\u6574\u4e2a\u6587\u4ef6","title":"\u5ffd\u7565\u6574\u4e2a\u6587\u4ef6","text":"<p>Ignoring a whole file</p> \u4e2d\u6587\u82f1\u6587 <ul> <li>\u82e5\u53ea\u60f3\u5ffd\u7565\u9519\u8bef\uff0c\u53ef\u4ee5\u4f7f\u7528\u9876\u5c42\u7684 <code># mypy: ignore-errors</code> \u6ce8\u91ca\u3002</li> <li>\u82e5\u53ea\u60f3\u5ffd\u7565\u7279\u5b9a\u9519\u8bef\u4ee3\u7801\u7684\u9519\u8bef\uff0c\u53ef\u4ee5\u4f7f\u7528\u9876\u5c42\u7684 <code># mypy: disable-error-code=\"...\"</code> \u6ce8\u91ca\u3002\u4f8b\u5982\uff1a<code># mypy: disable-error-code=\"truthy-bool, ignore-without-code\"</code>\u3002</li> <li>\u82e5\u8981\u5c06\u6a21\u5757\u7684\u5185\u5bb9\u66ff\u6362\u4e3a <code>Any</code> \u7c7b\u578b\uff0c\u53ef\u4ee5\u4f7f\u7528\u6bcf\u4e2a\u6a21\u5757\u7684 <code>follow_imports = skip</code> \u8bbe\u7f6e\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 \u8ddf\u968f\u5bfc\u5165\u3002</li> </ul> <p>\u8bf7\u6ce8\u610f\uff0c\u6a21\u5757\u9876\u90e8\u7684 <code># type: ignore</code> \u6ce8\u91ca\uff08\u5728\u4efb\u4f55\u8bed\u53e5\u4e4b\u524d\uff0c\u5305\u62ec\u5bfc\u5165\u6216\u6587\u6863\u5b57\u7b26\u4e32\uff09\u4f1a\u5bfc\u81f4\u5ffd\u7565\u6574\u4e2a\u6a21\u5757\u7684\u5185\u5bb9\u3002\u8fd9\u79cd\u884c\u4e3a\u53ef\u80fd\u4f1a\u4ee4\u4eba\u60ca\u8bb6\uff0c\u5e76\u5bfc\u81f4\u51fa\u73b0\u201c\u6a21\u5757 ... \u6ca1\u6709\u5c5e\u6027 ... [attr-defined]\u201d\u7684\u9519\u8bef\u3002</p> <ul> <li>To only ignore errors, use a top-level <code># mypy: ignore-errors</code> comment instead.</li> <li>To only ignore errors with a specific error code, use a top-level <code># mypy: disable-error-code=\"...\"</code> comment. Example: <code># mypy: disable-error-code=\"truthy-bool, ignore-without-code\"</code></li> <li>To replace the contents of a module with <code>Any</code>, use a per-module <code>follow_imports = skip</code>. See Following imports for details.</li> </ul> <p>Note that a <code># type: ignore</code> comment at the top of a module (before any statements, including imports or docstrings) has the effect of ignoring the entire contents of the module. This behaviour can be surprising and result in \"Module ... has no attribute ... [attr-defined]\" errors.</p>"},{"location":"mypy_other/common_issues/#\u8fd0\u884c\u65f6\u4ee3\u7801\u95ee\u9898","title":"\u8fd0\u884c\u65f6\u4ee3\u7801\u95ee\u9898","text":"<p>Issues with code at runtime</p> \u4e2d\u6587\u82f1\u6587 <p>\u4f7f\u7528\u7c7b\u578b\u6ce8\u89e3\u7684\u60ef\u7528\u6cd5\u6709\u65f6\u4f1a\u4e0e\u67d0\u4e2a Python \u7248\u672c\u8ba4\u4e3a\u5408\u6cd5\u7684\u4ee3\u7801\u4ea7\u751f\u51b2\u7a81\u3002\u8fd9\u4e9b\u51b2\u7a81\u53ef\u80fd\u5bfc\u81f4\u5728\u8fd0\u884c\u4ee3\u7801\u65f6\u51fa\u73b0\u4ee5\u4e0b\u4e00\u4e9b\u9519\u8bef\uff1a</p> <ul> <li><code>ImportError</code>\uff1a\u7531\u4e8e\u5faa\u73af\u5bfc\u5165\u3002</li> <li><code>NameError: name \"X\" is not defined</code>\uff1a\u7531\u4e8e\u524d\u5411\u5f15\u7528\u3002</li> <li><code>TypeError: 'type' object is not subscriptable</code>\uff1a\u7531\u4e8e\u5728\u8fd0\u884c\u65f6\u7c7b\u578b\u4e0d\u662f\u901a\u7528\u7c7b\u578b\u3002</li> <li><code>ImportError</code> \u6216 <code>ModuleNotFoundError</code>\uff1a\u7531\u4e8e\u4f7f\u7528\u4e86\u5728\u8fd0\u884c\u65f6\u4e0d\u53ef\u7528\u7684\u5b58\u6839\u5b9a\u4e49\u3002</li> <li><code>TypeError: unsupported operand type(s) for |: 'type' and 'type'</code>\uff1a\u7531\u4e8e\u4f7f\u7528\u4e86\u65b0\u7684\u8bed\u6cd5\u3002</li> </ul> <p>\u6709\u5173\u5982\u4f55\u5904\u7406\u8fd9\u4e9b\u95ee\u9898\uff0c\u8bf7\u53c2\u89c1 \u8fd0\u884c\u65f6\u6ce8\u89e3\u95ee\u9898\u3002</p> <p>Idiomatic use of type annotations can sometimes run up against what a given version of Python considers legal code. These can result in some of the following errors when trying to run your code:</p> <ul> <li><code>ImportError</code> from circular imports</li> <li><code>NameError: name \"X\" is not defined</code> from forward references</li> <li><code>TypeError: 'type' object is not subscriptable</code> from types that are not generic at runtime</li> <li><code>ImportError</code> or <code>ModuleNotFoundError</code> from use of stub definitions not available at runtime</li> <li><code>TypeError: unsupported operand type(s) for |: 'type' and 'type'</code> from use of new syntax</li> </ul> <p>For dealing with these, see Annotation issues at runtime.</p>"},{"location":"mypy_other/common_issues/#mypy-\u8fd0\u884c\u901f\u5ea6\u6162","title":"Mypy \u8fd0\u884c\u901f\u5ea6\u6162","text":"<p>Mypy runs are slow</p> \u4e2d\u6587\u82f1\u6587 <p>\u5982\u679c\u4f60\u89c9\u5f97\u8fd0\u884c mypy \u5f88\u6162\uff0c\u4f60\u53ef\u80fd\u5e94\u8be5\u4f7f\u7528 mypy \u5b88\u62a4\u8fdb\u7a0b\uff0c\u5b83\u53ef\u4ee5\u5c06\u589e\u91cf mypy \u8fd0\u884c\u7684\u901f\u5ea6\u63d0\u9ad8 10 \u500d\u6216\u66f4\u591a\u3002 \u8fdc\u7a0b\u7f13\u5b58 \u53ef\u4ee5\u4f7f\u51b7\u542f\u52a8\u7684 mypy \u8fd0\u884c\u901f\u5ea6\u63d0\u9ad8\u51e0\u500d\u3002</p> <p>If your mypy runs feel slow, you should probably use the mypy daemon, which can speed up incremental mypy runtimes by a factor of 10 or more. Remote caching can make cold mypy runs several times faster.</p>"},{"location":"mypy_other/common_issues/#\u7a7a\u96c6\u5408\u7684\u7c7b\u578b","title":"\u7a7a\u96c6\u5408\u7684\u7c7b\u578b","text":"<p>Types of empty collections</p> \u4e2d\u6587\u82f1\u6587 <p>\u5f53\u4f60\u5c06\u4e00\u4e2a\u7a7a\u5217\u8868\u6216\u5b57\u5178\u5206\u914d\u7ed9\u4e00\u4e2a\u65b0\u53d8\u91cf\u65f6\uff0c\u901a\u5e38\u9700\u8981\u6307\u5b9a\u7c7b\u578b\uff0c\u5982\u524d\u9762\u63d0\u5230\u7684\uff1a</p> <pre><code>a: list[int] = []\n</code></pre> <p>\u5982\u679c\u6ca1\u6709\u7c7b\u578b\u6ce8\u89e3\uff0cmypy \u5e76\u4e0d\u603b\u662f\u80fd\u591f\u51c6\u786e\u63a8\u65ad <code>a</code> \u7684\u7c7b\u578b\u3002</p> <p>\u5728\u52a8\u6001\u7c7b\u578b\u7684\u51fd\u6570\u4e2d\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u7b80\u5355\u7684\u7a7a\u5217\u8868\u5b57\u9762\u91cf\uff08\u56e0\u4e3a\u6b64\u65f6 <code>a</code> \u7684\u7c7b\u578b\u5c06\u9690\u5f0f\u4e3a <code>Any</code>\uff0c\u65e0\u9700\u63a8\u65ad\uff09\uff0c\u5982\u679c\u53d8\u91cf\u7684\u7c7b\u578b\u5728\u4e4b\u524d\u5df2\u58f0\u660e\u6216\u63a8\u65ad\u8fc7\uff0c\u6216\u8005\u5728\u76f8\u540c\u4f5c\u7528\u57df\u5185\u8fdb\u884c\u7b80\u5355\u7684\u4fee\u6539\u64cd\u4f5c\uff08\u5982\u5217\u8868\u7684 <code>append</code>\uff09\uff1a</p> <pre><code>a = []  # \u53ef\u4ee5\uff0c\u56e0\u4e3a\u7d27\u63a5\u7740\u6709 append\uff0c\u63a8\u65ad\u7c7b\u578b\u4e3a list[int]\nfor i in range(n):\n    a.append(i * i)\n</code></pre> <p>\u7136\u800c\uff0c\u5728\u66f4\u590d\u6742\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u80fd\u9700\u8981\u663e\u5f0f\u7684\u7c7b\u578b\u6ce8\u89e3\uff08mypy \u4f1a\u544a\u8bc9\u4f60\uff09\u3002\u901a\u5e38\uff0c\u6ce8\u89e3\u4e0d\u4ec5\u6709\u52a9\u4e8e mypy\uff0c\u4e5f\u4f7f\u9605\u8bfb\u4ee3\u7801\u7684\u6bcf\u4e2a\u4eba\u66f4\u5bb9\u6613\u7406\u89e3\u4ee3\u7801\uff01</p> <p>You often need to specify the type when you assign an empty list or dict to a new variable, as mentioned earlier:</p> <pre><code>a: list[int] = []\n</code></pre> <p>Without the annotation mypy can't always figure out the precise type of <code>a</code>.</p> <p>You can use a simple empty list literal in a dynamically typed function (as the type of <code>a</code> would be implicitly <code>Any</code> and need not be inferred), if type of the variable has been declared or inferred before, or if you perform a simple modification operation in the same scope (such as <code>append</code> for a list):</p> <pre><code>a = []  # Okay because followed by append, inferred type list[int]\nfor i in range(n):\n    a.append(i * i)\n</code></pre> <p>However, in more complex cases an explicit type annotation can be required (mypy will tell you this). Often the annotation can make your code easier to understand, so it doesn't only help mypy but everybody who is reading the code!</p>"},{"location":"mypy_other/common_issues/#\u5177\u6709\u4e0d\u517c\u5bb9\u7c7b\u578b\u7684\u91cd\u65b0\u5b9a\u4e49","title":"\u5177\u6709\u4e0d\u517c\u5bb9\u7c7b\u578b\u7684\u91cd\u65b0\u5b9a\u4e49","text":"<p>Redefinitions with incompatible types</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u51fd\u6570\u4e2d\uff0c\u6bcf\u4e2a\u540d\u79f0\u53ea\u6709\u4e00\u4e2a\u201c\u58f0\u660e\u201d\u7684\u7c7b\u578b\u3002\u4f60\u53ef\u4ee5\u91cd\u7528 <code>for</code> \u5faa\u73af\u7d22\u5f15\u7b49\uff0c\u4f46\u5982\u679c\u4f60\u5e0c\u671b\u5728\u4e00\u4e2a\u51fd\u6570\u5185\u4f7f\u7528\u5177\u6709\u591a\u79cd\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u4f7f\u7528\u591a\u4e2a\u53d8\u91cf\uff08\u6216\u8005\u53ef\u80fd\u58f0\u660e\u53d8\u91cf\u4e3a <code>Any</code> \u7c7b\u578b\uff09\u3002</p> <pre><code>def f() -&gt; None:\n    n = 1\n    ...\n    n = 'x'  # \u9519\u8bef\uff1a\u8d4b\u503c\u4e2d\u7684\u7c7b\u578b\u4e0d\u517c\u5bb9\uff08\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u4e3a \"str\"\uff0c\u53d8\u91cf\u7684\u7c7b\u578b\u4e3a \"int\"\uff09\n</code></pre> <p>Note</p> <p>\u4f7f\u7528 --allow-redefinition \u6807\u5fd7\u53ef\u4ee5\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u6291\u5236\u6b64\u9519\u8bef\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u4f60\u53ef\u4ee5\u5c06\u53d8\u91cf\u91cd\u65b0\u5b9a\u4e49\u4e3a\u66f4\u7cbe\u786e\u6216\u66f4\u5177\u4f53\u7684\u7c7b\u578b\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u5c06\u4e00\u4e2a\u5e8f\u5217\uff08\u5b83\u4e0d\u652f\u6301 <code>sort()</code>\uff09\u91cd\u65b0\u5b9a\u4e49\u4e3a\u5217\u8868\uff0c\u5e76\u5728\u539f\u5730\u5bf9\u5176\u8fdb\u884c\u6392\u5e8f\uff1a</p> <pre><code>def f(x: Sequence[int]) -&gt; None:\n    # \u8fd9\u91cc x \u7684\u7c7b\u578b\u662f Sequence[int]\uff1b\u6211\u4eec\u4e0d\u77e5\u9053\u5177\u4f53\u7c7b\u578b\u3002\n    x = list(x)\n    # \u8fd9\u91cc x \u7684\u7c7b\u578b\u662f list[int]\u3002\n    x.sort()  # \u53ef\u4ee5\uff01\n</code></pre> <p>\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 \u7c7b\u578b\u7f29\u5c0f\u3002</p> <p>Each name within a function only has a single 'declared' type. You can reuse for loop indices etc., but if you want to use a variable with multiple types within a single function, you may need to instead use multiple variables (or maybe declare the variable with an <code>Any</code> type).</p> <pre><code>def f() -&gt; None:\n    n = 1\n    ...\n    n = 'x'  # error: Incompatible types in assignment (expression has type \"str\", variable has type \"int\")\n</code></pre> <p>Note</p> <p>Using the --allow-redefinition flag can suppress this error in several cases.</p> <p>Note that you can redefine a variable with a more precise or a more concrete type. For example, you can redefine a sequence (which does not support <code>sort()</code>) as a list and sort it in-place:</p> <pre><code>def f(x: Sequence[int]) -&gt; None:\n    # Type of x is Sequence[int] here; we don't know the concrete type.\n    x = list(x)\n    # Type of x is list[int] here.\n    x.sort()  # Okay!\n</code></pre> <p>See Type narrowing for more information.</p>"},{"location":"mypy_other/common_issues/#\u4e0d\u53d8\u6027-vs-\u534f\u53d8\u6027","title":"\u4e0d\u53d8\u6027 vs \u534f\u53d8\u6027","text":"<p>Invariance vs covariance</p> \u4e2d\u6587\u82f1\u6587 <p>\u5927\u591a\u6570\u53ef\u53d8\u7684\u6cdb\u578b\u96c6\u5408\u90fd\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u800c mypy \u9ed8\u8ba4\u5c06\u6240\u6709\u7528\u6237\u5b9a\u4e49\u7684\u6cdb\u578b\u7c7b\u89c6\u4e3a\u4e0d\u53ef\u53d8\uff08\u6709\u5173\u52a8\u673a\uff0c\u8bf7\u53c2\u89c1 \u6cdb\u578b\u7c7b\u578b\u7684\u53d8\u5f02\u6027\uff09\u3002\u8fd9\u53ef\u80fd\u4f1a\u5728\u4e0e\u7c7b\u578b\u63a8\u65ad\u7ed3\u5408\u4f7f\u7528\u65f6\u5bfc\u81f4\u4e00\u4e9b\u610f\u5916\u7684\u9519\u8bef\u3002\u4f8b\u5982\uff1a</p> <pre><code>class A: ...\nclass B(A): ...\n\nlst = [A(), A()]  # \u63a8\u65ad\u7c7b\u578b\u662f list[A]\nnew_lst = [B(), B()]  # \u63a8\u65ad\u7c7b\u578b\u662f list[B]\nlst = new_lst  # mypy \u4f1a\u5bf9\u6b64\u63d0\u51fa\u8b66\u544a\uff0c\u56e0\u4e3a List \u662f\u4e0d\u53ef\u53d8\u7684\n</code></pre> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u7684\u53ef\u80fd\u7b56\u7565\u5305\u62ec\uff1a</p> <ul> <li> <p>\u4f7f\u7528\u663e\u5f0f\u7c7b\u578b\u6ce8\u89e3\uff1a</p> <pre><code>new_lst: list[A] = [B(), B()]\nlst = new_lst  # \u53ef\u4ee5\n</code></pre> </li> <li> <p>\u590d\u5236\u53f3\u4fa7\u7684\u503c\uff1a</p> <pre><code>lst = list(new_lst) # \u4e5f\u53ef\u4ee5\n</code></pre> </li> <li> <p>\u5c3d\u53ef\u80fd\u4f7f\u7528\u4e0d\u53ef\u53d8\u96c6\u5408\u4f5c\u4e3a\u6ce8\u89e3\uff1a</p> <pre><code>def f_bad(x: list[A]) -&gt; A:\n    return x[0]\nf_bad(new_lst) # \u5931\u8d25\n\ndef f_good(x: Sequence[A]) -&gt; A:\n    return x[0]\nf_good(new_lst) # \u53ef\u4ee5\n</code></pre> </li> </ul> <p>Most mutable generic collections are invariant, and mypy considers all user-defined generic classes invariant by default (see Variance of generic types for motivation). This could lead to some unexpected errors when combined with type inference. For example:</p> <pre><code>class A: ...\nclass B(A): ...\n\nlst = [A(), A()]  # Inferred type is list[A]\nnew_lst = [B(), B()]  # inferred type is list[B]\nlst = new_lst  # mypy will complain about this, because List is invariant\n</code></pre> <p>Possible strategies in such situations are:</p> <ul> <li> <p>Use an explicit type annotation:</p> <pre><code>new_lst: list[A] = [B(), B()]\nlst = new_lst  # OK\n</code></pre> </li> <li> <p>Make a copy of the right hand side:</p> <pre><code>lst = list(new_lst) # Also OK\n</code></pre> </li> <li> <p>Use immutable collections as annotations whenever possible:</p> <pre><code>    def f_bad(x: list[A]) -&gt; A:\n        return x[0]\n    f_bad(new_lst) # Fails\n\n    def f_good(x: Sequence[A]) -&gt; A:\n        return x[0]\n    f_good(new_lst) # OK\n</code></pre> </li> </ul>"},{"location":"mypy_other/common_issues/#\u5c06\u8d85\u7c7b\u578b\u58f0\u660e\u4e3a\u53d8\u91cf\u7c7b\u578b","title":"\u5c06\u8d85\u7c7b\u578b\u58f0\u660e\u4e3a\u53d8\u91cf\u7c7b\u578b","text":"<p>Declaring a supertype as variable type</p> \u4e2d\u6587\u82f1\u6587 <p>\u6709\u65f6\uff0c\u63a8\u65ad\u51fa\u7684\u7c7b\u578b\u662f\u6240\u9700\u7c7b\u578b\u7684\u5b50\u7c7b\u578b\uff08\u5b50\u7c7b\uff09\u3002\u7c7b\u578b\u63a8\u65ad\u4f7f\u7528\u7b2c\u4e00\u6b21\u8d4b\u503c\u6765\u63a8\u65ad\u540d\u79f0\u7684\u7c7b\u578b\uff1a</p> <pre><code>class Shape: ...\nclass Circle(Shape): ...\nclass Triangle(Shape): ...\n\nshape = Circle()    # mypy \u63a8\u65ad shape \u7684\u7c7b\u578b\u4e3a Circle\nshape = Triangle()  # \u9519\u8bef\uff1a\u8d4b\u503c\u4e2d\u7684\u7c7b\u578b\u4e0d\u517c\u5bb9\uff08\u8868\u8fbe\u5f0f\u7c7b\u578b\u4e3a \"Triangle\"\uff0c\u53d8\u91cf\u7c7b\u578b\u4e3a \"Circle\"\uff09\n</code></pre> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u4ee5\u4e3a\u53d8\u91cf\u63d0\u4f9b\u4e00\u4e2a\u663e\u5f0f\u7684\u7c7b\u578b\u6ce8\u89e3\uff1a</p> <pre><code>shape: Shape = Circle()  # \u53d8\u91cf shape \u53ef\u4ee5\u662f\u4efb\u4f55 Shape\uff0c\u4e0d\u4ec5\u4ec5\u662f Circle\nshape = Triangle()       # \u53ef\u4ee5\n</code></pre> <p>Sometimes the inferred type is a subtype (subclass) of the desired type. The type inference uses the first assignment to infer the type of a name:</p> <pre><code>class Shape: ...\nclass Circle(Shape): ...\nclass Triangle(Shape): ...\n\nshape = Circle()    # mypy infers the type of shape to be Circle\nshape = Triangle()  # error: Incompatible types in assignment (expression has type \"Triangle\", variable has type \"Circle\")\n</code></pre> <p>You can just give an explicit type for the variable in cases such the above example:</p> <pre><code>shape: Shape = Circle()  # The variable s can be any Shape, not just Circle\nshape = Triangle()       # OK\n</code></pre>"},{"location":"mypy_other/common_issues/#\u590d\u6742\u7c7b\u578b\u6d4b\u8bd5","title":"\u590d\u6742\u7c7b\u578b\u6d4b\u8bd5","text":"<p>Complex type tests</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u901a\u5e38\u53ef\u4ee5\u5728\u4f7f\u7528 isinstance\u3001issubclass \u6216 <code>type(obj) is some_class</code> \u8fd9\u6837\u7684\u7c7b\u578b\u68c0\u67e5\u65f6\u6b63\u786e\u63a8\u65ad\u7c7b\u578b\uff0c\u751a\u81f3\u5728\u4f7f\u7528 \u7528\u6237\u5b9a\u4e49\u7684\u7c7b\u578b\u4fdd\u62a4 \u65f6\u4e5f\u662f\u5982\u6b64\u3002\u4f46\u662f\uff0c\u5bf9\u4e8e\u5176\u4ed6\u7c7b\u578b\u7684\u68c0\u67e5\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u6dfb\u52a0\u663e\u5f0f\u7684\u7c7b\u578b\u8f6c\u6362\uff1a</p> <pre><code>from typing import Sequence, cast\n\ndef find_first_str(a: Sequence[object]) -&gt; str:\n    index = next((i for i, s in enumerate(a) if isinstance(s, str)), -1)\n    if index &lt; 0:\n        raise ValueError('No str found')\n\n    found = a[index]  # \u7c7b\u578b\u4e3a \"object\"\uff0c\u5c3d\u7ba1\u6211\u4eec\u77e5\u9053\u5b83\u662f \"str\"\n    return cast(str, found)  # \u9700\u8981\u663e\u5f0f\u7684\u8f6c\u6362\u4ee5\u4f7f mypy \u6ee1\u610f\n</code></pre> <p>\u53e6\u5916\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 <code>assert</code> \u8bed\u53e5\u914d\u5408\u4e00\u4e9b\u652f\u6301\u7684\u7c7b\u578b\u63a8\u65ad\u6280\u672f\uff1a</p> <pre><code>def find_first_str(a: Sequence[object]) -&gt; str:\n    index = next((i for i, s in enumerate(a) if isinstance(s, str)), -1)\n    if index &lt; 0:\n        raise ValueError('No str found')\n\n    found = a[index]  # \u7c7b\u578b\u4e3a \"object\"\uff0c\u5c3d\u7ba1\u6211\u4eec\u77e5\u9053\u5b83\u662f \"str\"\n    assert isinstance(found, str)  # \u73b0\u5728\uff0c\"found\" \u5c06\u88ab\u63a8\u65ad\u4e3a \"str\"\n    return found  # \u4e0d\u518d\u9700\u8981\u663e\u5f0f\u7684 \"cast()\"\n</code></pre> <p>Note</p> <p>\u8bf7\u6ce8\u610f\uff0c\u4e0a\u8ff0\u793a\u4f8b\u4e2d\u7684 <code>object</code> \u7c7b\u578b\u7c7b\u4f3c\u4e8e Java \u4e2d\u7684 <code>Object</code>\uff1a\u5b83\u4ec5\u652f\u6301\u5b9a\u4e49\u5728 \u6240\u6709 \u5bf9\u8c61\u4e0a\u7684\u64cd\u4f5c\uff0c\u4f8b\u5982\u76f8\u7b49\u6027\u548c isinstance\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u7c7b\u578b <code>Any</code> \u652f\u6301\u6240\u6709\u64cd\u4f5c\uff0c\u5373\u4f7f\u8fd9\u4e9b\u64cd\u4f5c\u53ef\u80fd\u5728\u8fd0\u884c\u65f6\u5931\u8d25\u3002\u5982\u679c <code>o</code> \u7684\u7c7b\u578b\u662f <code>Any</code>\uff0c\u4e0a\u9762\u7684\u7c7b\u578b\u8f6c\u6362\u5c06\u662f\u4e0d\u5fc5\u8981\u7684\u3002</p> <p>Note</p> <p>\u4f60\u53ef\u4ee5\u5728 \u8fd9\u91cc \u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u7c7b\u578b\u7f29\u5c0f\u6280\u672f\u7684\u4fe1\u606f\u3002</p> <p>Mypy \u4e2d\u7684\u7c7b\u578b\u63a8\u65ad\u65e8\u5728\u5728\u5e38\u89c1\u60c5\u51b5\u4e0b\u8868\u73b0\u826f\u597d\uff0c\u5177\u6709\u53ef\u9884\u6d4b\u6027\uff0c\u5e76\u8ba9\u7c7b\u578b\u68c0\u67e5\u5668\u63d0\u4f9b\u6709\u7528\u7684\u9519\u8bef\u4fe1\u606f\u3002\u66f4\u5f3a\u5927\u7684\u7c7b\u578b\u63a8\u65ad\u7b56\u7565\u901a\u5e38\u5177\u6709\u590d\u6742\u4e14\u96be\u4ee5\u9884\u6d4b\u7684\u5931\u8d25\u6a21\u5f0f\uff0c\u53ef\u80fd\u5bfc\u81f4\u975e\u5e38\u4ee4\u4eba\u56f0\u60d1\u7684\u9519\u8bef\u4fe1\u606f\u3002\u6743\u8861\u4e4b\u4e0b\uff0c\u4f5c\u4e3a\u7a0b\u5e8f\u5458\u4f60\u6709\u65f6\u9700\u8981\u4e3a\u7c7b\u578b\u68c0\u67e5\u5668\u63d0\u4f9b\u4e00\u4e9b\u5e2e\u52a9\u3002</p> <p>Mypy can usually infer the types correctly when using isinstance, issubclass, or <code>type(obj) is some_class</code> type tests, and even user-defined type guards,  but for other kinds of checks you may need to add an explicit type cast:</p> <pre><code>from typing import Sequence, cast\n\ndef find_first_str(a: Sequence[object]) -&gt; str:\n    index = next((i for i, s in enumerate(a) if isinstance(s, str)), -1)\n    if index &lt; 0:\n        raise ValueError('No str found')\n\n    found = a[index]  # Has type \"object\", despite the fact that we know it is \"str\"\n    return cast(str, found)  # We need an explicit cast to make mypy happy\n</code></pre> <p>Alternatively, you can use an <code>assert</code> statement together with some of the supported type inference techniques:</p> <pre><code>def find_first_str(a: Sequence[object]) -&gt; str:\n    index = next((i for i, s in enumerate(a) if isinstance(s, str)), -1)\n    if index &lt; 0:\n        raise ValueError('No str found')\n\n    found = a[index]  # Has type \"object\", despite the fact that we know it is \"str\"\n    assert isinstance(found, str)  # Now, \"found\" will be narrowed to \"str\"\n    return found  # No need for the explicit \"cast()\" anymore\n</code></pre> <p>Note</p> <p>Note that the class:<code>object</code> type used in the above example is similar to <code>Object</code> in Java: it only supports operations defined for all objects, such as equality and isinstance. The type <code>Any</code>, in contrast, supports all operations, even if they may fail at runtime. The cast above would have been unnecessary if the type of <code>o</code> was <code>Any</code>.</p> <p>Note</p> <p>You can read more about type narrowing techniques here.</p> <p>Type inference in Mypy is designed to work well in common cases, to be predictable and to let the type checker give useful error messages. More powerful type inference strategies often have complex and difficult-to-predict failure modes and could result in very confusing error messages. The tradeoff is that you as a programmer sometimes have to give the type checker a little help.</p>"},{"location":"mypy_other/common_issues/#python-\u7248\u672c\u548c\u7cfb\u7edf\u5e73\u53f0\u68c0\u67e5","title":"Python \u7248\u672c\u548c\u7cfb\u7edf\u5e73\u53f0\u68c0\u67e5","text":"<p>Python version and system platform checks</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u652f\u6301\u6267\u884c Python \u7248\u672c\u68c0\u67e5\u548c\u5e73\u53f0\u68c0\u67e5\uff08\u4f8b\u5982 Windows \u4e0e Posix\uff09\uff0c\u5ffd\u7565\u5728\u76ee\u6807 Python \u7248\u672c\u6216\u5e73\u53f0\u4e0a\u4e0d\u4f1a\u8fd0\u884c\u7684\u4ee3\u7801\u8def\u5f84\u3002\u8fd9\u4f7f\u5f97\u4f60\u53ef\u4ee5\u66f4\u6709\u6548\u5730\u5bf9\u652f\u6301\u591a\u4e2a Python \u7248\u672c\u6216\u591a\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u7684\u4ee3\u7801\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u3002</p> <p>\u66f4\u5177\u4f53\u5730\u8bf4\uff0cmypy \u80fd\u591f\u7406\u89e3\u5728 <code>if/elif/else</code> \u8bed\u53e5\u4e2d\u4f7f\u7528\u7684 sys.version_info \u548c sys.platform \u68c0\u67e5\u3002\u4f8b\u5982\uff1a</p> <pre><code>import sys\n\n# \u533a\u5206\u4e0d\u540c\u7248\u672c\u7684 Python\uff1a\nif sys.version_info &gt;= (3, 8):\n    # Python 3.8+ \u7279\u5b9a\u7684\u5b9a\u4e49\u548c\u5bfc\u5165\nelse:\n    # \u5176\u4ed6\u5b9a\u4e49\u548c\u5bfc\u5165\n\n# \u533a\u5206\u4e0d\u540c\u7684\u64cd\u4f5c\u7cfb\u7edf\uff1a\nif sys.platform.startswith(\"linux\"):\n    # Linux \u7279\u5b9a\u7684\u4ee3\u7801\nelif sys.platform == \"darwin\":\n    # Mac \u7279\u5b9a\u7684\u4ee3\u7801\nelif sys.platform == \"win32\":\n    # Windows \u7279\u5b9a\u7684\u4ee3\u7801\nelse:\n    # \u5176\u4ed6\u7cfb\u7edf\n</code></pre> <p>\u4f5c\u4e3a\u7279\u4f8b\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5728\u9876\u5c42\uff08\u672a\u7f29\u8fdb\u7684\uff09<code>assert</code> \u4e2d\u4f7f\u7528\u8fd9\u4e9b\u68c0\u67e5\uff1b\u8fd9\u4f1a\u4f7f mypy \u8df3\u8fc7\u6587\u4ef6\u7684\u5176\u4f59\u90e8\u5206\u3002\u4f8b\u5982\uff1a</p> <pre><code>import sys\n\nassert sys.platform != 'win32'\n\n# \u8fd9\u4e2a\u6587\u4ef6\u7684\u5176\u4f59\u90e8\u5206\u4e0d\u9002\u7528\u4e8e Windows\u3002\n</code></pre> <p>\u4e00\u4e9b\u5176\u4ed6\u8868\u8fbe\u5f0f\u4e5f\u8868\u73b0\u51fa\u7c7b\u4f3c\u7684\u884c\u4e3a\uff1b\u7279\u522b\u662f TYPE_CHECKING, \u53d8\u91cf\u540d\u4e3a <code>MYPY</code> \u7684\u53d8\u91cf\uff0c\u4ee5\u53ca\u4efb\u4f55\u53d8\u91cf\u540d\u88ab\u4f20\u9012\u7ed9 --always-true \u6216 --always-false \u7684\u60c5\u51b5\u3002\uff08\u7136\u800c\uff0c<code>True</code> \u548c <code>False</code> \u4e0d\u4f1a\u88ab\u7279\u522b\u5904\u7406\uff01\uff09</p> <p>Note</p> <p>Mypy \u76ee\u524d\u4e0d\u652f\u6301\u66f4\u590d\u6742\u7684\u68c0\u67e5\uff0c\u4e5f\u4e0d\u4e3a\u5c06 sys.version_info \u6216 sys.platform \u68c0\u67e5\u8d4b\u503c\u7ed9\u53d8\u91cf\u63d0\u4f9b\u4efb\u4f55\u7279\u6b8a\u542b\u4e49\u3002\u8fd9\u53ef\u80fd\u4f1a\u5728\u672a\u6765\u7248\u672c\u7684 mypy \u4e2d\u53d1\u751f\u53d8\u5316\u3002</p> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cmypy \u5c06\u4f7f\u7528\u4f60\u5f53\u524d\u7684 Python \u7248\u672c\u548c\u5f53\u524d\u7684\u64cd\u4f5c\u7cfb\u7edf\u4f5c\u4e3a sys.version_info \u548c sys.platform \u7684\u9ed8\u8ba4\u503c\u3002</p> <p>\u8981\u9488\u5bf9\u4e0d\u540c\u7684 Python \u7248\u672c\uff0c\u4f7f\u7528 --python-version X.Y \u6807\u5fd7\u3002\u4f8b\u5982\uff0c\u8981\u9a8c\u8bc1\u4f60\u7684\u4ee3\u7801\u5728\u4f7f\u7528 Python 3.8 \u65f6\u662f\u5426\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\uff0c\u53ef\u4ee5\u4ece\u547d\u4ee4\u884c\u4f20\u5165 --python-version 3.8\u3002\u8bf7\u6ce8\u610f\uff0c\u4f60\u4e0d\u9700\u8981\u5b89\u88c5 Python 3.8 \u6765\u6267\u884c\u6b64\u68c0\u67e5\u3002</p> <p>\u8981\u9488\u5bf9\u4e0d\u540c\u7684\u64cd\u4f5c\u7cfb\u7edf\uff0c\u4f7f\u7528 --platform PLATFORM \u6807\u5fd7\u3002\u4f8b\u5982\uff0c\u8981\u9a8c\u8bc1\u4f60\u7684\u4ee3\u7801\u5728 Windows \u4e0a\u662f\u5426\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\uff0c\u53ef\u4ee5\u4f20\u5165 --platform win32\u3002\u6709\u5173\u6709\u6548\u5e73\u53f0\u53c2\u6570\u7684\u793a\u4f8b\uff0c\u8bf7\u53c2\u9605 sys.platform \u6587\u6863\u3002</p> <p>Mypy supports the ability to perform Python version checks and platform checks (e.g. Windows vs Posix), ignoring code paths that won't be run on the targeted Python version or platform. This allows you to more effectively typecheck code that supports multiple versions of Python or multiple operating systems.</p> <p>More specifically, mypy will understand the use of sys.version_info and sys.platform checks within <code>if/elif/else</code> statements. For example:</p> <pre><code>import sys\n\n# Distinguishing between different versions of Python:\nif sys.version_info &gt;= (3, 8):\n    # Python 3.8+ specific definitions and imports\nelse:\n    # Other definitions and imports\n\n# Distinguishing between different operating systems:\nif sys.platform.startswith(\"linux\"):\n    # Linux-specific code\nelif sys.platform == \"darwin\":\n    # Mac-specific code\nelif sys.platform == \"win32\":\n    # Windows-specific code\nelse:\n    # Other systems\n</code></pre> <p>As a special case, you can also use one of these checks in a top-level (unindented) <code>assert</code>; this makes mypy skip the rest of the file. Example:</p> <pre><code>import sys\n\nassert sys.platform != 'win32'\n\n# The rest of this file doesn't apply to Windows.\n</code></pre> <p>Some other expressions exhibit similar behavior; in particular, TYPE_CHECKING, variables named <code>MYPY</code>, and any variable whose name is passed to --always-true or --always-false. (However, <code>True</code> and <code>False</code> are not treated specially!)</p> <p>Note</p> <p>Mypy currently does not support more complex checks, and does not assign any special meaning when assigning a sys.version_info or sys.platform check to a variable. This may change in future versions of mypy.</p> <p>By default, mypy will use your current version of Python and your current operating system as default values for sys.version_info and sys.platform.</p> <p>To target a different Python version, use the --python-version X.Y flag. For example, to verify your code typechecks if were run using Python 3.8, pass in --python-version 3.8 from the command line. Note that you do not need to have Python 3.8 installed to perform this check.</p> <p>To target a different operating system, use the --platform PLATFORM flag. For example, to verify your code typechecks if it were run in Windows, pass in --platform win32. See the documentation for sys.platform for examples of valid platform parameters.</p>"},{"location":"mypy_other/common_issues/#\u663e\u793a\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b","title":"\u663e\u793a\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b","text":"<p>Displaying the type of an expression</p> \u4e2d\u6587\u82f1\u6587 <p>\u4f60\u53ef\u4ee5\u4f7f\u7528 <code>reveal_type(expr)</code> \u6765\u8ba9 mypy \u663e\u793a\u8868\u8fbe\u5f0f\u7684\u63a8\u65ad\u9759\u6001\u7c7b\u578b\u3002\u8fd9\u5728\u4f60\u4e0d\u592a\u7406\u89e3 mypy \u5982\u4f55\u5904\u7406\u7279\u5b9a\u4ee3\u7801\u7247\u6bb5\u65f6\u975e\u5e38\u6709\u7528\u3002\u4f8b\u5982\uff1a</p> <pre><code>reveal_type((1, 'hello'))  # \u663e\u793a\u7684\u7c7b\u578b\u662f \"tuple[builtins.int, builtins.str]\"\n</code></pre> <p>\u4f60\u8fd8\u53ef\u4ee5\u5728\u6587\u4ef6\u4e2d\u7684\u4efb\u4f55\u4e00\u884c\u4f7f\u7528 <code>reveal_locals()</code> \u6765\u67e5\u770b\u6240\u6709\u5c40\u90e8\u53d8\u91cf\u7684\u7c7b\u578b\u3002\u4f8b\u5982\uff1a</p> <pre><code>a = 1\nb = 'one'\nreveal_locals()\n# \u663e\u793a\u7684\u5c40\u90e8\u53d8\u91cf\u7c7b\u578b\u662f\uff1a\n#     a: builtins.int\n#     b: builtins.str\n</code></pre> <p>Note</p> <p><code>reveal_type</code> \u548c <code>reveal_locals</code> \u4ec5\u88ab mypy \u7406\u89e3\uff0c\u5728 Python \u4e2d\u4e0d\u5b58\u5728\u3002\u5982\u679c\u4f60\u5c1d\u8bd5\u8fd0\u884c\u4f60\u7684\u7a0b\u5e8f\uff0c\u4f60\u9700\u8981\u5728\u8fd0\u884c\u4ee3\u7801\u4e4b\u524d\u79fb\u9664\u4efb\u4f55 <code>reveal_type</code> \u548c <code>reveal_locals</code> \u8c03\u7528\u3002\u8fd9\u4e24\u4e2a\u51fd\u6570\u603b\u662f\u53ef\u7528\u7684\uff0c\u4f60\u4e0d\u9700\u8981\u5bfc\u5165\u5b83\u4eec\u3002</p> <p>You can use <code>reveal_type(expr)</code> to ask mypy to display the inferred static type of an expression. This can be useful when you don't quite understand how mypy handles a particular piece of code. Example:</p> <pre><code>reveal_type((1, 'hello'))  # Revealed type is \"tuple[builtins.int, builtins.str]\"\n</code></pre> <p>You can also use <code>reveal_locals()</code> at any line in a file to see the types of all local variables at once. Example:</p> <pre><code>a = 1\nb = 'one'\nreveal_locals()\n# Revealed local types are:\n#     a: builtins.int\n#     b: builtins.str\n</code></pre> <p>Note</p> <p><code>reveal_type</code> and <code>reveal_locals</code> are only understood by mypy and don't exist in Python. If you try to run your program, you'll have to remove any <code>reveal_type</code> and <code>reveal_locals</code> calls before you can run your code. Both are always available and you don't need to import them.</p>"},{"location":"mypy_other/common_issues/#\u9759\u9ed8\u5904\u7406\u4ee3\u7801\u5ba1\u67e5\u5de5\u5177","title":"\u9759\u9ed8\u5904\u7406\u4ee3\u7801\u5ba1\u67e5\u5de5\u5177","text":"<p>Silencing linters</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4ee3\u7801\u68c0\u67e5\u5de5\u5177\u4f1a\u5bf9\u672a\u4f7f\u7528\u7684\u5bfc\u5165\u6216\u4ee3\u7801\u53d1\u51fa\u8b66\u544a\u3002\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u7c7b\u578b\u6ce8\u91ca\u4e4b\u540e\u6216\u4e0e\u5bfc\u5165\u8bed\u53e5\u540c\u4e00\u884c\u6dfb\u52a0\u6ce8\u91ca\u6765\u6291\u5236\u8fd9\u4e9b\u8b66\u544a\uff1a</p> <pre><code># \u6291\u5236\u5bf9\u672a\u4f7f\u7528\u5bfc\u5165\u7684\u8b66\u544a\nfrom typing import List  # noqa\na = None  # type: List[int]\n</code></pre> <p>\u8981\u5728\u7c7b\u578b\u6ce8\u91ca\u540c\u4e00\u884c\u4e0a\u6291\u5236\u68c0\u67e5\u5de5\u5177\u7684\u8b66\u544a\uff0c\u5c06\u68c0\u67e5\u5de5\u5177\u7684\u6ce8\u91ca\u653e\u5728\u7c7b\u578b\u6ce8\u91ca\u4e4b\u540e\uff1a</p> <pre><code>a = some_complex_thing()  # type: ignore  # noqa\n</code></pre> <p>In some cases, linters will complain about unused imports or code. In these cases, you can silence them with a comment after type comments, or on the same line as the import:</p> <pre><code># to silence complaints about unused imports\nfrom typing import List  # noqa\na = None  # type: List[int]\n</code></pre> <p>To silence the linter on the same line as a type comment put the linter comment after the type comment:</p> <pre><code>a = some_complex_thing()  # type: ignore  # noqa\n</code></pre>"},{"location":"mypy_other/common_issues/#\u62d2\u7edd\u53ef\u53d8\u534f\u8bae\u6210\u5458\u7684\u534f\u53d8\u5b50\u7c7b\u578b","title":"\u62d2\u7edd\u53ef\u53d8\u534f\u8bae\u6210\u5458\u7684\u534f\u53d8\u5b50\u7c7b\u578b","text":"<p>Covariant subtyping of mutable protocol members is rejected</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u4f1a\u62d2\u7edd\u8fd9\u79cd\u60c5\u51b5\uff0c\u56e0\u4e3a\u5b83\u53ef\u80fd\u4e0d\u5b89\u5168\u3002\u8003\u8651\u4ee5\u4e0b\u793a\u4f8b\uff1a</p> <pre><code>from typing import Protocol\n\nclass P(Protocol):\n    x: float\n\ndef fun(arg: P) -&gt; None:\n    arg.x = 3.14\n\nclass C:\n    x = 42\nc = C()\nfun(c)  # \u8fd9\u4e0d\u662f\u5b89\u5168\u7684\nc.x &lt;&lt; 5  # \u56e0\u4e3a\u8fd9\u4f1a\u5931\u8d25\uff01\n</code></pre> <p>\u4e3a\u4e86\u7ed5\u8fc7\u8fd9\u4e2a\u95ee\u9898\uff0c\u8003\u8651\u201c\u53d8\u66f4\u201d\u662f\u5426\u5b9e\u9645\u4e0a\u662f\u534f\u8bae\u7684\u4e00\u90e8\u5206\u3002\u5982\u679c\u4e0d\u662f\uff0c\u5219\u53ef\u4ee5\u5728\u534f\u8bae\u5b9a\u4e49\u4e2d\u4f7f\u7528 @property\uff1a</p> <pre><code>from typing import Protocol\n\nclass P(Protocol):\n    @property\n    def x(self) -&gt; float:\n        pass\n\ndef fun(arg: P) -&gt; None:\n    ...\n\nclass C:\n    x = 42\nfun(C())  # OK\n</code></pre> <p>Mypy rejects this because this is potentially unsafe. Consider this example:</p> <pre><code>from typing import Protocol\n\nclass P(Protocol):\n    x: float\n\ndef fun(arg: P) -&gt; None:\n    arg.x = 3.14\n\nclass C:\n    x = 42\nc = C()\nfun(c)  # This is not safe\nc.x &lt;&lt; 5  # Since this will fail!\n</code></pre> <p>To work around this problem consider whether \"mutating\" is actually part of a protocol. If not, then one can use a @property in the protocol definition:</p> <pre><code>from typing import Protocol\n\nclass P(Protocol):\n    @property\n    def x(self) -&gt; float:\n        pass\n\ndef fun(arg: P) -&gt; None:\n    ...\n\nclass C:\n    x = 42\nfun(C())  # OK\n</code></pre>"},{"location":"mypy_other/common_issues/#\u5904\u7406\u540d\u79f0\u51b2\u7a81","title":"\u5904\u7406\u540d\u79f0\u51b2\u7a81","text":"<p>Dealing with conflicting names</p> \u4e2d\u6587\u82f1\u6587 <p>\u5047\u8bbe\u4f60\u6709\u4e00\u4e2a\u7c7b\uff0c\u5176\u4e2d\u4e00\u4e2a\u65b9\u6cd5\u7684\u540d\u79f0\u4e0e\u5bfc\u5165\u7684\uff08\u6216\u5185\u7f6e\u7684\uff09\u7c7b\u578b\u76f8\u540c\uff0c\u5e76\u4e14\u4f60\u60f3\u5728\u53e6\u4e00\u4e2a\u65b9\u6cd5\u7b7e\u540d\u4e2d\u4f7f\u7528\u8fd9\u4e2a\u7c7b\u578b\u3002\u4f8b\u5982\uff1a</p> <pre><code>class Message:\n    def bytes(self):\n        ...\n    def register(self, path: bytes):  # \u9519\u8bef\uff1a\u65e0\u6548\u7684\u7c7b\u578b \"mod.Message.bytes\"\n        ...\n</code></pre> <p>\u7b2c\u4e09\u884c\u4f1a\u5f15\u53d1\u9519\u8bef\uff0c\u56e0\u4e3a mypy \u5c06\u53c2\u6570\u7c7b\u578b <code>bytes</code> \u89c6\u4e3a\u4e0e\u8be5\u540d\u79f0\u7684\u65b9\u6cd5\u7684\u5f15\u7528\u3002\u9664\u4e86\u91cd\u547d\u540d\u65b9\u6cd5\u5916\uff0c\u53e6\u4e00\u4e2a\u89e3\u51b3\u65b9\u6cd5\u662f\u4f7f\u7528\u522b\u540d\uff1a</p> <pre><code>bytes_ = bytes\nclass Message:\n    def bytes(self):\n        ...\n    def register(self, path: bytes_):\n        ...\n</code></pre> <p>Suppose you have a class with a method whose name is the same as an imported (or built-in) type, and you want to use the type in another method signature.  E.g.:</p> <pre><code>class Message:\n    def bytes(self):\n        ...\n    def register(self, path: bytes):  # error: Invalid type \"mod.Message.bytes\"\n        ...\n</code></pre> <p>The third line elicits an error because mypy sees the argument type <code>bytes</code> as a reference to the method by that name.  Other than renaming the method, a workaround is to use an alias:</p> <pre><code>bytes_ = bytes\nclass Message:\n    def bytes(self):\n        ...\n    def register(self, path: bytes_):\n        ...\n</code></pre>"},{"location":"mypy_other/common_issues/#\u4f7f\u7528\u5f00\u53d1\u4e2d\u7684-mypy-\u7248\u672c","title":"\u4f7f\u7528\u5f00\u53d1\u4e2d\u7684 mypy \u7248\u672c","text":"<p>Using a development mypy build</p> \u4e2d\u6587\u82f1\u6587 <p>\u4f60\u53ef\u4ee5\u4ece\u6e90\u4ee3\u7801\u5b89\u88c5\u6700\u65b0\u7684\u5f00\u53d1\u7248\u672c\u7684 mypy\u3002\u9996\u5148\uff0c\u514b\u9686 mypy GitHub \u4ed3\u5e93\uff0c\u7136\u540e\u5728\u672c\u5730\u8fd0\u884c <code>pip install</code>\uff1a</p> <pre><code>git clone https://github.com/python/mypy.git\ncd mypy\npython3 -m pip install --upgrade .\n</code></pre> <p>\u8981\u5b89\u88c5\u4e00\u4e2a\u5df2\u7ecf\u901a\u8fc7 mypyc \u7f16\u8bd1\u7684\u5f00\u53d1\u7248\u672c\u7684 mypy\uff0c\u8bf7\u53c2\u89c1 mypyc wheels \u4ed3\u5e93 \u7684\u8bf4\u660e\u3002</p> <p>You can install the latest development version of mypy from source. Clone the mypy repository on GitHub, and then run <code>pip install</code> locally:</p> <pre><code>git clone https://github.com/python/mypy.git\ncd mypy\npython3 -m pip install --upgrade .\n</code></pre> <p>To install a development version of mypy that is mypyc-compiled, see the instructions at the mypyc wheels repo.</p>"},{"location":"mypy_other/common_issues/#\u53d8\u91cf-vs-\u7c7b\u578b\u522b\u540d","title":"\u53d8\u91cf vs \u7c7b\u578b\u522b\u540d","text":"<p>Variables vs type aliases</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u65e2\u652f\u6301 \u7c7b\u578b\u522b\u540d\uff0c\u4e5f\u652f\u6301\u7c7b\u4f3c <code>type[...]</code> \u7684\u7c7b\u578b\u53d8\u91cf\u3002\u8fd9\u4e24\u8005\u6709\u5fae\u5999\u7684\u533a\u522b\uff0c\u7406\u89e3\u5b83\u4eec\u7684\u4e0d\u540c\u975e\u5e38\u91cd\u8981\uff0c\u4ee5\u907f\u514d\u9677\u5165\u8bef\u533a\u3002</p> <ol> <li> <p>\u7c7b\u578b\u53d8\u91cf <code>type[...]</code> \u662f\u901a\u8fc7\u5e26\u6709\u663e\u5f0f\u7c7b\u578b\u6ce8\u89e3\u7684\u8d4b\u503c\u5b9a\u4e49\u7684\uff1a</p> <pre><code>class A: ...\ntp: type[A] = A\n</code></pre> </li> <li> <p>\u53ef\u4ee5\u4f7f\u7528\u6ca1\u6709\u663e\u5f0f\u7c7b\u578b\u6ce8\u89e3\u7684\u8d4b\u503c\u6765\u5b9a\u4e49\u7c7b\u578b\u522b\u540d\uff0c\u8fd9\u901a\u5e38\u5728\u6a21\u5757\u7684\u9876\u5c42\u5b9a\u4e49\uff1a</p> <pre><code>class A: ...\nAlias = A\n</code></pre> <p>\u4e5f\u53ef\u4ee5\u4f7f\u7528 <code>TypeAlias</code> (:pep:<code>613</code>) \u6765\u5b9a\u4e49\u4e00\u4e2a \u663e\u5f0f\u7c7b\u578b\u522b\u540d\uff1a</p> <pre><code>from typing import TypeAlias  # \u5728 Python 3.9 \u53ca\u66f4\u65e9\u7248\u672c\u4e2d\u4f7f\u7528 \"from typing_extensions\"\n\nclass A: ...\nAlias: TypeAlias = A\n</code></pre> <p>\u5728\u7c7b\u4f53\u5185\u6216\u51fd\u6570\u5185\u90e8\u5b9a\u4e49\u7c7b\u578b\u522b\u540d\u65f6\uff0c\u5e94\u8be5\u603b\u662f\u4f7f\u7528 <code>TypeAlias</code>\u3002</p> </li> </ol> <p>\u4e3b\u8981\u533a\u522b\u5728\u4e8e\uff0c\u7c7b\u578b\u522b\u540d\u7684\u76ee\u6807\u5728\u9759\u6001\u7c7b\u578b\u68c0\u67e5\u65f6\u662f\u7cbe\u786e\u5df2\u77e5\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4eec\u53ef\u4ee5\u5728\u7c7b\u578b\u6ce8\u89e3\u548c\u5176\u4ed6 \u7c7b\u578b\u4e0a\u4e0b\u6587 \u4e2d\u4f7f\u7528\u3002\u7c7b\u578b\u522b\u540d\u4e0d\u80fd\u5728\u6761\u4ef6\u8bed\u53e5\u4e2d\u5b9a\u4e49\uff08\u9664\u975e\u4f7f\u7528 \u652f\u6301\u7684 Python \u7248\u672c\u548c\u7cfb\u7edf\u5e73\u53f0\u68c0\u67e5\uff09\uff1a</p> <pre><code>class A: ...\nclass B: ...\n\nif random() &gt; 0.5:\n    Alias = A\nelse:\n    # \u9519\u8bef\uff1a\u6ca1\u6709\u663e\u5f0f\u7684 \"Type[...]\" \u6ce8\u89e3\uff0c\u65e0\u6cd5\u5c06\u591a\u4e2a\u7c7b\u578b\u8d4b\u503c\u7ed9\u540d\u79f0 \"Alias\"\n    Alias = B\n\ntp: type[object]  # \"tp\" \u662f\u4e00\u4e2a\u7c7b\u578b\u5bf9\u8c61\u503c\u7684\u53d8\u91cf\nif random() &gt; 0.5:\n    tp = A\nelse:\n    tp = B  # \u8fd9\u662f OK\n\ndef fun1(x: Alias) -&gt; None: ...  # OK\ndef fun2(x: tp) -&gt; None: ...  # \u9519\u8bef\uff1a\u201ctp\u201d \u4e0d\u80fd\u4f5c\u4e3a\u7c7b\u578b\u4f7f\u7528\n</code></pre> <p>Mypy has both type aliases and variables with types like <code>type[...]</code>. These are subtly different, and it's important to understand how they differ to avoid pitfalls.</p> <ol> <li> <p>A variable with type <code>type[...]</code> is defined using an assignment with an explicit type annotation:</p> <pre><code>class A: ...\ntp: type[A] = A\n</code></pre> </li> <li> <p>You can define a type alias using an assignment without an explicit type annotation at the top level of a module:</p> <pre><code>class A: ...\nAlias = A\n</code></pre> <p>You can also use <code>TypeAlias</code> (:pep:<code>613</code>) to define an explicit type alias:</p> <pre><code>from typing import TypeAlias  # \"from typing_extensions\" in Python 3.9 and earlier\n\nclass A: ...\nAlias: TypeAlias = A\n</code></pre> <p>You should always use <code>TypeAlias</code> to define a type alias in a class body or inside a function.</p> </li> </ol> <p>The main difference is that the target of an alias is precisely known statically, and this means that they can be used in type annotations and other type contexts. Type aliases can't be defined conditionally (unless using supported Python version and platform checks):</p> <pre><code>class A: ...\nclass B: ...\n\nif random() &gt; 0.5:\n    Alias = A\nelse:\n    # error: Cannot assign multiple types to name \"Alias\" without an\n    # explicit \"Type[...]\" annotation\n    Alias = B\n\ntp: type[object]  # \"tp\" is a variable with a type object value\nif random() &gt; 0.5:\n    tp = A\nelse:\n    tp = B  # This is OK\n\ndef fun1(x: Alias) -&gt; None: ...  # OK\ndef fun2(x: tp) -&gt; None: ...  # Error: \"tp\" is not valid as a type\n</code></pre>"},{"location":"mypy_other/common_issues/#\u4e0d\u517c\u5bb9\u7684\u91cd\u5199","title":"\u4e0d\u517c\u5bb9\u7684\u91cd\u5199","text":"<p>Incompatible overrides</p> \u4e2d\u6587\u82f1\u6587 <p>\u91cd\u5199\u65b9\u6cd5\u65f6\uff0c\u5982\u679c\u4f7f\u7528\u4e86\u66f4\u5177\u4f53\u7684\u53c2\u6570\u7c7b\u578b\u662f\u4e0d\u5b89\u5168\u7684\uff0c\u56e0\u4e3a\u8fd9\u8fdd\u53cd\u4e86 \u91cc\u6c0f\u66ff\u6362\u539f\u5219\u3002\u5bf9\u4e8e\u8fd4\u56de\u7c7b\u578b\uff0c\u5982\u679c\u91cd\u5199\u7684\u65b9\u6cd5\u5177\u6709\u66f4\u901a\u7528\u7684\u8fd4\u56de\u7c7b\u578b\uff0c\u4e5f\u662f\u5371\u9669\u7684\u3002</p> <p>\u5728\u65b9\u6cd5\u91cd\u5199\u4e2d\uff0c\u5176\u4ed6\u4e0d\u517c\u5bb9\u7684\u7b7e\u540d\u66f4\u6539\uff0c\u5982\u6dfb\u52a0\u989d\u5916\u7684\u5fc5\u9700\u53c2\u6570\u6216\u79fb\u9664\u53ef\u9009\u53c2\u6570\uff0c\u4e5f\u4f1a\u4ea7\u751f\u9519\u8bef\u3002\u5b50\u7c7b\u4e2d\u7684\u65b9\u6cd5\u7b7e\u540d\u5e94\u8be5\u63a5\u53d7\u6240\u6709\u5bf9\u57fa\u7c7b\u65b9\u6cd5\u7684\u6709\u6548\u8c03\u7528\u3002Mypy \u5c06\u5b50\u7c7b\u89c6\u4e3a\u57fa\u7c7b\u7684\u5b50\u7c7b\u578b\u3002\u5b50\u7c7b\u7684\u5b9e\u4f8b\u5728\u4efb\u4f55\u57fa\u7c7b\u5b9e\u4f8b\u6709\u6548\u7684\u5730\u65b9\u90fd\u662f\u6709\u6548\u7684\u3002</p> <p>\u4e0b\u9762\u7684\u793a\u4f8b\u5c55\u793a\u4e86\u5b89\u5168\u548c\u4e0d\u5b89\u5168\u7684\u91cd\u5199\u60c5\u51b5\uff1a</p> <pre><code>from typing import Sequence, List, Iterable\n\nclass A:\n    def test(self, t: Sequence[int]) -&gt; Sequence[str]:\n        ...\n\nclass GeneralizedArgument(A):\n    # \u66f4\u901a\u7528\u7684\u53c2\u6570\u7c7b\u578b\u662f\u53ef\u4ee5\u7684\n    def test(self, t: Iterable[int]) -&gt; Sequence[str]:  # OK\n        ...\n\nclass NarrowerArgument(A):\n    # \u66f4\u5177\u4f53\u7684\u53c2\u6570\u7c7b\u578b\u662f\u4e0d\u88ab\u63a5\u53d7\u7684\n    def test(self, t: List[int]) -&gt; Sequence[str]:  # \u9519\u8bef\n        ...\n\nclass NarrowerReturn(A):\n    # \u66f4\u5177\u4f53\u7684\u8fd4\u56de\u7c7b\u578b\u662f\u53ef\u4ee5\u7684\n    def test(self, t: Sequence[int]) -&gt; List[str]:  # OK\n        ...\n\nclass GeneralizedReturn(A):\n    # \u66f4\u901a\u7528\u7684\u8fd4\u56de\u7c7b\u578b\u662f\u9519\u8bef\u7684\n    def test(self, t: Sequence[int]) -&gt; Iterable[str]:  # \u9519\u8bef\n        ...\n</code></pre> <p>\u4f60\u53ef\u4ee5\u4f7f\u7528 <code># type: ignore[override]</code> \u6765\u6291\u5236\u9519\u8bef\u3002\u5982\u679c\u4f60\u51b3\u5b9a\u7c7b\u578b\u5b89\u5168\u4e0d\u662f\u5fc5\u8981\u7684\uff0c\u53ef\u4ee5\u5c06\u5176\u6dfb\u52a0\u5230\u751f\u6210\u9519\u8bef\u7684\u884c\u4e0a\uff1a</p> <pre><code>class NarrowerArgument(A):\n    def test(self, t: List[int]) -&gt; Sequence[str]:  # type: ignore[override]\n        ...\n</code></pre> <p>It's unsafe to override a method with a more specific argument type, as it violates the Liskov substitution principle. For return types, it's unsafe to override a method with a more general return type.</p> <p>Other incompatible signature changes in method overrides, such as adding an extra required parameter, or removing an optional parameter, will also generate errors. The signature of a method in a subclass should accept all valid calls to the base class method. Mypy treats a subclass as a subtype of the base class. An instance of a subclass is valid everywhere where an instance of the base class is valid.</p> <p>This example demonstrates both safe and unsafe overrides:</p> <pre><code>from typing import Sequence, List, Iterable\n\nclass A:\n    def test(self, t: Sequence[int]) -&gt; Sequence[str]:\n        ...\n\nclass GeneralizedArgument(A):\n    # A more general argument type is okay\n    def test(self, t: Iterable[int]) -&gt; Sequence[str]:  # OK\n        ...\n\nclass NarrowerArgument(A):\n    # A more specific argument type isn't accepted\n    def test(self, t: List[int]) -&gt; Sequence[str]:  # Error\n        ...\n\nclass NarrowerReturn(A):\n    # A more specific return type is fine\n    def test(self, t: Sequence[int]) -&gt; List[str]:  # OK\n        ...\n\nclass GeneralizedReturn(A):\n    # A more general return type is an error\n    def test(self, t: Sequence[int]) -&gt; Iterable[str]:  # Error\n        ...\n</code></pre> <p>You can use <code># type: ignore[override]</code> to silence the error. Add it to the line that generates the error, if you decide that type safety is not necessary:</p> <pre><code>class NarrowerArgument(A):\n    def test(self, t: List[int]) -&gt; Sequence[str]:  # type: ignore[override]\n        ...\n</code></pre>"},{"location":"mypy_other/common_issues/#\u65e0\u6cd5\u5230\u8fbe\u7684\u4ee3\u7801","title":"\u65e0\u6cd5\u5230\u8fbe\u7684\u4ee3\u7801","text":"<p>Unreachable code</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u53ef\u80fd\u4f1a\u5c06\u67d0\u4e9b\u4ee3\u7801\u89c6\u4e3a \u4e0d\u53ef\u8fbe\uff0c\u5373\u4f7f\u5176\u539f\u56e0\u53ef\u80fd\u5e76\u4e0d\u7acb\u5373\u663e\u800c\u6613\u89c1\u3002\u91cd\u8981\u7684\u662f\u8981\u6ce8\u610f\uff0cmypy \u4e0d\u4f1a \u5bf9\u8fd9\u4e9b\u4e0d\u53ef\u8fbe\u7684\u4ee3\u7801\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u3002\u8003\u8651\u4ee5\u4e0b\u793a\u4f8b\uff1a</p> <pre><code>class Foo:\n    bar: str = ''\n\ndef bar() -&gt; None:\n    foo: Foo = Foo()\n    return\n    x: int = 'abc'  # \u4e0d\u53ef\u8fbe -- \u4e0d\u4f1a\u62a5\u9519\n</code></pre> <p>\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u770b\u51fa\uff0c\u4efb\u4f55\u5728 <code>return</code> \u8bed\u53e5\u4e4b\u540e\u7684\u8bed\u53e5\u90fd\u662f\u4e0d\u53ef\u8fbe\u7684\uff0c\u56e0\u6b64 mypy \u4e0d\u4f1a\u5bf9\u4e0b\u9762\u7684\u9519\u8bef\u7c7b\u578b\u4ee3\u7801\u53d1\u51fa\u8b66\u544a\u3002\u5bf9\u4e8e\u4e00\u4e2a\u66f4\u5fae\u5999\u7684\u4f8b\u5b50\uff0c\u8003\u8651\u4ee5\u4e0b\u4ee3\u7801\uff1a</p> <pre><code>class Foo:\n    bar: str = ''\n\ndef bar() -&gt; None:\n    foo: Foo = Foo()\n    assert foo.bar is None\n    x: int = 'abc'  # \u4e0d\u53ef\u8fbe -- \u4e0d\u4f1a\u62a5\u9519\n</code></pre> <p>\u540c\u6837\uff0cmypy \u4e0d\u4f1a\u62a5\u544a\u4efb\u4f55\u9519\u8bef\u3002<code>foo.bar</code> \u7684\u7c7b\u578b\u662f <code>str</code>\uff0cmypy \u8ba4\u4e3a\u5b83\u6c38\u8fdc\u4e0d\u53ef\u80fd\u662f <code>None</code>\u3002\u56e0\u6b64\uff0c<code>assert</code> \u8bed\u53e5\u603b\u662f\u4f1a\u5931\u8d25\uff0c\u4e0b\u9762\u7684\u8bed\u53e5\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u6267\u884c\u3002\uff08\u6ce8\u610f\uff0c\u5728 Python \u4e2d\uff0c<code>None</code> \u4e0d\u662f\u4e00\u4e2a\u7a7a\u5f15\u7528\uff0c\u800c\u662f\u7c7b\u578b\u4e3a <code>None</code> \u7684\u5bf9\u8c61\u3002\uff09</p> <p>\u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0cmypy \u4f1a\u7ee7\u7eed\u68c0\u67e5\u6700\u540e\u4e00\u884c\u5e76\u62a5\u544a\u9519\u8bef\uff0c\u56e0\u4e3a mypy \u8ba4\u4e3a\u6761\u4ef6\u53ef\u80fd\u4e3a <code>True</code> \u6216 <code>False</code>\uff1a</p> <pre><code>class Foo:\n    bar: str = ''\n\ndef bar() -&gt; None:\n    foo: Foo = Foo()\n    if not foo.bar:\n        return\n    x: int = 'abc'  # \u53ef\u8fbe -- \u9519\u8bef\n</code></pre> <p>\u5982\u679c\u4f60\u4f7f\u7528 <code>--warn-unreachable</code> \u6807\u5fd7\uff0cmypy \u4f1a\u5bf9\u6bcf\u4e2a\u4e0d\u53ef\u8fbe\u7684\u4ee3\u7801\u5757\u751f\u6210\u9519\u8bef\u3002</p> <p>Mypy may consider some code as unreachable, even if it might not be immediately obvious why.  It's important to note that mypy will not type check such code. Consider this example:</p> <pre><code>class Foo:\n    bar: str = ''\n\ndef bar() -&gt; None:\n    foo: Foo = Foo()\n    return\n    x: int = 'abc'  # Unreachable -- no error\n</code></pre> <p>It's easy to see that any statement after <code>return</code> is unreachable, and hence mypy will not complain about the mis-typed code below it. For a more subtle example, consider this code:</p> <pre><code>class Foo:\n    bar: str = ''\n\ndef bar() -&gt; None:\n    foo: Foo = Foo()\n    assert foo.bar is None\n    x: int = 'abc'  # Unreachable -- no error\n</code></pre> <p>Again, mypy will not report any errors. The type of <code>foo.bar</code> is <code>str</code>, and mypy reasons that it can never be <code>None</code>.  Hence the <code>assert</code> statement will always fail and the statement below will never be executed.  (Note that in Python, <code>None</code> is not an empty reference but an object of type <code>None</code>.)</p> <p>In this example mypy will go on to check the last line and report an error, since mypy thinks that the condition could be either True or False:</p> <pre><code>class Foo:\n    bar: str = ''\n\ndef bar() -&gt; None:\n    foo: Foo = Foo()\n    if not foo.bar:\n        return\n    x: int = 'abc'  # Reachable -- error\n</code></pre> <p>If you use the --warn-unreachable flag, mypy will generate an error about each unreachable code block.</p>"},{"location":"mypy_other/common_issues/#\u7f29\u5c0f\u8303\u56f4\u548c\u5185\u90e8\u51fd\u6570","title":"\u7f29\u5c0f\u8303\u56f4\u548c\u5185\u90e8\u51fd\u6570","text":"<p>Narrowing and inner functions</p> \u4e2d\u6587\u82f1\u6587 <p>\u7531\u4e8e Python \u4e2d\u7684\u95ed\u5305\u662f\u665a\u7ed1\u5b9a\u7684\uff08late-binding\uff09\uff0cmypy \u4e0d\u4f1a\u5728\u5185\u90e8\u51fd\u6570\u4e2d\u7f29\u5c0f\u6355\u83b7\u53d8\u91cf\u7684\u7c7b\u578b\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u793a\u4f8b\uff0c\u53ef\u4ee5\u66f4\u597d\u5730\u7406\u89e3\u8fd9\u4e00\u70b9\uff1a</p> <pre><code>def foo(x: Optional[int]) -&gt; Callable[[], int]:\n    if x is None:\n        x = 5\n    print(x + 1)  # mypy \u6b63\u786e\u63a8\u65ad\u6b64\u5904 x \u5fc5\u987b\u662f int\n    def inner() -&gt; int:\n        return x + 1  # \u4f46\uff08\u6b63\u786e\u5730\uff09\u5bf9\u8fd9\u4e00\u884c\u63d0\u51fa\u8b66\u544a\n\n    x = None  # \u56e0\u4e3a x \u4ee5\u540e\u53ef\u80fd\u4f1a\u88ab\u8d4b\u503c\u4e3a None\n    return inner\n\ninner = foo(5)\ninner()  # \u8c03\u7528\u65f6\u4f1a\u5f15\u53d1\u9519\u8bef\n</code></pre> <p>\u4e3a\u4e86\u4f7f\u8fd9\u6bb5\u4ee3\u7801\u80fd\u591f\u901a\u8fc7\u7c7b\u578b\u68c0\u67e5\uff0c\u4f60\u53ef\u4ee5\u5728 <code>x</code> \u7684\u7c7b\u578b\u88ab\u7f29\u5c0f\u540e\u8d4b\u503c\u7ed9 <code>y</code>\uff0c\u7136\u540e\u5728\u5185\u90e8\u51fd\u6570\u4e2d\u4f7f\u7528 <code>y</code>\uff0c\u6216\u8005\u5728\u5185\u90e8\u51fd\u6570\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u65ad\u8a00\u3002</p> <p>Because closures in Python are late-binding (https://docs.python-guide.org/writing/gotchas/#late-binding-closures), mypy will not narrow the type of a captured variable in an inner function. This is best understood via an example:</p> <pre><code>def foo(x: Optional[int]) -&gt; Callable[[], int]:\n    if x is None:\n        x = 5\n    print(x + 1)  # mypy correctly deduces x must be an int here\n    def inner() -&gt; int:\n        return x + 1  # but (correctly) complains about this line\n\n    x = None  # because x could later be assigned None\n    return inner\n\ninner = foo(5)\ninner()  # this will raise an error when called\n</code></pre> <p>To get this code to type check, you could assign <code>y = x</code> after <code>x</code> has been narrowed, and use <code>y</code> in the inner function, or add an assert in the inner function.</p>"},{"location":"mypy_other/error_code_list/","title":"\u9ed8\u8ba4\u542f\u7528\u7684\u9519\u8bef\u4ee3\u7801","text":"<p>Error codes enabled by default</p> \u4e2d\u6587\u82f1\u6587 <p>\u672c\u8282\u8bb0\u5f55\u4e86 mypy \u5728\u9ed8\u8ba4\u9009\u9879\u4e0b\u53ef\u80fd\u751f\u6210\u7684\u5404\u79cd\u9519\u8bef\u4ee3\u7801\u3002\u6709\u5173\u9519\u8bef\u4ee3\u7801\u7684\u4e00\u822c\u6587\u6863\uff0c\u8bf7\u53c2\u9605 \u9519\u8bef\u4ee3\u7801\u3002\u6709\u5173\u53ef\u9009\u68c0\u67e5\u7684\u9519\u8bef\u4ee3\u7801\uff0c\u8bf7\u53c2\u9605 \u53ef\u9009\u68c0\u67e5\u7684\u9519\u8bef\u4ee3\u7801\u3002</p> <p>This section documents various errors codes that mypy can generate with default options. See Error codes for general documentation about error codes.  Error codes for optional checks documents additional error codes that you can enable.</p>"},{"location":"mypy_other/error_code_list/#\u68c0\u67e5\u5c5e\u6027\u662f\u5426\u5b58\u5728-attr-defined","title":"\u68c0\u67e5\u5c5e\u6027\u662f\u5426\u5b58\u5728 [attr-defined]","text":"<p>Check that attribute exists [attr-defined]</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u4f1a\u68c0\u67e5\u4f7f\u7528\u70b9\u64cd\u4f5c\u7b26\u65f6\u76ee\u6807\u7c7b\u6216\u6a21\u5757\u4e2d\u662f\u5426\u5b9a\u4e49\u4e86\u67d0\u4e2a\u5c5e\u6027\u3002\u8fd9\u9002\u7528\u4e8e\u83b7\u53d6\u548c\u8bbe\u7f6e\u5c5e\u6027\u3002\u65b0\u7684\u5c5e\u6027\u901a\u8fc7\u5728\u7c7b\u4f53\u5185\u7684\u8d4b\u503c\u6216\u5728\u65b9\u6cd5\u4e2d\u5bf9 <code>self.x</code> \u7684\u8d4b\u503c\u6765\u5b9a\u4e49\u3002\u8fd9\u4e9b\u8d4b\u503c\u4e0d\u4f1a\u751f\u6210 <code>attr-defined</code> \u9519\u8bef\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>class Resource:\n    def __init__(self, name: str) -&gt; None:\n        self.name = name\n\nr = Resource('x')\nprint(r.name)  # OK\nprint(r.id)  # \u9519\u8bef: \"Resource\" \u6ca1\u6709\u5c5e\u6027 \"id\"  [attr-defined]\nr.id = 5  # \u9519\u8bef: \"Resource\" \u6ca1\u6709\u5c5e\u6027 \"id\"  [attr-defined]\n</code></pre> <p>\u5982\u679c\u5728 <code>from ... import</code> \u8bed\u53e5\u4e2d\u5bfc\u5165\u7684\u540d\u79f0\u5728\u6a21\u5757\u4e2d\u6ca1\u6709\u5b9a\u4e49\uff0c\u4e5f\u4f1a\u751f\u6210\u6b64\u9519\u8bef\u4ee3\u7801\uff08\u53ea\u8981\u76ee\u6807\u6a21\u5757\u53ef\u4ee5\u627e\u5230\uff09\uff1a</p> <pre><code># \u9519\u8bef: \u6a21\u5757 \"os\" \u6ca1\u6709\u5c5e\u6027 \"non_existent\"  [attr-defined]\nfrom os import non_existent\n</code></pre> <p>\u5bf9\u7f3a\u5931\u5c5e\u6027\u7684\u5f15\u7528\u4f1a\u88ab\u8d4b\u4e88 <code>Any</code> \u7c7b\u578b\u3002\u5728\u4e0a\u8ff0\u793a\u4f8b\u4e2d\uff0c<code>non_existent</code> \u7684\u7c7b\u578b\u5c06\u662f <code>Any</code>\uff0c\u5982\u679c\u4f60\u5ffd\u7565\u4e86\u8fd9\u4e2a\u9519\u8bef\uff0c\u8fd9\u53ef\u80fd\u662f\u91cd\u8981\u7684\u3002</p> <p>Mypy checks that an attribute is defined in the target class or module when using the dot operator. This applies to both getting and setting an attribute. New attributes are defined by assignments in the class body, or assignments to <code>self.x</code> in methods. These assignments don't generate <code>attr-defined</code> errors.</p> <p>Example:</p> <pre><code>class Resource:\n    def __init__(self, name: str) -&gt; None:\n        self.name = name\n\nr = Resource('x')\nprint(r.name)  # OK\nprint(r.id)  # Error: \"Resource\" has no attribute \"id\"  [attr-defined]\nr.id = 5  # Error: \"Resource\" has no attribute \"id\"  [attr-defined]\n</code></pre> <p>This error code is also generated if an imported name is not defined in the module in a <code>from ... import</code> statement (as long as the target module can be found):</p> <pre><code># Error: Module \"os\" has no attribute \"non_existent\"  [attr-defined]\nfrom os import non_existent\n</code></pre> <p>A reference to a missing attribute is given the <code>Any</code> type. In the above example, the type of <code>non_existent</code> will be <code>Any</code>, which can be important if you silence the error.</p>"},{"location":"mypy_other/error_code_list/#\u68c0\u67e5\u6bcf\u4e2a\u8054\u5408\u9879\u4e2d\u662f\u5426\u5b58\u5728\u5c5e\u6027-union-attr","title":"\u68c0\u67e5\u6bcf\u4e2a\u8054\u5408\u9879\u4e2d\u662f\u5426\u5b58\u5728\u5c5e\u6027 [union-attr]","text":"<p>Check that attribute exists in each union item [union-attr]</p> \u4e2d\u6587\u82f1\u6587 <p>\u5982\u679c\u4f60\u8bbf\u95ee\u4e00\u4e2a\u5177\u6709\u8054\u5408\u7c7b\u578b\uff08<code>Union</code>\uff09\u7684\u503c\u7684\u5c5e\u6027\uff0cmypy \u4f1a\u68c0\u67e5\u8be5\u5c5e\u6027\u662f\u5426\u5728\u8054\u5408\u4e2d\u7684\u6bcf\u4e2a\u7c7b\u578b\u4e2d\u90fd\u5b9a\u4e49\u4e86\u3002\u5426\u5219\uff0c\u8be5\u64cd\u4f5c\u53ef\u80fd\u4f1a\u5728\u8fd0\u884c\u65f6\u5931\u8d25\u3002\u8fd9\u540c\u6837\u9002\u7528\u4e8e\u53ef\u9009\u7c7b\u578b\uff08<code>Optional</code>\uff09\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>from typing import Union\n\nclass Cat:\n    def sleep(self) -&gt; None: ...\n    def miaow(self) -&gt; None: ...\n\nclass Dog:\n    def sleep(self) -&gt; None: ...\n    def follow_me(self) -&gt; None: ...\n\ndef func(animal: Union[Cat, Dog]) -&gt; None:\n    # OK: 'sleep' \u5728 Cat \u548c Dog \u4e2d\u90fd\u5b9a\u4e49\u4e86\n    animal.sleep()\n    # \u9519\u8bef: \u8054\u5408\u7c7b\u578b \"Union[Cat, Dog]\" \u7684\u9879 \"Cat\" \u6ca1\u6709\u5c5e\u6027 \"follow_me\"  [union-attr]\n    animal.follow_me()\n</code></pre> <p>\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 <code>assert isinstance(obj, ClassName)</code> \u6216 <code>assert obj is not None</code> \u6765\u7ed5\u8fc7\u8fd9\u4e9b\u9519\u8bef\uff0c\u4ee5\u544a\u8bc9 mypy \u4f60\u77e5\u9053\u7c7b\u578b\u6bd4 mypy \u8ba4\u4e3a\u7684\u66f4\u5177\u4f53\u3002</p> <p>If you access the attribute of a value with a union type, mypy checks that the attribute is defined for every type in that union. Otherwise the operation can fail at runtime. This also applies to optional types.</p> <p>Example:</p> <pre><code>from typing import Union\n\nclass Cat:\n    def sleep(self) -&gt; None: ...\n    def miaow(self) -&gt; None: ...\n\nclass Dog:\n    def sleep(self) -&gt; None: ...\n    def follow_me(self) -&gt; None: ...\n\ndef func(animal: Union[Cat, Dog]) -&gt; None:\n    # OK: 'sleep' is defined for both Cat and Dog\n    animal.sleep()\n    # Error: Item \"Cat\" of \"Union[Cat, Dog]\" has no attribute \"follow_me\"  [union-attr]\n    animal.follow_me()\n</code></pre> <p>You can often work around these errors by using <code>assert isinstance(obj, ClassName)</code> or <code>assert obj is not None</code> to tell mypy that you know that the type is more specific than what mypy thinks.</p>"},{"location":"mypy_other/error_code_list/#\u68c0\u67e5\u540d\u79f0\u662f\u5426\u5df2\u5b9a\u4e49-name-defined","title":"\u68c0\u67e5\u540d\u79f0\u662f\u5426\u5df2\u5b9a\u4e49 [name-defined]","text":"<p>Check that name is defined [name-defined]</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u671f\u671b\u6240\u6709\u5bf9\u540d\u79f0\u7684\u5f15\u7528\u5728\u5f53\u524d\u4f5c\u7528\u57df\u4e2d\u90fd\u6709\u5bf9\u5e94\u7684\u5b9a\u4e49\uff0c\u4f8b\u5982\u8d4b\u503c\u3001\u51fd\u6570\u5b9a\u4e49\u6216\u5bfc\u5165\u3002\u8fd9\u53ef\u4ee5\u5e2e\u52a9\u53d1\u73b0\u7f3a\u5931\u7684\u5b9a\u4e49\u3001\u7f3a\u5c11\u7684\u5bfc\u5165\u4ee5\u53ca\u62fc\u5199\u9519\u8bef\u3002</p> <p>\u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u9519\u8bef\u5730\u8c03\u7528\u4e86 <code>sort()</code> \u800c\u4e0d\u662f <code>sorted()</code>\uff1a</p> <pre><code>x = sort([3, 2, 4])  # \u9519\u8bef: \u540d\u79f0 \"sort\" \u672a\u5b9a\u4e49  [name-defined]\n</code></pre> <p>Mypy expects that all references to names have a corresponding definition in an active scope, such as an assignment, function definition or an import. This can catch missing definitions, missing imports, and typos.</p> <p>This example accidentally calls <code>sort()</code> instead of sorted():</p> <pre><code>x = sort([3, 2, 4])  # Error: Name \"sort\" is not defined  [name-defined]\n</code></pre>"},{"location":"mypy_other/error_code_list/#\u68c0\u67e5\u53d8\u91cf\u662f\u5426\u5728\u5b9a\u4e49\u524d\u88ab\u4f7f\u7528-used-before-def","title":"\u68c0\u67e5\u53d8\u91cf\u662f\u5426\u5728\u5b9a\u4e49\u524d\u88ab\u4f7f\u7528 [used-before-def]","text":"<p>Check that a variable is not used before it's defined [used-before-def]</p> \u4e2d\u6587\u82f1\u6587 <p>\u5982\u679c\u5728\u5b9a\u4e49\u4e4b\u524d\u4f7f\u7528\u4e86\u67d0\u4e2a\u540d\u79f0\uff0cMypy \u5c06\u751f\u6210\u9519\u8bef\u3002\u867d\u7136 <code>name-defined</code> \u68c0\u67e5\u4f1a\u6355\u6349\u672a\u5b9a\u4e49\u540d\u79f0\u7684\u95ee\u9898\uff0c\u4f46\u5b83\u4e0d\u4f1a\u6807\u8bb0\u5728\u4f5c\u7528\u57df\u4e2d\u5148\u4f7f\u7528\u53d8\u91cf\u7136\u540e\u518d\u5b9a\u4e49\u7684\u60c5\u51b5\u3002<code>used-before-def</code> \u68c0\u67e5\u4f1a\u6355\u6349\u8fd9\u4e9b\u60c5\u51b5\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>print(x)  # \u9519\u8bef: \u540d\u79f0 \"x\" \u5728\u5b9a\u4e49\u4e4b\u524d\u88ab\u4f7f\u7528 [used-before-def]\nx = 123\n</code></pre> <p>Mypy will generate an error if a name is used before it's defined. While the name-defined check will catch issues with names that are undefined, it will not flag if a variable is used and then defined later in the scope. used-before-def check will catch such cases.</p> <p>Example:</p> <pre><code>print(x)  # Error: Name \"x\" is used before definition [used-before-def]\nx = 123\n</code></pre>"},{"location":"mypy_other/error_code_list/#\u68c0\u67e5\u8c03\u7528\u4e2d\u7684\u53c2\u6570-call-arg","title":"\u68c0\u67e5\u8c03\u7528\u4e2d\u7684\u53c2\u6570 [call-arg]","text":"<p>Check arguments in calls [call-arg]</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u671f\u671b\u8c03\u7528\u7684\u51fd\u6570\u53c2\u6570\u7684\u6570\u91cf\u548c\u540d\u79f0\u4e0e\u5b9a\u4e49\u7684\u51fd\u6570\u5339\u914d\u3002\u8bf7\u6ce8\u610f\uff0c\u53c2\u6570\u7c7b\u578b\u68c0\u67e5\u6709\u4e00\u4e2a\u5355\u72ec\u7684\u9519\u8bef\u4ee3\u7801 <code>arg-type</code>\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>from typing import Sequence\n\ndef greet(name: str) -&gt; None:\n    print('hello', name)\n\ngreet('jack')  # \u6b63\u786e\ngreet('jill', 'jack')  # \u9519\u8bef: \"greet\" \u7684\u53c2\u6570\u8fc7\u591a [call-arg]\n</code></pre> <p>Mypy expects that the number and names of arguments match the called function. Note that argument type checks have a separate error code <code>arg-type</code>.</p> <p>Example:</p> <pre><code>from typing import Sequence\n\ndef greet(name: str) -&gt; None:\n        print('hello', name)\n\ngreet('jack')  # OK\ngreet('jill', 'jack')  # Error: Too many arguments for \"greet\"  [call-arg]\n</code></pre>"},{"location":"mypy_other/error_code_list/#\u68c0\u67e5\u53c2\u6570\u7c7b\u578b-arg-type","title":"\u68c0\u67e5\u53c2\u6570\u7c7b\u578b [arg-type]","text":"<p>Check argument types [arg-type]</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u4f1a\u68c0\u67e5\u51fd\u6570\u8c03\u7528\u4e2d\u7684\u53c2\u6570\u7c7b\u578b\u662f\u5426\u4e0e\u88ab\u8c03\u7528\u51fd\u6570\u7684\u53c2\u6570\u7b7e\u540d\u4e2d\u58f0\u660e\u7684\u7c7b\u578b\u5339\u914d\uff08\u5982\u679c\u5b58\u5728\u7b7e\u540d\u7684\u8bdd\uff09\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>from typing import Optional\n\ndef first(x: list[int]) -&gt; Optional[int]:\n    return x[0] if x else 0\n\nt = (5, 4)\n# \u9519\u8bef: \"first\" \u7684\u53c2\u6570 1 \u7c7b\u578b\u4e0d\u517c\u5bb9 \"tuple[int, int]\";\n#        \u9884\u671f\u4e3a \"list[int]\"  [arg-type]\nprint(first(t))\n</code></pre> <p>Mypy checks that argument types in a call match the declared argument types in the signature of the called function (if one exists).</p> <p>Example:</p> <pre><code>from typing import Optional\n\ndef first(x: list[int]) -&gt; Optional[int]:\n    return x[0] if x else 0\n\nt = (5, 4)\n# Error: Argument 1 to \"first\" has incompatible type \"tuple[int, int]\";\n#        expected \"list[int]\"  [arg-type]\nprint(first(t))\n</code></pre>"},{"location":"mypy_other/error_code_list/#\u68c0\u67e5\u5bf9\u91cd\u8f7d\u51fd\u6570\u7684\u8c03\u7528-call-overload","title":"\u68c0\u67e5\u5bf9\u91cd\u8f7d\u51fd\u6570\u7684\u8c03\u7528 [call-overload]","text":"<p>Check calls to overloaded functions [call-overload]</p> \u4e2d\u6587\u82f1\u6587 <p>\u5f53\u8c03\u7528\u4e00\u4e2a\u91cd\u8f7d\u51fd\u6570\u65f6\uff0cmypy \u4f1a\u68c0\u67e5\u662f\u5426\u81f3\u5c11\u6709\u4e00\u4e2a\u91cd\u8f7d\u9879\u7684\u7b7e\u540d\u4e0e\u8c03\u7528\u4e2d\u7684\u53c2\u6570\u7c7b\u578b\u5339\u914d\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>from typing import overload, Optional\n\n@overload\ndef inc_maybe(x: None) -&gt; None: ...\n\n@overload\ndef inc_maybe(x: int) -&gt; int: ...\n\ndef inc_maybe(x: Optional[int]) -&gt; Optional[int]:\n    if x is None:\n        return None\n    else:\n        return x + 1\n\ninc_maybe(None)  # OK\ninc_maybe(5)  # OK\n\n# \u9519\u8bef: \"inc_maybe\" \u6ca1\u6709\u91cd\u8f7d\u53d8\u4f53\u5339\u914d\u53c2\u6570\u7c7b\u578b \"float\"  [call-overload]\ninc_maybe(1.2)\n</code></pre> <p>When you call an overloaded function, mypy checks that at least one of the signatures of the overload items match the argument types in the call.</p> <p>Example:</p> <pre><code>from typing import overload, Optional\n\n@overload\ndef inc_maybe(x: None) -&gt; None: ...\n\n@overload\ndef inc_maybe(x: int) -&gt; int: ...\n\ndef inc_maybe(x: Optional[int]) -&gt; Optional[int]:\n    if x is None:\n        return None\n    else:\n        return x + 1\n\ninc_maybe(None)  # OK\ninc_maybe(5)  # OK\n\n# Error: No overload variant of \"inc_maybe\" matches argument type \"float\"  [call-overload]\ninc_maybe(1.2)\n</code></pre>"},{"location":"mypy_other/error_code_list/#\u68c0\u67e5\u7c7b\u578b\u7684\u6709\u6548\u6027-valid-type","title":"\u68c0\u67e5\u7c7b\u578b\u7684\u6709\u6548\u6027 [valid-type]","text":"<p>Check validity of types [valid-type]</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u4f1a\u68c0\u67e5\u6bcf\u4e2a\u7c7b\u578b\u6ce8\u89e3\u4ee5\u53ca\u4efb\u4f55\u8868\u793a\u7c7b\u578b\u7684\u8868\u8fbe\u5f0f\u662f\u5426\u4e3a\u6709\u6548\u7684\u7c7b\u578b\u3002\u6709\u6548\u7684\u7c7b\u578b\u5305\u62ec\u7c7b\u3001\u8054\u5408\u7c7b\u578b\u3001\u53ef\u8c03\u7528\u7c7b\u578b\u3001\u7c7b\u578b\u522b\u540d\u548c\u5b57\u9762\u91cf\u7c7b\u578b\u3002\u65e0\u6548\u7684\u7c7b\u578b\u5305\u62ec\u88f8\u6574\u6570\u5b57\u9762\u91cf\u3001\u51fd\u6570\u3001\u53d8\u91cf\u548c\u6a21\u5757\u3002</p> <p>\u4f8b\u5982\uff0c\u4ee5\u4e0b\u4ee3\u7801\u9519\u8bef\u5730\u5c06\u51fd\u6570 <code>log</code> \u7528\u4f5c\u7c7b\u578b\uff1a</p> <pre><code>def log(x: object) -&gt; None:\n    print('log:', repr(x))\n\n# \u9519\u8bef: \u51fd\u6570 \"t.log\" \u4f5c\u4e3a\u7c7b\u578b\u65e0\u6548  [valid-type]\ndef log_all(objs: list[object], f: log) -&gt; None:\n    for x in objs:\n        f(x)\n</code></pre> <p>\u4f60\u53ef\u4ee5\u4f7f\u7528 <code>typing.Callable</code> \u4f5c\u4e3a\u53ef\u8c03\u7528\u5bf9\u8c61\u7684\u7c7b\u578b\uff1a</p> <pre><code>from typing import Callable\n\n# \u6b63\u786e\ndef log_all(objs: list[object], f: Callable[[object], None]) -&gt; None:\n    for x in objs:\n        f(x)\n</code></pre> <p>Mypy checks that each type annotation and any expression that represents a type is a valid type. Examples of valid types include classes, union types, callable types, type aliases, and literal types. Examples of invalid types include bare integer literals, functions, variables, and modules.</p> <p>This example incorrectly uses the function <code>log</code> as a type:</p> <pre><code>def log(x: object) -&gt; None:\n    print('log:', repr(x))\n\n# Error: Function \"t.log\" is not valid as a type  [valid-type]\ndef log_all(objs: list[object], f: log) -&gt; None:\n    for x in objs:\n        f(x)\n</code></pre> <p>You can use data:<code>~typing.Callable</code> as the type for callable objects:</p> <pre><code>from typing import Callable\n\n# OK\ndef log_all(objs: list[object], f: Callable[[object], None]) -&gt; None:\n    for x in objs:\n        f(x)\n</code></pre>"},{"location":"mypy_other/error_code_list/#\u5982\u679c\u53d8\u91cf\u7c7b\u578b\u4e0d\u660e\u786e\u5219\u8981\u6c42\u6ce8\u89e3-var-annotated","title":"\u5982\u679c\u53d8\u91cf\u7c7b\u578b\u4e0d\u660e\u786e\uff0c\u5219\u8981\u6c42\u6ce8\u89e3 [var-annotated]","text":"<p>Require annotation if variable type is unclear [var-annotated]</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u6ca1\u6709\u663e\u5f0f\u7684\u6ce8\u89e3\uff0cmypy \u65e0\u6cd5\u63a8\u65ad\u53d8\u91cf\u7684\u7c7b\u578b\u3002mypy \u4f1a\u5c06\u8fd9\u79cd\u60c5\u51b5\u89c6\u4e3a\u9519\u8bef\u3002\u8fd9\u901a\u5e38\u53d1\u751f\u5728\u4f60\u7528\u7a7a\u96c6\u5408\u6216 <code>None</code> \u521d\u59cb\u5316\u53d8\u91cf\u65f6\u3002\u5982\u679c mypy \u65e0\u6cd5\u63a8\u65ad\u96c6\u5408\u9879\u7684\u7c7b\u578b\uff0c\u5b83\u4f1a\u5c06\u65e0\u6cd5\u63a8\u65ad\u7684\u90e8\u5206\u66ff\u6362\u4e3a <code>Any</code> \u5e76\u751f\u6210\u9519\u8bef\u3002</p> <p>\u4ee5\u4e0b\u662f\u4e00\u4e2a\u51fa\u9519\u7684\u793a\u4f8b\uff1a</p> <pre><code>class Bundle:\n    def __init__(self) -&gt; None:\n        # \u9519\u8bef: \u9700\u8981\u5bf9 \"items\" \u8fdb\u884c\u7c7b\u578b\u6ce8\u89e3\n        #        (\u63d0\u793a: \"items: list[&lt;type&gt;] = ...\")  [var-annotated]\n        self.items = []\n\nreveal_type(Bundle().items)  # list[Any]\n</code></pre> <p>\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u6dfb\u52a0\u4e00\u4e2a\u663e\u5f0f\u7684\u6ce8\u89e3\uff1a</p> <pre><code>class Bundle:\n    def __init__(self) -&gt; None:\n        self.items: list[str] = []  # \u6b63\u786e\n\nreveal_type(Bundle().items)  # list[str]\n</code></pre> <p>In some cases mypy can't infer the type of a variable without an explicit annotation. Mypy treats this as an error. This typically happens when you initialize a variable with an empty collection or <code>None</code>.  If mypy can't infer the collection item type, mypy replaces any parts of the type it couldn't infer with <code>Any</code> and generates an error.</p> <p>Example with an error:</p> <pre><code>class Bundle:\n    def __init__(self) -&gt; None:\n        # Error: Need type annotation for \"items\"\n        #        (hint: \"items: list[&lt;type&gt;] = ...\")  [var-annotated]\n        self.items = []\n\nreveal_type(Bundle().items)  # list[Any]\n</code></pre> <p>To address this, we add an explicit annotation:</p> <pre><code>class Bundle:\n    def __init__(self) -&gt; None:\n        self.items: list[str] = []  # OK\n\nreveal_type(Bundle().items)  # list[str]\n</code></pre>"},{"location":"mypy_other/error_code_list/#\u68c0\u67e5\u91cd\u5199\u7684\u6709\u6548\u6027-override","title":"\u68c0\u67e5\u91cd\u5199\u7684\u6709\u6548\u6027 [override]","text":"<p>Check validity of overrides [override]</p> \u4e2d\u6587\u82f1\u6587 <p>mypy \u68c0\u67e5\u91cd\u5199\u7684\u65b9\u6cd5\u6216\u5c5e\u6027\u662f\u5426\u4e0e\u57fa\u7c7b\u517c\u5bb9\u3002\u5b50\u7c7b\u4e2d\u7684\u65b9\u6cd5\u5fc5\u987b\u63a5\u53d7\u57fa\u7c7b\u65b9\u6cd5\u63a5\u53d7\u7684\u6240\u6709\u53c2\u6570\uff0c\u5e76\u4e14\u8fd4\u56de\u7c7b\u578b\u5fc5\u987b\u7b26\u5408\u57fa\u7c7b\u4e2d\u7684\u8fd4\u56de\u7c7b\u578b\uff08Liskov \u66ff\u6362\u539f\u5219\uff09\u3002</p> <p>\u5728\u5b50\u7c7b\u4e2d\uff0c\u53c2\u6570\u7c7b\u578b\u53ef\u4ee5\u66f4\u901a\u7528\uff08\u5373\uff0c\u5b83\u4eec\u53ef\u4ee5\u9006\u53d8\uff09\u3002\u8fd4\u56de\u7c7b\u578b\u53ef\u4ee5\u5728\u5b50\u7c7b\u4e2d\u53d8\u7a84\uff08\u5373\uff0c\u5b83\u4eec\u53ef\u4ee5\u534f\u53d8\uff09\u3002\u5728\u5b50\u7c7b\u65b9\u6cd5\u4e2d\u5b9a\u4e49\u989d\u5916\u7684\u53c2\u6570\u662f\u53ef\u4ee5\u7684\uff0c\u53ea\u8981\u6240\u6709\u989d\u5916\u7684\u53c2\u6570\u90fd\u6709\u9ed8\u8ba4\u503c\u6216\u53ef\u4ee5\u88ab\u7701\u7565\uff08\u4f8b\u5982 <code>*args</code>\uff09\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>from typing import Optional, Union\n\nclass Base:\n    def method(self, arg: int) -&gt; Optional[int]:\n        ...\n\nclass Derived(Base):\n    def method(self, arg: Union[int, str]) -&gt; int:  # \u6b63\u786e\n        ...\n\nclass DerivedBad(Base):\n    # \u9519\u8bef: \"method\" \u7684\u53c2\u6570 1 \u4e0e \"Base\" \u4e0d\u517c\u5bb9  [override]\n    def method(self, arg: bool) -&gt; int:\n        ...\n</code></pre> <p>Mypy checks that an overridden method or attribute is compatible with the base class.  A method in a subclass must accept all arguments that the base class method accepts, and the return type must conform to the return type in the base class (Liskov substitution principle).</p> <p>Argument types can be more general is a subclass (i.e., they can vary contravariantly).  The return type can be narrowed in a subclass (i.e., it can vary covariantly).  It's okay to define additional arguments in a subclass method, as long all extra arguments have default values or can be left out (<code>*args</code>, for example).</p> <p>Example:</p> <pre><code>from typing import Optional, Union\n\nclass Base:\n    def method(self,\n                arg: int) -&gt; Optional[int]:\n        ...\n\nclass Derived(Base):\n    def method(self,\n                arg: Union[int, str]) -&gt; int:  # OK\n        ...\n\nclass DerivedBad(Base):\n    # Error: Argument 1 of \"method\" is incompatible with \"Base\"  [override]\n    def method(self,\n                arg: bool) -&gt; int:\n        ...\n</code></pre>"},{"location":"mypy_other/error_code_list/#\u68c0\u67e5\u51fd\u6570\u662f\u5426\u8fd4\u56de\u503c-return","title":"\u68c0\u67e5\u51fd\u6570\u662f\u5426\u8fd4\u56de\u503c [return]","text":"<p>Check that function returns a value [return]</p> \u4e2d\u6587\u82f1\u6587 <p>\u5982\u679c\u4e00\u4e2a\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u4e0d\u662f <code>None</code>\uff0cmypy \u671f\u671b\u8be5\u51fd\u6570\u603b\u662f\u660e\u786e\u5730\u8fd4\u56de\u4e00\u4e2a\u503c\uff08\u6216\u5f15\u53d1\u5f02\u5e38\uff09\u3002\u51fd\u6570\u4e0d\u5e94\u5728\u672b\u5c3e\u201c\u6389\u843d\u201d\uff0c\u56e0\u4e3a\u8fd9\u901a\u5e38\u662f\u4e00\u4e2a\u9519\u8bef\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code># \u9519\u8bef: \u7f3a\u5c11\u8fd4\u56de\u8bed\u53e5  [return]\ndef show(x: int) -&gt; int:\n    print(x)\n\n# \u9519\u8bef: \u7f3a\u5c11\u8fd4\u56de\u8bed\u53e5  [return]\ndef pred1(x: int) -&gt; int:\n    if x &gt; 0:\n        return x - 1\n\n# \u6b63\u786e\ndef pred2(x: int) -&gt; int:\n    if x &gt; 0:\n        return x - 1\n    else:\n        raise ValueError('not defined for zero')\n</code></pre> <p>If a function has a non-<code>None</code> return type, mypy expects that the function always explicitly returns a value (or raises an exception). The function should not fall off the end of the function, since this is often a bug.</p> <p>Example:</p> <pre><code># Error: Missing return statement  [return]\ndef show(x: int) -&gt; int:\n    print(x)\n\n# Error: Missing return statement  [return]\ndef pred1(x: int) -&gt; int:\n    if x &gt; 0:\n        return x - 1\n\n# OK\ndef pred2(x: int) -&gt; int:\n    if x &gt; 0:\n        return x - 1\n    else:\n        raise ValueError('not defined for zero')\n</code></pre>"},{"location":"mypy_other/error_code_list/#\u68c0\u67e5\u51fd\u6570\u4f53\u662f\u5426\u4e3a\u7a7a\u4e0d\u5305\u62ec\u5b58\u6839-empty-body","title":"\u68c0\u67e5\u51fd\u6570\u4f53\u662f\u5426\u4e3a\u7a7a\uff08\u4e0d\u5305\u62ec\u5b58\u6839\uff09 [empty-body]","text":"<p>Check that functions don't have empty bodies outside stubs [empty-body]</p> \u4e2d\u6587\u82f1\u6587 <p>\u6b64\u9519\u8bef\u4ee3\u7801\u7c7b\u4f3c\u4e8e <code>[return]</code> \u4ee3\u7801\uff0c\u4f46\u4e13\u95e8\u7528\u4e8e\u5904\u7406\u5177\u6709\u7a7a\u4e3b\u4f53\u7684\u51fd\u6570\u548c\u65b9\u6cd5\uff08\u5982\u679c\u5b83\u4eec\u88ab\u6ce8\u89e3\u4e86\u975e\u5e73\u51e1\u7684\u8fd4\u56de\u7c7b\u578b\uff09\u3002\u4e4b\u6240\u4ee5\u8fdb\u884c\u8fd9\u79cd\u533a\u5206\uff0c\u662f\u56e0\u4e3a\u5728\u67d0\u4e9b\u4e0a\u4e0b\u6587\u4e2d\uff0c\u7a7a\u4e3b\u4f53\u662f\u6709\u6548\u7684\uff0c\u4f8b\u5982\u5bf9\u4e8e\u62bd\u8c61\u65b9\u6cd5\u6216\u5728\u5b58\u6839\u6587\u4ef6\u4e2d\u3002\u6b64\u5916\uff0c\u65e7\u7248\u672c\u7684 mypy \u4e0d\u52a0\u6761\u4ef6\u5730\u5141\u8bb8\u5177\u6709\u7a7a\u4e3b\u4f53\u7684\u51fd\u6570\uff0c\u56e0\u6b64\u62e5\u6709\u4e00\u4e2a\u4e13\u95e8\u7684\u9519\u8bef\u4ee3\u7801\u7b80\u5316\u4e86\u8de8\u7248\u672c\u517c\u5bb9\u6027\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u5bf9\u4e8e \u534f\u8bae \u4e2d\u7684\u65b9\u6cd5\uff0c\u5141\u8bb8\u4f7f\u7528\u7a7a\u4e3b\u4f53\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u88ab\u89c6\u4e3a\u9690\u5f0f\u62bd\u8c61\uff1a</p> <pre><code>from abc import abstractmethod\nfrom typing import Protocol\n\nclass RegularABC:\n    @abstractmethod\n    def foo(self) -&gt; int:\n        pass  # OK\n    def bar(self) -&gt; int:\n        pass  # \u9519\u8bef: \u7f3a\u5c11\u8fd4\u56de\u8bed\u53e5  [empty-body]\n\nclass Proto(Protocol):\n    def bar(self) -&gt; int:\n        pass  # OK\n</code></pre> <p>This error code is similar to the <code>[return]</code> code but is emitted specifically for functions and methods with empty bodies (if they are annotated with non-trivial return type). Such a distinction exists because in some contexts an empty body can be valid, for example for an abstract method or in a stub file. Also old versions of mypy used to unconditionally allow functions with empty bodies, so having a dedicated error code simplifies cross-version compatibility.</p> <p>Note that empty bodies are allowed for methods in protocols, and such methods are considered implicitly abstract:</p> <pre><code>from abc import abstractmethod\nfrom typing import Protocol\n\nclass RegularABC:\n    @abstractmethod\n    def foo(self) -&gt; int:\n        pass  # OK\n    def bar(self) -&gt; int:\n        pass  # Error: Missing return statement  [empty-body]\n\nclass Proto(Protocol):\n    def bar(self) -&gt; int:\n        pass  # OK\n</code></pre>"},{"location":"mypy_other/error_code_list/#\u68c0\u67e5\u8fd4\u56de\u503c\u662f\u5426\u517c\u5bb9-return-value","title":"\u68c0\u67e5\u8fd4\u56de\u503c\u662f\u5426\u517c\u5bb9 [return-value]","text":"<p>Check that return value is compatible [return-value]</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u4f1a\u68c0\u67e5\u8fd4\u56de\u503c\u662f\u5426\u4e0e\u51fd\u6570\u7684\u7c7b\u578b\u7b7e\u540d\u517c\u5bb9\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>def func(x: int) -&gt; str:\n    # \u9519\u8bef: \u8fd4\u56de\u503c\u7c7b\u578b\u4e0d\u517c\u5bb9\uff08\u83b7\u5f97\u4e86 \"int\"\uff0c\u671f\u671b\u662f \"str\"\uff09  [return-value]\n    return x + 1\n</code></pre> <p>Mypy checks that the returned value is compatible with the type signature of the function.</p> <p>Example:</p> <pre><code>def func(x: int) -&gt; str:\n    # Error: Incompatible return value type (got \"int\", expected \"str\")  [return-value]\n    return x + 1\n</code></pre>"},{"location":"mypy_other/error_code_list/#\u68c0\u67e5\u8d4b\u503c\u8bed\u53e5\u4e2d\u7684\u7c7b\u578b-assignment","title":"\u68c0\u67e5\u8d4b\u503c\u8bed\u53e5\u4e2d\u7684\u7c7b\u578b [assignment]","text":"<p>Check types in assignment statement [assignment]</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u4f1a\u68c0\u67e5\u8d4b\u503c\u8868\u8fbe\u5f0f\u662f\u5426\u4e0e\u8d4b\u503c\u76ee\u6807\uff08\u6216\u76ee\u6807\u4eec\uff09\u517c\u5bb9\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>class Resource:\n    def __init__(self, name: str) -&gt; None:\n        self.name = name\n\nr = Resource('A')\n\nr.name = 'B'  # \u6b63\u786e\n\n# \u9519\u8bef: \u8d4b\u503c\u4e2d\u7684\u7c7b\u578b\u4e0d\u517c\u5bb9\uff08\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u662f \"int\"\uff0c\u53d8\u91cf\u7684\u7c7b\u578b\u662f \"str\"\uff09  [assignment]\nr.name = 5\n</code></pre> <p>Mypy checks that the assigned expression is compatible with the assignment target (or targets).</p> <p>Example:</p> <pre><code>class Resource:\n    def __init__(self, name: str) -&gt; None:\n        self.name = name\n\nr = Resource('A')\n\nr.name = 'B'  # OK\n\n# Error: Incompatible types in assignment (expression has type \"int\",\n#        variable has type \"str\")  [assignment]\nr.name = 5\n</code></pre>"},{"location":"mypy_other/error_code_list/#\u68c0\u67e5\u8d4b\u503c\u76ee\u6807\u662f\u5426\u4e0d\u662f\u65b9\u6cd5-method-assign","title":"\u68c0\u67e5\u8d4b\u503c\u76ee\u6807\u662f\u5426\u4e0d\u662f\u65b9\u6cd5 [method-assign]","text":"<p>Check that assignment target is not a method [method-assign]</p> \u4e2d\u6587\u82f1\u6587 <p>\u4e00\u822c\u6765\u8bf4\uff0c\u7ed9\u7c7b\u5bf9\u8c61\u6216\u5b9e\u4f8b\u4e0a\u7684\u65b9\u6cd5\u8d4b\u503c\uff08\u5373\u7334\u5b50\u8865\u4e01\uff09\u5728\u7c7b\u578b\u4e0a\u662f\u4e0d\u660e\u786e\u7684\uff0c\u56e0\u4e3a Python \u7684\u9759\u6001\u7c7b\u578b\u7cfb\u7edf\u65e0\u6cd5\u8868\u8fbe\u7ed1\u5b9a\u548c\u672a\u7ed1\u5b9a\u53ef\u8c03\u7528\u7c7b\u578b\u4e4b\u95f4\u7684\u533a\u522b\u3002\u8003\u8651\u4ee5\u4e0b\u793a\u4f8b\uff1a</p> <pre><code>class A:\n    def f(self) -&gt; None: pass\n    def g(self) -&gt; None: pass\n\ndef h(self: A) -&gt; None: pass\n\nA.f = h  # h \u7684\u7c7b\u578b\u662f Callable[[A], None]\nA().f()  # \u8fd9\u4f1a\u6b63\u5e38\u5de5\u4f5c\nA.f = A().g  # A().g \u7684\u7c7b\u578b\u662f Callable[[], None]\nA().f()  # ...\u4f46\u5728\u8fd0\u884c\u65f6\u8fd9\u4e5f\u4f1a\u6b63\u5e38\u5de5\u4f5c\n</code></pre> <p>\u4e3a\u4e86\u907f\u514d\u8fd9\u79cd\u6a21\u7cca\u6027\uff0cmypy \u9ed8\u8ba4\u4f1a\u6807\u8bb0\u8fd9\u4e24\u79cd\u8d4b\u503c\u3002\u5982\u679c\u7981\u7528\u4e86\u8fd9\u4e2a\u9519\u8bef\u4ee3\u7801\uff0cmypy \u4f1a\u5c06\u6240\u6709\u65b9\u6cd5\u8d4b\u503c\u4e2d\u7684\u8d4b\u503c\u503c\u89c6\u4e3a\u672a\u7ed1\u5b9a\u7684\uff0c\u56e0\u6b64\u53ea\u6709\u7b2c\u4e8c\u79cd\u8d4b\u503c\u4ecd\u4f1a\u751f\u6210\u9519\u8bef\u3002</p> <p>Note</p> <p>\u8fd9\u4e2a\u9519\u8bef\u4ee3\u7801\u662f\u66f4\u4e00\u822c\u7684 <code>[assignment]</code> \u4ee3\u7801\u7684\u5b50\u4ee3\u7801\u3002</p> <p>In general, assigning to a method on class object or instance (a.k.a. monkey-patching) is ambiguous in terms of types, since Python's static type system cannot express the difference between bound and unbound callable types. Consider this example:</p> <pre><code>class A:\n    def f(self) -&gt; None: pass\n    def g(self) -&gt; None: pass\n\ndef h(self: A) -&gt; None: pass\n\nA.f = h  # Type of h is Callable[[A], None]\nA().f()  # This works\nA.f = A().g  # Type of A().g is Callable[[], None]\nA().f()  # ...but this also works at runtime\n</code></pre> <p>To prevent the ambiguity, mypy will flag both assignments by default. If this error code is disabled, mypy will treat the assigned value in all method assignments as unbound, so only the second assignment will still generate an error.</p> <p>Note</p> <p>This error code is a subcode of the more general <code>[assignment]</code> code.</p>"},{"location":"mypy_other/error_code_list/#\u68c0\u67e5\u7c7b\u578b\u53d8\u91cf\u503c-type-var","title":"\u68c0\u67e5\u7c7b\u578b\u53d8\u91cf\u503c [type-var]","text":"<p>Check type variable values [type-var]</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u68c0\u67e5\u7c7b\u578b\u53d8\u91cf\u7684\u503c\u662f\u5426\u4e0e\u503c\u9650\u5236\u6216\u4e0a\u754c\u7c7b\u578b\u517c\u5bb9\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>from typing import TypeVar\n\nT1 = TypeVar('T1', int, float)\n\ndef add(x: T1, y: T1) -&gt; T1:\n    return x + y\n\nadd(4, 5.5)  # OK\n\n# \u9519\u8bef\uff1a\u7c7b\u578b\u53d8\u91cf \"T1\" \u7684\u503c\u4e0d\u80fd\u662f \"str\"  [type-var]\nadd('x', 'y')\n</code></pre> <p>Mypy checks that value of a type variable is compatible with a value restriction or the upper bound type.</p> <p>Example:</p> <pre><code>from typing import TypeVar\n\nT1 = TypeVar('T1', int, float)\n\ndef add(x: T1, y: T1) -&gt; T1:\n    return x + y\n\nadd(4, 5.5)  # OK\n\n# Error: Value of type variable \"T1\" of \"add\" cannot be \"str\"  [type-var]\nadd('x', 'y')\n</code></pre>"},{"location":"mypy_other/error_code_list/#\u68c0\u67e5\u5404\u79cd\u64cd\u4f5c\u7b26\u7684\u4f7f\u7528-operator","title":"\u68c0\u67e5\u5404\u79cd\u64cd\u4f5c\u7b26\u7684\u4f7f\u7528 [operator]","text":"<p>Check uses of various operators [operator]</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u68c0\u67e5\u64cd\u4f5c\u6570\u662f\u5426\u652f\u6301\u4e8c\u5143\u6216\u4e00\u5143\u64cd\u4f5c\uff0c\u4f8b\u5982 <code>+</code> \u6216 <code>~</code>\u3002\u7d22\u5f15\u64cd\u4f5c\u975e\u5e38\u5e38\u89c1\uff0c\u56e0\u6b64\u5b83\u4eec\u6709\u81ea\u5df1\u7684\u9519\u8bef\u4ee3\u7801 <code>index</code>\uff08\u89c1\u4e0b\u6587\uff09\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code># \u9519\u8bef\uff1a\u4e0d\u652f\u6301\u7684\u64cd\u4f5c\u6570\u7c7b\u578b\u7528\u4e8e + (\"int\" \u548c \"str\")  [operator]\n1 + 'x'\n</code></pre> <p>Mypy checks that operands support a binary or unary operation, such as <code>+</code> or <code>~</code>. Indexing operations are so common that they have their own error code <code>index</code> (see below).</p> <p>Example:</p> <pre><code># Error: Unsupported operand types for + (\"int\" and \"str\")  [operator]\n1 + 'x'\n</code></pre>"},{"location":"mypy_other/error_code_list/#\u68c0\u67e5\u7d22\u5f15\u64cd\u4f5c-index","title":"\u68c0\u67e5\u7d22\u5f15\u64cd\u4f5c [index]","text":"<p>Check indexing operations [index]</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u68c0\u67e5\u5728\u7d22\u5f15\u64cd\u4f5c\uff08\u4f8b\u5982 <code>x[y]</code>\uff09\u4e2d\uff0c\u88ab\u7d22\u5f15\u7684\u503c\u662f\u5426\u652f\u6301\u7d22\u5f15\uff0c\u5e76\u4e14\u7d22\u5f15\u8868\u8fbe\u5f0f\u662f\u5426\u5177\u6709\u6709\u6548\u7684\u7c7b\u578b\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>a = {'x': 1, 'y': 2}\n\na['x']  # \u6b63\u786e\n\n# \u9519\u8bef\uff1a\u7d22\u5f15\u7c7b\u578b \"int\" \u5bf9\u4e8e \"dict[str, int]\" \u65e0\u6548\uff1b\u9884\u671f\u7c7b\u578b\u4e3a \"str\"  [index]\nprint(a[1])\n\n# \u9519\u8bef\uff1a\u7d22\u5f15\u7c7b\u578b \"bytes\" \u5bf9\u4e8e \"dict[str, int]\" \u65e0\u6548\uff1b\u9884\u671f\u7c7b\u578b\u4e3a \"str\"  [index]\na[b'x'] = 4\n</code></pre> <p>Mypy checks that the indexed value in indexing operation such as <code>x[y]</code> supports indexing, and that the index expression has a valid type.</p> <p>Example:</p> <pre><code>a = {'x': 1, 'y': 2}\n\na['x']  # OK\n\n# Error: Invalid index type \"int\" for \"dict[str, int]\"; expected type \"str\"  [index]\nprint(a[1])\n\n# Error: Invalid index type \"bytes\" for \"dict[str, int]\"; expected type \"str\"  [index]\na[b'x'] = 4\n</code></pre>"},{"location":"mypy_other/error_code_list/#\u68c0\u67e5\u5217\u8868\u9879-list-item","title":"\u68c0\u67e5\u5217\u8868\u9879 [list-item]","text":"<p>Check list items [list-item]</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u4f7f\u7528 <code>[item, ...]</code> \u6784\u9020\u5217\u8868\u65f6\uff0cmypy \u4f1a\u68c0\u67e5\u6bcf\u4e2a\u9879\u76ee\u662f\u5426\u4e0e\u4ece\u5468\u56f4\u4e0a\u4e0b\u6587\u63a8\u65ad\u51fa\u7684\u5217\u8868\u7c7b\u578b\u517c\u5bb9\u3002</p> <p>\u793a\u4f8b\uff1a</p> <p><pre><code># \u9519\u8bef\uff1a\u5217\u8868\u9879 0 \u7684\u7c7b\u578b \"int\" \u4e0d\u517c\u5bb9\uff1b\u9884\u671f\u7c7b\u578b\u4e3a \"str\"  [list-item]\na: list[str] = [0]\n</code></pre> ```</p> <p>When constructing a list using <code>[item, ...]</code>, mypy checks that each item is compatible with the list type that is inferred from the surrounding context.</p> <p>Example:</p> <pre><code># Error: List item 0 has incompatible type \"int\"; expected \"str\"  [list-item]\na: list[str] = [0]\n</code></pre>"},{"location":"mypy_other/error_code_list/#\u68c0\u67e5\u5b57\u5178\u9879-dict-item","title":"\u68c0\u67e5\u5b57\u5178\u9879 [dict-item]","text":"<p>Check dict items [dict-item]</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u4f7f\u7528 <code>{key: value, ...}</code> \u6216 <code>dict(key=value, ...)</code> \u6784\u9020\u5b57\u5178\u65f6\uff0cmypy \u4f1a\u68c0\u67e5\u6bcf\u4e2a\u952e\u548c\u503c\u662f\u5426\u4e0e\u4ece\u5468\u56f4\u4e0a\u4e0b\u6587\u63a8\u65ad\u51fa\u7684\u5b57\u5178\u7c7b\u578b\u517c\u5bb9\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code># \u9519\u8bef\uff1a\u5b57\u5178\u9879 0 \u7684\u7c7b\u578b \"str\": \"str\" \u4e0d\u517c\u5bb9\uff1b\u9884\u671f\u7c7b\u578b\u4e3a \"str\": \"int\"  [dict-item]\nd: dict[str, int] = {'key': 'value'}\n</code></pre> <p>When constructing a dictionary using <code>{key: value, ...}</code> or <code>dict(key=value, ...)</code>, mypy checks that each key and value is compatible with the dictionary type that is inferred from the surrounding context.</p> <p>Example:</p> <pre><code># Error: Dict entry 0 has incompatible type \"str\": \"str\"; expected \"str\": \"int\"  [dict-item]\nd: dict[str, int] = {'key': 'value'}\n</code></pre>"},{"location":"mypy_other/error_code_list/#\u68c0\u67e5-typeddict-\u9879-typeddict-item","title":"\u68c0\u67e5 TypedDict \u9879 [typeddict-item]","text":"<p>Check TypedDict items [typeddict-item]</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u6784\u9020 <code>TypedDict</code> \u5bf9\u8c61\u65f6\uff0cmypy \u4f1a\u68c0\u67e5\u6bcf\u4e2a\u952e\u548c\u503c\u662f\u5426\u4e0e\u4ece\u5468\u56f4\u4e0a\u4e0b\u6587\u63a8\u65ad\u51fa\u7684 <code>TypedDict</code> \u7c7b\u578b\u517c\u5bb9\u3002</p> <p>\u5728\u83b7\u53d6 <code>TypedDict</code> \u9879\u76ee\u65f6\uff0cmypy \u4f1a\u68c0\u67e5\u8be5\u952e\u662f\u5426\u5b58\u5728\u3002\u5728\u7ed9 <code>TypedDict</code> \u8d4b\u503c\u65f6\uff0cmypy \u4f1a\u68c0\u67e5\u952e\u548c\u503c\u662f\u5426\u6709\u6548\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>from typing import TypedDict\n\nclass Point(TypedDict):\n    x: int\n    y: int\n\n# \u9519\u8bef\uff1a\u7c7b\u578b\u4e0d\u517c\u5bb9\uff08\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u4e3a \"float\"\uff0c\n#        TypedDict \u9879\u76ee \"x\" \u7684\u7c7b\u578b\u4e3a \"int\"\uff09  [typeddict-item]\np: Point = {'x': 1.2, 'y': 4}\n</code></pre> <p>When constructing a TypedDict object, mypy checks that each key and value is compatible with the TypedDict type that is inferred from the surrounding context.</p> <p>When getting a TypedDict item, mypy checks that the key exists. When assigning to a TypedDict, mypy checks that both the key and the value are valid.</p> <p>Example:</p> <pre><code>from typing import TypedDict\n\nclass Point(TypedDict):\n    x: int\n    y: int\n\n# Error: Incompatible types (expression has type \"float\",\n#        TypedDict item \"x\" has type \"int\")  [typeddict-item]\np: Point = {'x': 1.2, 'y': 4}\n</code></pre>"},{"location":"mypy_other/error_code_list/#\u68c0\u67e5-typeddict-\u952e-typeddict-unknown-key","title":"\u68c0\u67e5 TypedDict \u952e [typeddict-unknown-key]","text":"<p>Check TypedDict Keys [typeddict-unknown-key]</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u6784\u9020 <code>TypedDict</code> \u5bf9\u8c61\u65f6\uff0cmypy \u4f1a\u68c0\u67e5\u5b9a\u4e49\u4e2d\u662f\u5426\u5305\u542b\u672a\u77e5\u952e\uff0c\u4ee5\u6355\u6349\u65e0\u6548\u952e\u548c\u62fc\u5199\u9519\u8bef\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5f53\u4e00\u4e2a\u5305\u542b\u989d\u5916\u952e\u7684\u5df2\u6784\u9020\u7684 <code>TypedDict</code> \u503c\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u51fd\u6570\u65f6\uff0cmypy \u4e0d\u4f1a\u751f\u6210\u9519\u8bef\uff0c\u56e0\u4e3a <code>TypedDict</code> \u503c\u652f\u6301\u7ed3\u6784\u5b50\u7c7b\u578b\uff08\u5373\u201c\u9759\u6001\u9e2d\u5b50\u7c7b\u578b\u201d\uff09\uff0c\u952e\u5728\u6784\u9020\u65f6\u88ab\u8ba4\u4e3a\u5df2\u7ecf\u8fc7\u9a8c\u8bc1\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>from typing import TypedDict\n\nclass Point(TypedDict):\n    x: int\n    y: int\n\nclass Point3D(Point):\n    z: int\n\ndef add_x_coordinates(a: Point, b: Point) -&gt; int:\n    return a[\"x\"] + b[\"x\"]\n\na: Point = {\"x\": 1, \"y\": 4}\nb: Point3D = {\"x\": 2, \"y\": 5, \"z\": 6}\n\nadd_x_coordinates(a, b)  # OK\n\n# \u9519\u8bef\uff1aTypedDict \"Point\" \u7684\u989d\u5916\u952e \"z\"  [typeddict-unknown-key]\nadd_x_coordinates(a, {\"x\": 1, \"y\": 4, \"z\": 5})\n</code></pre> <p>\u4f7f\u7528\u672a\u77e5\u952e\u8bbe\u7f6e <code>TypedDict</code> \u9879\u76ee\u4e5f\u4f1a\u751f\u6210\u6b64\u9519\u8bef\uff0c\u56e0\u4e3a\u5b83\u53ef\u80fd\u662f\u62fc\u5199\u9519\u8bef\uff1a</p> <pre><code>a: Point = {\"x\": 1, \"y\": 2}\n# \u9519\u8bef\uff1aTypedDict \"Point\" \u7684\u989d\u5916\u952e \"z\"  [typeddict-unknown-key]\na[\"z\"] = 3\n</code></pre> <p>\u8bfb\u53d6\u672a\u77e5\u952e\u5c06\u751f\u6210\u66f4\u4e00\u822c\uff08\u4e14\u66f4\u4e25\u91cd\uff09\u7684 <code>typeddict-item</code> \u9519\u8bef\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5728\u8fd0\u884c\u65f6\u5f15\u53d1\u5f02\u5e38\uff1a</p> <pre><code>a: Point = {\"x\": 1, \"y\": 2}\n# \u9519\u8bef\uff1aTypedDict \"Point\" \u6ca1\u6709\u952e \"z\"  [typeddict-item]\n_ = a[\"z\"]\n</code></pre> <p>\u6ce8\u610f</p> <p>\u6b64\u9519\u8bef\u4ee3\u7801\u662f\u66f4\u5e7f\u6cdb\u7684 <code>[typeddict-item]</code> \u4ee3\u7801\u7684\u5b50\u4ee3\u7801\u3002</p> <p>When constructing a TypedDict object, mypy checks whether the definition contains unknown keys, to catch invalid keys and misspellings. On the other hand, mypy will not generate an error when a previously constructed TypedDict value with extra keys is passed to a function as an argument, since TypedDict values support structural subtyping (\"static duck typing\") and the keys are assumed to have been validated at the point of construction. Example:</p> <pre><code>from typing import TypedDict\n\nclass Point(TypedDict):\n    x: int\n    y: int\n\nclass Point3D(Point):\n    z: int\n\ndef add_x_coordinates(a: Point, b: Point) -&gt; int:\n    return a[\"x\"] + b[\"x\"]\n\na: Point = {\"x\": 1, \"y\": 4}\nb: Point3D = {\"x\": 2, \"y\": 5, \"z\": 6}\n\nadd_x_coordinates(a, b)  # OK\n\n# Error: Extra key \"z\" for TypedDict \"Point\"  [typeddict-unknown-key]\nadd_x_coordinates(a, {\"x\": 1, \"y\": 4, \"z\": 5})\n</code></pre> <p>Setting a TypedDict item using an unknown key will also generate this error, since it could be a misspelling:</p> <pre><code>a: Point = {\"x\": 1, \"y\": 2}\n# Error: Extra key \"z\" for TypedDict \"Point\"  [typeddict-unknown-key]\na[\"z\"] = 3\n</code></pre> <p>Reading an unknown key will generate the more general (and serious) <code>typeddict-item</code> error, which is likely to result in an exception at runtime:</p> <pre><code>a: Point = {\"x\": 1, \"y\": 2}\n# Error: TypedDict \"Point\" has no key \"z\"  [typeddict-item]\n_ = a[\"z\"]\n</code></pre> <p>Note</p> <p>This error code is a subcode of the wider <code>[typeddict-item]</code> code.</p>"},{"location":"mypy_other/error_code_list/#\u68c0\u67e5\u76ee\u6807\u7c7b\u578b\u662f\u5426\u5df2\u77e5-has-type","title":"\u68c0\u67e5\u76ee\u6807\u7c7b\u578b\u662f\u5426\u5df2\u77e5 [has-type]","text":"<p>Check that type of target is known [has-type]</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5f53 mypy \u65e0\u6cd5\u63a8\u65ad\u51fa\u88ab\u5f15\u7528\u53d8\u91cf\u7684\u7c7b\u578b\u65f6\uff0c\u5b83\u4f1a\u751f\u6210\u9519\u8bef\u3002\u8fd9\u53ef\u80fd\u53d1\u751f\u5728\u5f15\u7528\u7684\u53d8\u91cf\u5728\u6e90\u6587\u4ef6\u4e2d\u7a0d\u540e\u521d\u59cb\u5316\uff0c\u6216\u8005\u5728\u5f62\u6210\u5bfc\u5165\u5faa\u73af\u7684\u8de8\u6a21\u5757\u5f15\u7528\u4e2d\u3002\u5f53\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u65f6\uff0c\u5f15\u7528\u4f1a\u5f97\u5230\u4e00\u4e2a\u9690\u5f0f\u7684 <code>Any</code> \u7c7b\u578b\u3002</p> <p>\u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0c<code>x</code> \u548c <code>y</code> \u7684\u5b9a\u4e49\u662f\u5faa\u73af\u7684\uff1a</p> <pre><code>class Problem:\n    def set_x(self) -&gt; None:\n        # \u9519\u8bef\uff1a\u65e0\u6cd5\u786e\u5b9a \"y\" \u7684\u7c7b\u578b  [has-type]\n        self.x = self.y\n\n    def set_y(self) -&gt; None:\n        self.y = self.x\n</code></pre> <p>\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f60\u53ef\u4ee5\u4e3a\u76ee\u6807\u53d8\u91cf\u6216\u5c5e\u6027\u6dfb\u52a0\u663e\u5f0f\u7684\u7c7b\u578b\u6ce8\u91ca\u3002\u6709\u65f6\u4f60\u4e5f\u53ef\u4ee5\u91cd\u65b0\u7ec4\u7ec7\u4ee3\u7801\uff0c\u5c06\u53d8\u91cf\u7684\u5b9a\u4e49\u653e\u5728\u6e90\u6587\u4ef6\u4e2d\u5f15\u7528\u53d8\u91cf\u4e4b\u524d\u7684\u4f4d\u7f6e\u3002\u89e3\u5f00\u5faa\u73af\u5bfc\u5165\u4e5f\u53ef\u80fd\u6709\u52a9\u4e8e\u89e3\u51b3\u95ee\u9898\u3002</p> <p>\u6211\u4eec\u901a\u8fc7\u7ed9 <code>y</code> \u5c5e\u6027\u6dfb\u52a0\u663e\u5f0f\u6ce8\u91ca\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff1a</p> <pre><code>class Problem:\n    def set_x(self) -&gt; None:\n        self.x = self.y  # OK\n\n    def set_y(self) -&gt; None:\n        self.y: int = self.x  # \u8fd9\u91cc\u6dfb\u52a0\u4e86\u6ce8\u91ca\n</code></pre> <p>Mypy sometimes generates an error when it hasn't inferred any type for a variable being referenced. This can happen for references to variables that are initialized later in the source file, and for references across modules that form an import cycle. When this happens, the reference gets an implicit <code>Any</code> type.</p> <p>In this example the definitions of <code>x</code> and <code>y</code> are circular:</p> <pre><code>class Problem:\n    def set_x(self) -&gt; None:\n        # Error: Cannot determine type of \"y\"  [has-type]\n        self.x = self.y\n\n    def set_y(self) -&gt; None:\n        self.y = self.x\n</code></pre> <p>To work around this error, you can add an explicit type annotation to the target variable or attribute. Sometimes you can also reorganize the code so that the definition of the variable is placed earlier than the reference to the variable in a source file. Untangling cyclic imports may also help.</p> <p>We add an explicit annotation to the <code>y</code> attribute to work around the issue:</p> <pre><code>class Problem:\n    def set_x(self) -&gt; None:\n        self.x = self.y  # OK\n\n    def set_y(self) -&gt; None:\n        self.y: int = self.x  # Added annotation here\n</code></pre>"},{"location":"mypy_other/error_code_list/#\u68c0\u67e5\u5bfc\u5165\u95ee\u9898-import","title":"\u68c0\u67e5\u5bfc\u5165\u95ee\u9898 [import]","text":"<p>Check for an issue with imports [import]</p> \u4e2d\u6587\u82f1\u6587 <p>\u5982\u679c mypy \u65e0\u6cd5\u89e3\u6790 <code>import</code> \u8bed\u53e5\uff0c\u5b83\u4f1a\u751f\u6210\u9519\u8bef\u3002\u8fd9\u662f <code>import-not-found</code> \u548c <code>import-untyped</code> \u7684\u7236\u9519\u8bef\u4ee3\u7801\u3002</p> <p>\u6709\u5173\u5982\u4f55\u89e3\u51b3\u8fd9\u4e9b\u9519\u8bef\u7684\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 \u7f3a\u5931\u7684\u5bfc\u5165\u3002</p> <p>Mypy generates an error if it can't resolve an <code>import</code> statement. This is a parent error code of <code>import-not-found</code> and <code>import-untyped</code></p> <p>See Missing imports for how to work around these errors.</p>"},{"location":"mypy_other/error_code_list/#\u68c0\u67e5\u5bfc\u5165\u76ee\u6807\u662f\u5426\u53ef\u4ee5\u627e\u5230-import-not-found","title":"\u68c0\u67e5\u5bfc\u5165\u76ee\u6807\u662f\u5426\u53ef\u4ee5\u627e\u5230 [import-not-found]","text":"<p>Check that import target can be found [import-not-found]</p> \u4e2d\u6587\u82f1\u6587 <p>\u5982\u679c mypy \u65e0\u6cd5\u627e\u5230\u5bfc\u5165\u6a21\u5757\u7684\u6e90\u4ee3\u7801\u6216\u5b58\u6839\u6587\u4ef6\uff0c\u5b83\u4f1a\u751f\u6210\u9519\u8bef\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code># \u9519\u8bef: \u65e0\u6cd5\u627e\u5230\u540d\u4e3a \"m0dule_with_typo\" \u7684\u6a21\u5757\u7684\u5b9e\u73b0\u6216\u5e93\u5b58\u6839  [import-not-found]\nimport m0dule_with_typo\n</code></pre> <p>\u6709\u5173\u5982\u4f55\u89e3\u51b3\u8fd9\u4e9b\u9519\u8bef\u7684\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 \u7f3a\u5931\u7684\u5bfc\u5165\u3002</p> <p>Mypy generates an error if it can't find the source code or a stub file for an imported module.</p> <p>Example:</p> <pre><code># Error: Cannot find implementation or library stub for module named \"m0dule_with_typo\"  [import-not-found]\nimport m0dule_with_typo\n</code></pre> <p>See Missing imports for how to work around these errors.</p>"},{"location":"mypy_other/error_code_list/#\u68c0\u67e5\u5bfc\u5165\u76ee\u6807\u662f\u5426\u53ef\u4ee5\u627e\u5230-import-untyped","title":"\u68c0\u67e5\u5bfc\u5165\u76ee\u6807\u662f\u5426\u53ef\u4ee5\u627e\u5230 [import-untyped]","text":"<p>Check that import target can be found [import-untyped]</p> \u4e2d\u6587\u82f1\u6587 <p>\u5982\u679c mypy \u80fd\u627e\u5230\u5bfc\u5165\u6a21\u5757\u7684\u6e90\u4ee3\u7801\uff0c\u4f46\u8be5\u6a21\u5757\u6ca1\u6709\u63d0\u4f9b\u7c7b\u578b\u6ce8\u89e3\uff08\u901a\u8fc7 PEP 561\uff09\uff0cmypy \u4f1a\u751f\u6210\u9519\u8bef\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code># \u9519\u8bef: \"bs4\" \u7684\u5e93\u5b58\u6839\u672a\u5b89\u88c5  [import-untyped]\nimport bs4\n# \u9519\u8bef: \u8df3\u8fc7\u5206\u6790 \"no_py_typed\": \u6a21\u5757\u5df2\u5b89\u88c5\uff0c\u4f46\u7f3a\u5c11\u5e93\u5b58\u6839\u6216 py.typed \u6807\u8bb0  [import-untyped]\nimport no_py_typed\n</code></pre> <p>\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u901a\u8fc7\u5b89\u88c5\u9002\u5f53\u7684\u5b58\u6839\u5305\u6765\u89e3\u51b3\u8fd9\u4e9b\u9519\u8bef\u3002\u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 \u7f3a\u5931\u7684\u5bfc\u5165\u3002</p> <p>Mypy generates an error if it can find the source code for an imported module, but that module does not provide type annotations (via PEP 561).</p> <p>Example:</p> <pre><code># Error: Library stubs not installed for \"bs4\"  [import-untyped]\nimport bs4\n# Error: Skipping analyzing \"no_py_typed\": module is installed, but missing library stubs or py.typed marker  [import-untyped]\nimport no_py_typed\n</code></pre> <p>In some cases, these errors can be fixed by installing an appropriate stub package. See Missing imports for more details.</p>"},{"location":"mypy_other/error_code_list/#\u68c0\u67e5\u6bcf\u4e2a\u540d\u79f0\u662f\u5426\u4ec5\u5b9a\u4e49\u4e00\u6b21-no-redef","title":"\u68c0\u67e5\u6bcf\u4e2a\u540d\u79f0\u662f\u5426\u4ec5\u5b9a\u4e49\u4e00\u6b21 [no-redef]","text":"<p>Check that each name is defined once [no-redef]</p> \u4e2d\u6587\u82f1\u6587 <p>\u5982\u679c\u5728\u540c\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u4e2d\u6709\u591a\u4e2a\u540d\u79f0\u5b9a\u4e49\uff0cmypy \u53ef\u80fd\u4f1a\u751f\u6210\u9519\u8bef\u3002\u539f\u56e0\u662f\u8fd9\u901a\u5e38\u662f\u4e00\u4e2a\u9519\u8bef\uff0c\u56e0\u4e3a\u7b2c\u4e8c\u4e2a\u5b9a\u4e49\u53ef\u80fd\u4f1a\u8986\u76d6\u7b2c\u4e00\u4e2a\u5b9a\u4e49\u3002\u6b64\u5916\uff0cmypy \u5f80\u5f80\u65e0\u6cd5\u786e\u5b9a\u5f15\u7528\u6307\u5411\u7b2c\u4e00\u4e2a\u8fd8\u662f\u7b2c\u4e8c\u4e2a\u5b9a\u4e49\uff0c\u8fd9\u4f1a\u5f71\u54cd\u7c7b\u578b\u68c0\u67e5\u7684\u51c6\u786e\u6027\u3002</p> <p>\u5982\u679c\u4f60\u5ffd\u7565\u6b64\u9519\u8bef\uff0c\u6240\u6709\u5bf9\u5b9a\u4e49\u540d\u79f0\u7684\u5f15\u7528\u5c06\u6307\u5411\u7b2c\u4e00\u4e2a\u5b9a\u4e49\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>class A:\n    def __init__(self, x: int) -&gt; None: ...\n\nclass A:  # \u9519\u8bef: \u540d\u79f0 \"A\" \u5df2\u5728\u7b2c 1 \u884c\u5b9a\u4e49  [no-redef]\n    def __init__(self, x: str) -&gt; None: ...\n\n# \u9519\u8bef: \u5bf9 \"A\" \u7684\u53c2\u6570 1 \u5177\u6709\u4e0d\u517c\u5bb9\u7684\u7c7b\u578b \"str\"\uff1b\u9884\u671f \"int\"\n#       \uff08\u7b2c\u4e00\u4e2a\u5b9a\u4e49\u4f18\u5148\uff01\uff09\nA('x')\n</code></pre> <p>Mypy may generate an error if you have multiple definitions for a name in the same namespace.  The reason is that this is often an error, as the second definition may overwrite the first one. Also, mypy often can't be able to determine whether references point to the first or the second definition, which would compromise type checking.</p> <p>If you silence this error, all references to the defined name refer to the first definition.</p> <p>Example:</p> <pre><code>class A:\n    def __init__(self, x: int) -&gt; None: ...\n\nclass A:  # Error: Name \"A\" already defined on line 1  [no-redef]\n    def __init__(self, x: str) -&gt; None: ...\n\n# Error: Argument 1 to \"A\" has incompatible type \"str\"; expected \"int\"\n#        (the first definition wins!)\nA('x')\n</code></pre>"},{"location":"mypy_other/error_code_list/#\u68c0\u67e5\u88ab\u8c03\u7528\u7684\u51fd\u6570\u662f\u5426\u8fd4\u56de\u503c-func-returns-value","title":"\u68c0\u67e5\u88ab\u8c03\u7528\u7684\u51fd\u6570\u662f\u5426\u8fd4\u56de\u503c [func-returns-value]","text":"<p>Check that called function returns a value [func-returns-value]</p> \u4e2d\u6587\u82f1\u6587 <p>\u5982\u679c\u4f60\u8c03\u7528\u4e00\u4e2a\u8fd4\u56de\u7c7b\u578b\u4e3a <code>None</code> \u7684\u51fd\u6570\u800c\u4e0d\u5ffd\u7565\u5176\u8fd4\u56de\u503c\uff0cmypy \u4f1a\u62a5\u544a\u4e00\u4e2a\u9519\u8bef\uff0c\u56e0\u4e3a\u8fd9\u901a\u5e38\uff08\u4f46\u5e76\u975e\u603b\u662f\uff09\u662f\u4e00\u4e2a\u7f16\u7a0b\u9519\u8bef\u3002</p> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c<code>if f()</code> \u68c0\u67e5\u603b\u662f\u4e3a\u5047\uff0c\u56e0\u4e3a <code>f</code> \u8fd4\u56de\u7684\u662f <code>None</code>\uff1a</p> <pre><code>def f() -&gt; None:\n    ...\n\n# OK: \u6211\u4eec\u4e0d\u5bf9\u8fd4\u56de\u503c\u8fdb\u884c\u4efb\u4f55\u64cd\u4f5c\nf()\n\n# \u9519\u8bef: \"f\" \u4e0d\u8fd4\u56de\u503c\uff08\u5b83\u53ea\u8fd4\u56de None\uff09  [func-returns-value]\nif f():\n    print(\"not false\")\n</code></pre> <p>Mypy reports an error if you call a function with a <code>None</code> return type and don't ignore the return value, as this is usually (but not always) a programming error.</p> <p>In this example, the <code>if f()</code> check is always false since <code>f</code> returns <code>None</code>:</p> <pre><code>def f() -&gt; None:\n    ...\n\n# OK: we don't do anything with the return value\nf()\n\n# Error: \"f\" does not return a value (it only ever returns None)  [func-returns-value]\nif f():\n    print(\"not false\")\n</code></pre>"},{"location":"mypy_other/error_code_list/#\u68c0\u67e5\u62bd\u8c61\u7c7b\u7684\u5b9e\u4f8b\u5316-abstract","title":"\u68c0\u67e5\u62bd\u8c61\u7c7b\u7684\u5b9e\u4f8b\u5316 [abstract]","text":"<p>Check instantiation of abstract classes [abstract]</p> \u4e2d\u6587\u82f1\u6587 <p>\u5982\u679c\u4f60\u5c1d\u8bd5\u5b9e\u4f8b\u5316\u4e00\u4e2a\u62bd\u8c61\u57fa\u7c7b\uff08ABC\uff09\uff0cmypy \u4f1a\u751f\u6210\u4e00\u4e2a\u9519\u8bef\u3002\u62bd\u8c61\u57fa\u7c7b\u662f\u6307\u5177\u6709\u81f3\u5c11\u4e00\u4e2a\u62bd\u8c61\u65b9\u6cd5\u6216\u5c5e\u6027\u7684\u7c7b\u3002\uff08\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 abc \u6a21\u5757\u6587\u6863\uff09</p> <p>\u6709\u65f6\u4e00\u4e2a\u7c7b\u88ab\u610f\u5916\u5730\u6807\u8bb0\u4e3a\u62bd\u8c61\u7c7b\uff0c\u901a\u5e38\u662f\u56e0\u4e3a\u67d0\u4e2a\u62bd\u8c61\u65b9\u6cd5\u672a\u5b9e\u73b0\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u9700\u8981\u63d0\u4f9b\u65b9\u6cd5\u7684\u5b9e\u73b0\uff0c\u4ee5\u4f7f\u7c7b\u53d8\u4e3a\u5177\u4f53\u7c7b\uff08\u975e\u62bd\u8c61\u7c7b\uff09\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>from abc import ABCMeta, abstractmethod\n\nclass Persistent(metaclass=ABCMeta):\n    @abstractmethod\n    def save(self) -&gt; None: ...\n\nclass Thing(Persistent):\n    def __init__(self) -&gt; None:\n        ...\n\n    ...  # \u6ca1\u6709 \"save\" \u65b9\u6cd5\n\n# \u9519\u8bef: \u65e0\u6cd5\u5b9e\u4f8b\u5316\u62bd\u8c61\u7c7b \"Thing\"\uff0c\u56e0\u4e3a\u5b83\u7f3a\u5c11\u62bd\u8c61\u5c5e\u6027 \"save\"  [abstract]\nt = Thing()\n</code></pre> <p>Mypy generates an error if you try to instantiate an abstract base class (ABC). An abstract base class is a class with at least one abstract method or attribute. (See also abc module documentation)</p> <p>Sometimes a class is made accidentally abstract, often due to an unimplemented abstract method. In a case like this you need to provide an implementation for the method to make the class concrete (non-abstract).</p> <p>Example:</p> <pre><code>from abc import ABCMeta, abstractmethod\n\nclass Persistent(metaclass=ABCMeta):\n    @abstractmethod\n    def save(self) -&gt; None: ...\n\nclass Thing(Persistent):\n    def __init__(self) -&gt; None:\n        ...\n\n    ...  # No \"save\" method\n\n# Error: Cannot instantiate abstract class \"Thing\" with abstract attribute \"save\"  [abstract]\nt = Thing()\n</code></pre>"},{"location":"mypy_other/error_code_list/#\u5b89\u5168\u5904\u7406\u62bd\u8c61\u7c7b\u578b\u5bf9\u8c61\u7c7b\u578b-type-abstract","title":"\u5b89\u5168\u5904\u7406\u62bd\u8c61\u7c7b\u578b\u5bf9\u8c61\u7c7b\u578b [type-abstract]","text":"<p>Safe handling of abstract type object types [type-abstract]</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u603b\u662f\u5141\u8bb8\u5b9e\u4f8b\u5316\uff08\u8c03\u7528\uff09\u7c7b\u578b\u4e3a <code>Type[t]</code> \u7684\u7c7b\u578b\u5bf9\u8c61\uff0c\u5373\u4f7f\u4e0d\u786e\u5b9a <code>t</code> \u662f\u5426\u662f\u975e\u62bd\u8c61\u7684\uff0c\u56e0\u4e3a\u521b\u5efa\u4f5c\u4e3a\u5bf9\u8c61\u5de5\u5382\uff08\u81ea\u5b9a\u4e49\u6784\u9020\u51fd\u6570\uff09\u7684\u51fd\u6570\u662f\u4e00\u79cd\u5e38\u89c1\u6a21\u5f0f\u3002\u56e0\u6b64\uff0c\u4e3a\u4e86\u9632\u6b62\u4e0a\u8ff0\u90e8\u5206\u4e2d\u63cf\u8ff0\u7684\u95ee\u9898\uff0c\u5f53\u4e00\u4e2a\u62bd\u8c61\u7c7b\u578b\u5bf9\u8c61\u88ab\u4f20\u9012\u5230\u671f\u671b <code>Type[t]</code> \u7684\u5730\u65b9\u65f6\uff0cmypy \u5c06\u4f1a\u62a5\u9519\u3002\u793a\u4f8b\u5982\u4e0b\uff1a</p> <pre><code>from abc import ABCMeta, abstractmethod\nfrom typing import List, Type, TypeVar\n\nclass Config(metaclass=ABCMeta):\n    @abstractmethod\n    def get_value(self, attr: str) -&gt; str: ...\n\nT = TypeVar(\"T\")\ndef make_many(typ: Type[T], n: int) -&gt; List[T]:\n    return [typ() for _ in range(n)]  # \u5982\u679c typ \u662f\u62bd\u8c61\u7c7b\uff0c\u5c06\u4f1a\u629b\u51fa\u9519\u8bef\n\n# \u9519\u8bef: \u671f\u671b \"Type[Config]\" \u5904\u53ea\u80fd\u7ed9\u51fa\u5177\u4f53\u7c7b [type-abstract]\nmake_many(Config, 5)\n</code></pre> <p>Mypy always allows instantiating (calling) type objects typed as <code>Type[t]</code>, even if it is not known that <code>t</code> is non-abstract, since it is a common pattern to create functions that act as object factories (custom constructors). Therefore, to prevent issues described in the above section, when an abstract type object is passed where <code>Type[t]</code> is expected, mypy will give an error. Example:</p> <pre><code>from abc import ABCMeta, abstractmethod\nfrom typing import List, Type, TypeVar\n\nclass Config(metaclass=ABCMeta):\n    @abstractmethod\n    def get_value(self, attr: str) -&gt; str: ...\n\nT = TypeVar(\"T\")\ndef make_many(typ: Type[T], n: int) -&gt; List[T]:\n    return [typ() for _ in range(n)]  # This will raise if typ is abstract\n\n# Error: Only concrete class can be given where \"Type[Config]\" is expected [type-abstract]\nmake_many(Config, 5)\n</code></pre>"},{"location":"mypy_other/error_code_list/#\u68c0\u67e5\u901a\u8fc7-super-\u8c03\u7528\u62bd\u8c61\u65b9\u6cd5\u662f\u5426\u6709\u6548-safe-super","title":"\u68c0\u67e5\u901a\u8fc7 super \u8c03\u7528\u62bd\u8c61\u65b9\u6cd5\u662f\u5426\u6709\u6548 [safe-super]","text":"<p>Check that call to an abstract method via super is valid [safe-super]</p> \u4e2d\u6587\u82f1\u6587 <p>\u62bd\u8c61\u65b9\u6cd5\u901a\u5e38\u6ca1\u6709\u9ed8\u8ba4\u5b9e\u73b0\uff0c\u5373\u5b83\u4eec\u7684\u4e3b\u4f53\u662f\u7a7a\u7684\u3002\u901a\u8fc7 <code>super()</code> \u5728\u5b50\u7c7b\u4e2d\u8c03\u7528\u8fd9\u6837\u7684\u62bd\u8c61\u65b9\u6cd5\u5c06\u5bfc\u81f4\u8fd0\u884c\u65f6\u9519\u8bef\uff0c\u56e0\u6b64 mypy \u4f1a\u963b\u6b62\u4f60\u8fd9\u6837\u505a\uff1a</p> <pre><code>from abc import abstractmethod\n\nclass Base:\n    @abstractmethod\n    def foo(self) -&gt; int: ...\n\nclass Sub(Base):\n    def foo(self) -&gt; int:\n        return super().foo() + 1  # \u9519\u8bef: \u901a\u8fc7 super() \u8c03\u7528 \"Base\" \u7684\u62bd\u8c61\u65b9\u6cd5 \"foo\"\uff0c\n                                # \u5177\u6709\u7b80\u5355\u4e3b\u4f53\u662f\u4e0d\u5b89\u5168\u7684 [safe-super]\n\nSub().foo()  # \u8fd9\u5c06\u5728\u8fd0\u884c\u65f6\u5d29\u6e83\u3002\n</code></pre> <p>Mypy \u5c06\u4ee5\u4e0b\u60c5\u51b5\u89c6\u4e3a\u7b80\u5355\u4e3b\u4f53\uff1a\u4e00\u4e2a <code>pass</code> \u8bed\u53e5\u3001\u4e00\u4e2a\u5b57\u9762\u91cf\u7701\u7565\u53f7 <code>...</code>\u3001\u4e00\u4e2a\u6587\u6863\u5b57\u7b26\u4e32\uff0c\u4ee5\u53ca\u4e00\u4e2a <code>raise NotImplementedError</code> \u8bed\u53e5\u3002</p> <p>Abstract methods often don't have any default implementation, i.e. their bodies are just empty. Calling such methods in subclasses via <code>super()</code> will cause runtime errors, so mypy prevents you from doing so:</p> <pre><code>from abc import abstractmethod\nclass Base:\n    @abstractmethod\n    def foo(self) -&gt; int: ...\nclass Sub(Base):\n    def foo(self) -&gt; int:\n        return super().foo() + 1  # error: Call to abstract method \"foo\" of \"Base\" with\n                                    # trivial body via super() is unsafe  [safe-super]\nSub().foo()  # This will crash at runtime.\n</code></pre> <p>Mypy considers the following as trivial bodies: a <code>pass</code> statement, a literal ellipsis <code>...</code>, a docstring, and a <code>raise NotImplementedError</code> statement.</p>"},{"location":"mypy_other/error_code_list/#\u68c0\u67e5-newtype-\u7684\u76ee\u6807-valid-newtype","title":"\u68c0\u67e5 NewType \u7684\u76ee\u6807 [valid-newtype]","text":"<p>Check the target of NewType [valid-newtype]</p> \u4e2d\u6587\u82f1\u6587 <p><code>NewType</code> \u7684\u76ee\u6807\u5fc5\u987b\u662f\u4e00\u4e2a\u7c7b\u7c7b\u578b\u3002\u5b83\u4e0d\u80fd\u662f\u4e00\u4e2a\u8054\u5408\u7c7b\u578b\u3001<code>Any</code> \u6216\u5404\u79cd\u5176\u4ed6\u7279\u6b8a\u7c7b\u578b\u3002</p> <p>\u5982\u679c\u76ee\u6807\u6765\u81ea\u4e00\u4e2a mypy \u65e0\u6cd5\u627e\u5230\u6e90\u4ee3\u7801\u7684\u6a21\u5757\uff0c\u4e5f\u4f1a\u51fa\u73b0\u6b64\u9519\u8bef\uff0c\u56e0\u4e3a mypy \u4f1a\u5c06\u8fd9\u4e9b\u5b9a\u4e49\u89c6\u4e3a\u5177\u6709 <code>Any</code> \u7c7b\u578b\u7684\u503c\u3002\u4f8b\u5982\uff1a</p> <pre><code>from typing import NewType\n\n# \"acme\" \u7684\u6e90\u4ee3\u7801\u5bf9\u4e8e mypy \u4e0d\u53ef\u7528\nfrom acme import Entity  # type: ignore\n\n# \u9519\u8bef: NewType(...) \u7684\u7b2c 2 \u4e2a\u53c2\u6570\u5fc5\u987b\u662f\u53ef\u5b50\u7c7b\u5316\u7684 (\u5f97\u5230 \"Any\")  [valid-newtype]\nUserEntity = NewType('UserEntity', Entity)\n</code></pre> <p>\u8981\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f60\u53ef\u4ee5\u8ba9 mypy \u8bbf\u95ee <code>acme</code> \u7684\u6e90\u4ee3\u7801\uff0c\u6216\u8005\u4e3a\u8be5\u6a21\u5757\u521b\u5efa\u4e00\u4e2a\u5b58\u6839\u6587\u4ef6\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 \u7f3a\u5931\u7684\u5bfc\u5165\u3002</p> <p>The target of a NewType definition must be a class type. It can't be a union type, <code>Any</code>, or various other special types.</p> <p>You can also get this error if the target has been imported from a module whose source mypy cannot find, since any such definitions are treated by mypy as values with <code>Any</code> types. Example:</p> <pre><code>from typing import NewType\n\n# The source for \"acme\" is not available for mypy\nfrom acme import Entity  # type: ignore\n\n# Error: Argument 2 to NewType(...) must be subclassable (got \"Any\")  [valid-newtype]\nUserEntity = NewType('UserEntity', Entity)\n</code></pre> <p>To work around the issue, you can either give mypy access to the sources for <code>acme</code> or create a stub file for the module.  See Missing imports for more information.</p>"},{"location":"mypy_other/error_code_list/#\u68c0\u67e5-__exit__-\u7684\u8fd4\u56de\u7c7b\u578b-exit-return","title":"\u68c0\u67e5 <code>__exit__</code> \u7684\u8fd4\u56de\u7c7b\u578b [exit-return]","text":"<p>Check the return type of __exit__ [exit-return]</p> \u4e2d\u6587\u82f1\u6587 <p>\u5982\u679c mypy \u80fd\u786e\u5b9a <code>__exit__</code> \u65b9\u6cd5\u59cb\u7ec8\u8fd4\u56de <code>False</code>\uff0c\u5219 mypy \u4f1a\u68c0\u67e5\u8fd4\u56de\u7c7b\u578b\u662f\u5426\u4e0d\u662f <code>bool</code>\u3002\u8fd9\u662f\u56e0\u4e3a <code>__exit__</code> \u65b9\u6cd5\u8fd4\u56de\u7684\u5e03\u5c14\u503c\u4f1a\u5f71\u54cd mypy \u5224\u65ad <code>with</code> \u8bed\u53e5\u4e4b\u540e\u54ea\u4e9b\u884c\u662f\u53ef\u8fbe\u7684\u3002\u4efb\u4f55\u53ef\u80fd\u8fd4\u56de <code>True</code> \u7684 <code>__exit__</code> \u65b9\u6cd5\u53ef\u80fd\u4f1a\u541e\u566c\u5f02\u5e38\u3002\u8fd4\u56de\u7c7b\u578b\u4e0d\u51c6\u786e\u53ef\u80fd\u5bfc\u81f4\u5728 <code>with</code> \u8bed\u53e5\u9644\u8fd1\u62a5\u544a\u795e\u79d8\u7684\u9519\u8bef\u3002</p> <p>\u8981\u89e3\u51b3\u6b64\u95ee\u9898\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>typing.Literal[False]</code> \u6216 <code>None</code> \u4f5c\u4e3a\u8fd4\u56de\u7c7b\u578b\u3002\u5728\u8fd9\u4e2a\u4e0a\u4e0b\u6587\u4e2d\uff0c\u8fd4\u56de <code>None</code> \u7b49\u540c\u4e8e\u8fd4\u56de <code>False</code>\uff0c\u56e0\u4e3a\u5b83\u4eec\u90fd\u88ab\u89c6\u4e3a\u5047\u503c\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>class MyContext:\n    ...\n    def __exit__(self, exc, value, tb) -&gt; bool:  # \u9519\u8bef\n        print('exit')\n        return False\n</code></pre> <p>\u8fd9\u4f1a\u4ea7\u751f\u4ee5\u4e0b mypy \u8f93\u51fa\uff1a</p> <pre><code>example.py:3: error: \"bool\" is invalid as return type for \"__exit__\" that always returns False\nexample.py:3: note: Use \"typing_extensions.Literal[False]\" as the return type or change it to\n    \"None\"\nexample.py:3: note: If return type of \"__exit__\" implies that it may return True, the context\n    manager may swallow exceptions\n</code></pre> <p>\u4f60\u53ef\u4ee5\u4f7f\u7528 <code>Literal[False]</code> \u6765\u4fee\u590d\u9519\u8bef\uff1a</p> <pre><code>from typing import Literal\n\nclass MyContext:\n    ...\n    def __exit__(self, exc, value, tb) -&gt; Literal[False]:  # \u6b63\u786e\n        print('exit')\n        return False\n</code></pre> <p>\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 <code>None</code>\uff1a</p> <pre><code>class MyContext:\n    ...\n    def __exit__(self, exc, value, tb) -&gt; None:  # \u4e5f\u6b63\u786e\n        print('exit')\n</code></pre> <p>If mypy can determine that __exit__ always returns <code>False</code>, mypy checks that the return type is not <code>bool</code>.  The boolean value of the return type affects which lines mypy thinks are reachable after a <code>with</code> statement, since any __exit__ method that can return <code>True</code> may swallow exceptions. An imprecise return type can result in mysterious errors reported near <code>with</code> statements.</p> <p>To fix this, use either <code>typing.Literal[False]</code> or <code>None</code> as the return type. Returning <code>None</code> is equivalent to returning <code>False</code> in this context, since both are treated as false values.</p> <p>Example:</p> <pre><code>class MyContext:\n    ...\n    def __exit__(self, exc, value, tb) -&gt; bool:  # Error\n        print('exit')\n        return False\n</code></pre> <p>This produces the following output from mypy:</p> <pre><code>example.py:3: error: \"bool\" is invalid as return type for \"__exit__\" that always returns False\nexample.py:3: note: Use \"typing_extensions.Literal[False]\" as the return type or change it to\n    \"None\"\nexample.py:3: note: If return type of \"__exit__\" implies that it may return True, the context\n    manager may swallow exceptions\n</code></pre> <p>You can use <code>Literal[False]</code> to fix the error:</p> <pre><code>from typing import Literal\n\nclass MyContext:\n    ...\n    def __exit__(self, exc, value, tb) -&gt; Literal[False]:  # OK\n        print('exit')\n        return False\n</code></pre> <p>You can also use <code>None</code>:</p> <pre><code>class MyContext:\n    ...\n    def __exit__(self, exc, value, tb) -&gt; None:  # Also OK\n        print('exit')\n</code></pre>"},{"location":"mypy_other/error_code_list/#\u68c0\u67e5\u547d\u540d\u662f\u5426\u4e00\u81f4-name-match","title":"\u68c0\u67e5\u547d\u540d\u662f\u5426\u4e00\u81f4 [name-match]","text":"<p>Check that naming is consistent [name-match]</p> \u4e2d\u6587\u82f1\u6587 <p>\u4f7f\u7528\u57fa\u4e8e\u8c03\u7528\u7684\u8bed\u6cd5\u5b9a\u4e49\u547d\u540d\u5143\u7ec4\u6216 <code>TypedDict</code> \u65f6\uff0c\u540d\u79f0\u5fc5\u987b\u4e00\u81f4\u3002\u4f8b\u5982\uff1a</p> <pre><code>from typing import NamedTuple\n\n# \u9519\u8bef: namedtuple() \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5e94\u4e3a \"Point2D\"\uff0c\u800c\u4e0d\u662f \"Point\"\nPoint2D = NamedTuple(\"Point\", [(\"x\", int), (\"y\", int)])\n</code></pre> <p>The definition of a named tuple or a TypedDict must be named consistently when using the call-based syntax. Example:</p> <pre><code>from typing import NamedTuple\n\n# Error: First argument to namedtuple() should be \"Point2D\", not \"Point\"\nPoint2D = NamedTuple(\"Point\", [(\"x\", int), (\"y\", int)])\n</code></pre>"},{"location":"mypy_other/error_code_list/#\u68c0\u67e5\u6587\u5b57\u662f\u5426\u5728\u9884\u671f\u4f4d\u7f6e\u4f7f\u7528-literal-required","title":"\u68c0\u67e5\u6587\u5b57\u662f\u5426\u5728\u9884\u671f\u4f4d\u7f6e\u4f7f\u7528 [literal-required]","text":"<p>Check that literal is used where expected [literal-required]</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4ec5\u671f\u671b\u4f7f\u7528\uff08\u5b57\u7b26\u4e32\uff09\u5b57\u9762\u91cf\u503c\u8fdb\u884c\u9759\u6001\u7c7b\u578b\u68c0\u67e5\uff0c\u4f8b\u5982 <code>TypedDict</code> \u952e\u6216 <code>__match_args__</code> \u9879\u3002\u5728\u8fd9\u4e9b\u4e0a\u4e0b\u6587\u4e2d\u63d0\u4f9b <code>str</code> \u7c7b\u578b\u7684\u53d8\u91cf\u4f1a\u5bfc\u81f4\u9519\u8bef\u3002\u8bf7\u6ce8\u610f\uff0c\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 <code>Final</code> \u6216 <code>Literal</code> \u53d8\u91cf\u3002\u793a\u4f8b\u5982\u4e0b\uff1a</p> <pre><code>from typing import Final, Literal, TypedDict\n\nclass Point(TypedDict):\n    x: int\n    y: int\n\ndef test(p: Point) -&gt; None:\n    X: Final = \"x\"\n    p[X]  # OK\n\n    Y: Literal[\"y\"] = \"y\"\n    p[Y]  # OK\n\n    key = \"x\"  # \u63a8\u65ad\u7684 key \u7c7b\u578b\u662f `str`\n    # \u9519\u8bef: TypedDict \u952e\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\uff1b\n    #   \u671f\u671b\u662f (\"x\", \"y\")  [literal-required]\n    p[key]\n</code></pre> <p>There are some places where only a (string) literal value is expected for the purposes of static type checking, for example a <code>TypedDict</code> key, or a <code>__match_args__</code> item. Providing a <code>str</code>-valued variable in such contexts will result in an error. Note that in many cases you can also use <code>Final</code> or <code>Literal</code> variables. Example:</p> <pre><code>from typing import Final, Literal, TypedDict\n\nclass Point(TypedDict):\n    x: int\n    y: int\n\ndef test(p: Point) -&gt; None:\n    X: Final = \"x\"\n    p[X]  # OK\n\n    Y: Literal[\"y\"] = \"y\"\n    p[Y]  # OK\n\n    key = \"x\"  # Inferred type of key is `str`\n    # Error: TypedDict key must be a string literal;\n    #   expected one of (\"x\", \"y\")  [literal-required]\n    p[key]\n</code></pre>"},{"location":"mypy_other/error_code_list/#\u68c0\u67e5\u91cd\u8f7d\u51fd\u6570\u662f\u5426\u6709\u5b9e\u73b0-no-overload-impl","title":"\u68c0\u67e5\u91cd\u8f7d\u51fd\u6570\u662f\u5426\u6709\u5b9e\u73b0 [no-overload-impl]","text":"<p>Check that overloaded functions have an implementation [no-overload-impl]</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u5b58\u6839\u6587\u4ef6\u5916\u90e8\uff0c\u91cd\u8f7d\u51fd\u6570\u5fc5\u987b\u8ddf\u968f\u4e00\u4e2a\u975e\u91cd\u8f7d\u7684\u5b9e\u73b0\u3002</p> <pre><code>from typing import overload\n\n@overload\ndef func(value: int) -&gt; int:\n    ...\n\n@overload\ndef func(value: str) -&gt; str:\n    ...\n\n# \u68c0\u67e5\u4e0b\u9762\u7684\u5b9e\u9645\u5b9e\u73b0\u662f\u5426\u5b58\u5728\ndef func(value):\n    pass  # \u5b9e\u9645\u5b9e\u73b0\n</code></pre> <p>Overloaded functions outside of stub files must be followed by a non overloaded implementation.</p> <pre><code>from typing import overload\n\n@overload\ndef func(value: int) -&gt; int:\n    ...\n\n@overload\ndef func(value: str) -&gt; str:\n    ...\n\n# presence of required function below is checked\ndef func(value):\n    pass  # actual implementation\n</code></pre>"},{"location":"mypy_other/error_code_list/#\u68c0\u67e5\u534f\u7a0b\u8fd4\u56de\u503c\u662f\u5426\u88ab\u4f7f\u7528-unused-coroutine","title":"\u68c0\u67e5\u534f\u7a0b\u8fd4\u56de\u503c\u662f\u5426\u88ab\u4f7f\u7528 [unused-coroutine]","text":"<p>Check that coroutine return value is used [unused-coroutine]</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u786e\u4fdd <code>async def</code> \u51fd\u6570\u7684\u8fd4\u56de\u503c\u4e0d\u4f1a\u88ab\u5ffd\u7565\uff0c\u56e0\u4e3a\u8fd9\u901a\u5e38\u662f\u4e00\u4e2a\u7f16\u7a0b\u9519\u8bef\uff0c\u56e0\u4e3a\u534f\u7a0b\u5728\u8c03\u7528\u70b9\u4e0d\u4f1a\u88ab\u6267\u884c\u3002</p> <pre><code>async def f() -&gt; None:\n    ...\n\nasync def g() -&gt; None:\n    f()  # \u9519\u8bef: \u7f3a\u5c11 await\n    await f()  # \u6b63\u786e\n</code></pre> <p>\u4f60\u53ef\u4ee5\u901a\u8fc7\u5c06\u7ed3\u679c\u5206\u914d\u7ed9\u4e00\u4e2a\u4e34\u65f6\u7684\u3001\u672a\u4f7f\u7528\u7684\u53d8\u91cf\u6765\u89e3\u51b3\u6b64\u9519\u8bef\uff1a</p> <pre><code>    _ = f()  # \u6ca1\u6709\u9519\u8bef\n</code></pre> <p>Mypy ensures that return values of async def functions are not ignored, as this is usually a programming error, as the coroutine won't be executed at the call site.</p> <pre><code>async def f() -&gt; None:\n    ...\n\nasync def g() -&gt; None:\n    f()  # Error: missing await\n    await f()  # OK\n</code></pre> <p>You can work around this error by assigning the result to a temporary, otherwise unused variable:</p> <pre><code>    _ = f()  # No error\n</code></pre>"},{"location":"mypy_other/error_code_list/#\u8b66\u544a\u9876\u5c42-await-\u8868\u8fbe\u5f0f-top-level-await","title":"\u8b66\u544a\u9876\u5c42 await \u8868\u8fbe\u5f0f [top-level-await]","text":"<p>Warn about top level await expressions [top-level-await]</p> \u4e2d\u6587\u82f1\u6587 <p>\u8fd9\u4e2a\u9519\u8bef\u4ee3\u7801\u4e0e\u4e00\u822c\u7684 <code>[syntax]</code> \u9519\u8bef\u5206\u5f00\u5904\u7406\uff0c\u56e0\u4e3a\u5728\u67d0\u4e9b\u73af\u5883\u4e2d\uff08\u4f8b\u5982 IPython\uff09\uff0c\u9876\u5c42\u7684 <code>await</code> \u662f\u88ab\u5141\u8bb8\u7684\u3002\u5728\u8fd9\u4e9b\u73af\u5883\u4e2d\uff0c\u7528\u6237\u53ef\u80fd\u5e0c\u671b\u4f7f\u7528 <code>--disable-error-code=top-level-await</code>\uff0c\u8fd9\u6837\u53ef\u4ee5\u5728\u5176\u4ed6\u4e0d\u5f53\u4f7f\u7528 <code>await</code> \u7684\u60c5\u51b5\u4e0b\u4ecd\u7136\u62a5\u544a\u9519\u8bef\uff0c\u4f8b\u5982\uff1a</p> <pre><code>async def f() -&gt; None:\n    ...\n\ntop = await f()  # \u9519\u8bef: \"await\" \u5728\u51fd\u6570\u5916\u90e8  [top-level-await]\n</code></pre> <p>This error code is separate from the general <code>[syntax]</code> errors, because in some environments (e.g. IPython) a top level <code>await</code> is allowed. In such environments a user may want to use <code>--disable-error-code=top-level-await</code>, that allows to still have errors for other improper uses of <code>await</code>, for example:</p> <pre><code>async def f() -&gt; None:\n    ...\n\ntop = await f()  # Error: \"await\" outside function  [top-level-await]\n</code></pre>"},{"location":"mypy_other/error_code_list/#\u8b66\u544a\u5728\u534f\u7a0b\u5916\u90e8\u4f7f\u7528-await-\u8868\u8fbe\u5f0f-await-not-async","title":"\u8b66\u544a\u5728\u534f\u7a0b\u5916\u90e8\u4f7f\u7528 await \u8868\u8fbe\u5f0f [await-not-async]","text":"<p>Warn about await expressions used outside of coroutines [await-not-async]</p> \u4e2d\u6587\u82f1\u6587 <p><code>await</code> \u5fc5\u987b\u5728\u534f\u7a0b\u4e2d\u4f7f\u7528\u3002</p> <pre><code>async def f() -&gt; None:\n    ...\n\ndef g() -&gt; None:\n    await f()  # \u9519\u8bef: \"await\" \u4e0d\u5728\u534f\u7a0b (\"async def\") \u5185  [await-not-async]\n</code></pre> <p><code>await</code> must be used inside a coroutine.</p> <pre><code>async def f() -&gt; None:\n    ...\n\ndef g() -&gt; None:\n    await f()  # Error: \"await\" outside coroutine (\"async def\")  [await-not-async]\n</code></pre>"},{"location":"mypy_other/error_code_list/#\u68c0\u67e5-assert_type-\u4e2d\u7684\u7c7b\u578b-assert-type","title":"\u68c0\u67e5 assert_type \u4e2d\u7684\u7c7b\u578b [assert-type]","text":"<p>Check types in assert_type [assert-type]</p> \u4e2d\u6587\u82f1\u6587 <p>\u4f20\u9012\u7ed9 <code>assert_type</code> \u7684\u8868\u8fbe\u5f0f\u7684\u63a8\u65ad\u7c7b\u578b\u5fc5\u987b\u4e0e\u63d0\u4f9b\u7684\u7c7b\u578b\u5339\u914d\u3002</p> <p><pre><code>from typing_extensions import assert_type\n\nassert_type([1], list[int])  # \u6b63\u786e\n\nassert_type([1], list[str])  # \u9519\u8bef\n</code></pre> ```</p> <p>The inferred type for an expression passed to <code>assert_type</code> must match the provided type.</p> <pre><code>from typing_extensions import assert_type\n\nassert_type([1], list[int])  # OK\n\nassert_type([1], list[str])  # Error\n</code></pre>"},{"location":"mypy_other/error_code_list/#\u68c0\u67e5\u51fd\u6570\u662f\u5426\u672a\u5728\u5e03\u5c14\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528-truthy-function","title":"\u68c0\u67e5\u51fd\u6570\u662f\u5426\u672a\u5728\u5e03\u5c14\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528 [truthy-function]","text":"<p>Check that function isn't used in boolean context [truthy-function]</p> \u4e2d\u6587\u82f1\u6587 <p>\u51fd\u6570\u5728\u5e03\u5c14\u4e0a\u4e0b\u6587\u4e2d\u603b\u662f\u4f1a\u88ab\u8bc4\u4f30\u4e3a\u771f\u3002</p> <pre><code>def f():\n    ...\n\nif f:  # \u9519\u8bef: \u51fd\u6570 \"Callable[[], Any]\" \u5728\u5e03\u5c14\u4e0a\u4e0b\u6587\u4e2d\u603b\u662f\u53ef\u80fd\u4e3a\u771f  [truthy-function]\n    pass\n</code></pre> <p>Functions will always evaluate to true in boolean contexts.</p> <pre><code>def f():\n    ...\n\nif f:  # Error: Function \"Callable[[], Any]\" could always be true in boolean context  [truthy-function]\n    pass\n</code></pre>"},{"location":"mypy_other/error_code_list/#\u68c0\u67e5\u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u63d2\u503c\u662f\u5426\u7c7b\u578b\u5b89\u5168-str-format","title":"\u68c0\u67e5\u5b57\u7b26\u4e32\u683c\u5f0f\u5316/\u63d2\u503c\u662f\u5426\u7c7b\u578b\u5b89\u5168 [str-format]","text":"<p>Check that string formatting/interpolation is type-safe [str-format]</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u4f1a\u68c0\u67e5 f-strings\u3001<code>str.format()</code> \u8c03\u7528\u548c <code>%</code> \u63d2\u503c\u7684\u6709\u6548\u6027\uff08\u5f53\u76f8\u5e94\u7684\u6a21\u677f\u662f\u5b57\u9762\u5b57\u7b26\u4e32\u65f6\uff09\u3002\u8fd9\u5305\u62ec\u68c0\u67e5\u66ff\u6362\u7684\u6570\u91cf\u548c\u7c7b\u578b\uff0c\u4f8b\u5982\uff1a</p> <pre><code># \u9519\u8bef: \u627e\u4e0d\u5230\u4f4d\u7f6e\u683c\u5f0f\u8bf4\u660e\u7b26 1 \u7684\u66ff\u6362 [str-format]\n\"{} and {}\".format(\"spam\")\n\"{} and {}\".format(\"spam\", \"eggs\")  # \u6b63\u786e\n# \u9519\u8bef: \u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u65f6\u6ca1\u6709\u8f6c\u6362\u6240\u6709\u53c2\u6570 [str-format]\n\"{} and {}\".format(\"spam\", \"eggs\", \"cheese\")\n\n# \u9519\u8bef: \u5b57\u7b26\u4e32\u63d2\u503c\u4e2d\u7684\u7c7b\u578b\u4e0d\u517c\u5bb9\n# \uff08\u8868\u8fbe\u5f0f\u7c7b\u578b\u4e3a \"float\"\uff0c\u5360\u4f4d\u7b26\u7c7b\u578b\u4e3a \"int\"\uff09[str-format]\n\"{:d}\".format(3.14)\n</code></pre> <p>Mypy will check that f-strings, <code>str.format()</code> calls, and <code>%</code> interpolations are valid (when corresponding template is a literal string). This includes checking number and types of replacements, for example:</p> <pre><code># Error: Cannot find replacement for positional format specifier 1 [str-format]\n\"{} and {}\".format(\"spam\")\n\"{} and {}\".format(\"spam\", \"eggs\")  # OK\n# Error: Not all arguments converted during string formatting [str-format]\n\"{} and {}\".format(\"spam\", \"eggs\", \"cheese\")\n\n# Error: Incompatible types in string interpolation\n# (expression has type \"float\", placeholder has type \"int\") [str-format]\n\"{:d}\".format(3.14)\n</code></pre>"},{"location":"mypy_other/error_code_list/#\u68c0\u67e5\u9690\u5f0f\u5b57\u8282\u5f3a\u5236\u8f6c\u6362-str-bytes-safe","title":"\u68c0\u67e5\u9690\u5f0f\u5b57\u8282\u5f3a\u5236\u8f6c\u6362 [str-bytes-safe]","text":"<p>Check for implicit bytes coercions [str-bytes-safe]</p> \u4e2d\u6587\u82f1\u6587 <p>\u8b66\u544a\u53ef\u80fd\u5728\u610f\u5916\u7684\u60c5\u51b5\u4e0b\u5c06 <code>bytes</code> \u5bf9\u8c61\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u7684\u60c5\u51b5\u3002</p> <pre><code>b = b\"abc\"\n\n# \u9519\u8bef: \u5982\u679c x = b'abc'\uff0c\u90a3\u4e48 f\"{x}\" \u6216 \"{}\".format(x) \u4f1a\u4ea7\u751f \"b'abc'\"\uff0c\u800c\u4e0d\u662f \"abc\"\u3002\n# \u5982\u679c\u8fd9\u662f\u671f\u671b\u7684\u884c\u4e3a\uff0c\u4f7f\u7528 f\"{x!r}\" \u6216 \"{!r}\".format(x)\u3002\n# \u5426\u5219\uff0c\u8bf7\u89e3\u7801\u5b57\u8282 [str-bytes-safe]\nprint(f\"The alphabet starts with {b}\")\n\n# \u6b63\u786e\nprint(f\"The alphabet starts with {b!r}\")  # The alphabet starts with b'abc'\nprint(f\"The alphabet starts with {b.decode('utf-8')}\")  # The alphabet starts with abc\n</code></pre> <p>Warn about cases where a bytes object may be converted to a string in an unexpected manner.</p> <pre><code>b = b\"abc\"\n\n# Error: If x = b'abc' then f\"{x}\" or \"{}\".format(x) produces \"b'abc'\", not \"abc\".\n# If this is desired behavior, use f\"{x!r}\" or \"{!r}\".format(x).\n# Otherwise, decode the bytes [str-bytes-safe]\nprint(f\"The alphabet starts with {b}\")\n\n# Okay\nprint(f\"The alphabet starts with {b!r}\")  # The alphabet starts with b'abc'\nprint(f\"The alphabet starts with {b.decode('utf-8')}\")  # The alphabet starts with abc\n</code></pre>"},{"location":"mypy_other/error_code_list/#\u68c0\u67e5\u91cd\u8f7d\u51fd\u6570\u662f\u5426\u6ca1\u6709\u91cd\u53e0-overload-overlap","title":"\u68c0\u67e5\u91cd\u8f7d\u51fd\u6570\u662f\u5426\u6ca1\u6709\u91cd\u53e0 [overload-overlap]","text":"<p>Check that overloaded functions don't overlap [overload-overlap]</p> \u4e2d\u6587\u82f1\u6587 <p>\u8b66\u544a\u591a\u4e2a <code>@overload</code> \u53d8\u4f53\u53ef\u80fd\u4ee5\u6f5c\u5728\u4e0d\u5b89\u5168\u7684\u65b9\u5f0f\u91cd\u53e0\u3002\u8fd9\u662f\u4e3a\u4e86\u9632\u6b62\u4ee5\u4e0b\u60c5\u51b5\uff1a</p> <pre><code>from typing import overload\n\nclass A: ...\nclass B(A): ...\n\n@overload\ndef foo(x: B) -&gt; int: ...  # \u9519\u8bef: \u91cd\u8f7d\u51fd\u6570\u7b7e\u540d 1 \u548c 2 \u5177\u6709\u4e0d\u517c\u5bb9\u7684\u8fd4\u56de\u7c7b\u578b [overload-overlap]\n@overload\ndef foo(x: A) -&gt; str: ...\ndef foo(x): ...\n\ndef takes_a(a: A) -&gt; str:\n    return foo(a)\n\na: A = B()\nvalue = takes_a(a)\n# mypy \u4f1a\u8ba4\u4e3a value \u662f str \u7c7b\u578b\uff0c\u4f46\u5b9e\u9645\u4e0a\u53ef\u80fd\u662f int \u7c7b\u578b\nreveal_type(value) # \u663e\u793a\u7c7b\u578b\u662f \"builtins.str\"\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u5728\u5ffd\u7565\u6b64\u9519\u8bef\u7684\u60c5\u51b5\u4e0b\uff0cmypy \u901a\u5e38\u4ecd\u7136\u4f1a\u63a8\u65ad\u51fa\u60a8\u671f\u671b\u7684\u7c7b\u578b\u3002</p> <p>\u6709\u5173\u66f4\u591a\u89e3\u91ca\uff0c\u8bf7\u53c2\u89c1 overloading\u3002</p> <p>Warn if multiple <code>@overload</code> variants overlap in potentially unsafe ways. This guards against the following situation:</p> <pre><code>from typing import overload\n\nclass A: ...\nclass B(A): ...\n\n@overload\ndef foo(x: B) -&gt; int: ...  # Error: Overloaded function signatures 1 and 2 overlap with incompatible return types  [overload-overlap]\n@overload\ndef foo(x: A) -&gt; str: ...\ndef foo(x): ...\n\ndef takes_a(a: A) -&gt; str:\n    return foo(a)\n\na: A = B()\nvalue = takes_a(a)\n# mypy will think that value is a str, but it could actually be an int\nreveal_type(value) # Revealed type is \"builtins.str\"\n</code></pre> <p>Note that in cases where you ignore this error, mypy will usually still infer the types you expect.</p> <p>See overloading for more explanation.</p>"},{"location":"mypy_other/error_code_list/#\u901a\u77e5\u672a\u68c0\u67e5\u51fd\u6570\u4e2d\u7684\u6ce8\u89e3-annotation-unchecked","title":"\u901a\u77e5\u672a\u68c0\u67e5\u51fd\u6570\u4e2d\u7684\u6ce8\u89e3 [annotation-unchecked]","text":"<p>Notify about an annotation in an unchecked function [annotation-unchecked]</p> \u4e2d\u6587\u82f1\u6587 <p>\u6709\u65f6\u7528\u6237\u53ef\u80fd\u4f1a\u4e0d\u5c0f\u5fc3\u9057\u6f0f\u51fd\u6570\u7684\u7c7b\u578b\u6ce8\u89e3\uff0cmypy \u5c06\u4e0d\u4f1a\u68c0\u67e5\u8be5\u51fd\u6570\u7684\u4e3b\u4f53\uff08\u9664\u975e\u4f7f\u7528 --check-untyped-defs \u6216 --disallow-untyped-defs\uff09\u3002\u4e3a\u4e86\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\u88ab\u5ffd\u89c6\uff0cmypy \u4f1a\u5728\u672a\u68c0\u67e5\u7684\u51fd\u6570\u4e2d\u5b58\u5728\u7c7b\u578b\u6ce8\u89e3\u65f6\u663e\u793a\u4e00\u4e2a\u63d0\u793a\uff1a</p> <pre><code>def test_assignment():  # \"-&gt; None\" \u8fd4\u56de\u6ce8\u89e3\u7f3a\u5931\n    # \u6ce8\u610f: \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u672a\u6ce8\u89e3\u51fd\u6570\u7684\u4e3b\u4f53\u4e0d\u4f1a\u88ab\u68c0\u67e5\uff0c\n    # \u53ef\u4ee5\u8003\u8651\u4f7f\u7528 --check-untyped-defs [annotation-unchecked]\n    x: int = \"no way\"\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0cmypy \u4ecd\u4f1a\u4ee5\u8fd4\u56de\u7801 <code>0</code> \u9000\u51fa\uff0c\u56e0\u4e3a\u8fd9\u79cd\u884c\u4e3a\u662f\u7531 PEP 484 \u89c4\u5b9a\u7684\u3002</p> <p>Sometimes a user may accidentally omit an annotation for a function, and mypy will not check the body of this function (unless one uses --check-untyped-defs or --disallow-untyped-defs ). To avoid such situations go unnoticed, mypy will show a note, if there are any type annotations in an unchecked function:</p> <pre><code>def test_assignment():  # \"-&gt; None\" return annotation is missing\n    # Note: By default the bodies of untyped functions are not checked,\n    # consider using --check-untyped-defs [annotation-unchecked]\n    x: int = \"no way\"\n</code></pre> <p>Note that mypy will still exit with return code <code>0</code>, since such behaviour is specified by PEP 484.</p>"},{"location":"mypy_other/error_code_list/#\u88c5\u9970\u5668\u5728\u5c5e\u6027\u524d\u4e0d\u88ab\u652f\u6301-prop-decorator","title":"\u88c5\u9970\u5668\u5728\u5c5e\u6027\u524d\u4e0d\u88ab\u652f\u6301 [prop-decorator]","text":"<p>Decorator preceding property not supported [prop-decorator]</p> \u4e2d\u6587\u82f1\u6587 <p>mypy \u76ee\u524d\u5c1a\u4e0d\u652f\u6301\u5206\u6790\u5728 <code>@property</code> \u88c5\u9970\u5668\u4e4b\u524d\u7684\u5176\u4ed6\u88c5\u9970\u5668\u3002\u5982\u679c\u88c5\u9970\u5668\u4e0d\u4fdd\u7559\u5c5e\u6027\u58f0\u660e\u7684\u7c7b\u578b\uff0cmypy \u5c06\u65e0\u6cd5\u63a8\u65ad\u51fa\u6b63\u786e\u7684\u7c7b\u578b\u3002\u5982\u679c\u88c5\u9970\u5668\u65e0\u6cd5\u79fb\u52a8\u5230 <code>@property</code> \u88c5\u9970\u5668\u4e4b\u540e\uff0c\u5219\u5fc5\u987b\u4f7f\u7528\u7c7b\u578b\u5ffd\u7565\u6ce8\u91ca\uff1a</p> <pre><code>class MyClass:\n    @special  # type: ignore[prop-decorator]\n    @property\n    def magic(self) -&gt; str:\n        return \"xyzzy\"\n</code></pre> <p>Note</p> <p>\u4e3a\u4e86\u5411\u540e\u517c\u5bb9\uff0c\u8fd9\u4e2a\u9519\u8bef\u4ee3\u7801\u662f\u901a\u7528 <code>[misc]</code> \u4ee3\u7801\u7684\u5b50\u4ee3\u7801\u3002</p> <p>Mypy does not yet support analysis of decorators that precede the property decorator. If the decorator does not preserve the declared type of the property, mypy will not infer the correct type for the declaration. If the decorator cannot be moved after the <code>@property</code> decorator, then you must use a type ignore comment:</p> <pre><code>class MyClass:\n    @special  # type: ignore[prop-decorator]\n    @property\n    def magic(self) -&gt; str:\n        return \"xyzzy\"\n</code></pre> <p>Note</p> <p>For backward compatibility, this error code is a subcode of the generic <code>[misc]</code> code.</p>"},{"location":"mypy_other/error_code_list/#\u62a5\u544a\u8bed\u6cd5\u9519\u8bef-syntax","title":"\u62a5\u544a\u8bed\u6cd5\u9519\u8bef [syntax]","text":"<p>Report syntax errors [syntax]</p> \u4e2d\u6587\u82f1\u6587 <p>\u5982\u679c\u88ab\u68c0\u67e5\u7684\u4ee3\u7801\u5728\u8bed\u6cd5\u4e0a\u65e0\u6548\uff0cmypy \u4f1a\u62a5\u544a\u8bed\u6cd5\u9519\u8bef\u3002\u5927\u591a\u6570\uff0c\u4f46\u4e0d\u662f\u6240\u6709\uff0c\u8bed\u6cd5\u9519\u8bef\u90fd\u662f \u963b\u585e\u9519\u8bef\uff1a\u5b83\u4eec\u4e0d\u80fd\u901a\u8fc7 <code># type: ignore</code> \u6ce8\u91ca\u88ab\u5ffd\u7565\u3002</p> <p>If the code being checked is not syntactically valid, mypy issues a syntax error. Most, but not all, syntax errors are blocking errors: they can't be ignored with a <code># type: ignore</code> comment.</p>"},{"location":"mypy_other/error_code_list/#\u6742\u9879\u68c0\u67e5-misc","title":"\u6742\u9879\u68c0\u67e5 [misc]","text":"<p>Miscellaneous checks [misc]</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u8fd8\u6267\u884c\u8bb8\u591a\u5176\u4ed6\u68c0\u67e5\uff0c\u8fd9\u4e9b\u68c0\u67e5\u4e0d\u5e38\u5931\u8d25\uff0c\u5e76\u4e14\u6ca1\u6709\u7279\u5b9a\u7684\u9519\u8bef\u4ee3\u7801\u3002\u8fd9\u4e9b\u68c0\u67e5\u4f7f\u7528 <code>misc</code> \u9519\u8bef\u4ee3\u7801\u3002\u9664\u4e86\u7528\u4e8e\u591a\u79cd\u65e0\u5173\u7684\u9519\u8bef\u5916\uff0c<code>misc</code> \u9519\u8bef\u4ee3\u7801\u6ca1\u6709\u7279\u6b8a\u542b\u4e49\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 <code># type: ignore[misc]</code> \u6ce8\u91ca\u6765\u5ffd\u7565\u6240\u6709\u6b64\u7c7b\u522b\u7684\u9519\u8bef\u3002\u7531\u4e8e\u8fd9\u4e9b\u9519\u8bef\u4e0d\u5e38\u89c1\uff0c\u56e0\u6b64\u5728\u4e00\u884c\u4e2d\u770b\u5230\u4e24\u4e2a \u4e0d\u540c\u7684 <code>misc</code> \u9519\u8bef\u4ee3\u7801\u7684\u9519\u8bef\u662f\u4e0d\u592a\u53ef\u80fd\u7684\u2014\u2014\u5c3d\u7ba1\u8fd9\u786e\u5b9e\u5076\u5c14\u4f1a\u53d1\u751f\u3002</p> <p>Note</p> <p>\u672a\u6765\u7684 mypy \u7248\u672c\u53ef\u80fd\u4f1a\u4e3a\u4e00\u4e9b\u5f53\u524d\u4f7f\u7528 <code>misc</code> \u9519\u8bef\u4ee3\u7801\u7684\u9519\u8bef\u6dfb\u52a0\u65b0\u7684\u9519\u8bef\u4ee3\u7801\u3002</p> <p>Mypy performs numerous other, less commonly failing checks that don't have specific error codes. These use the <code>misc</code> error code. Other than being used for multiple unrelated errors, the <code>misc</code> error code is not special. For example, you can ignore all errors in this category by using <code># type: ignore[misc]</code> comment. Since these errors are not expected to be common, it's unlikely that you'll see two different errors with the <code>misc</code> code on a single line -- though this can certainly happen once in a while.</p> <p>Note</p> <p>Future mypy versions will likely add new error codes for some errors that currently use the <code>misc</code> error code.</p>"},{"location":"mypy_other/error_code_list2/","title":"\u53ef\u9009\u68c0\u67e5\u7684\u9519\u8bef\u4ee3\u7801","text":"<p>Error codes for optional checks</p> \u4e2d\u6587\u82f1\u6587 <p>\u672c\u8282\u6587\u6863\u8bb0\u5f55\u4e86 mypy \u5728\u542f\u7528\u7279\u5b9a\u9009\u9879\u65f6\u751f\u6210\u7684\u5404\u79cd\u9519\u8bef\u4ee3\u7801\u3002\u6709\u5173\u9519\u8bef\u4ee3\u7801\u53ca\u5176\u914d\u7f6e\u7684\u4e00\u822c\u6587\u6863\uff0c\u8bf7\u53c2\u89c1 \u9519\u8bef\u4ee3\u7801\u3002\u9ed8\u8ba4\u542f\u7528\u7684\u9519\u8bef\u4ee3\u7801 \u8bb0\u5f55\u4e86\u9ed8\u8ba4\u542f\u7528\u7684\u9519\u8bef\u4ee3\u7801\u3002</p> <p>Note</p> <p>\u672c\u8282\u4e2d\u7684\u793a\u4f8b\u4f7f\u7528 \u5185\u8054\u914d\u7f6e \u6765\u6307\u5b9a mypy \u9009\u9879\u3002\u60a8\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 \u914d\u7f6e\u6587\u4ef6 \u6216 \u547d\u4ee4\u884c\u9009\u9879 \u6765\u8bbe\u7f6e\u76f8\u540c\u7684\u9009\u9879\u3002</p> <p>This section documents various errors codes that mypy generates only if you enable certain options. See Error codes for general documentation about error codes and their configuration. Error codes enabled by default documents error codes that are enabled by default.</p> <p>Note</p> <p>The examples in this section use inline configuration to specify mypy options. You can also set the same options by using a configuration file or command-line options.</p>"},{"location":"mypy_other/error_code_list2/#\u68c0\u67e5\u7c7b\u578b\u53c2\u6570\u662f\u5426\u5b58\u5728-type-arg","title":"\u68c0\u67e5\u7c7b\u578b\u53c2\u6570\u662f\u5426\u5b58\u5728 [type-arg]","text":"<p>Check that type arguments exist [type-arg]</p> \u4e2d\u6587\u82f1\u6587 <p>\u5982\u679c\u60a8\u4f7f\u7528 --disallow-any-generics\uff0cmypy \u8981\u6c42\u6bcf\u4e2a\u6cdb\u578b\u7c7b\u578b\u90fd\u5fc5\u987b\u4e3a\u6bcf\u4e2a\u7c7b\u578b\u53c2\u6570\u63d0\u4f9b\u5177\u4f53\u7684\u503c\u3002\u4f8b\u5982\uff0c\u7c7b\u578b <code>list</code> \u6216 <code>dict</code> \u4f1a\u88ab\u62d2\u7edd\u3002\u60a8\u5e94\u8be5\u6539\u7528\u7c7b\u4f3c <code>list[int]</code> \u6216 <code>dict[str, int]</code> \u7684\u7c7b\u578b\u3002\u4efb\u4f55\u7701\u7565\u7684\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\u4f1a\u88ab\u9690\u5f0f\u5730\u89c6\u4e3a <code>Any</code>\u3002\u7c7b\u578b <code>list</code> \u7b49\u540c\u4e8e <code>list[Any]</code>\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code># mypy: disallow-any-generics\n\n# \u9519\u8bef\uff1a\u7f3a\u5c11\u6cdb\u578b\u7c7b\u578b \"list\" \u7684\u7c7b\u578b\u53c2\u6570 [type-arg]\ndef remove_dups(items: list) -&gt; list:\n    ...\n</code></pre> <p>If you use --disallow-any-generics, mypy requires that each generic type has values for each type argument. For example, the types <code>list</code> or <code>dict</code> would be rejected. You should instead use types like <code>list[int]</code> or <code>dict[str, int]</code>. Any omitted generic type arguments get implicit <code>Any</code> values. The type <code>list</code> is equivalent to <code>list[Any]</code>, and so on.</p> <p>Example:</p> <pre><code># mypy: disallow-any-generics\n\n# Error: Missing type parameters for generic type \"list\"  [type-arg]\ndef remove_dups(items: list) -&gt; list:\n    ...\n</code></pre>"},{"location":"mypy_other/error_code_list2/#\u68c0\u67e5\u6bcf\u4e2a\u51fd\u6570\u662f\u5426\u6709\u6ce8\u89e3-no-untyped-def","title":"\u68c0\u67e5\u6bcf\u4e2a\u51fd\u6570\u662f\u5426\u6709\u6ce8\u89e3 [no-untyped-def]","text":"<p>Check that every function has an annotation [no-untyped-def]</p> \u4e2d\u6587\u82f1\u6587 <p>\u5982\u679c\u60a8\u4f7f\u7528 --disallow-untyped-defs\uff0cmypy \u8981\u6c42\u6240\u6709\u51fd\u6570\u90fd\u6709\u7c7b\u578b\u6ce8\u89e3\uff08\u65e0\u8bba\u662f Python 3 \u6ce8\u89e3\u8fd8\u662f\u7c7b\u578b\u6ce8\u91ca\uff09\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code># mypy: disallow-untyped-defs\n\ndef inc(x):  # \u9519\u8bef\uff1a\u51fd\u6570\u7f3a\u5c11\u7c7b\u578b\u6ce8\u89e3 [no-untyped-def]\n    return x + 1\n\ndef inc_ok(x: int) -&gt; int:  # \u6b63\u786e\n    return x + 1\n\nclass Counter:\n        # \u9519\u8bef\uff1a\u51fd\u6570\u7f3a\u5c11\u7c7b\u578b\u6ce8\u89e3 [no-untyped-def]\n        def __init__(self):\n            self.value = 0\n\nclass CounterOk:\n        # \u6b63\u786e\uff1a\u5982\u679c \"__init__\" \u4e0d\u63a5\u53d7\u53c2\u6570\uff0c\u5219\u9700\u8981\u663e\u5f0f\u7684 \"-&gt; None\"\n        def __init__(self) -&gt; None:\n            self.value = 0\n</code></pre> <p>If you use --disallow-untyped-defs, mypy requires that all functions have annotations (either a Python 3 annotation or a type comment).</p> <p>Example:</p> <pre><code># mypy: disallow-untyped-defs\n\ndef inc(x):  # Error: Function is missing a type annotation  [no-untyped-def]\n    return x + 1\n\ndef inc_ok(x: int) -&gt; int:  # OK\n    return x + 1\n\nclass Counter:\n        # Error: Function is missing a type annotation  [no-untyped-def]\n        def __init__(self):\n            self.value = 0\n\nclass CounterOk:\n        # OK: An explicit \"-&gt; None\" is needed if \"__init__\" takes no arguments\n        def __init__(self) -&gt; None:\n            self.value = 0\n</code></pre>"},{"location":"mypy_other/error_code_list2/#\u68c0\u67e5\u7c7b\u578b\u8f6c\u6362\u662f\u5426\u5197\u4f59-redundant-cast","title":"\u68c0\u67e5\u7c7b\u578b\u8f6c\u6362\u662f\u5426\u5197\u4f59 [redundant-cast]","text":"<p>Check that cast is not redundant [redundant-cast]</p> \u4e2d\u6587\u82f1\u6587 <p>\u5982\u679c\u60a8\u4f7f\u7528 --warn-redundant-casts\uff0cmypy \u4f1a\u751f\u6210\u9519\u8bef\uff0c\u5982\u679c\u5f3a\u5236\u8f6c\u6362\u7684\u6e90\u7c7b\u578b\u4e0e\u76ee\u6807\u7c7b\u578b\u76f8\u540c\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code># mypy: warn-redundant-casts\n\nfrom typing import cast\n\nCount = int\n\ndef example(x: Count) -&gt; int:\n    # \u9519\u8bef\uff1a\u5bf9 \"int\" \u7684\u5197\u4f59\u5f3a\u5236\u8f6c\u6362 [redundant-cast]\n    return cast(int, x)\n</code></pre> <p>If you use --warn-redundant-casts, mypy will generate an error if the source type of a cast is the same as the target type.</p> <p>Example:</p> <pre><code># mypy: warn-redundant-casts\n\nfrom typing import cast\n\nCount = int\n\ndef example(x: Count) -&gt; int:\n    # Error: Redundant cast to \"int\"  [redundant-cast]\n    return cast(int, x)\n</code></pre>"},{"location":"mypy_other/error_code_list2/#\u68c0\u67e5\u65b9\u6cd5\u662f\u5426\u6709\u5197\u4f59\u7684-self-\u6ce8\u89e3-redundant-self","title":"\u68c0\u67e5\u65b9\u6cd5\u662f\u5426\u6709\u5197\u4f59\u7684 Self \u6ce8\u89e3 [redundant-self]","text":"<p>Check that methods do not have redundant Self annotations [redundant-self]</p> \u4e2d\u6587\u82f1\u6587 <p>\u5982\u679c\u4e00\u4e2a\u65b9\u6cd5\u5728\u8fd4\u56de\u7c7b\u578b\u6216\u975e <code>self</code> \u53c2\u6570\u7684\u7c7b\u578b\u4e2d\u4f7f\u7528\u4e86 <code>Self</code> \u7c7b\u578b\uff0c\u90a3\u4e48\u5c31\u4e0d\u9700\u8981\u663e\u5f0f\u5730\u6ce8\u89e3 <code>self</code> \u53c2\u6570\u3002\u8fd9\u79cd\u6ce8\u89e3\u867d\u7136\u5728 PEP 673 \u4e2d\u88ab\u5141\u8bb8\uff0c\u4f46\u5b83\u4eec\u662f\u591a\u4f59\u7684\u3002\u5982\u679c\u542f\u7528\u8fd9\u4e2a\u9519\u8bef\u4ee3\u7801\uff0cmypy \u4f1a\u5728\u53d1\u73b0\u5197\u4f59\u7684 <code>Self</code> \u7c7b\u578b\u65f6\u751f\u6210\u9519\u8bef\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code># mypy: enable-error-code=\"redundant-self\"\n\nfrom typing import Self\n\nclass C:\n    # \u9519\u8bef\uff1a\u7b2c\u4e00\u4e2a\u65b9\u6cd5\u53c2\u6570\u7684 \"Self\" \u6ce8\u89e3\u662f\u591a\u4f59\u7684\n    def copy(self: Self) -&gt; Self:\n        return type(self)()\n</code></pre> <p>If a method uses the <code>Self</code> type in the return type or the type of a non-self argument, there is no need to annotate the <code>self</code> argument explicitly. Such annotations are allowed by :pep:<code>673</code> but are redundant. If you enable this error code, mypy will generate an error if there is a redundant <code>Self</code> type.</p> <p>Example:</p> <pre><code># mypy: enable-error-code=\"redundant-self\"\n\nfrom typing import Self\n\nclass C:\n    # Error: Redundant \"Self\" annotation for the first method argument\n    def copy(self: Self) -&gt; Self:\n        return type(self)()\n</code></pre>"},{"location":"mypy_other/error_code_list2/#\u68c0\u67e5\u6bd4\u8f83\u662f\u5426\u91cd\u53e0-comparison-overlap","title":"\u68c0\u67e5\u6bd4\u8f83\u662f\u5426\u91cd\u53e0 [comparison-overlap]","text":"<p>Check that comparisons are overlapping [comparison-overlap]</p> \u4e2d\u6587\u82f1\u6587 <p>\u5982\u679c\u60a8\u4f7f\u7528 --strict-equality\uff0cmypy \u4f1a\u5728\u8ba4\u4e3a\u6bd4\u8f83\u64cd\u4f5c\u603b\u662f\u4e3a\u771f\u6216\u4e3a\u5047\u65f6\u751f\u6210\u9519\u8bef\u3002\u8fd9\u4e9b\u901a\u5e38\u662f\u9519\u8bef\u3002\u6709\u65f6 mypy \u53ef\u80fd\u8fc7\u4e8e\u6311\u5254\uff0c\u800c\u5b9e\u9645\u4e0a\u6bd4\u8f83\u64cd\u4f5c\u53ef\u80fd\u662f\u6709\u7528\u7684\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528 <code># type: ignore[comparison-overlap]</code> \u4ec5\u5728\u7279\u5b9a\u884c\u5ffd\u7565\u6b64\u95ee\u9898\uff0c\u800c\u4e0d\u662f\u5728\u6240\u6709\u5730\u65b9\u7981\u7528\u4e25\u683c\u7684\u76f8\u7b49\u68c0\u67e5\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code># mypy: strict-equality\n\ndef is_magic(x: bytes) -&gt; bool:\n    # \u9519\u8bef\uff1a\u975e\u91cd\u53e0\u7684\u76f8\u7b49\u68c0\u67e5\uff08\u5de6\u64cd\u4f5c\u6570\u7c7b\u578b\uff1a\"bytes\"\uff0c\n    #        \u53f3\u64cd\u4f5c\u6570\u7c7b\u578b\uff1a\"str\"\uff09 [comparison-overlap]\n    return x == 'magic'\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5c06\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u66f4\u6539\u4e3a\u5b57\u8282\u5b57\u9762\u91cf\u6765\u4fee\u590d\u6b64\u9519\u8bef\uff1a</p> <pre><code># mypy: strict-equality\n\ndef is_magic(x: bytes) -&gt; bool:\n    return x == b'magic'  # \u6b63\u786e\n</code></pre> <p>If you use --strict-equality, mypy will generate an error if it thinks that a comparison operation is always true or false. These are often bugs. Sometimes mypy is too picky and the comparison can actually be useful. Instead of disabling strict equality checking everywhere, you can use <code># type: ignore[comparison-overlap]</code> to ignore the issue on a particular line only.</p> <p>Example:</p> <pre><code># mypy: strict-equality\n\ndef is_magic(x: bytes) -&gt; bool:\n    # Error: Non-overlapping equality check (left operand type: \"bytes\",\n    #        right operand type: \"str\")  [comparison-overlap]\n    return x == 'magic'\n</code></pre> <p>We can fix the error by changing the string literal to a bytes literal:</p> <pre><code># mypy: strict-equality\n\ndef is_magic(x: bytes) -&gt; bool:\n    return x == b'magic'  # OK\n</code></pre>"},{"location":"mypy_other/error_code_list2/#\u68c0\u67e5\u662f\u5426\u6ca1\u6709\u8c03\u7528\u672a\u6ce8\u89e3\u7684\u51fd\u6570-no-untyped-call","title":"\u68c0\u67e5\u662f\u5426\u6ca1\u6709\u8c03\u7528\u672a\u6ce8\u89e3\u7684\u51fd\u6570 [no-untyped-call]","text":"<p>Check that no untyped functions are called [no-untyped-call]</p> \u4e2d\u6587\u82f1\u6587 <p>\u5982\u679c\u60a8\u4f7f\u7528 --disallow-untyped-calls\uff0c\u5f53\u60a8\u5728\u6ce8\u89e3\u4e86\u7c7b\u578b\u7684\u51fd\u6570\u4e2d\u8c03\u7528\u4e00\u4e2a\u672a\u6ce8\u89e3\u7684\u51fd\u6570\u65f6\uff0cmypy \u4f1a\u751f\u6210\u9519\u8bef\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code># mypy: disallow-untyped-calls\n\ndef do_it() -&gt; None:\n    # \u9519\u8bef\uff1a\u5728\u7c7b\u578b\u4e0a\u4e0b\u6587\u4e2d\u8c03\u7528\u672a\u6ce8\u89e3\u7684\u51fd\u6570 \"bad\"  [no-untyped-call]\n    bad()\n\ndef bad():\n    ...\n</code></pre> <p>If you use --disallow-untyped-calls, mypy generates an error when you call an unannotated function in an annotated function.</p> <p>Example:</p> <pre><code># mypy: disallow-untyped-calls\n\ndef do_it() -&gt; None:\n    # Error: Call to untyped function \"bad\" in typed context  [no-untyped-call]\n    bad()\n\ndef bad():\n    ...\n</code></pre>"},{"location":"mypy_other/error_code_list2/#\u68c0\u67e5\u51fd\u6570\u662f\u5426\u4e0d\u8fd4\u56de-any-\u503c-no-any-return","title":"\u68c0\u67e5\u51fd\u6570\u662f\u5426\u4e0d\u8fd4\u56de Any \u503c [no-any-return]","text":"<p>Check that function does not return Any value [no-any-return]</p> \u4e2d\u6587\u82f1\u6587 <p>\u5982\u679c\u60a8\u4f7f\u7528 --warn-return-any\uff0c\u5f53\u60a8\u5728\u4e00\u4e2a\u88ab\u6ce8\u89e3\u4e3a\u8fd4\u56de\u975e <code>Any</code> \u503c\u7684\u51fd\u6570\u4e2d\u8fd4\u56de\u4e00\u4e2a <code>Any</code> \u7c7b\u578b\u7684\u503c\u65f6\uff0cmypy \u4f1a\u751f\u6210\u9519\u8bef\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code># mypy: warn-return-any\n\ndef fields(s):\n    return s.split(',')\n\ndef first_field(x: str) -&gt; str:\n    # \u9519\u8bef\uff1a\u4ece\u58f0\u660e\u8fd4\u56de \"str\" \u7684\u51fd\u6570\u4e2d\u8fd4\u56de\u4e86 Any  [no-any-return]\n    return fields(x)[0]\n</code></pre> <p>If you use --warn-return-any, mypy generates an error if you return a value with an <code>Any</code> type in a function that is annotated to return a non-<code>Any</code> value.</p> <p>Example:</p> <pre><code># mypy: warn-return-any\n\ndef fields(s):\n        return s.split(',')\n\ndef first_field(x: str) -&gt; str:\n    # Error: Returning Any from function declared to return \"str\"  [no-any-return]\n    return fields(x)[0]\n</code></pre>"},{"location":"mypy_other/error_code_list2/#\u68c0\u67e5\u7c7b\u578b\u662f\u5426\u7531\u4e8e\u7f3a\u5c11\u5bfc\u5165\u800c\u5305\u542b-any-\u7ec4\u4ef6-no-any-unimported","title":"\u68c0\u67e5\u7c7b\u578b\u662f\u5426\u7531\u4e8e\u7f3a\u5c11\u5bfc\u5165\u800c\u5305\u542b Any \u7ec4\u4ef6 [no-any-unimported]","text":"<p>Check that types have no Any components due to missing imports [no-any-unimported]</p> \u4e2d\u6587\u82f1\u6587 <p>\u5982\u679c\u60a8\u4f7f\u7528 --disallow-any-unimported\uff0c\u5f53\u7531\u4e8e mypy \u65e0\u6cd5\u89e3\u6790\u5bfc\u5165\u800c\u5bfc\u81f4\u7c7b\u578b\u7684\u67d0\u4e2a\u7ec4\u4ef6\u53d8\u4e3a <code>Any</code> \u65f6\uff0cmypy \u4f1a\u751f\u6210\u9519\u8bef\u3002\u8fd9\u4e9b\u201c\u9690\u5f62\u201d\u7684 <code>Any</code> \u7c7b\u578b\u53ef\u80fd\u4f1a\u4ee4\u4eba\u60ca\u8bb6\uff0c\u5e76\u4e14\u610f\u5916\u5730\u5bfc\u81f4\u4e0d\u51c6\u786e\u7684\u7c7b\u578b\u68c0\u67e5\u3002</p> <p>\u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5047\u8bbe mypy \u65e0\u6cd5\u627e\u5230\u6a21\u5757 <code>animals</code>\uff0c\u8fd9\u610f\u5473\u7740 <code>Cat</code> \u5728\u7c7b\u578b\u6ce8\u89e3\u4e2d\u56de\u9000\u4e3a <code>Any</code>\uff1a</p> <pre><code># mypy: disallow-any-unimported\n\nfrom animals import Cat  # type: ignore\n\n# \u9519\u8bef\uff1a\u7531\u4e8e\u672a\u89e3\u6790\u7684\u5bfc\u5165\uff0c\"feed\" \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u53d8\u4e3a \"Any\"  [no-any-unimported]\ndef feed(cat: Cat) -&gt; None:\n    ...\n</code></pre> <p>If you use --disallow-any-unimported, mypy generates an error if a component of a type becomes <code>Any</code> because mypy couldn't resolve an import. These \"stealth\" <code>Any</code> types can be surprising and accidentally cause imprecise type checking.</p> <p>In this example, we assume that mypy can't find the module <code>animals</code>, which means that <code>Cat</code> falls back to <code>Any</code> in a type annotation:</p> <pre><code># mypy: disallow-any-unimported\n\nfrom animals import Cat  # type: ignore\n\n# Error: Argument 1 to \"feed\" becomes \"Any\" due to an unfollowed import  [no-any-unimported]\ndef feed(cat: Cat) -&gt; None:\n    ...\n</code></pre>"},{"location":"mypy_other/error_code_list2/#\u68c0\u67e5\u8bed\u53e5\u6216\u8868\u8fbe\u5f0f\u662f\u5426\u4e0d\u53ef\u8fbe-unreachable","title":"\u68c0\u67e5\u8bed\u53e5\u6216\u8868\u8fbe\u5f0f\u662f\u5426\u4e0d\u53ef\u8fbe [unreachable]","text":"<p>Check that statement or expression is unreachable [unreachable]</p> \u4e2d\u6587\u82f1\u6587 <p>\u5982\u679c\u60a8\u4f7f\u7528 --warn-unreachable\uff0c\u5f53 mypy \u8ba4\u4e3a\u67d0\u4e2a\u8bed\u53e5\u6216\u8868\u8fbe\u5f0f\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u6267\u884c\u65f6\uff0c\u4f1a\u751f\u6210\u9519\u8bef\u3002\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u8fd9\u662f\u7531\u4e8e\u63a7\u5236\u6d41\u6216\u6761\u4ef6\u68c0\u67e5\u4e0d\u6b63\u786e\uff0c\u5bfc\u81f4\u68c0\u67e5\u610f\u5916\u5730\u603b\u662f\u4e3a\u771f\u6216\u4e3a\u5047\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code># mypy: warn-unreachable\n\ndef example(x: int) -&gt; None:\n    # \u9519\u8bef\uff1a \"or\" \u7684\u53f3\u64cd\u4f5c\u6570\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u8ba1\u7b97  [unreachable]\n    assert isinstance(x, int) or x == 'unused'\n\n    return\n    # \u9519\u8bef\uff1a\u8bed\u53e5\u4e0d\u53ef\u8fbe  [unreachable]\n    print('unreachable')\n</code></pre> <p>If you use --warn-unreachable, mypy generates an error if it thinks that a statement or expression will never be executed. In most cases, this is due to incorrect control flow or conditional checks that are accidentally always true or false.</p> <pre><code># mypy: warn-unreachable\n\ndef example(x: int) -&gt; None:\n    # Error: Right operand of \"or\" is never evaluated  [unreachable]\n    assert isinstance(x, int) or x == 'unused'\n\n    return\n    # Error: Statement is unreachable  [unreachable]\n    print('unreachable')\n</code></pre>"},{"location":"mypy_other/error_code_list2/#\u68c0\u67e5\u8868\u8fbe\u5f0f\u662f\u5426\u5197\u4f59-redundant-expr","title":"\u68c0\u67e5\u8868\u8fbe\u5f0f\u662f\u5426\u5197\u4f59 [redundant-expr]","text":"<p>Check that expression is redundant [redundant-expr]</p> \u4e2d\u6587\u82f1\u6587 <p>\u5982\u679c\u60a8\u4f7f\u7528 --enable-error-code redundant-expr\uff0c\u5f53 mypy \u8ba4\u4e3a\u67d0\u4e2a\u8868\u8fbe\u5f0f\u662f\u5197\u4f59\u7684\u65f6\uff0c\u4f1a\u751f\u6210\u9519\u8bef\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code># mypy: enable-error-code=\"redundant-expr\"\n\ndef example(x: int) -&gt; None:\n    # \u9519\u8bef\uff1a \"and\" \u7684\u5de6\u64cd\u4f5c\u6570\u603b\u662f\u4e3a\u771f  [redundant-expr]\n    if isinstance(x, int) and x &gt; 0:\n        pass\n\n    # \u9519\u8bef\uff1a\u6761\u4ef6\u603b\u662f\u4e3a\u771f  [redundant-expr]\n    1 if isinstance(x, int) else 0\n\n    # \u9519\u8bef\uff1a\u5217\u8868\u63a8\u5bfc\u5f0f\u4e2d\u7684\u6761\u4ef6\u603b\u662f\u4e3a\u771f  [redundant-expr]\n    [i for i in range(x) if isinstance(i, int)]\n</code></pre> <p>If you use --enable-error-code redundant-expr, mypy generates an error if it thinks that an expression is redundant.</p> <pre><code># mypy: enable-error-code=\"redundant-expr\"\n\ndef example(x: int) -&gt; None:\n    # Error: Left operand of \"and\" is always true  [redundant-expr]\n    if isinstance(x, int) and x &gt; 0:\n        pass\n\n    # Error: If condition is always true  [redundant-expr]\n    1 if isinstance(x, int) else 0\n\n    # Error: If condition in comprehension is always true  [redundant-expr]\n    [i for i in range(x) if isinstance(i, int)]\n</code></pre>"},{"location":"mypy_other/error_code_list2/#\u8b66\u544a\u53ea\u5728\u67d0\u4e9b\u6267\u884c\u8def\u5f84\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf-possibly-undefined","title":"\u8b66\u544a\u53ea\u5728\u67d0\u4e9b\u6267\u884c\u8def\u5f84\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf [possibly-undefined]","text":"<p>Warn about variables that are defined only in some execution paths [possibly-undefined]</p> \u4e2d\u6587\u82f1\u6587 <p>\u5982\u679c\u60a8\u4f7f\u7528 --enable-error-code possibly-undefined\uff0c\u5f53 mypy \u65e0\u6cd5\u9a8c\u8bc1\u4e00\u4e2a\u53d8\u91cf\u5728\u6240\u6709\u6267\u884c\u8def\u5f84\u4e2d\u90fd\u4f1a\u88ab\u5b9a\u4e49\u65f6\uff0c\u4f1a\u751f\u6210\u9519\u8bef\u3002\u8fd9\u5305\u62ec\u53d8\u91cf\u5b9a\u4e49\u51fa\u73b0\u5728\u5faa\u73af\u4e2d\u3001\u6761\u4ef6\u5206\u652f\u4e2d\u3001\u5f02\u5e38\u5904\u7406\u5668\u4e2d\u7b49\u60c5\u51b5\u3002\u4f8b\u5982\uff1a</p> <pre><code># mypy: enable-error-code=\"possibly-undefined\"\n\nfrom typing import Iterable\n\ndef test(values: Iterable[int], flag: bool) -&gt; None:\n    if flag:\n        a = 1\n    z = a + 1  # \u9519\u8bef\uff1a\u540d\u79f0 \"a\" \u53ef\u80fd\u672a\u5b9a\u4e49  [possibly-undefined]\n\n    for v in values:\n        b = v\n    z = b + 1  # \u9519\u8bef\uff1a\u540d\u79f0 \"b\" \u53ef\u80fd\u672a\u5b9a\u4e49  [possibly-undefined]\n</code></pre> <p>If you use --enable-error-code possibly-undefined, mypy generates an error if it cannot verify that a variable will be defined in all execution paths. This includes situations when a variable definition appears in a loop, in a conditional branch, in an except handler, etc. For example:</p> <pre><code># mypy: enable-error-code=\"possibly-undefined\"\n\nfrom typing import Iterable\n\ndef test(values: Iterable[int], flag: bool) -&gt; None:\n    if flag:\n        a = 1\n    z = a + 1  # Error: Name \"a\" may be undefined [possibly-undefined]\n\n    for v in values:\n        b = v\n    z = b + 1  # Error: Name \"b\" may be undefined [possibly-undefined]\n</code></pre>"},{"location":"mypy_other/error_code_list2/#\u68c0\u67e5\u8868\u8fbe\u5f0f\u5728\u5e03\u5c14\u4e0a\u4e0b\u6587\u4e2d\u662f\u5426\u9690\u5f0f\u4e3a\u771f-truthy-bool","title":"\u68c0\u67e5\u8868\u8fbe\u5f0f\u5728\u5e03\u5c14\u4e0a\u4e0b\u6587\u4e2d\u662f\u5426\u9690\u5f0f\u4e3a\u771f [truthy-bool]","text":"<p>Check that expression is not implicitly true in boolean context [truthy-bool]</p> \u4e2d\u6587\u82f1\u6587 <p>\u5f53\u5e03\u5c14\u4e0a\u4e0b\u6587\u4e2d\u7684\u8868\u8fbe\u5f0f\u7c7b\u578b\u6ca1\u6709\u5b9e\u73b0 <code>__bool__</code> \u6216 <code>__len__</code> \u65f6\u53d1\u51fa\u8b66\u544a\u3002\u9664\u975e\u5b50\u7c7b\u578b\u5b9e\u73b0\u4e86\u8fd9\u4e9b\u65b9\u6cd5\uff0c\u5426\u5219\u8868\u8fbe\u5f0f\u5c06\u59cb\u7ec8\u88ab\u8ba4\u4e3a\u662f <code>True</code>\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6761\u4ef6\u5224\u65ad\u4e2d\u7684\u9519\u8bef\u3002</p> <p>\u4f5c\u4e3a\u4f8b\u5916\uff0c<code>object</code> \u7c7b\u578b\u5728\u5e03\u5c14\u4e0a\u4e0b\u6587\u4e2d\u662f\u88ab\u5141\u8bb8\u7684\u3002\u4f7f\u7528\u53ef\u8fed\u4ee3\u5bf9\u8c61\u503c\u4f5c\u4e3a\u5e03\u5c14\u4e0a\u4e0b\u6587\u4e2d\u7684\u6761\u4ef6\u6709\u4e00\u4e2a\u5355\u72ec\u7684\u9519\u8bef\u4ee3\u7801\uff08\u89c1\u4e0b\u6587\uff09\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code># mypy: enable-error-code=\"truthy-bool\"\n\nclass Foo:\n    pass\nfoo = Foo()\n# \u9519\u8bef\uff1a\"foo\" \u7684\u7c7b\u578b\u662f \"Foo\"\uff0c\u6ca1\u6709\u5b9e\u73b0 __bool__ \u6216 __len__\uff0c\u56e0\u6b64\u5728\u5e03\u5c14\u4e0a\u4e0b\u6587\u4e2d\u603b\u662f\u4e3a\u771f\nif foo:\n        ...\n</code></pre> <p>Warn when the type of an expression in a boolean context does not implement <code>__bool__</code> or <code>__len__</code>. Unless one of these is implemented by a subtype, the expression will always be considered true, and there may be a bug in the condition.</p> <p>As an exception, the <code>object</code> type is allowed in a boolean context. Using an iterable value in a boolean context has a separate error code (see below).</p> <pre><code># mypy: enable-error-code=\"truthy-bool\"\n\nclass Foo:\n    pass\nfoo = Foo()\n# Error: \"foo\" has type \"Foo\" which does not implement __bool__ or __len__ so it could always be true in boolean context\nif foo:\n        ...\n</code></pre>"},{"location":"mypy_other/error_code_list2/#\u68c0\u67e5\u53ef\u8fed\u4ee3\u5bf9\u8c61\u5728\u5e03\u5c14\u4e0a\u4e0b\u6587\u4e2d\u662f\u5426\u9690\u5f0f\u4e3a\u771f-truthy-iterable","title":"\u68c0\u67e5\u53ef\u8fed\u4ee3\u5bf9\u8c61\u5728\u5e03\u5c14\u4e0a\u4e0b\u6587\u4e2d\u662f\u5426\u9690\u5f0f\u4e3a\u771f [truthy-iterable]","text":"<p>Check that iterable is not implicitly true in boolean context [truthy-iterable]</p> \u4e2d\u6587\u82f1\u6587 <p>\u5982\u679c\u4e00\u4e2a\u7c7b\u578b\u4e3a <code>Iterable</code> \u7684\u503c\u7528\u4f5c\u5e03\u5c14\u6761\u4ef6\uff0c\u4f1a\u751f\u6210\u9519\u8bef\uff0c\u56e0\u4e3a <code>Iterable</code> \u4e0d\u5b9e\u73b0 <code>__len__</code> \u6216 <code>__bool__</code>\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>from typing import Iterable\n\ndef transform(items: Iterable[int]) -&gt; list[int]:\n    # \u9519\u8bef\uff1a\"items\" \u7684\u7c7b\u578b\u662f \"Iterable[int]\"\uff0c\u5728\u5e03\u5c14\u4e0a\u4e0b\u6587\u4e2d\u603b\u662f\u4e3a\u771f\u3002\u8003\u8651\u4f7f\u7528 \"Collection[int]\" \u4ee3\u66ff\u3002  [truthy-iterable]\n    if not items:\n        return [42]\n    return [x + 1 for x in items]\n</code></pre> <p>\u5982\u679c <code>transform</code> \u51fd\u6570\u88ab\u4f20\u5165 <code>Generator</code> \u53c2\u6570\uff0c\u5982 <code>int(x) for x in []</code>\uff0c\u8fd9\u4e2a\u51fd\u6570\u5c06\u4e0d\u4f1a\u8fd4\u56de <code>[42]</code>\uff0c\u8fd9\u53ef\u80fd\u4e0d\u662f\u9884\u671f\u7684\u7ed3\u679c\u3002\u5f53\u7136\uff0c\u4e5f\u6709\u53ef\u80fd <code>transform</code> \u53ea\u4f1a\u88ab <code>list</code> \u6216\u5176\u4ed6\u5bb9\u5668\u5bf9\u8c61\u8c03\u7528\uff0c\u5e76\u4e14 <code>if not items</code> \u68c0\u67e5\u5b9e\u9645\u4e0a\u662f\u6709\u6548\u7684\u3002\u5982\u679c\u662f\u8fd9\u79cd\u60c5\u51b5\uff0c\u5efa\u8bae\u5c06 <code>items</code> \u6ce8\u89e3\u4e3a <code>Collection[int]</code> \u800c\u4e0d\u662f <code>Iterable[int]</code>\u3002</p> <p>Generate an error if a value of type <code>Iterable</code> is used as a boolean condition, since <code>Iterable</code> does not implement <code>__len__</code> or <code>__bool__</code>.</p> <p>Example:</p> <pre><code>from typing import Iterable\n\ndef transform(items: Iterable[int]) -&gt; list[int]:\n    # Error: \"items\" has type \"Iterable[int]\" which can always be true in boolean context. Consider using \"Collection[int]\" instead.  [truthy-iterable]\n    if not items:\n        return [42]\n    return [x + 1 for x in items]\n</code></pre> <p>If <code>transform</code> is called with a <code>Generator</code> argument, such as <code>int(x) for x in []</code>, this function would not return <code>[42]</code> unlike what might be intended. Of course, it's possible that <code>transform</code> is only called with <code>list</code> or other container objects, and the <code>if not items</code> check is actually valid. If that is the case, it is recommended to annotate <code>items</code> as <code>Collection[int]</code> instead of <code>Iterable[int]</code>.</p>"},{"location":"mypy_other/error_code_list2/#\u68c0\u67e5--type-ignore-\u662f\u5426\u5305\u542b\u9519\u8bef\u4ee3\u7801-ignore-without-code","title":"\u68c0\u67e5 <code># type: ignore</code> \u662f\u5426\u5305\u542b\u9519\u8bef\u4ee3\u7801 [ignore-without-code]","text":"<p>Check that <code># type: ignore</code> include an error code [ignore-without-code]</p> \u4e2d\u6587\u82f1\u6587 <p>\u5f53 <code># type: ignore</code> \u6ce8\u91ca\u6ca1\u6709\u6307\u5b9a\u4efb\u4f55\u9519\u8bef\u4ee3\u7801\u65f6\u53d1\u51fa\u8b66\u544a\u3002\u8fd9\u53ef\u4ee5\u660e\u786e\u5ffd\u7565\u7684\u610f\u56fe\uff0c\u5e76\u786e\u4fdd\u4ec5\u5ffd\u7565\u9884\u671f\u7684\u9519\u8bef\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code># mypy: enable-error-code=\"ignore-without-code\"\n\nclass Foo:\n    def __init__(self, name: str) -&gt; None:\n        self.name = name\n\nf = Foo('foo')\n\n# \u8fd9\u4e00\u884c\u7684\u6ce8\u91ca\u6ca1\u6709\u6307\u5b9a\u9519\u8bef\u4ee3\u7801\uff0c\u56e0\u6b64\uff1a\n# - \u9884\u671f\u9519\u8bef 'assignment' \u548c\n# - \u610f\u5916\u9519\u8bef 'attr-defined'\n# \u90fd\u88ab\u5ffd\u7565\u4e86\u3002\n# \u9519\u8bef\uff1a \"type: ignore\" \u6ce8\u91ca\u6ca1\u6709\u9519\u8bef\u4ee3\u7801\uff08\u8003\u8651\u4f7f\u7528 \"type: ignore[attr-defined]\"\uff09\nf.nme = 42  # type: ignore\n\n# \u8fd9\u4e00\u884c\u6b63\u786e\u5730\u8b66\u544a\u4e86\u5c5e\u6027\u540d\u79f0\u4e2d\u7684\u9519\u5b57\n# \u9519\u8bef\uff1a\"Foo\" \u6ca1\u6709\u5c5e\u6027 \"nme\"\uff1b\u4e5f\u8bb8\u662f \"name\"\uff1f\nf.nme = 42  # type: ignore[assignment]\n</code></pre> <p>Warn when a <code># type: ignore</code> comment does not specify any error codes. This clarifies the intent of the ignore and ensures that only the expected errors are silenced.</p> <p>Example:</p> <pre><code># mypy: enable-error-code=\"ignore-without-code\"\n\nclass Foo:\n    def __init__(self, name: str) -&gt; None:\n        self.name = name\n\nf = Foo('foo')\n\n# This line has a typo that mypy can't help with as both:\n# - the expected error 'assignment', and\n# - the unexpected error 'attr-defined'\n# are silenced.\n# Error: \"type: ignore\" comment without error code (consider \"type: ignore[attr-defined]\" instead)\nf.nme = 42  # type: ignore\n\n# This line warns correctly about the typo in the attribute name\n# Error: \"Foo\" has no attribute \"nme\"; maybe \"name\"?\nf.nme = 42  # type: ignore[assignment]\n</code></pre>"},{"location":"mypy_other/error_code_list2/#\u68c0\u67e5-awaitable-\u8fd4\u56de\u503c\u662f\u5426\u88ab\u4f7f\u7528-unused-awaitable","title":"\u68c0\u67e5 awaitable \u8fd4\u56de\u503c\u662f\u5426\u88ab\u4f7f\u7528 [unused-awaitable]","text":"<p>Check that awaitable return value is used [unused-awaitable]</p> \u4e2d\u6587\u82f1\u6587 <p>\u5982\u679c\u4f60\u4f7f\u7528 --enable-error-code unused-awaitable\uff0c\u5f53\u4f60\u4e0d\u4f7f\u7528\u5b9a\u4e49\u4e86 <code>__await__</code> \u7684\u8fd4\u56de\u503c\u65f6\uff0cmypy \u4f1a\u751f\u6210\u9519\u8bef\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code># mypy: enable-error-code=\"unused-awaitable\"\n\nimport asyncio\n\nasync def f() -&gt; int: ...\n\nasync def g() -&gt; None:\n    # \u9519\u8bef\uff1a\u7c7b\u578b\u4e3a \"Task[int]\" \u7684\u503c\u5fc5\u987b\u88ab\u4f7f\u7528\n    #       \u4f60\u662f\u5426\u9057\u6f0f\u4e86\u4e00\u4e2a await\uff1f\n    asyncio.create_task(f())\n</code></pre> <p>\u4f60\u53ef\u4ee5\u5c06\u503c\u8d4b\u7ed9\u4e00\u4e2a\u4e34\u65f6\u7684\u3001\u672a\u4f7f\u7528\u7684\u53d8\u91cf\u6765\u6d88\u9664\u8fd9\u4e2a\u9519\u8bef\uff1a</p> <pre><code>async def g() -&gt; None:\n    _ = asyncio.create_task(f())  # \u65e0\u9519\u8bef\n</code></pre> <p>If you use --enable-error-code unused-awaitable, mypy generates an error if you don't use a returned value that defines <code>__await__</code>.</p> <p>Example:</p> <pre><code># mypy: enable-error-code=\"unused-awaitable\"\n\nimport asyncio\n\nasync def f() -&gt; int: ...\n\nasync def g() -&gt; None:\n    # Error: Value of type \"Task[int]\" must be used\n    #        Are you missing an await?\n    asyncio.create_task(f())\n</code></pre> <p>You can assign the value to a temporary, otherwise unused variable to silence the error:</p> <pre><code>async def g() -&gt; None:\n    _ = asyncio.create_task(f())  # No error\n</code></pre>"},{"location":"mypy_other/error_code_list2/#\u68c0\u67e5--type-ignore-\u6ce8\u91ca\u662f\u5426\u88ab\u4f7f\u7528-unused-ignore","title":"\u68c0\u67e5 <code># type: ignore</code> \u6ce8\u91ca\u662f\u5426\u88ab\u4f7f\u7528 [unused-ignore]","text":"<p>Check that <code># type: ignore</code> comment is used [unused-ignore]</p> \u4e2d\u6587\u82f1\u6587 <p>\u5982\u679c\u4f60\u4f7f\u7528 --enable-error-code unused-ignore \u6216 --warn-unused-ignores\uff0c\u5f53\u4f60\u4f7f\u7528\u4e86 <code># type: ignore</code> \u6ce8\u91ca\u4f46\u5b9e\u9645\u4e0a\u8be5\u884c\u4e0d\u4f1a\u751f\u6210\u9519\u8bef\u65f6\uff0cmypy \u4f1a\u751f\u6210\u9519\u8bef\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code># \u4f7f\u7528 \"mypy --warn-unused-ignores ...\"\n\ndef add(a: int, b: int) -&gt; int:\n    # \u9519\u8bef\uff1a\u672a\u4f7f\u7528\u7684 \"type: ignore\" \u6ce8\u91ca\n    return a + b  # type: ignore\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u7531\u4e8e\u8fd9\u79cd\u6ce8\u91ca\u7684\u7279\u5b9a\u6027\u8d28\uff0c\u552f\u4e00\u53ef\u4ee5\u9009\u62e9\u6027\u5730\u5ffd\u7565\u5b83\u7684\u65b9\u5f0f\u662f\u660e\u786e\u5305\u542b\u9519\u8bef\u4ee3\u7801\u3002\u540c\u65f6\uff0c\u5982\u679c <code># type: ignore</code> \u6ce8\u91ca\u672a\u88ab\u4f7f\u7528\uff0c\u56e0\u4e3a\u4ee3\u7801\u7531\u4e8e\u5e73\u53f0\u6216\u7248\u672c\u68c0\u67e5\u7b49\u539f\u56e0\u9759\u6001\u4e0a\u4e0d\u53ef\u8fbe\uff0c\u5219\u4e0d\u4f1a\u663e\u793a\u6b64\u9519\u8bef\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code># \u4f7f\u7528 \"mypy --warn-unused-ignores ...\"\n\nimport sys\n\ntry:\n    # \"[unused-ignore]\" \u662f\u5728 Python 3.8 \u548c 3.9 \u4e2d\u5e72\u51c0\u8fd0\u884c mypy \u7684\u5fc5\u8981\u6761\u4ef6\n    # \u5728\u8fd9\u4e9b\u7248\u672c\u4e2d\uff0c\u8be5\u6a21\u5757\u88ab\u6dfb\u52a0\n    import graphlib  # type: ignore[import,unused-ignore]\nexcept ImportError:\n    pass\n\nif sys.version_info &gt;= (3, 9):\n    # \u4ee5\u4e0b\u4ee3\u7801\u5728 Python 3.8 \u548c Python 3.9 \u4e0a\u90fd\u4e0d\u4f1a\u751f\u6210\u9519\u8bef\n    42 + \"testing...\"  # type: ignore\n</code></pre> <p>If you use --enable-error-code unused-ignore, or --warn-unused-ignores mypy generates an error if you don't use a <code># type: ignore</code> comment, i.e. if there is a comment, but there would be no error generated by mypy on this line anyway.</p> <p>Example:</p> <pre><code># Use \"mypy --warn-unused-ignores ...\"\n\ndef add(a: int, b: int) -&gt; int:\n    # Error: unused \"type: ignore\" comment\n    return a + b  # type: ignore\n</code></pre> <p>Note that due to a specific nature of this comment, the only way to selectively silence it, is to include the error code explicitly. Also note that this error is not shown if the <code># type: ignore</code> is not used due to code being statically unreachable (e.g. due to platform or version checks).</p> <p>Example:</p> <pre><code># Use \"mypy --warn-unused-ignores ...\"\n\nimport sys\n\ntry:\n    # The \"[unused-ignore]\" is needed to get a clean mypy run\n    # on both Python 3.8, and 3.9 where this module was added\n    import graphlib  # type: ignore[import,unused-ignore]\nexcept ImportError:\n    pass\n\nif sys.version_info &gt;= (3, 9):\n    # The following will not generate an error on either\n    # Python 3.8, or Python 3.9\n    42 + \"testing...\"  # type: ignore\n</code></pre>"},{"location":"mypy_other/error_code_list2/#\u68c0\u67e5\u5728\u91cd\u5199\u57fa\u7c7b\u65b9\u6cd5\u65f6\u662f\u5426\u4f7f\u7528-override-explicit-override","title":"\u68c0\u67e5\u5728\u91cd\u5199\u57fa\u7c7b\u65b9\u6cd5\u65f6\u662f\u5426\u4f7f\u7528 <code>@override</code> [explicit-override]","text":"<p>Check that <code>@override</code> is used when overriding a base class method [explicit-override]</p> \u4e2d\u6587\u82f1\u6587 <p>\u5982\u679c\u4f60\u4f7f\u7528 --enable-error-code explicit-override\uff0c\u5f53\u4f60\u8986\u76d6\u57fa\u7c7b\u65b9\u6cd5\u800c\u6ca1\u6709\u4f7f\u7528 <code>@override</code> \u88c5\u9970\u5668\u65f6\uff0cmypy \u4f1a\u751f\u6210\u9519\u8bef\u3002\u5bf9\u4e8e <code>__init__</code> \u6216 <code>__new__</code> \u7684\u8986\u76d6\u4e0d\u4f1a\u89e6\u53d1\u9519\u8bef\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 PEP 698\u3002</p> <p>\u6ce8</p> <p>\u4ece Python 3.12 \u5f00\u59cb\uff0c<code>@override</code> \u88c5\u9970\u5668\u53ef\u4ee5\u4ece <code>typing</code> \u5bfc\u5165\u3002\u8981\u5728\u65e7\u7248\u672c\u7684 Python \u4e2d\u4f7f\u7528\u5b83\uff0c\u8bf7\u4ece <code>typing_extensions</code> \u5bfc\u5165\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code># mypy: enable-error-code=\"explicit-override\"\n\nfrom typing import override\n\nclass Parent:\n    def f(self, x: int) -&gt; None:\n        pass\n\n    def g(self, y: int) -&gt; None:\n        pass\n\n\nclass Child(Parent):\n    def f(self, x: int) -&gt; None:  # \u9519\u8bef\uff1a\u7f3a\u5c11 @override \u88c5\u9970\u5668\n        pass\n\n    @override\n    def g(self, y: int) -&gt; None:\n        pass\n</code></pre> <p>If you use --enable-error-code explicit-override mypy generates an error if you override a base class method without using the <code>@override</code> decorator. An error will not be emitted for overrides of <code>__init__</code> or <code>__new__</code>. See PEP 698.</p> <p>Note</p> <p>Starting with Python 3.12, the <code>@override</code> decorator can be imported from <code>typing</code>. To use it with older Python versions, import it from <code>typing_extensions</code> instead.</p> <p>Example:</p> <pre><code># mypy: enable-error-code=\"explicit-override\"\n\nfrom typing import override\n\nclass Parent:\n    def f(self, x: int) -&gt; None:\n        pass\n\n    def g(self, y: int) -&gt; None:\n        pass\n\n\nclass Child(Parent):\n    def f(self, x: int) -&gt; None:  # Error: Missing @override decorator\n        pass\n\n    @override\n    def g(self, y: int) -&gt; None:\n        pass\n</code></pre>"},{"location":"mypy_other/error_code_list2/#\u68c0\u67e5\u53ef\u53d8\u5c5e\u6027\u7684\u91cd\u5199\u662f\u5426\u5b89\u5168-mutable-override","title":"\u68c0\u67e5\u53ef\u53d8\u5c5e\u6027\u7684\u91cd\u5199\u662f\u5426\u5b89\u5168 [mutable-override]","text":"<p>Check that overrides of mutable attributes are safe [mutable-override]</p> \u4e2d\u6587\u82f1\u6587 <p><code>mutable-override</code> \u5c06\u542f\u7528\u5bf9\u53ef\u53d8\u5c5e\u6027\u7684\u5b89\u5168\u8986\u76d6\u68c0\u67e5\u3002\u7531\u4e8e\u5386\u53f2\u539f\u56e0\uff0c\u4ee5\u53ca\u8fd9\u662f Python \u4e2d\u76f8\u5bf9\u5e38\u89c1\u7684\u6a21\u5f0f\uff0c\u6b64\u68c0\u67e5\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u672a\u542f\u7528\u3002\u4ee5\u4e0b\u793a\u4f8b\u662f\u4e0d\u5b89\u5168\u7684\uff0c\u5f53\u542f\u7528\u6b64\u9519\u8bef\u4ee3\u7801\u65f6\u5c06\u4f1a\u88ab\u6807\u8bb0\uff1a</p> <pre><code>from typing import Any\n\nclass C:\n    x: float\n    y: float\n    z: float\n\nclass D(C):\n    x: int  # \u9519\u8bef\uff1a\u5bf9\u53ef\u53d8\u5c5e\u6027\u7684\u534f\u53d8\u8986\u76d6\n            # (\u57fa\u7c7b \"C\" \u5b9a\u4e49\u7684\u7c7b\u578b\u4e3a \"float\",\n            # \u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u4e3a \"int\")  [mutable-override]\n    y: float  # \u6b63\u786e\n    z: Any  # \u6b63\u786e\n\ndef f(c: C) -&gt; None:\n    c.x = 1.1\nd = D()\nf(d)\nd.x &gt;&gt; 1  # \u8fd9\u5c06\u5728\u8fd0\u884c\u65f6\u5d29\u6e83\uff0c\u56e0\u4e3a d.x \u73b0\u5728\u662f float\uff0c\u800c\u4e0d\u662f int\n</code></pre> <p><code>mutable-override</code> will enable the check for unsafe overrides of mutable attributes. For historical reasons, and because this is a relatively common pattern in Python, this check is not enabled by default. The example below is unsafe, and will be flagged when this error code is enabled:</p> <pre><code>from typing import Any\n\nclass C:\n    x: float\n    y: float\n    z: float\n\nclass D(C):\n    x: int  # Error: Covariant override of a mutable attribute\n            # (base class \"C\" defined the type as \"float\",\n            # expression has type \"int\")  [mutable-override]\n    y: float  # OK\n    z: Any  # OK\n\ndef f(c: C) -&gt; None:\n    c.x = 1.1\nd = D()\nf(d)\nd.x &gt;&gt; 1  # This will crash at runtime, because d.x is now float, not an int\n</code></pre>"},{"location":"mypy_other/error_code_list2/#\u68c0\u67e5-reveal_type-\u662f\u5426\u4ece-typing-\u6216-typing_extensions-\u5bfc\u5165-unimported-reveal","title":"\u68c0\u67e5 <code>reveal_type</code> \u662f\u5426\u4ece typing \u6216 typing_extensions \u5bfc\u5165 [unimported-reveal]","text":"<p>Check that <code>reveal_type</code> is imported from typing or typing_extensions [unimported-reveal]</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u66fe\u7ecf\u6709\u4e00\u4e2a <code>reveal_type</code> \u7279\u6b8a\u5185\u7f6e\u51fd\u6570\uff0c\u5b83\u4ec5\u5728\u7c7b\u578b\u68c0\u67e5\u671f\u95f4\u5b58\u5728\u3002\u5728\u8fd0\u884c\u65f6\uff0c\u5b83\u4f1a\u5bfc\u81f4\u9884\u671f\u7684 <code>NameError</code>\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u9020\u6210\u5b9e\u9645\u95ee\u9898\uff0c\u5e76\u4e14\u5bf9 mypy \u9690\u85cf\u3002</p> <p>\u4f46\u5728 Python 3.11 \u4e2d\uff0c\u6dfb\u52a0\u4e86 <code>typing.reveal_type()</code>\u3002<code>typing_extensions</code> \u5c06\u8fd9\u4e2a\u5e2e\u52a9\u51fd\u6570\u79fb\u690d\u5230\u4e86\u6240\u6709\u53d7\u652f\u6301\u7684 Python \u7248\u672c\u4e2d\u3002</p> <p>\u73b0\u5728\u7528\u6237\u5b9e\u9645\u4e0a\u53ef\u4ee5\u5bfc\u5165 <code>reveal_type</code> \u4ee5\u4f7f\u8fd0\u884c\u65f6\u4ee3\u7801\u5b89\u5168\u3002</p> <p>Note</p> <p>\u4ece Python 3.11 \u5f00\u59cb\uff0c<code>reveal_type</code> \u51fd\u6570\u53ef\u4ee5\u4ece <code>typing</code> \u5bfc\u5165\u3002\u8981\u5728\u65e7\u7248\u672c\u7684 Python \u4e2d\u4f7f\u7528\u5b83\uff0c\u8bf7\u4ece <code>typing_extensions</code> \u5bfc\u5165\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code># mypy: enable-error-code=\"unimported-reveal\"\n\nx = 1\nreveal_type(x)  # \u6ce8\uff1a\u63ed\u793a\u7684\u7c7b\u578b\u662f \"builtins.int\" \\\n                # \u9519\u8bef\uff1a\u540d\u79f0 \"reveal_type\" \u672a\u5b9a\u4e49\n</code></pre> <p>\u6b63\u786e\u7528\u6cd5\uff1a</p> <pre><code># mypy: enable-error-code=\"unimported-reveal\"\nfrom typing import reveal_type   # \u6216 `typing_extensions`\n\nx = 1\n# \u8fd9\u4e0d\u4f1a\u5f15\u53d1\u9519\u8bef\uff1a\nreveal_type(x)  # \u6ce8\uff1a\u63ed\u793a\u7684\u7c7b\u578b\u662f \"builtins.int\"\n</code></pre> <p>\u5f53\u542f\u7528\u6b64\u4ee3\u7801\u65f6\uff0c\u4f7f\u7528 <code>reveal_locals</code> \u59cb\u7ec8\u4f1a\u5f15\u53d1\u9519\u8bef\uff0c\u56e0\u4e3a\u6ca1\u6709\u529e\u6cd5\u5bfc\u5165\u5b83\u3002</p> <p>Mypy used to have <code>reveal_type</code> as a special builtin that only existed during type-checking. In runtime it fails with expected <code>NameError</code>, which can cause real problem in production, hidden from mypy.</p> <p>But, in Python3.11 typing.reveal_type() was added. <code>typing_extensions</code> ported this helper to all supported Python versions.</p> <p>Now users can actually import <code>reveal_type</code> to make the runtime code safe.</p> <p>Note</p> <p>Starting with Python 3.11, the <code>reveal_type</code> function can be imported from <code>typing</code>. To use it with older Python versions, import it from <code>typing_extensions</code> instead.</p> <pre><code># mypy: enable-error-code=\"unimported-reveal\"\n\nx = 1\nreveal_type(x)  # Note: Revealed type is \"builtins.int\" \\\n                # Error: Name \"reveal_type\" is not defined\n</code></pre> <p>Correct usage:</p> <pre><code># mypy: enable-error-code=\"unimported-reveal\"\nfrom typing import reveal_type   # or `typing_extensions`\n\nx = 1\n# This won't raise an error:\nreveal_type(x)  # Note: Revealed type is \"builtins.int\"\n</code></pre> <p>When this code is enabled, using <code>reveal_locals</code> is always an error, because there's no way one can import it.</p>"},{"location":"mypy_other/error_code_list2/#\u68c0\u67e5-typeis-\u662f\u5426\u7f29\u5c0f\u4e86\u7c7b\u578b-narrowed-type-not-subtype","title":"\u68c0\u67e5 <code>TypeIs</code> \u662f\u5426\u7f29\u5c0f\u4e86\u7c7b\u578b [narrowed-type-not-subtype]","text":"<p>Check that <code>TypeIs</code> narrows types [narrowed-type-not-subtype]</p> \u4e2d\u6587\u82f1\u6587 <p>PEP 742 \u8981\u6c42\u5f53\u4f7f\u7528 <code>TypeIs</code> \u65f6\uff0c\u7f29\u5c0f\u540e\u7684\u7c7b\u578b\u5fc5\u987b\u662f\u539f\u59cb\u7c7b\u578b\u7684\u5b50\u7c7b\u578b\uff1a</p> <pre><code>from typing_extensions import TypeIs\n\ndef f(x: int) -&gt; TypeIs[str]:  # \u9519\u8bef\uff0cstr \u4e0d\u662f int \u7684\u5b50\u7c7b\u578b\n    ...\n\ndef g(x: object) -&gt; TypeIs[str]:  # \u6b63\u786e\n    ...\n</code></pre> <p>PEP 742 requires that when <code>TypeIs</code> is used, the narrowed type must be a subtype of the original type</p> <pre><code>from typing_extensions import TypeIs\n\ndef f(x: int) -&gt; TypeIs[str]:  # Error, str is not a subtype of int\n    ...\n\ndef g(x: object) -&gt; TypeIs[str]:  # OK\n    ...\n</code></pre>"},{"location":"mypy_other/error_codes/","title":"\u9519\u8bef\u4ee3\u7801","text":"<p>Error codes</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u53ef\u4ee5\u9009\u62e9\u5728\u6bcf\u4e2a\u9519\u8bef\u4fe1\u606f\u540e\u663e\u793a\u4e00\u4e2a\u9519\u8bef\u4ee3\u7801\uff0c\u4f8b\u5982 <code>[attr-defined]</code>\u3002\u9519\u8bef\u4ee3\u7801\u6709\u4e24\u4e2a\u7528\u9014\uff1a</p> <ol> <li> <p>\u53ef\u4ee5\u4f7f\u7528 <code># type: ignore[code]</code> \u6765\u4ec5\u9759\u9ed8\u7279\u5b9a\u7684\u9519\u8bef\u4ee3\u7801\u3002\u8fd9\u6837\uff0c\u60a8\u4e0d\u4f1a\u4e0d\u5c0f\u5fc3\u5ffd\u7565\u5176\u4ed6\u53ef\u80fd\u66f4\u4e25\u91cd\u7684\u9519\u8bef\u3002</p> </li> <li> <p>\u9519\u8bef\u4ee3\u7801\u53ef\u7528\u4e8e\u67e5\u627e\u6709\u5173\u9519\u8bef\u7684\u6587\u6863\u3002\u63a5\u4e0b\u6765\u7684\u4e24\u4e2a\u4e3b\u9898\uff08\u9ed8\u8ba4\u542f\u7528\u7684\u9519\u8bef\u4ee3\u7801 \u548c \u53ef\u9009\u68c0\u67e5\u7684\u9519\u8bef\u4ee3\u7801\uff09\u8bb0\u5f55\u4e86 mypy \u53ef\u4ee5\u62a5\u544a\u7684\u5404\u79cd\u9519\u8bef\u4ee3\u7801\u3002</p> </li> </ol> <p>\u5927\u591a\u6570\u9519\u8bef\u4ee3\u7801\u5728\u591a\u4e2a\u76f8\u5173\u9519\u8bef\u6d88\u606f\u4e4b\u95f4\u662f\u5171\u4eab\u7684\u3002\u9519\u8bef\u4ee3\u7801\u53ef\u80fd\u4f1a\u5728\u672a\u6765\u7684 mypy \u7248\u672c\u4e2d\u53d1\u751f\u53d8\u5316\u3002</p> <p>Mypy can optionally display an error code such as <code>[attr-defined]</code> after each error message. Error codes serve two purposes:</p> <ol> <li> <p>It's possible to silence specific error codes on a line using <code># type: ignore[code]</code>. This way you won't accidentally ignore other, potentially more serious errors.</p> </li> <li> <p>The error code can be used to find documentation about the error. The next two topics (Error codes enabled by default and Error codes for optional checks) document the various error codes mypy can report.</p> </li> </ol> <p>Most error codes are shared between multiple related error messages. Error codes may change in future mypy releases.</p>"},{"location":"mypy_other/error_codes/#\u6839\u636e\u9519\u8bef\u4ee3\u7801\u9759\u9ed8\u9519\u8bef","title":"\u6839\u636e\u9519\u8bef\u4ee3\u7801\u9759\u9ed8\u9519\u8bef","text":"<p>Silencing errors based on error codes</p> \u4e2d\u6587\u82f1\u6587 <p>\u60a8\u53ef\u4ee5\u4f7f\u7528\u7279\u6b8a\u6ce8\u91ca <code># type: ignore[code, ...]</code> \u4ec5\u5ffd\u7565\u7279\u5b9a\u9519\u8bef\u4ee3\u7801\uff08\u6216\u591a\u4e2a\u9519\u8bef\u4ee3\u7801\uff09\u7684\u9519\u8bef\u3002\u8fd9\u5373\u4f7f\u5728\u60a8\u6ca1\u6709\u914d\u7f6e mypy \u663e\u793a\u9519\u8bef\u4ee3\u7801\u7684\u60c5\u51b5\u4e0b\u4e5f\u53ef\u4ee5\u4f7f\u7528\u3002</p> <p>\u4ee5\u4e0b\u793a\u4f8b\u5c55\u793a\u4e86\u5982\u4f55\u5ffd\u7565\u4e00\u4e2a\u5173\u4e8e\u5bfc\u5165\u540d\u79f0\u7684\u9519\u8bef\uff0c\u8be5\u540d\u79f0 mypy \u8ba4\u4e3a\u662f\u672a\u5b9a\u4e49\u7684\uff1a</p> <pre><code># 'foo' \u5728 'foolib' \u4e2d\u5b9a\u4e49\uff0c\u5c3d\u7ba1 mypy \u770b\u4e0d\u5230\u5b9a\u4e49\u3002\nfrom foolib import foo  # type: ignore[attr-defined]\n</code></pre> <p>You can use a special comment <code># type: ignore[code, ...]</code> to only ignore errors with a specific error code (or codes) on a particular line.  This can be used even if you have not configured mypy to show error codes.</p> <p>This example shows how to ignore an error about an imported name mypy thinks is undefined:</p> <pre><code># 'foo' is defined in 'foolib', even though mypy can't see the definition.\nfrom foolib import foo  # type: ignore[attr-defined]\n</code></pre>"},{"location":"mypy_other/error_codes/#\u5168\u5c40\u542f\u7528\u7981\u7528\u7279\u5b9a\u9519\u8bef\u4ee3\u7801","title":"\u5168\u5c40\u542f\u7528/\u7981\u7528\u7279\u5b9a\u9519\u8bef\u4ee3\u7801","text":"<p>Enabling/disabling specific error codes globally</p> \u4e2d\u6587\u82f1\u6587 <p>\u6709\u4e00\u4e9b\u547d\u4ee4\u884c\u6807\u5fd7\u548c\u914d\u7f6e\u6587\u4ef6\u8bbe\u7f6e\u53ef\u4ee5\u542f\u7528\u67d0\u4e9b\u53ef\u9009\u7684\u9519\u8bef\u4ee3\u7801\uff0c\u4f8b\u5982 --disallow-untyped-defs\uff0c\u5b83\u542f\u7528\u4e86 <code>no-untyped-def</code> \u9519\u8bef\u4ee3\u7801\u3002</p> <p>\u60a8\u53ef\u4ee5\u4f7f\u7528 --enable-error-code \u548c --disable-error-code \u6765\u542f\u7528\u6216\u7981\u7528\u7279\u5b9a\u7684\u9519\u8bef\u4ee3\u7801\uff0c\u8fd9\u4e9b\u9519\u8bef\u4ee3\u7801\u6ca1\u6709\u4e13\u95e8\u7684\u547d\u4ee4\u884c\u6807\u5fd7\u6216\u914d\u7f6e\u6587\u4ef6\u8bbe\u7f6e\u3002</p> <p>There are command-line flags and config file settings for enabling certain optional error codes, such as --disallow-untyped-defs, which enables the <code>no-untyped-def</code> error code.</p> <p>You can use --enable-error-code and --disable-error-code to enable or disable specific error codes that don't have a dedicated command-line flag or config file setting.</p>"},{"location":"mypy_other/error_codes/#\u6bcf\u6a21\u5757\u542f\u7528\u7981\u7528\u9519\u8bef\u4ee3\u7801","title":"\u6bcf\u6a21\u5757\u542f\u7528/\u7981\u7528\u9519\u8bef\u4ee3\u7801","text":"<p>Per-module enabling/disabling error codes</p> \u4e2d\u6587\u82f1\u6587 <p>\u60a8\u53ef\u4ee5\u4f7f\u7528 \u914d\u7f6e\u6587\u4ef6 \u90e8\u5206\u6765\u4ec5\u5728\u67d0\u4e9b\u6a21\u5757\u4e2d\u542f\u7528\u6216\u7981\u7528\u7279\u5b9a\u7684\u9519\u8bef\u4ee3\u7801\u3002\u4f8b\u5982\uff0c\u4ee5\u4e0b <code>mypy.ini</code> \u914d\u7f6e\u5c06\u5141\u8bb8\u5728\u6d4b\u8bd5\u4e2d\u4f7f\u7528\u672a\u6ce8\u89e3\u7684\u7a7a\u5bb9\u5668\uff0c\u540c\u65f6\u4fdd\u6301\u4ee3\u7801\u7684\u5176\u4ed6\u90e8\u5206\u5728\u4e25\u683c\u6a21\u5f0f\u4e0b\u8fdb\u884c\u68c0\u67e5\uff1a</p> <pre><code>[mypy]\nstrict = True\n\n[mypy-tests.*]\nallow_untyped_defs = True\nallow_untyped_calls = True\ndisable_error_code = var-annotated, has-type\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u6bcf\u4e2a\u6a21\u5757\u7684\u542f\u7528/\u7981\u7528\u8bbe\u7f6e\u4f1a\u8986\u76d6\u5168\u5c40\u9009\u9879\u3002\u56e0\u6b64\uff0c\u5982\u679c\u60a8\u5728\u5168\u5c40\u914d\u7f6e\u90e8\u5206\u4e2d\u5b9a\u4e49\u4e86\u9519\u8bef\u4ee3\u7801\u5217\u8868\uff0c\u5219\u65e0\u9700\u5728\u6bcf\u4e2a\u6a21\u5757\u4e2d\u91cd\u590d\u5b9a\u4e49\u3002\u4f8b\u5982\uff1a</p> <pre><code>[mypy]\nenable_error_code = truthy-bool, ignore-without-code, unused-awaitable\n\n[mypy-extensions.*]\ndisable_error_code = unused-awaitable\n</code></pre> <p>\u4e0a\u8ff0\u914d\u7f6e\u5c06\u5141\u8bb8\u6269\u5c55\u6a21\u5757\u4e2d\u5b58\u5728\u672a\u4f7f\u7528\u7684 awaitable\uff0c\u4f46\u4ecd\u5c06\u4fdd\u7559\u5176\u4ed6\u4e24\u4e2a\u9519\u8bef\u4ee3\u7801\u7684\u542f\u7528\u72b6\u6001\u3002\u6574\u4f53\u903b\u8f91\u5982\u4e0b\uff1a</p> <ul> <li>\u547d\u4ee4\u884c\u548c/\u6216\u914d\u7f6e\u6587\u4ef6\u4e3b\u90e8\u5206\u8bbe\u7f6e\u5168\u5c40\u9519\u8bef\u4ee3\u7801\u3002</li> <li>\u5355\u72ec\u7684\u914d\u7f6e\u90e8\u5206 \u8c03\u6574 \u8fd9\u4e9b\u4ee3\u7801\u4ee5\u9002\u5e94\u7279\u5b9a\u7684 glob/\u6a21\u5757\u3002</li> <li>\u5185\u8054 <code># mypy: disable-error-code=\"...\"</code> \u548c <code># mypy: enable-error-code=\"...\"</code> \u6ce8\u91ca\u53ef\u4ee5\u8fdb\u4e00\u6b65 \u8c03\u6574 \u8fd9\u4e9b\u8bbe\u7f6e\u4ee5\u9002\u5e94\u7279\u5b9a\u6587\u4ef6\u3002\u4f8b\u5982\uff1a</li> </ul> <pre><code># mypy: enable-error-code=\"truthy-bool, ignore-without-code\"\n</code></pre> <p>\u56e0\u6b64\uff0c\u53ef\u4ee5\u4f8b\u5982\u5728\u5168\u5c40\u8303\u56f4\u5185\u542f\u7528\u67d0\u4e9b\u4ee3\u7801\uff0c\u5728\u76f8\u5e94\u7684\u914d\u7f6e\u90e8\u5206\u4e2d\u4e3a\u6240\u6709\u6d4b\u8bd5\u7981\u7528\u5b83\uff0c\u7136\u540e\u901a\u8fc7\u5185\u8054\u6ce8\u91ca\u5728\u67d0\u4e9b\u7279\u5b9a\u6d4b\u8bd5\u4e2d\u91cd\u65b0\u542f\u7528\u5b83\u3002</p> <p>You can use configuration file sections to enable or disable specific error codes only in some modules. For example, this <code>mypy.ini</code> config will enable non-annotated empty containers in tests, while keeping other parts of code checked in strict mode:</p> <pre><code>[mypy]\nstrict = True\n\n[mypy-tests.*]\nallow_untyped_defs = True\nallow_untyped_calls = True\ndisable_error_code = var-annotated, has-type\n</code></pre> <p>Note that per-module enabling/disabling acts as override over the global options. So that you don't need to repeat the error code lists for each module if you have them in global config section. For example:</p> <pre><code>[mypy]\nenable_error_code = truthy-bool, ignore-without-code, unused-awaitable\n\n[mypy-extensions.*]\ndisable_error_code = unused-awaitable\n</code></pre> <p>The above config will allow unused awaitables in extension modules, but will still keep the other two error codes enabled. The overall logic is following:</p> <ul> <li>Command line and/or config main section set global error codes</li> <li>Individual config sections adjust them per glob/module</li> <li>Inline <code># mypy: disable-error-code=\"...\"</code> and <code># mypy: enable-error-code=\"...\"</code>   comments can further adjust them for a specific file.   For example:</li> </ul> <pre><code># mypy: enable-error-code=\"truthy-bool, ignore-without-code\"\n</code></pre> <p>So one can e.g. enable some code globally, disable it for all tests in the corresponding config section, and then re-enable it with an inline comment in some specific test.</p>"},{"location":"mypy_other/error_codes/#\u9519\u8bef\u4ee3\u7801\u7684\u5b50\u4ee3\u7801","title":"\u9519\u8bef\u4ee3\u7801\u7684\u5b50\u4ee3\u7801","text":"<p>Subcodes of error codes</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4e3b\u8981\u51fa\u4e8e\u5411\u540e\u517c\u5bb9\u7684\u539f\u56e0\uff0c\u4e00\u4e2a\u9519\u8bef\u4ee3\u7801\u53ef\u80fd\u4e5f\u88ab\u53e6\u4e00\u4e2a\u66f4\u5e7f\u6cdb\u7684\u9519\u8bef\u4ee3\u7801\u8986\u76d6\u3002\u4f8b\u5982\uff0c\u4ee3\u7801\u4e3a <code>[method-assign]</code> \u7684\u9519\u8bef\u53ef\u4ee5\u901a\u8fc7 <code># type: ignore[assignment]</code> \u88ab\u5ffd\u7565\u3002\u7c7b\u4f3c\u7684\u903b\u8f91\u9002\u7528\u4e8e\u5168\u5c40\u7981\u7528\u9519\u8bef\u4ee3\u7801\u3002\u5982\u679c\u67d0\u4e2a\u9519\u8bef\u4ee3\u7801\u662f\u53e6\u4e00\u4e2a\u9519\u8bef\u4ee3\u7801\u7684\u5b50\u4ee3\u7801\uff0c\u5b83\u4f1a\u5728\u66f4\u5177\u4f53\u7684\u9519\u8bef\u4ee3\u7801\u7684\u6587\u6863\u4e2d\u63d0\u5230\u3002\u8fd9\u79cd\u5c42\u6b21\u7ed3\u6784\u4e0d\u662f\u5d4c\u5957\u7684\uff1a\u5b50\u4ee3\u7801\u4e0d\u80fd\u6709\u5176\u4ed6\u5b50\u4ee3\u7801\u7684\u5b50\u4ee3\u7801\u3002</p> <p>In some cases, mostly for backwards compatibility reasons, an error code may be covered also by another, wider error code. For example, an error with code <code>[method-assign]</code> can be ignored by <code># type: ignore[assignment]</code>. Similar logic works for disabling error codes globally. If a given error code is a subcode of another one, it will be mentioned in the documentation for the narrower code. This hierarchy is not nested: there cannot be subcodes of other subcodes.</p>"},{"location":"mypy_other/error_codes/#\u8981\u6c42\u9519\u8bef\u4ee3\u7801","title":"\u8981\u6c42\u9519\u8bef\u4ee3\u7801","text":"<p>Requiring error codes</p> \u4e2d\u6587\u82f1\u6587 <p>\u53ef\u4ee5\u8981\u6c42\u5728 <code>type: ignore</code> \u6ce8\u91ca\u4e2d\u6307\u5b9a\u9519\u8bef\u4ee3\u7801\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 ignore-without-code\u3002</p> <p>It's possible to require error codes be specified in <code>type: ignore</code> comments. See ignore-without-code for more information.</p>"},{"location":"mypy_other/faq/","title":"\u5e38\u89c1\u95ee\u9898","text":"<p>Frequently Asked Questions</p>"},{"location":"mypy_other/faq/#\u4e3a\u4ec0\u4e48\u65e2\u6709\u52a8\u6001\u7c7b\u578b\u53c8\u6709\u9759\u6001\u7c7b\u578b","title":"\u4e3a\u4ec0\u4e48\u65e2\u6709\u52a8\u6001\u7c7b\u578b\u53c8\u6709\u9759\u6001\u7c7b\u578b\uff1f","text":"<p>Why have both dynamic and static typing?</p> \u4e2d\u6587\u82f1\u6587 <p>\u52a8\u6001\u7c7b\u578b\u53ef\u4ee5\u7075\u6d3b\u3001\u5f3a\u5927\u3001\u65b9\u4fbf\u4e14\u6613\u4e8e\u4f7f\u7528\u3002\u4f46\u5b83\u5e76\u4e0d\u603b\u662f\u6700\u4f73\u7684\u9009\u62e9\uff1b\u8bb8\u591a\u5f00\u53d1\u8005\u9009\u62e9\u4f7f\u7528\u9759\u6001\u7c7b\u578b\u8bed\u8a00\u6216\u5728 Python \u4e2d\u4f7f\u7528\u9759\u6001\u7c7b\u578b\u6709\u5176\u5145\u5206\u7684\u7406\u7531\u3002</p> <p>\u4ee5\u4e0b\u662f mypy \u98ce\u683c\u7684\u9759\u6001\u7c7b\u578b\u7684\u4e00\u4e9b\u6f5c\u5728\u597d\u5904\uff1a</p> <ul> <li> <p>\u9759\u6001\u7c7b\u578b\u53ef\u4ee5\u4f7f\u7a0b\u5e8f\u66f4\u6613\u4e8e\u7406\u89e3\u548c\u7ef4\u62a4\u3002\u7c7b\u578b\u58f0\u660e\u53ef\u4ee5\u4f5c\u4e3a\u673a\u5668\u68c0\u67e5\u7684\u6587\u6863\u3002\u8fd9\u4e00\u70b9\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u4ee3\u7801\u901a\u5e38\u6bd4\u4fee\u6539\u7684\u9891\u7387\u8981\u9ad8\u5f97\u591a\uff0c\u8fd9\u5bf9\u4e8e\u5927\u578b\u548c\u590d\u6742\u7684\u7a0b\u5e8f\u5c24\u4e3a\u91cd\u8981\u3002</p> </li> <li> <p>\u9759\u6001\u7c7b\u578b\u53ef\u4ee5\u5e2e\u52a9\u60a8\u66f4\u65e9\u53d1\u73b0\u9519\u8bef\uff0c\u5e76\u51cf\u5c11\u6d4b\u8bd5\u548c\u8c03\u8bd5\u7684\u5de5\u4f5c\u91cf\u3002\u5c24\u5176\u662f\u5728\u5927\u578b\u548c\u590d\u6742\u7684\u9879\u76ee\u4e2d\uff0c\u8fd9\u53ef\u4ee5\u8282\u7701\u5927\u91cf\u65f6\u95f4\u3002</p> </li> <li> <p>\u9759\u6001\u7c7b\u578b\u53ef\u4ee5\u5e2e\u52a9\u60a8\u5728\u4ee3\u7801\u6295\u5165\u751f\u4ea7\u4e4b\u524d\u53d1\u73b0\u96be\u4ee5\u53d1\u73b0\u7684\u9519\u8bef\u3002\u8fd9\u53ef\u4ee5\u63d0\u9ad8\u4ee3\u7801\u7684\u53ef\u9760\u6027\u5e76\u51cf\u5c11\u5b89\u5168\u95ee\u9898\u7684\u6570\u91cf\u3002</p> </li> <li> <p>\u9759\u6001\u7c7b\u578b\u4f7f\u5f97\u6784\u5efa\u975e\u5e38\u6709\u7528\u7684\u5f00\u53d1\u5de5\u5177\u6210\u4e3a\u53ef\u80fd\uff0c\u8fd9\u4e9b\u5de5\u5177\u53ef\u4ee5\u63d0\u9ad8\u7f16\u7a0b\u751f\u4ea7\u529b\u6216\u8f6f\u4ef6\u8d28\u91cf\uff0c\u5305\u62ec\u5177\u6709\u7cbe\u786e\u548c\u53ef\u9760\u4ee3\u7801\u8865\u5168\u7684 IDE\u3001\u9759\u6001\u5206\u6790\u5de5\u5177\u7b49\u3002</p> </li> <li> <p>\u60a8\u53ef\u4ee5\u5728\u5355\u4e00\u8bed\u8a00\u4e2d\u540c\u65f6\u83b7\u5f97\u52a8\u6001\u548c\u9759\u6001\u7c7b\u578b\u7684\u597d\u5904\u3002\u4f8b\u5982\uff0c\u52a8\u6001\u7c7b\u578b\u975e\u5e38\u9002\u5408\u5c0f\u578b\u9879\u76ee\u6216\u7f16\u5199\u7a0b\u5e8f\u7684 UI\u3002\u968f\u7740\u7a0b\u5e8f\u7684\u589e\u957f\uff0c\u60a8\u53ef\u4ee5\u5c06\u590d\u6742\u7684\u5e94\u7528\u903b\u8f91\u9002\u5e94\u9759\u6001\u7c7b\u578b\uff0c\u4ee5\u5e2e\u52a9\u7ef4\u62a4\u3002</p> </li> </ul> <p>\u53e6\u89c1 mypy \u7f51\u7ad9\u7684 \u9996\u9875\u3002</p> <p>Dynamic typing can be flexible, powerful, convenient and easy. But it's not always the best approach; there are good reasons why many developers choose to use statically typed languages or static typing for Python.</p> <p>Here are some potential benefits of mypy-style static typing:</p> <ul> <li> <p>Static typing can make programs easier to understand and maintain. Type declarations can serve as machine-checked documentation. This is important as code is typically read much more often than modified, and this is especially important for large and complex programs.</p> </li> <li> <p>Static typing can help you find bugs earlier and with less testing and debugging. Especially in large and complex projects this can be a major time-saver.</p> </li> <li> <p>Static typing can help you find difficult-to-find bugs before your code goes into production. This can improve reliability and reduce the number of security issues.</p> </li> <li> <p>Static typing makes it practical to build very useful development tools that can improve programming productivity or software quality, including IDEs with precise and reliable code completion, static analysis tools, etc.</p> </li> <li> <p>You can get the benefits of both dynamic and static typing in a single language. Dynamic typing can be perfect for a small project or for writing the UI of your program, for example. As your program grows, you can adapt tricky application logic to static typing to help maintenance.</p> </li> </ul> <p>See also the front page of the mypy web site.</p>"},{"location":"mypy_other/faq/#\u6211\u7684\u9879\u76ee\u4f1a\u4ece\u9759\u6001\u7c7b\u578b\u4e2d\u53d7\u76ca\u5417","title":"\u6211\u7684\u9879\u76ee\u4f1a\u4ece\u9759\u6001\u7c7b\u578b\u4e2d\u53d7\u76ca\u5417\uff1f","text":"<p>Would my project benefit from static typing?</p> \u4e2d\u6587\u82f1\u6587 <p>\u5bf9\u4e8e\u8bb8\u591a\u9879\u76ee\uff0c\u52a8\u6001\u7c7b\u578b\u662f\u5b8c\u5168\u5408\u9002\u7684\uff08\u6211\u4eec\u8ba4\u4e3a Python \u662f\u4e00\u95e8\u5f88\u68d2\u7684\u8bed\u8a00\uff09\u3002\u4f46\u6709\u65f6\u60a8\u7684\u9879\u76ee\u9700\u8981\u66f4\u5f3a\u5927\u7684\u5de5\u5177\uff0c\u8fd9\u65f6 mypy \u53ef\u80fd\u4f1a\u6d3e\u4e0a\u7528\u573a\u3002</p> <p>\u5982\u679c\u60a8\u7684\u9879\u76ee\u4e2d\u6709\u4ee5\u4e0b\u4e00\u4e9b\u60c5\u51b5\uff0cmypy\uff08\u548c\u9759\u6001\u7c7b\u578b\uff09\u53ef\u80fd\u4f1a\u5f88\u6709\u7528\uff1a</p> <ul> <li> <p>\u60a8\u7684\u9879\u76ee\u5f88\u5927\u6216\u5f88\u590d\u6742\u3002</p> </li> <li> <p>\u60a8\u7684\u4ee3\u7801\u5e93\u9700\u8981\u957f\u671f\u7ef4\u62a4\u3002</p> </li> <li> <p>\u591a\u4e2a\u5f00\u53d1\u8005\u5728\u540c\u4e00\u4ee3\u7801\u4e0a\u5de5\u4f5c\u3002</p> </li> <li> <p>\u8fd0\u884c\u6d4b\u8bd5\u9700\u8981\u5927\u91cf\u65f6\u95f4\u6216\u5de5\u4f5c\uff08\u7c7b\u578b\u68c0\u67e5\u53ef\u4ee5\u5e2e\u52a9\u60a8\u5728\u5f00\u53d1\u65e9\u671f\u5feb\u901f\u53d1\u73b0\u9519\u8bef\uff0c\u4ece\u800c\u51cf\u5c11\u6d4b\u8bd5\u8fed\u4ee3\u7684\u6b21\u6570\uff09\u3002</p> </li> <li> <p>\u4e00\u4e9b\u9879\u76ee\u6210\u5458\uff08\u5f00\u53d1\u8005\u6216\u7ba1\u7406\u4eba\u5458\uff09\u4e0d\u559c\u6b22\u52a8\u6001\u7c7b\u578b\uff0c\u4f46\u5176\u4ed6\u4eba\u66f4\u559c\u6b22\u52a8\u6001\u7c7b\u578b\u548c Python \u8bed\u6cd5\u3002Mypy \u53ef\u80fd\u662f\u4e00\u4e2a\u5927\u5bb6\u90fd\u5bb9\u6613\u63a5\u53d7\u7684\u89e3\u51b3\u65b9\u6848\u3002</p> </li> <li> <p>\u5373\u4f7f\u76ee\u524d\u4ee5\u4e0a\u60c5\u51b5\u90fd\u4e0d\u9002\u7528\uff0c\u60a8\u4ecd\u7136\u5e0c\u671b\u4e3a\u9879\u76ee\u505a\u597d\u672a\u6765\u7684\u51c6\u5907\u3002\u8d8a\u65e9\u5f00\u59cb\uff0c\u91c7\u7528\u9759\u6001\u7c7b\u578b\u5c06\u4f1a\u8d8a\u5bb9\u6613\u3002</p> </li> </ul> <p>For many projects dynamic typing is perfectly fine (we think that Python is a great language). But sometimes your projects demand bigger guns, and that's when mypy may come in handy.</p> <p>If some of these ring true for your projects, mypy (and static typing) may be useful:</p> <ul> <li> <p>Your project is large or complex.</p> </li> <li> <p>Your codebase must be maintained for a long time.</p> </li> <li> <p>Multiple developers are working on the same code.</p> </li> <li> <p>Running tests takes a lot of time or work (type checking helps you find errors quickly early in development, reducing the number of testing iterations).</p> </li> <li> <p>Some project members (devs or management) don't like dynamic typing, but others prefer dynamic typing and Python syntax. Mypy could be a solution that everybody finds easy to accept.</p> </li> <li> <p>You want to future-proof your project even if currently none of the above really apply. The earlier you start, the easier it will be to adopt static typing.</p> </li> </ul>"},{"location":"mypy_other/faq/#\u6211\u53ef\u4ee5\u4f7f\u7528-mypy-\u5bf9\u73b0\u6709\u7684-python-\u4ee3\u7801\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u5417","title":"\u6211\u53ef\u4ee5\u4f7f\u7528 mypy \u5bf9\u73b0\u6709\u7684 Python \u4ee3\u7801\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u5417\uff1f","text":"<p>Can I use mypy to type check my existing Python code?</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u652f\u6301\u5927\u591a\u6570 Python \u7279\u6027\u548c\u4e60\u60ef\u7528\u6cd5\uff0c\u8bb8\u591a\u5927\u578b Python \u9879\u76ee\u90fd\u5728\u6210\u529f\u4f7f\u7528 mypy\u3002\u4f7f\u7528\u590d\u6742\u7684\u53cd\u5c04\u6216\u5143\u7f16\u7a0b\u7684\u4ee3\u7801\u53ef\u80fd\u4e0d\u9002\u5408\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\uff0c\u4f46\u5728\u4ee3\u7801\u5e93\u7684\u5176\u4ed6\u8f83\u5c11\u52a8\u6001\u7684\u90e8\u5206\u4f7f\u7528\u9759\u6001\u7c7b\u578b\u4ecd\u7136\u662f\u53ef\u80fd\u7684\u3002</p> <p>Mypy supports most Python features and idioms, and many large Python projects are using mypy successfully. Code that uses complex introspection or metaprogramming may be impractical to type check, but it should still be possible to use static typing in other parts of a codebase that are less dynamic.</p>"},{"location":"mypy_other/faq/#\u9759\u6001\u7c7b\u578b\u4f1a\u8ba9\u6211\u7684\u7a0b\u5e8f\u8fd0\u884c\u5f97\u66f4\u5feb\u5417","title":"\u9759\u6001\u7c7b\u578b\u4f1a\u8ba9\u6211\u7684\u7a0b\u5e8f\u8fd0\u884c\u5f97\u66f4\u5feb\u5417\uff1f","text":"<p>Will static typing make my programs run faster?</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u4ec5\u8fdb\u884c\u9759\u6001\u7c7b\u578b\u68c0\u67e5\uff0c\u4e0d\u4f1a\u63d0\u9ad8\u6027\u80fd\u3002\u5b83\u5bf9\u6027\u80fd\u7684\u5f71\u54cd\u6781\u5c0f\u3002\u672a\u6765\u53ef\u80fd\u4f1a\u6709\u5176\u4ed6\u5de5\u5177\u80fd\u591f\u5c06\u9759\u6001\u7c7b\u578b\u7684 mypy \u4ee3\u7801\u7f16\u8bd1\u4e3a C \u6a21\u5757\u6216\u9ad8\u6548\u7684 JVM \u5b57\u8282\u7801\uff0c\u4f46\u8fd9\u8d85\u51fa\u4e86 mypy \u9879\u76ee\u7684\u8303\u56f4\u3002</p> <p>Mypy only does static type checking and it does not improve performance. It has a minimal performance impact. In the future, there could be other tools that can compile statically typed mypy code to C modules or to efficient JVM bytecode, for example, but this is outside the scope of the mypy project.</p>"},{"location":"mypy_other/faq/#mypy-\u662f\u514d\u8d39\u7684\u4e48","title":"mypy \u662f\u514d\u8d39\u7684\u4e48\uff1f","text":"<p>Is mypy free?</p> \u4e2d\u6587\u82f1\u6587 <p>\u662f\u7684\u3002Mypy \u662f\u81ea\u7531\u8f6f\u4ef6\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e8e\u5546\u4e1a\u548c\u4e13\u6709\u9879\u76ee\u3002Mypy \u91c7\u7528 MIT \u8bb8\u53ef\u8bc1\u3002</p> <p>Yes. Mypy is free software, and it can also be used for commercial and proprietary projects. Mypy is available under the MIT license.</p>"},{"location":"mypy_other/faq/#\u6211\u53ef\u4ee5\u5728-mypy-\u4e2d\u4f7f\u7528\u9e2d\u5b50\u7c7b\u578b\u5417","title":"\u6211\u53ef\u4ee5\u5728 mypy \u4e2d\u4f7f\u7528\u9e2d\u5b50\u7c7b\u578b\u5417\uff1f","text":"<p>Can I use duck typing with mypy?</p> \u4e2d\u6587\u82f1\u6587 <p>Mypy \u652f\u6301 \u540d\u4e49\u5b50\u7c7b\u578b \u548c \u7ed3\u6784\u5b50\u7c7b\u578b\u3002\u7ed3\u6784\u5b50\u7c7b\u578b\u53ef\u4ee5\u88ab\u89c6\u4e3a\u201c\u9759\u6001\u9e2d\u5b50\u7c7b\u578b\u201d\u3002\u6709\u4eba\u8ba4\u4e3a\uff0c\u7ed3\u6784\u5b50\u7c7b\u578b\u66f4\u9002\u5408\u50cf Python \u8fd9\u6837\u7684\u9e2d\u5b50\u7c7b\u578b\u8bed\u8a00\u3002\u7136\u800c\uff0cmypy \u4e3b\u8981\u4f7f\u7528\u540d\u4e49\u5b50\u7c7b\u578b\uff0c\u5c06\u7ed3\u6784\u5b50\u7c7b\u578b\u4e3b\u8981\u4f5c\u4e3a\u53ef\u9009\u7279\u6027\uff08\u9664\u4e86\u59cb\u7ec8\u652f\u6301\u7ed3\u6784\u5b50\u7c7b\u578b\u7684\u5185\u7f6e\u534f\u8bae\uff0c\u5982 Iterable\uff09\u3002\u539f\u56e0\u5982\u4e0b\uff1a</p> <ol> <li> <p>\u4f7f\u7528\u540d\u4e49\u7c7b\u578b\u7cfb\u7edf\u65f6\uff0c\u751f\u6210\u7b80\u77ed\u800c\u4fe1\u606f\u4e30\u5bcc\u7684\u9519\u8bef\u6d88\u606f\u8f83\u4e3a\u5bb9\u6613\u3002\u8fd9\u5728\u4f7f\u7528\u7c7b\u578b\u63a8\u65ad\u65f6\u5c24\u4e3a\u91cd\u8981\u3002</p> </li> <li> <p>Python \u5185\u7f6e\u4e86\u5bf9\u540d\u4e49 isinstance() \u6d4b\u8bd5\u7684\u652f\u6301\uff0c\u5e76\u4e14\u5728\u7a0b\u5e8f\u4e2d\u5e7f\u6cdb\u4f7f\u7528\u3002\u5bf9\u7ed3\u6784 isinstance() \u7684\u652f\u6301\u6709\u9650\uff0c\u800c\u4e14\u6bd4\u540d\u4e49\u7c7b\u578b\u6d4b\u8bd5\u7684\u7c7b\u578b\u5b89\u5168\u6027\u5dee\u3002</p> </li> <li> <p>\u8bb8\u591a\u7a0b\u5e8f\u5458\u5df2\u7ecf\u719f\u6089\u9759\u6001\u7684\u540d\u4e49\u5b50\u7c7b\u578b\uff0c\u5e76\u4e14\u8fd9\u79cd\u7c7b\u578b\u7cfb\u7edf\u5728 Java\u3001C++ \u548c C# \u7b49\u8bed\u8a00\u4e2d\u5f97\u5230\u4e86\u6210\u529f\u5e94\u7528\u3002\u4f7f\u7528\u7ed3\u6784\u5b50\u7c7b\u578b\u7684\u8bed\u8a00\u8f83\u5c11\u3002</p> </li> </ol> <p>\u7136\u800c\uff0c\u7ed3\u6784\u5b50\u7c7b\u578b\u4e5f\u53ef\u4ee5\u5f88\u6709\u7528\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4e00\u4e2a\u201c\u516c\u5171 API\u201d\u4f7f\u7528\u534f\u8bae\u7c7b\u578b\uff0c\u5b83\u53ef\u80fd\u4f1a\u66f4\u7075\u6d3b\u3002\u6b64\u5916\uff0c\u4f7f\u7528\u534f\u8bae\u7c7b\u578b\u53ef\u4ee5\u7701\u53bb\u660e\u786e\u58f0\u660e ABC \u5b9e\u73b0\u7684\u5fc5\u8981\u6027\u3002\u4f5c\u4e3a\u7ecf\u9a8c\u6cd5\u5219\uff0c\u6211\u4eec\u5efa\u8bae\u5728\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u540d\u4e49\u7c7b\uff0c\u5728\u5fc5\u8981\u65f6\u4f7f\u7528\u534f\u8bae\u3002\u6709\u5173\u534f\u8bae\u7c7b\u578b\u548c\u7ed3\u6784\u5b50\u7c7b\u578b\u7684\u66f4\u591a\u7ec6\u8282\uff0c\u8bf7\u53c2\u89c1 \u534f\u8bae\u548c\u7ed3\u6784\u5b50\u7c7b\u578b \u548c PEP 544\u3002</p> <p>Mypy provides support for both nominal subtyping and structural subtyping. Structural subtyping can be thought of as \"static duck typing\". Some argue that structural subtyping is better suited for languages with duck typing such as Python. Mypy however primarily uses nominal subtyping, leaving structural subtyping mostly opt-in (except for built-in protocols such as Iterable that always support structural subtyping). Here are some reasons why:</p> <ol> <li> <p>It is easy to generate short and informative error messages when using a nominal type system. This is especially important when using type inference.</p> </li> <li> <p>Python provides built-in support for nominal isinstance() tests and they are widely used in programs. Only limited support for structural isinstance() is available, and it's less type safe than nominal type tests.</p> </li> <li> <p>Many programmers are already familiar with static, nominal subtyping and it has been successfully used in languages such as Java, C++ and C#. Fewer languages use structural subtyping.</p> </li> </ol> <p>However, structural subtyping can also be useful. For example, a \"public API\" may be more flexible if it is typed with protocols. Also, using protocol types removes the necessity to explicitly declare implementations of ABCs. As a rule of thumb, we recommend using nominal classes where possible, and protocols where necessary. For more details about protocol types and structural subtyping see Protocols and structural subtyping and PEP 544.</p>"},{"location":"mypy_other/faq/#\u6211\u559c\u6b22-python\u5e76\u4e14\u4e0d\u9700\u8981\u9759\u6001\u7c7b\u578b","title":"\u6211\u559c\u6b22 Python\uff0c\u5e76\u4e14\u4e0d\u9700\u8981\u9759\u6001\u7c7b\u578b","text":"<p>I like Python and I have no need for static typing</p> \u4e2d\u6587\u82f1\u6587 <p>mypy \u7684\u76ee\u6807\u4e0d\u662f\u8bf4\u670d\u6bcf\u4e2a\u4eba\u7f16\u5199\u9759\u6001\u7c7b\u578b\u7684 Python \u2014\u2014 \u9759\u6001\u7c7b\u578b\u73b0\u5728\u548c\u672a\u6765\u90fd\u662f\u5b8c\u5168\u53ef\u9009\u7684\u3002\u76ee\u6807\u662f\u4e3a Python \u7a0b\u5e8f\u5458\u63d0\u4f9b\u66f4\u591a\u7684\u9009\u62e9\uff0c\u4f7f Python \u5728\u5927\u578b\u9879\u76ee\u4e2d\u6210\u4e3a\u5176\u4ed6\u9759\u6001\u7c7b\u578b\u8bed\u8a00\u7684\u66f4\u5177\u7ade\u4e89\u529b\u7684\u66ff\u4ee3\u65b9\u6848\uff0c\u63d0\u9ad8\u7a0b\u5e8f\u5458\u7684\u751f\u4ea7\u529b\uff0c\u5e76\u63d0\u5347\u8f6f\u4ef6\u8d28\u91cf\u3002</p> <p>The aim of mypy is not to convince everybody to write statically typed Python -- static typing is entirely optional, now and in the future. The goal is to give more options for Python programmers, to make Python a more competitive alternative to other statically typed languages in large projects, to improve programmer productivity, and to improve software quality.</p>"},{"location":"mypy_other/faq/#mypy-\u7a0b\u5e8f\u4e0e\u666e\u901a-python-\u6709\u4ec0\u4e48\u4e0d\u540c","title":"mypy \u7a0b\u5e8f\u4e0e\u666e\u901a Python \u6709\u4ec0\u4e48\u4e0d\u540c\uff1f","text":"<p>How are mypy programs different from normal Python?</p> \u4e2d\u6587\u82f1\u6587 <p>\u7531\u4e8e\u60a8\u4f7f\u7528\u7684\u662f\u6807\u51c6\u7684 Python \u5b9e\u73b0\u6765\u8fd0\u884c mypy \u7a0b\u5e8f\uff0cmypy \u7a0b\u5e8f\u4e5f\u662f Python \u7a0b\u5e8f\u3002\u7c7b\u578b\u68c0\u67e5\u5668\u53ef\u80fd\u4f1a\u5bf9\u4e00\u4e9b\u6709\u6548\u7684 Python \u4ee3\u7801\u53d1\u51fa\u8b66\u544a\uff0c\u4f46\u4ee3\u7801\u59cb\u7ec8\u53ef\u4ee5\u8fd0\u884c\u3002\u6b64\u5916\uff0cmypy \u4ecd\u7136\u4e0d\u652f\u6301\u4e00\u4e9b Python \u7279\u6027\u548c\u8bed\u6cd5\uff0c\u4f46\u8fd9\u65b9\u9762\u7684\u652f\u6301\u6b63\u5728\u9010\u6b65\u6539\u5584\u3002</p> <p>\u660e\u663e\u7684\u533a\u522b\u5728\u4e8e\u9759\u6001\u7c7b\u578b\u68c0\u67e5\u7684\u53ef\u7528\u6027\u3002\u7ae0\u8282 \u5e38\u89c1\u95ee\u9898\u548c\u89e3\u51b3\u65b9\u6848 \u63d0\u5230\u4e86\u4e3a\u4e86\u4f7f\u4ee3\u7801\u80fd\u591f\u65e0\u9519\u8bef\u5730\u901a\u8fc7\u7c7b\u578b\u68c0\u67e5\u53ef\u80fd\u9700\u8981\u5bf9 Python \u4ee3\u7801\u8fdb\u884c\u7684\u4e00\u4e9b\u4fee\u6539\u3002\u6b64\u5916\uff0c\u60a8\u7684\u4ee3\u7801\u5fc5\u987b\u660e\u786e\u58f0\u660e\u5c5e\u6027\u3002</p> <p>Mypy \u652f\u6301\u6a21\u5757\u5316\u3001\u9ad8\u6548\u7684\u7c7b\u578b\u68c0\u67e5\uff0c\u8fd9\u4f3c\u4e4e\u6392\u9664\u4e86\u5bf9\u67d0\u4e9b\u8bed\u8a00\u7279\u6027\uff08\u4f8b\u5982\u4efb\u610f\u7684\u7334\u5b50\u8865\u4e01\u65b9\u6cd5\uff09\u7684\u7c7b\u578b\u68c0\u67e5\u3002</p> <p>Since you use a vanilla Python implementation to run mypy programs, mypy programs are also Python programs. The type checker may give warnings for some valid Python code, but the code is still always runnable. Also, some Python features and syntax are still not supported by mypy, but this is gradually improving.</p> <p>The obvious difference is the availability of static type checking. The section Common issues and solutions mentions some modifications to Python code that may be required to make code type check without errors. Also, your code must make attributes explicit.</p> <p>Mypy supports modular, efficient type checking, and this seems to rule out type checking some language features, such as arbitrary monkey patching of methods.</p>"},{"location":"mypy_other/faq/#mypy-\u4e0e-cython-\u6709\u4f55\u4e0d\u540c","title":"mypy \u4e0e Cython \u6709\u4f55\u4e0d\u540c\uff1f","text":"<p>How is mypy different from Cython?</p> \u4e2d\u6587\u82f1\u6587 <p>Cython \u662f\u4e00\u79cd\u652f\u6301\u7f16\u8bd1\u4e3a CPython C \u6a21\u5757\u7684 Python \u53d8\u4f53\u3002\u4e0e CPython \u76f8\u6bd4\uff0c\u5b83\u53ef\u4ee5\u663e\u8457\u63d0\u9ad8\u67d0\u4e9b\u7c7b\u578b\u7a0b\u5e8f\u7684\u901f\u5ea6\uff0c\u5e76\u63d0\u4f9b\u9759\u6001\u7c7b\u578b\uff08\u5c3d\u7ba1\u8fd9\u4e0e mypy \u7684\u5b9e\u73b0\u6709\u6240\u4e0d\u540c\uff09\u3002mypy \u5728\u4ee5\u4e0b\u65b9\u9762\u6709\u6240\u4e0d\u540c\uff1a</p> <ul> <li> <p>Cython \u66f4\u52a0\u5173\u6ce8\u6027\u80fd\uff0c\u800c mypy \u53ea\u6d89\u53ca\u9759\u6001\u7c7b\u578b\u68c0\u67e5\uff0c\u63d0\u5347\u6027\u80fd\u4e0d\u662f\u76f4\u63a5\u76ee\u6807\u3002</p> </li> <li> <p>mypy \u7684\u8bed\u6cd5\u53ef\u4ee5\u8bf4\u66f4\u7b80\u5355\u3001\u66f4\u201cPythonic\u201d\uff08\u6ca1\u6709 cdef/cpdef \u7b49\uff09\u7528\u4e8e\u9759\u6001\u7c7b\u578b\u4ee3\u7801\u3002</p> </li> <li> <p>mypy \u7684\u8bed\u6cd5\u4e0e Python \u517c\u5bb9\u3002mypy \u7a0b\u5e8f\u662f\u53ef\u4ee5\u901a\u8fc7\u4efb\u4f55 Python \u5b9e\u73b0\u8fd0\u884c\u7684\u6b63\u5e38 Python \u7a0b\u5e8f\u3002Cython \u6709\u8bb8\u591a\u4e0e Python \u8bed\u6cd5\u4e0d\u517c\u5bb9\u7684\u6269\u5c55\uff0cCython \u7a0b\u5e8f\u901a\u5e38\u4e0d\u80fd\u5728\u4e0d\u9996\u5148\u7f16\u8bd1\u4e3a CPython \u6269\u5c55\u6a21\u5757\u7684\u60c5\u51b5\u4e0b\u8fd0\u884c\u3002Cython \u4e5f\u6709\u4e00\u4e2a\u7eaf Python \u6a21\u5f0f\uff0c\u4f46\u5b83\u4f3c\u4e4e\u4ec5\u652f\u6301 Cython \u529f\u80fd\u7684\u4e00\u4e2a\u5b50\u96c6\uff0c\u5e76\u4e14\u8bed\u6cd5\u76f8\u5f53\u5197\u957f\u3002</p> </li> <li> <p>mypy \u5177\u6709\u4e0d\u540c\u7684\u7c7b\u578b\u7cfb\u7edf\u7279\u6027\u3002\u4f8b\u5982\uff0cmypy \u652f\u6301\u6cdb\u578b\uff08\u53c2\u6570\u591a\u6001\uff09\u3001\u51fd\u6570\u7c7b\u578b\u548c\u53cc\u5411\u7c7b\u578b\u63a8\u65ad\uff0c\u800c Cython \u4e0d\u652f\u6301\u8fd9\u4e9b\u7279\u6027\u3002\uff08Cython \u6709\u4e0e mypy \u6cdb\u578b\u76f8\u5173\u4f46\u4e0d\u540c\u7684\u878d\u5408\u7c7b\u578b\u3002mypy \u4e5f\u6709\u7c7b\u4f3c\u7684\u7279\u6027\u4f5c\u4e3a\u6cdb\u578b\u7684\u6269\u5c55\u3002\uff09</p> </li> <li> <p>mypy \u7c7b\u578b\u68c0\u67e5\u5668\u4e86\u89e3\u8bb8\u591a Python \u6807\u51c6\u5e93\u6a21\u5757\u7684\u9759\u6001\u7c7b\u578b\uff0c\u5e76\u53ef\u4ee5\u6709\u6548\u5730\u5bf9\u4f7f\u7528\u8fd9\u4e9b\u6a21\u5757\u7684\u4ee3\u7801\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u3002</p> </li> <li> <p>Cython \u652f\u6301\u76f4\u63a5\u8bbf\u95ee C \u51fd\u6570\uff0c\u5e76\u4e14\u8bb8\u591a\u7279\u6027\u90fd\u662f\u901a\u8fc7\u5c06\u5b83\u4eec\u7ffb\u8bd1\u6210 C \u6216 C++ \u6765\u5b9a\u4e49\u7684\u3002mypy \u53ea\u4f7f\u7528 Python \u8bed\u4e49\uff0cmypy \u4e0d\u5904\u7406\u8bbf\u95ee C \u5e93\u529f\u80fd\u7684\u4e8b\u5b9c\u3002</p> </li> </ul> <p>Cython is a variant of Python that supports compilation to CPython C modules. It can give major speedups to certain classes of programs compared to CPython, and it provides static typing (though this is different from mypy). Mypy differs in the following aspects, among others:</p> <ul> <li> <p>Cython is much more focused on performance than mypy. Mypy is only about static type checking, and increasing performance is not a direct goal.</p> </li> <li> <p>The mypy syntax is arguably simpler and more \"Pythonic\" (no cdef/cpdef, etc.) for statically typed code.</p> </li> <li> <p>The mypy syntax is compatible with Python. Mypy programs are normal Python programs that can be run using any Python implementation. Cython has many incompatible extensions to Python syntax, and Cython programs generally cannot be run without first compiling them to CPython extension modules via C. Cython also has a pure Python mode, but it seems to support only a subset of Cython functionality, and the syntax is quite verbose.</p> </li> <li> <p>Mypy has a different set of type system features. For example, mypy has genericity (parametric polymorphism), function types and bidirectional type inference, which are not supported by Cython. (Cython has fused types that are different but related to mypy generics. Mypy also has a similar feature as an extension of generics.)</p> </li> <li> <p>The mypy type checker knows about the static types of many Python stdlib modules and can effectively type check code that uses them.</p> </li> <li> <p>Cython supports accessing C functions directly and many features are defined in terms of translating them to C or C++. Mypy just uses Python semantics, and mypy does not deal with accessing C library functionality.</p> </li> </ul>"},{"location":"mypy_other/faq/#\u5b83\u53ef\u4ee5\u5728-pypy-\u4e0a\u8fd0\u884c\u5417","title":"\u5b83\u53ef\u4ee5\u5728 PyPy \u4e0a\u8fd0\u884c\u5417\uff1f","text":"<p>Does it run on PyPy?</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u662f\u7684\u3002\u4f7f\u7528 PyPy 3.8\uff0cmypy \u81f3\u5c11\u80fd\u591f\u8fdb\u884c\u81ea\u8eab\u7684\u7c7b\u578b\u68c0\u67e5\u3002\u5bf9\u4e8e\u8f83\u65e7\u7248\u672c\u7684 PyPy\uff0cmypy \u4f9d\u8d56\u4e8e typed-ast\uff0c\u5b83\u4f7f\u7528\u4e86\u4e00\u4e9b PyPy \u4e0d\u652f\u6301\u7684 API\uff08\u5305\u62ec\u4e00\u4e9b CPython \u7684\u5185\u90e8 API\uff09\u3002</p> <p>Somewhat. With PyPy 3.8, mypy is at least able to type check itself. With older versions of PyPy, mypy relies on typed-ast, which uses several APIs that PyPy does not support (including some internal CPython APIs).</p>"},{"location":"mypy_other/faq/#mypy-\u662f\u4e00\u4e2a\u5f88\u68d2\u7684\u9879\u76ee\u6211\u53ef\u4ee5\u5e2e\u52a9\u5417","title":"mypy \u662f\u4e00\u4e2a\u5f88\u68d2\u7684\u9879\u76ee\u3002\u6211\u53ef\u4ee5\u5e2e\u52a9\u5417\uff1f","text":"<p>Mypy is a cool project. Can I help?</p> \u4e2d\u6587\u82f1\u6587 <p>\u4efb\u4f55\u5e2e\u52a9\u90fd\u975e\u5e38\u611f\u8c22\uff01\u5982\u679c\u60a8\u5e0c\u671b\u505a\u51fa\u8d21\u732e\uff0c\u8bf7 \u8054\u7cfb \u5f00\u53d1\u8005\u3002\u4efb\u4f55\u4e0e\u5f00\u53d1\u3001\u8bbe\u8ba1\u3001\u5ba3\u4f20\u3001\u6587\u6863\u3001\u6d4b\u8bd5\u3001\u7f51\u7ad9\u7ef4\u62a4\u3001\u878d\u8d44\u7b49\u76f8\u5173\u7684\u5e2e\u52a9\u90fd\u662f\u6709\u7528\u7684\u3002\u901a\u8fc7\u8d21\u732e\u60a8\u53ef\u4ee5\u5b66\u5230\u5f88\u591a\u4e1c\u897f\uff0c\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u5e2e\u52a9\uff0c\u751a\u81f3\u662f\u521d\u5b66\u8005\uff01\u4e0d\u8fc7\uff0c\u5982\u679c\u60a8\u5e0c\u671b\u53c2\u4e0e mypy \u5185\u90e8\u7684\u5de5\u4f5c\uff0c\u4e86\u89e3\u7f16\u8bd1\u5668\u548c/\u6216\u7c7b\u578b\u7cfb\u7edf\u7684\u77e5\u8bc6\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\u3002</p> <p>Any help is much appreciated! Contact the developers if you would like to contribute. Any help related to development, design, publicity, documentation, testing, web site maintenance, financing, etc. can be helpful. You can learn a lot by contributing, and anybody can help, even beginners! However, some knowledge of compilers and/or type systems is essential if you want to work on mypy internals.</p>"},{"location":"mypy_other/project_links/","title":"\u9879\u76ee\u94fe\u63a5","text":"<ul> <li>\u9879\u76ee\u5730\u5740: https://github.com/python/mypy</li> <li>\u7f51\u9875\u5730\u5740: https://mypy-lang.org/</li> </ul>"},{"location":"mypy_other/supported_python_features/","title":"\u652f\u6301\u7684python\u7279\u6027","text":"<p>Supported Python features</p> \u4e2d\u6587\u82f1\u6587 <p>\u4e0d\u652f\u6301\u7684 Python \u7279\u6027\u5217\u8868\u7ef4\u62a4\u5728 mypy \u7684 Wiki \u9875\u9762\u4e2d\uff1a</p> <ul> <li>\u4e0d\u652f\u6301\u7684 Python \u7279\u6027</li> </ul> <p>A list of unsupported Python features is maintained in the mypy wiki:</p> <ul> <li>Unsupported Python features</li> </ul>"},{"location":"mypy_other/supported_python_features/#\u65b9\u6cd5\u548c\u51fd\u6570\u7684\u8fd0\u884c\u65f6\u5b9a\u4e49","title":"\u65b9\u6cd5\u548c\u51fd\u6570\u7684\u8fd0\u884c\u65f6\u5b9a\u4e49","text":"<p>Runtime definition of methods and functions</p> \u4e2d\u6587\u82f1\u6587 <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u60a8\u5728\u7c7b\u6216\u6a21\u5757\u5b9a\u4e49\u4e4b\u5916\u6dfb\u52a0\u4e00\u4e2a\u51fd\u6570\uff0cmypy \u4f1a\u53d1\u51fa\u8b66\u544a\u2014\u2014\u4f46\u4ec5\u5f53\u8fd9\u79cd\u60c5\u51b5\u5bf9\u7c7b\u578b\u68c0\u67e5\u5668\u53ef\u89c1\u65f6\u3002\u8fd9\u4ec5\u5f71\u54cd\u9759\u6001\u68c0\u67e5\uff0c\u56e0\u4e3a mypy \u5728\u8fd0\u884c\u65f6\u4e0d\u6267\u884c\u989d\u5916\u7684\u7c7b\u578b\u68c0\u67e5\u3002\u60a8\u53ef\u4ee5\u8f7b\u677e\u7ed5\u8fc7\u8fd9\u4e00\u70b9\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u52a8\u6001\u7c7b\u578b\u7684\u4ee3\u7801\u6216\u5177\u6709 <code>Any</code> \u7c7b\u578b\u7684\u503c\uff0c\u6216\u8005\u53ef\u4ee5\u4f7f\u7528 setattr \u6216\u5176\u4ed6\u53cd\u5c04\u529f\u80fd\u3002\u7136\u800c\uff0c\u5982\u679c\u60a8\u51b3\u5b9a\u8fd9\u6837\u505a\uff0c\u9700\u8981\u5c0f\u5fc3\u3002\u5982\u679c\u4e0d\u52a0\u9009\u62e9\u5730\u4f7f\u7528\uff0c\u60a8\u53ef\u80fd\u4f1a\u53d1\u73b0\u9759\u6001\u7c7b\u578b\u68c0\u67e5\u7684\u6709\u6548\u6027\u53d7\u5230\u5f71\u54cd\uff0c\u56e0\u4e3a\u7c7b\u578b\u68c0\u67e5\u5668\u65e0\u6cd5\u770b\u5230\u8fd0\u884c\u65f6\u5b9a\u4e49\u7684\u51fd\u6570\u3002</p> <p>By default, mypy will complain if you add a function to a class or module outside its definition -- but only if this is visible to the type checker. This only affects static checking, as mypy performs no additional type checking at runtime. You can easily work around this. For example, you can use dynamically typed code or values with <code>Any</code> types, or you can use setattr or other introspection features. However, you need to be careful if you decide to do this. If used indiscriminately, you may have difficulty using static typing effectively, since the type checker cannot see functions defined at runtime.</p>"}]}